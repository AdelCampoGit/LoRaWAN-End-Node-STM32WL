
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012af8  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f28  08012c30  08012c30  00022c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013b58  08013b58  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  08013b58  08013b58  00023b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013b60  08013b60  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013b60  08013b60  00023b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08013b68  08013b68  00023b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000118  20000000  08013b70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000af8  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00001628  20000118  20000118  00040118  2**2
                  ALLOC
 12 RAM1_region   00000000  20001740  20001740  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001740  20001740  00040118  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   00057bb1  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b8cf  00000000  00000000  0009619b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00024dd4  00000000  00000000  000a1a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002bf8  00000000  00000000  000c6840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002e30  00000000  00000000  000c9438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002a7b1  00000000  00000000  000cc268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004a5ce  00000000  00000000  000f6a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000dde53  00000000  00000000  00140fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  0021ee3a  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00007cc8  00000000  00000000  0021ee8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000118 	.word	0x20000118
 8000154:	00000000 	.word	0x00000000
 8000158:	08012c18 	.word	0x08012c18

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000011c 	.word	0x2000011c
 8000174:	08012c18 	.word	0x08012c18

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_d2f>:
 8000660:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000664:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000668:	bf24      	itt	cs
 800066a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800066e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000672:	d90d      	bls.n	8000690 <__aeabi_d2f+0x30>
 8000674:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000678:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800067c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000680:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000684:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000688:	bf08      	it	eq
 800068a:	f020 0001 	biceq.w	r0, r0, #1
 800068e:	4770      	bx	lr
 8000690:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000694:	d121      	bne.n	80006da <__aeabi_d2f+0x7a>
 8000696:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800069a:	bfbc      	itt	lt
 800069c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80006a0:	4770      	bxlt	lr
 80006a2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80006aa:	f1c2 0218 	rsb	r2, r2, #24
 80006ae:	f1c2 0c20 	rsb	ip, r2, #32
 80006b2:	fa10 f30c 	lsls.w	r3, r0, ip
 80006b6:	fa20 f002 	lsr.w	r0, r0, r2
 80006ba:	bf18      	it	ne
 80006bc:	f040 0001 	orrne.w	r0, r0, #1
 80006c0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006c4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006c8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006cc:	ea40 000c 	orr.w	r0, r0, ip
 80006d0:	fa23 f302 	lsr.w	r3, r3, r2
 80006d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006d8:	e7cc      	b.n	8000674 <__aeabi_d2f+0x14>
 80006da:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006de:	d107      	bne.n	80006f0 <__aeabi_d2f+0x90>
 80006e0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006e4:	bf1e      	ittt	ne
 80006e6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006ea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006ee:	4770      	bxne	lr
 80006f0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006f4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop

08000700 <__aeabi_frsub>:
 8000700:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000704:	e002      	b.n	800070c <__addsf3>
 8000706:	bf00      	nop

08000708 <__aeabi_fsub>:
 8000708:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800070c <__addsf3>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	bf1f      	itttt	ne
 8000710:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000714:	ea92 0f03 	teqne	r2, r3
 8000718:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800071c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000720:	d06a      	beq.n	80007f8 <__addsf3+0xec>
 8000722:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000726:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800072a:	bfc1      	itttt	gt
 800072c:	18d2      	addgt	r2, r2, r3
 800072e:	4041      	eorgt	r1, r0
 8000730:	4048      	eorgt	r0, r1
 8000732:	4041      	eorgt	r1, r0
 8000734:	bfb8      	it	lt
 8000736:	425b      	neglt	r3, r3
 8000738:	2b19      	cmp	r3, #25
 800073a:	bf88      	it	hi
 800073c:	4770      	bxhi	lr
 800073e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000742:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000746:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800074a:	bf18      	it	ne
 800074c:	4240      	negne	r0, r0
 800074e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000752:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000756:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800075a:	bf18      	it	ne
 800075c:	4249      	negne	r1, r1
 800075e:	ea92 0f03 	teq	r2, r3
 8000762:	d03f      	beq.n	80007e4 <__addsf3+0xd8>
 8000764:	f1a2 0201 	sub.w	r2, r2, #1
 8000768:	fa41 fc03 	asr.w	ip, r1, r3
 800076c:	eb10 000c 	adds.w	r0, r0, ip
 8000770:	f1c3 0320 	rsb	r3, r3, #32
 8000774:	fa01 f103 	lsl.w	r1, r1, r3
 8000778:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800077c:	d502      	bpl.n	8000784 <__addsf3+0x78>
 800077e:	4249      	negs	r1, r1
 8000780:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000784:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000788:	d313      	bcc.n	80007b2 <__addsf3+0xa6>
 800078a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800078e:	d306      	bcc.n	800079e <__addsf3+0x92>
 8000790:	0840      	lsrs	r0, r0, #1
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	f102 0201 	add.w	r2, r2, #1
 800079a:	2afe      	cmp	r2, #254	; 0xfe
 800079c:	d251      	bcs.n	8000842 <__addsf3+0x136>
 800079e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007a6:	bf08      	it	eq
 80007a8:	f020 0001 	biceq.w	r0, r0, #1
 80007ac:	ea40 0003 	orr.w	r0, r0, r3
 80007b0:	4770      	bx	lr
 80007b2:	0049      	lsls	r1, r1, #1
 80007b4:	eb40 0000 	adc.w	r0, r0, r0
 80007b8:	3a01      	subs	r2, #1
 80007ba:	bf28      	it	cs
 80007bc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80007c0:	d2ed      	bcs.n	800079e <__addsf3+0x92>
 80007c2:	fab0 fc80 	clz	ip, r0
 80007c6:	f1ac 0c08 	sub.w	ip, ip, #8
 80007ca:	ebb2 020c 	subs.w	r2, r2, ip
 80007ce:	fa00 f00c 	lsl.w	r0, r0, ip
 80007d2:	bfaa      	itet	ge
 80007d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007d8:	4252      	neglt	r2, r2
 80007da:	4318      	orrge	r0, r3
 80007dc:	bfbc      	itt	lt
 80007de:	40d0      	lsrlt	r0, r2
 80007e0:	4318      	orrlt	r0, r3
 80007e2:	4770      	bx	lr
 80007e4:	f092 0f00 	teq	r2, #0
 80007e8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007ec:	bf06      	itte	eq
 80007ee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007f2:	3201      	addeq	r2, #1
 80007f4:	3b01      	subne	r3, #1
 80007f6:	e7b5      	b.n	8000764 <__addsf3+0x58>
 80007f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000800:	bf18      	it	ne
 8000802:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000806:	d021      	beq.n	800084c <__addsf3+0x140>
 8000808:	ea92 0f03 	teq	r2, r3
 800080c:	d004      	beq.n	8000818 <__addsf3+0x10c>
 800080e:	f092 0f00 	teq	r2, #0
 8000812:	bf08      	it	eq
 8000814:	4608      	moveq	r0, r1
 8000816:	4770      	bx	lr
 8000818:	ea90 0f01 	teq	r0, r1
 800081c:	bf1c      	itt	ne
 800081e:	2000      	movne	r0, #0
 8000820:	4770      	bxne	lr
 8000822:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000826:	d104      	bne.n	8000832 <__addsf3+0x126>
 8000828:	0040      	lsls	r0, r0, #1
 800082a:	bf28      	it	cs
 800082c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000830:	4770      	bx	lr
 8000832:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000836:	bf3c      	itt	cc
 8000838:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800083c:	4770      	bxcc	lr
 800083e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000842:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000846:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800084a:	4770      	bx	lr
 800084c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000850:	bf16      	itet	ne
 8000852:	4608      	movne	r0, r1
 8000854:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000858:	4601      	movne	r1, r0
 800085a:	0242      	lsls	r2, r0, #9
 800085c:	bf06      	itte	eq
 800085e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000862:	ea90 0f01 	teqeq	r0, r1
 8000866:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800086a:	4770      	bx	lr

0800086c <__aeabi_ui2f>:
 800086c:	f04f 0300 	mov.w	r3, #0
 8000870:	e004      	b.n	800087c <__aeabi_i2f+0x8>
 8000872:	bf00      	nop

08000874 <__aeabi_i2f>:
 8000874:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000878:	bf48      	it	mi
 800087a:	4240      	negmi	r0, r0
 800087c:	ea5f 0c00 	movs.w	ip, r0
 8000880:	bf08      	it	eq
 8000882:	4770      	bxeq	lr
 8000884:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000888:	4601      	mov	r1, r0
 800088a:	f04f 0000 	mov.w	r0, #0
 800088e:	e01c      	b.n	80008ca <__aeabi_l2f+0x2a>

08000890 <__aeabi_ul2f>:
 8000890:	ea50 0201 	orrs.w	r2, r0, r1
 8000894:	bf08      	it	eq
 8000896:	4770      	bxeq	lr
 8000898:	f04f 0300 	mov.w	r3, #0
 800089c:	e00a      	b.n	80008b4 <__aeabi_l2f+0x14>
 800089e:	bf00      	nop

080008a0 <__aeabi_l2f>:
 80008a0:	ea50 0201 	orrs.w	r2, r0, r1
 80008a4:	bf08      	it	eq
 80008a6:	4770      	bxeq	lr
 80008a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80008ac:	d502      	bpl.n	80008b4 <__aeabi_l2f+0x14>
 80008ae:	4240      	negs	r0, r0
 80008b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008b4:	ea5f 0c01 	movs.w	ip, r1
 80008b8:	bf02      	ittt	eq
 80008ba:	4684      	moveq	ip, r0
 80008bc:	4601      	moveq	r1, r0
 80008be:	2000      	moveq	r0, #0
 80008c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80008c4:	bf08      	it	eq
 80008c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80008ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80008ce:	fabc f28c 	clz	r2, ip
 80008d2:	3a08      	subs	r2, #8
 80008d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008d8:	db10      	blt.n	80008fc <__aeabi_l2f+0x5c>
 80008da:	fa01 fc02 	lsl.w	ip, r1, r2
 80008de:	4463      	add	r3, ip
 80008e0:	fa00 fc02 	lsl.w	ip, r0, r2
 80008e4:	f1c2 0220 	rsb	r2, r2, #32
 80008e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008ec:	fa20 f202 	lsr.w	r2, r0, r2
 80008f0:	eb43 0002 	adc.w	r0, r3, r2
 80008f4:	bf08      	it	eq
 80008f6:	f020 0001 	biceq.w	r0, r0, #1
 80008fa:	4770      	bx	lr
 80008fc:	f102 0220 	add.w	r2, r2, #32
 8000900:	fa01 fc02 	lsl.w	ip, r1, r2
 8000904:	f1c2 0220 	rsb	r2, r2, #32
 8000908:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800090c:	fa21 f202 	lsr.w	r2, r1, r2
 8000910:	eb43 0002 	adc.w	r0, r3, r2
 8000914:	bf08      	it	eq
 8000916:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800091a:	4770      	bx	lr

0800091c <__aeabi_fmul>:
 800091c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000920:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000924:	bf1e      	ittt	ne
 8000926:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800092a:	ea92 0f0c 	teqne	r2, ip
 800092e:	ea93 0f0c 	teqne	r3, ip
 8000932:	d06f      	beq.n	8000a14 <__aeabi_fmul+0xf8>
 8000934:	441a      	add	r2, r3
 8000936:	ea80 0c01 	eor.w	ip, r0, r1
 800093a:	0240      	lsls	r0, r0, #9
 800093c:	bf18      	it	ne
 800093e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000942:	d01e      	beq.n	8000982 <__aeabi_fmul+0x66>
 8000944:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000948:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800094c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000950:	fba0 3101 	umull	r3, r1, r0, r1
 8000954:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000958:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800095c:	bf3e      	ittt	cc
 800095e:	0049      	lslcc	r1, r1, #1
 8000960:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000964:	005b      	lslcc	r3, r3, #1
 8000966:	ea40 0001 	orr.w	r0, r0, r1
 800096a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800096e:	2afd      	cmp	r2, #253	; 0xfd
 8000970:	d81d      	bhi.n	80009ae <__aeabi_fmul+0x92>
 8000972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000976:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800097a:	bf08      	it	eq
 800097c:	f020 0001 	biceq.w	r0, r0, #1
 8000980:	4770      	bx	lr
 8000982:	f090 0f00 	teq	r0, #0
 8000986:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800098a:	bf08      	it	eq
 800098c:	0249      	lsleq	r1, r1, #9
 800098e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000992:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000996:	3a7f      	subs	r2, #127	; 0x7f
 8000998:	bfc2      	ittt	gt
 800099a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800099e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009a2:	4770      	bxgt	lr
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	f04f 0300 	mov.w	r3, #0
 80009ac:	3a01      	subs	r2, #1
 80009ae:	dc5d      	bgt.n	8000a6c <__aeabi_fmul+0x150>
 80009b0:	f112 0f19 	cmn.w	r2, #25
 80009b4:	bfdc      	itt	le
 80009b6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80009ba:	4770      	bxle	lr
 80009bc:	f1c2 0200 	rsb	r2, r2, #0
 80009c0:	0041      	lsls	r1, r0, #1
 80009c2:	fa21 f102 	lsr.w	r1, r1, r2
 80009c6:	f1c2 0220 	rsb	r2, r2, #32
 80009ca:	fa00 fc02 	lsl.w	ip, r0, r2
 80009ce:	ea5f 0031 	movs.w	r0, r1, rrx
 80009d2:	f140 0000 	adc.w	r0, r0, #0
 80009d6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009da:	bf08      	it	eq
 80009dc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e0:	4770      	bx	lr
 80009e2:	f092 0f00 	teq	r2, #0
 80009e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009ea:	bf02      	ittt	eq
 80009ec:	0040      	lsleq	r0, r0, #1
 80009ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009f2:	3a01      	subeq	r2, #1
 80009f4:	d0f9      	beq.n	80009ea <__aeabi_fmul+0xce>
 80009f6:	ea40 000c 	orr.w	r0, r0, ip
 80009fa:	f093 0f00 	teq	r3, #0
 80009fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a02:	bf02      	ittt	eq
 8000a04:	0049      	lsleq	r1, r1, #1
 8000a06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a0a:	3b01      	subeq	r3, #1
 8000a0c:	d0f9      	beq.n	8000a02 <__aeabi_fmul+0xe6>
 8000a0e:	ea41 010c 	orr.w	r1, r1, ip
 8000a12:	e78f      	b.n	8000934 <__aeabi_fmul+0x18>
 8000a14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a18:	ea92 0f0c 	teq	r2, ip
 8000a1c:	bf18      	it	ne
 8000a1e:	ea93 0f0c 	teqne	r3, ip
 8000a22:	d00a      	beq.n	8000a3a <__aeabi_fmul+0x11e>
 8000a24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a28:	bf18      	it	ne
 8000a2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a2e:	d1d8      	bne.n	80009e2 <__aeabi_fmul+0xc6>
 8000a30:	ea80 0001 	eor.w	r0, r0, r1
 8000a34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a38:	4770      	bx	lr
 8000a3a:	f090 0f00 	teq	r0, #0
 8000a3e:	bf17      	itett	ne
 8000a40:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000a44:	4608      	moveq	r0, r1
 8000a46:	f091 0f00 	teqne	r1, #0
 8000a4a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000a4e:	d014      	beq.n	8000a7a <__aeabi_fmul+0x15e>
 8000a50:	ea92 0f0c 	teq	r2, ip
 8000a54:	d101      	bne.n	8000a5a <__aeabi_fmul+0x13e>
 8000a56:	0242      	lsls	r2, r0, #9
 8000a58:	d10f      	bne.n	8000a7a <__aeabi_fmul+0x15e>
 8000a5a:	ea93 0f0c 	teq	r3, ip
 8000a5e:	d103      	bne.n	8000a68 <__aeabi_fmul+0x14c>
 8000a60:	024b      	lsls	r3, r1, #9
 8000a62:	bf18      	it	ne
 8000a64:	4608      	movne	r0, r1
 8000a66:	d108      	bne.n	8000a7a <__aeabi_fmul+0x15e>
 8000a68:	ea80 0001 	eor.w	r0, r0, r1
 8000a6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bx	lr

08000a84 <__aeabi_fdiv>:
 8000a84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a8c:	bf1e      	ittt	ne
 8000a8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a92:	ea92 0f0c 	teqne	r2, ip
 8000a96:	ea93 0f0c 	teqne	r3, ip
 8000a9a:	d069      	beq.n	8000b70 <__aeabi_fdiv+0xec>
 8000a9c:	eba2 0203 	sub.w	r2, r2, r3
 8000aa0:	ea80 0c01 	eor.w	ip, r0, r1
 8000aa4:	0249      	lsls	r1, r1, #9
 8000aa6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000aaa:	d037      	beq.n	8000b1c <__aeabi_fdiv+0x98>
 8000aac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ab0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ab4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ab8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000abc:	428b      	cmp	r3, r1
 8000abe:	bf38      	it	cc
 8000ac0:	005b      	lslcc	r3, r3, #1
 8000ac2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ac6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000aca:	428b      	cmp	r3, r1
 8000acc:	bf24      	itt	cs
 8000ace:	1a5b      	subcs	r3, r3, r1
 8000ad0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ad4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ad8:	bf24      	itt	cs
 8000ada:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ade:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ae2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ae6:	bf24      	itt	cs
 8000ae8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000aec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000af0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000af4:	bf24      	itt	cs
 8000af6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000afa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	bf18      	it	ne
 8000b02:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b06:	d1e0      	bne.n	8000aca <__aeabi_fdiv+0x46>
 8000b08:	2afd      	cmp	r2, #253	; 0xfd
 8000b0a:	f63f af50 	bhi.w	80009ae <__aeabi_fmul+0x92>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b20:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b24:	327f      	adds	r2, #127	; 0x7f
 8000b26:	bfc2      	ittt	gt
 8000b28:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b2c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b30:	4770      	bxgt	lr
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	f04f 0300 	mov.w	r3, #0
 8000b3a:	3a01      	subs	r2, #1
 8000b3c:	e737      	b.n	80009ae <__aeabi_fmul+0x92>
 8000b3e:	f092 0f00 	teq	r2, #0
 8000b42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b46:	bf02      	ittt	eq
 8000b48:	0040      	lsleq	r0, r0, #1
 8000b4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b4e:	3a01      	subeq	r2, #1
 8000b50:	d0f9      	beq.n	8000b46 <__aeabi_fdiv+0xc2>
 8000b52:	ea40 000c 	orr.w	r0, r0, ip
 8000b56:	f093 0f00 	teq	r3, #0
 8000b5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b5e:	bf02      	ittt	eq
 8000b60:	0049      	lsleq	r1, r1, #1
 8000b62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b66:	3b01      	subeq	r3, #1
 8000b68:	d0f9      	beq.n	8000b5e <__aeabi_fdiv+0xda>
 8000b6a:	ea41 010c 	orr.w	r1, r1, ip
 8000b6e:	e795      	b.n	8000a9c <__aeabi_fdiv+0x18>
 8000b70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b74:	ea92 0f0c 	teq	r2, ip
 8000b78:	d108      	bne.n	8000b8c <__aeabi_fdiv+0x108>
 8000b7a:	0242      	lsls	r2, r0, #9
 8000b7c:	f47f af7d 	bne.w	8000a7a <__aeabi_fmul+0x15e>
 8000b80:	ea93 0f0c 	teq	r3, ip
 8000b84:	f47f af70 	bne.w	8000a68 <__aeabi_fmul+0x14c>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	e776      	b.n	8000a7a <__aeabi_fmul+0x15e>
 8000b8c:	ea93 0f0c 	teq	r3, ip
 8000b90:	d104      	bne.n	8000b9c <__aeabi_fdiv+0x118>
 8000b92:	024b      	lsls	r3, r1, #9
 8000b94:	f43f af4c 	beq.w	8000a30 <__aeabi_fmul+0x114>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	e76e      	b.n	8000a7a <__aeabi_fmul+0x15e>
 8000b9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ba0:	bf18      	it	ne
 8000ba2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ba6:	d1ca      	bne.n	8000b3e <__aeabi_fdiv+0xba>
 8000ba8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000bac:	f47f af5c 	bne.w	8000a68 <__aeabi_fmul+0x14c>
 8000bb0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000bb4:	f47f af3c 	bne.w	8000a30 <__aeabi_fmul+0x114>
 8000bb8:	e75f      	b.n	8000a7a <__aeabi_fmul+0x15e>
 8000bba:	bf00      	nop

08000bbc <__gesf2>:
 8000bbc:	f04f 3cff 	mov.w	ip, #4294967295
 8000bc0:	e006      	b.n	8000bd0 <__cmpsf2+0x4>
 8000bc2:	bf00      	nop

08000bc4 <__lesf2>:
 8000bc4:	f04f 0c01 	mov.w	ip, #1
 8000bc8:	e002      	b.n	8000bd0 <__cmpsf2+0x4>
 8000bca:	bf00      	nop

08000bcc <__cmpsf2>:
 8000bcc:	f04f 0c01 	mov.w	ip, #1
 8000bd0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be0:	bf18      	it	ne
 8000be2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be6:	d011      	beq.n	8000c0c <__cmpsf2+0x40>
 8000be8:	b001      	add	sp, #4
 8000bea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bee:	bf18      	it	ne
 8000bf0:	ea90 0f01 	teqne	r0, r1
 8000bf4:	bf58      	it	pl
 8000bf6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bfa:	bf88      	it	hi
 8000bfc:	17c8      	asrhi	r0, r1, #31
 8000bfe:	bf38      	it	cc
 8000c00:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c04:	bf18      	it	ne
 8000c06:	f040 0001 	orrne.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c10:	d102      	bne.n	8000c18 <__cmpsf2+0x4c>
 8000c12:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c16:	d105      	bne.n	8000c24 <__cmpsf2+0x58>
 8000c18:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c1c:	d1e4      	bne.n	8000be8 <__cmpsf2+0x1c>
 8000c1e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c22:	d0e1      	beq.n	8000be8 <__cmpsf2+0x1c>
 8000c24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_cfrcmple>:
 8000c2c:	4684      	mov	ip, r0
 8000c2e:	4608      	mov	r0, r1
 8000c30:	4661      	mov	r1, ip
 8000c32:	e7ff      	b.n	8000c34 <__aeabi_cfcmpeq>

08000c34 <__aeabi_cfcmpeq>:
 8000c34:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c36:	f7ff ffc9 	bl	8000bcc <__cmpsf2>
 8000c3a:	2800      	cmp	r0, #0
 8000c3c:	bf48      	it	mi
 8000c3e:	f110 0f00 	cmnmi.w	r0, #0
 8000c42:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c44 <__aeabi_fcmpeq>:
 8000c44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c48:	f7ff fff4 	bl	8000c34 <__aeabi_cfcmpeq>
 8000c4c:	bf0c      	ite	eq
 8000c4e:	2001      	moveq	r0, #1
 8000c50:	2000      	movne	r0, #0
 8000c52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c56:	bf00      	nop

08000c58 <__aeabi_fcmplt>:
 8000c58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c5c:	f7ff ffea 	bl	8000c34 <__aeabi_cfcmpeq>
 8000c60:	bf34      	ite	cc
 8000c62:	2001      	movcc	r0, #1
 8000c64:	2000      	movcs	r0, #0
 8000c66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c6a:	bf00      	nop

08000c6c <__aeabi_fcmple>:
 8000c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c70:	f7ff ffe0 	bl	8000c34 <__aeabi_cfcmpeq>
 8000c74:	bf94      	ite	ls
 8000c76:	2001      	movls	r0, #1
 8000c78:	2000      	movhi	r0, #0
 8000c7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c7e:	bf00      	nop

08000c80 <__aeabi_fcmpge>:
 8000c80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c84:	f7ff ffd2 	bl	8000c2c <__aeabi_cfrcmple>
 8000c88:	bf94      	ite	ls
 8000c8a:	2001      	movls	r0, #1
 8000c8c:	2000      	movhi	r0, #0
 8000c8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c92:	bf00      	nop

08000c94 <__aeabi_fcmpgt>:
 8000c94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c98:	f7ff ffc8 	bl	8000c2c <__aeabi_cfrcmple>
 8000c9c:	bf34      	ite	cc
 8000c9e:	2001      	movcc	r0, #1
 8000ca0:	2000      	movcs	r0, #0
 8000ca2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_f2iz>:
 8000ca8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cb0:	d30f      	bcc.n	8000cd2 <__aeabi_f2iz+0x2a>
 8000cb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000cb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_f2iz+0x30>
 8000cbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000ccc:	bf18      	it	ne
 8000cce:	4240      	negne	r0, r0
 8000cd0:	4770      	bx	lr
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	4770      	bx	lr
 8000cd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_f2iz+0x3a>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d105      	bne.n	8000cee <__aeabi_f2iz+0x46>
 8000ce2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ce6:	bf08      	it	eq
 8000ce8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cec:	4770      	bx	lr
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_f2uiz>:
 8000cf4:	0042      	lsls	r2, r0, #1
 8000cf6:	d20e      	bcs.n	8000d16 <__aeabi_f2uiz+0x22>
 8000cf8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cfc:	d30b      	bcc.n	8000d16 <__aeabi_f2uiz+0x22>
 8000cfe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d02:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d06:	d409      	bmi.n	8000d1c <__aeabi_f2uiz+0x28>
 8000d08:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d10:	fa23 f002 	lsr.w	r0, r3, r2
 8000d14:	4770      	bx	lr
 8000d16:	f04f 0000 	mov.w	r0, #0
 8000d1a:	4770      	bx	lr
 8000d1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d20:	d101      	bne.n	8000d26 <__aeabi_f2uiz+0x32>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d102      	bne.n	8000d2c <__aeabi_f2uiz+0x38>
 8000d26:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2a:	4770      	bx	lr
 8000d2c:	f04f 0000 	mov.w	r0, #0
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <__aeabi_uldivmod>:
 8000d34:	b953      	cbnz	r3, 8000d4c <__aeabi_uldivmod+0x18>
 8000d36:	b94a      	cbnz	r2, 8000d4c <__aeabi_uldivmod+0x18>
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	bf08      	it	eq
 8000d3c:	2800      	cmpeq	r0, #0
 8000d3e:	bf1c      	itt	ne
 8000d40:	f04f 31ff 	movne.w	r1, #4294967295
 8000d44:	f04f 30ff 	movne.w	r0, #4294967295
 8000d48:	f000 b974 	b.w	8001034 <__aeabi_idiv0>
 8000d4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d54:	f000 f806 	bl	8000d64 <__udivmoddi4>
 8000d58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d60:	b004      	add	sp, #16
 8000d62:	4770      	bx	lr

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14d      	bne.n	8000e10 <__udivmoddi4+0xac>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d968      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b152      	cbz	r2, 8000d96 <__udivmoddi4+0x32>
 8000d80:	fa01 f302 	lsl.w	r3, r1, r2
 8000d84:	f1c2 0120 	rsb	r1, r2, #32
 8000d88:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d90:	ea41 0803 	orr.w	r8, r1, r3
 8000d94:	4094      	lsls	r4, r2
 8000d96:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fbb8 fef5 	udiv	lr, r8, r5
 8000da0:	fa1f f78c 	uxth.w	r7, ip
 8000da4:	fb05 831e 	mls	r3, r5, lr, r8
 8000da8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dac:	fb0e f107 	mul.w	r1, lr, r7
 8000db0:	4299      	cmp	r1, r3
 8000db2:	d90b      	bls.n	8000dcc <__udivmoddi4+0x68>
 8000db4:	eb1c 0303 	adds.w	r3, ip, r3
 8000db8:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000dbc:	f080 811e 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	f240 811b 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb3 f0f5 	udiv	r0, r3, r5
 8000dd4:	fb05 3310 	mls	r3, r5, r0, r3
 8000dd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ddc:	fb00 f707 	mul.w	r7, r0, r7
 8000de0:	42a7      	cmp	r7, r4
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x96>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dec:	f080 8108 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000df0:	42a7      	cmp	r7, r4
 8000df2:	f240 8105 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e00:	2100      	movs	r1, #0
 8000e02:	b11e      	cbz	r6, 8000e0c <__udivmoddi4+0xa8>
 8000e04:	40d4      	lsrs	r4, r2
 8000e06:	2300      	movs	r3, #0
 8000e08:	e9c6 4300 	strd	r4, r3, [r6]
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	428b      	cmp	r3, r1
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e14:	2e00      	cmp	r6, #0
 8000e16:	f000 80ee 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	e9c6 0500 	strd	r0, r5, [r6]
 8000e20:	4608      	mov	r0, r1
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f183 	clz	r1, r3
 8000e2a:	2900      	cmp	r1, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	42ab      	cmp	r3, r5
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb65 0303 	sbc.w	r3, r5, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	4698      	mov	r8, r3
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	d0e2      	beq.n	8000e0c <__udivmoddi4+0xa8>
 8000e46:	e9c6 4800 	strd	r4, r8, [r6]
 8000e4a:	e7df      	b.n	8000e0c <__udivmoddi4+0xa8>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8091 	bne.w	8000f7c <__udivmoddi4+0x218>
 8000e5a:	eba1 050c 	sub.w	r5, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2101      	movs	r1, #1
 8000e68:	fbb5 f3f7 	udiv	r3, r5, r7
 8000e6c:	fb07 5013 	mls	r0, r7, r3, r5
 8000e70:	0c25      	lsrs	r5, r4, #16
 8000e72:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	42a8      	cmp	r0, r5
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0505 	adds.w	r5, ip, r5
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	42a8      	cmp	r0, r5
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a2d      	subs	r5, r5, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb5 f0f7 	udiv	r0, r5, r7
 8000e98:	fb07 5510 	mls	r5, r7, r0, r5
 8000e9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 35ff 	add.w	r5, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4628      	mov	r0, r5
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79e      	b.n	8000e02 <__udivmoddi4+0x9e>
 8000ec4:	f1c1 0720 	rsb	r7, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa05 f301 	lsl.w	r3, r5, r1
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40fd      	lsrs	r5, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f301 	lsl.w	r3, r0, r1
 8000ee6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	42a8      	cmp	r0, r5
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0505 	adds.w	r5, ip, r5
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	42a8      	cmp	r0, r5
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4465      	add	r5, ip
 8000f1c:	1a2d      	subs	r5, r5, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb5 f0f9 	udiv	r0, r5, r9
 8000f24:	fb09 5510 	mls	r5, r9, r0, r5
 8000f28:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	45ae      	cmp	lr, r5
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0505 	adds.w	r5, ip, r5
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	45ae      	cmp	lr, r5
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4465      	add	r5, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba5 050e 	sub.w	r5, r5, lr
 8000f52:	42a5      	cmp	r5, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15e      	cbz	r6, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb65 050e 	sbc.w	r5, r5, lr
 8000f66:	fa05 f707 	lsl.w	r7, r5, r7
 8000f6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6e:	40cd      	lsrs	r5, r1
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c6 7500 	strd	r7, r5, [r6]
 8000f76:	2100      	movs	r1, #0
 8000f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7c:	f1c2 0320 	rsb	r3, r2, #32
 8000f80:	fa20 f103 	lsr.w	r1, r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa25 f303 	lsr.w	r3, r5, r3
 8000f8c:	4095      	lsls	r5, r2
 8000f8e:	430d      	orrs	r5, r1
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f1f7 	udiv	r1, r3, r7
 8000f9c:	fb07 3011 	mls	r0, r7, r1, r3
 8000fa0:	0c2b      	lsrs	r3, r5, #16
 8000fa2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000fa6:	fb01 f00e 	mul.w	r0, r1, lr
 8000faa:	4298      	cmp	r0, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f101 38ff 	add.w	r8, r1, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	4298      	cmp	r0, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3902      	subs	r1, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1a1b      	subs	r3, r3, r0
 8000fc6:	b2ad      	uxth	r5, r5
 8000fc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fcc:	fb07 3310 	mls	r3, r7, r0, r3
 8000fd0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000fd4:	fb00 f30e 	mul.w	r3, r0, lr
 8000fd8:	42ab      	cmp	r3, r5
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0505 	adds.w	r5, ip, r5
 8000fe0:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	42ab      	cmp	r3, r5
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3802      	subs	r0, #2
 8000fec:	4465      	add	r5, ip
 8000fee:	1aed      	subs	r5, r5, r3
 8000ff0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	4631      	mov	r1, r6
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	e707      	b.n	8000e0c <__udivmoddi4+0xa8>
 8000ffc:	4686      	mov	lr, r0
 8000ffe:	e6e5      	b.n	8000dcc <__udivmoddi4+0x68>
 8001000:	4618      	mov	r0, r3
 8001002:	e6fa      	b.n	8000dfa <__udivmoddi4+0x96>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4640      	mov	r0, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4641      	mov	r1, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4465      	add	r5, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4608      	mov	r0, r1
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001038:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800103a:	4813      	ldr	r0, [pc, #76]	; (8001088 <MX_ADC_Init+0x50>)
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_ADC_Init+0x54>)
 800103e:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001040:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001044:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001046:	2300      	movs	r3, #0
 8001048:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800104a:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800104c:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800104e:	2204      	movs	r2, #4
 8001050:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001052:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001054:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001056:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8001058:	2201      	movs	r2, #1
 800105a:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800105c:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001060:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001062:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001064:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001068:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800106c:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800106e:	2207      	movs	r2, #7
 8001070:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001072:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001074:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001078:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800107a:	f001 ff6b 	bl	8002f54 <HAL_ADC_Init>
 800107e:	b900      	cbnz	r0, 8001082 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001080:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001082:	f000 fadd 	bl	8001640 <Error_Handler>
}
 8001086:	e7fb      	b.n	8001080 <MX_ADC_Init+0x48>
 8001088:	20000134 	.word	0x20000134
 800108c:	40012400 	.word	0x40012400

08001090 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001090:	b500      	push	{lr}
 8001092:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	2300      	movs	r3, #0
 8001096:	9303      	str	r3, [sp, #12]
 8001098:	9304      	str	r3, [sp, #16]
 800109a:	9305      	str	r3, [sp, #20]
 800109c:	9306      	str	r3, [sp, #24]
 800109e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC)
 80010a0:	6802      	ldr	r2, [r0, #0]
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_ADC_MspInit+0x58>)
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d002      	beq.n	80010ae <HAL_ADC_MspInit+0x1e>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80010a8:	b009      	add	sp, #36	; 0x24
 80010aa:	f85d fb04 	ldr.w	pc, [sp], #4
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010b8:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010bc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80010c0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80010c2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010c6:	f042 0202 	orr.w	r2, r2, #2
 80010ca:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80010d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LDR_Pin;
 80010d6:	2310      	movs	r3, #16
 80010d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010da:	2303      	movs	r3, #3
 80010dc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 80010de:	a903      	add	r1, sp, #12
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <HAL_ADC_MspInit+0x5c>)
 80010e2:	f003 f88d 	bl	8004200 <HAL_GPIO_Init>
}
 80010e6:	e7df      	b.n	80010a8 <HAL_ADC_MspInit+0x18>
 80010e8:	40012400 	.word	0x40012400
 80010ec:	48000400 	.word	0x48000400

080010f0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80010f0:	b508      	push	{r3, lr}

  if(adcHandle->Instance==ADC)
 80010f2:	6802      	ldr	r2, [r0, #0]
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <HAL_ADC_MspDeInit+0x24>)
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d000      	beq.n	80010fc <HAL_ADC_MspDeInit+0xc>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80010fa:	bd08      	pop	{r3, pc}
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80010fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001100:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001102:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001106:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(LDR_GPIO_Port, LDR_Pin);
 8001108:	2110      	movs	r1, #16
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <HAL_ADC_MspDeInit+0x28>)
 800110c:	f003 f94a 	bl	80043a4 <HAL_GPIO_DeInit>
}
 8001110:	e7f3      	b.n	80010fa <HAL_ADC_MspDeInit+0xa>
 8001112:	bf00      	nop
 8001114:	40012400 	.word	0x40012400
 8001118:	48000400 	.word	0x48000400

0800111c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800111c:	b530      	push	{r4, r5, lr}
 800111e:	b085      	sub	sp, #20
 8001120:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001122:	2300      	movs	r3, #0
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 800112a:	f7ff ff85 	bl	8001038 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800112e:	4816      	ldr	r0, [pc, #88]	; (8001188 <ADC_ReadChannels+0x6c>)
 8001130:	f002 fb54 	bl	80037dc <HAL_ADCEx_Calibration_Start>
 8001134:	b9f8      	cbnz	r0, 8001176 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001136:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001138:	2300      	movs	r3, #0
 800113a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800113c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800113e:	a901      	add	r1, sp, #4
 8001140:	4811      	ldr	r0, [pc, #68]	; (8001188 <ADC_ReadChannels+0x6c>)
 8001142:	f002 f895 	bl	8003270 <HAL_ADC_ConfigChannel>
 8001146:	b9c8      	cbnz	r0, 800117c <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001148:	480f      	ldr	r0, [pc, #60]	; (8001188 <ADC_ReadChannels+0x6c>)
 800114a:	f002 fa55 	bl	80035f8 <HAL_ADC_Start>
 800114e:	b9c0      	cbnz	r0, 8001182 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001150:	4c0d      	ldr	r4, [pc, #52]	; (8001188 <ADC_ReadChannels+0x6c>)
 8001152:	f04f 31ff 	mov.w	r1, #4294967295
 8001156:	4620      	mov	r0, r4
 8001158:	f002 f828 	bl	80031ac <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 800115c:	4620      	mov	r0, r4
 800115e:	f002 fb1d 	bl	800379c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001162:	4620      	mov	r0, r4
 8001164:	f002 f881 	bl	800326a <HAL_ADC_GetValue>
 8001168:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 800116a:	4620      	mov	r0, r4
 800116c:	f002 fac0 	bl	80036f0 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001170:	4628      	mov	r0, r5
 8001172:	b005      	add	sp, #20
 8001174:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001176:	f000 fa63 	bl	8001640 <Error_Handler>
 800117a:	e7dc      	b.n	8001136 <ADC_ReadChannels+0x1a>
    Error_Handler();
 800117c:	f000 fa60 	bl	8001640 <Error_Handler>
 8001180:	e7e2      	b.n	8001148 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8001182:	f000 fa5d 	bl	8001640 <Error_Handler>
 8001186:	e7e3      	b.n	8001150 <ADC_ReadChannels+0x34>
 8001188:	20000134 	.word	0x20000134

0800118c <Get_ADC_Measurement>:
void Get_ADC_Measurement(uint32_t channel, uint8_t *v){
 800118c:	b510      	push	{r4, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	460c      	mov	r4, r1
	a = ADC_ReadChannels(channel);
 8001192:	f7ff ffc3 	bl	800111c <ADC_ReadChannels>
	v[0] = a;
 8001196:	7020      	strb	r0, [r4, #0]
	v[1] = a >>  8;
 8001198:	0a03      	lsrs	r3, r0, #8
 800119a:	7063      	strb	r3, [r4, #1]
	APP_LOG(TS_ON, VLEVEL_M, "LDR: %d\r\n", a);
 800119c:	9000      	str	r0, [sp, #0]
 800119e:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <Get_ADC_Measurement+0x24>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	2100      	movs	r1, #0
 80011a4:	2002      	movs	r0, #2
 80011a6:	f010 fed5 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 80011aa:	b002      	add	sp, #8
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	bf00      	nop
 80011b0:	08012cb8 	.word	0x08012cb8

080011b4 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 80011b4:	4b01      	ldr	r3, [pc, #4]	; (80011bc <SYS_InitMeasurement+0x8>)
 80011b6:	4a02      	ldr	r2, [pc, #8]	; (80011c0 <SYS_InitMeasurement+0xc>)
 80011b8:	601a      	str	r2, [r3, #0]
}
 80011ba:	4770      	bx	lr
 80011bc:	20000134 	.word	0x20000134
 80011c0:	40012400 	.word	0x40012400

080011c4 <SYS_GetBatteryLevel>:
{
 80011c4:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <SYS_GetBatteryLevel+0x38>)
 80011c8:	f7ff ffa8 	bl	800111c <ADC_ReadChannels>
  if (measuredLevel == 0)
 80011cc:	b1a0      	cbz	r0, 80011f8 <SYS_GetBatteryLevel+0x34>
 80011ce:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <SYS_GetBatteryLevel+0x3c>)
 80011d2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80011d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011da:	428b      	cmp	r3, r1
 80011dc:	d007      	beq.n	80011ee <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80011de:	f640 40e4 	movw	r0, #3300	; 0xce4
 80011e2:	fb03 f000 	mul.w	r0, r3, r0
 80011e6:	fbb0 f0f2 	udiv	r0, r0, r2
 80011ea:	b280      	uxth	r0, r0
 80011ec:	e005      	b.n	80011fa <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <SYS_GetBatteryLevel+0x40>)
 80011f0:	fbb0 f0f2 	udiv	r0, r0, r2
 80011f4:	b280      	uxth	r0, r0
 80011f6:	e000      	b.n	80011fa <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 80011f8:	2000      	movs	r0, #0
}
 80011fa:	bd08      	pop	{r3, pc}
 80011fc:	b4002000 	.word	0xb4002000
 8001200:	1fff7500 	.word	0x1fff7500
 8001204:	004c08d8 	.word	0x004c08d8

08001208 <SYS_GetTemperatureLevel>:
{
 8001208:	b510      	push	{r4, lr}
 800120a:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001212:	f7ff ffd7 	bl	80011c4 <SYS_GetBatteryLevel>
 8001216:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001218:	4821      	ldr	r0, [pc, #132]	; (80012a0 <SYS_GetTemperatureLevel+0x98>)
 800121a:	f7ff ff7f 	bl	800111c <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <SYS_GetTemperatureLevel+0x9c>)
 8001220:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8001224:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001228:	428a      	cmp	r2, r1
 800122a:	d01d      	beq.n	8001268 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800122c:	fb00 f304 	mul.w	r3, r0, r4
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	4c1d      	ldr	r4, [pc, #116]	; (80012a8 <SYS_GetTemperatureLevel+0xa0>)
 8001234:	fba4 0303 	umull	r0, r3, r4, r3
 8001238:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 800123c:	2064      	movs	r0, #100	; 0x64
 800123e:	fb00 f303 	mul.w	r3, r0, r3
 8001242:	1a52      	subs	r2, r2, r1
 8001244:	fb93 f3f2 	sdiv	r3, r3, r2
 8001248:	331e      	adds	r3, #30
 800124a:	b21b      	sxth	r3, r3
 800124c:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001250:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001254:	b21b      	sxth	r3, r3
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21b      	sxth	r3, r3
 800125a:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 800125e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8001262:	b200      	sxth	r0, r0
 8001264:	b002      	add	sp, #8
 8001266:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001268:	fb00 f404 	mul.w	r4, r0, r4
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <SYS_GetTemperatureLevel+0xa4>)
 800126e:	fba3 2304 	umull	r2, r3, r3, r4
 8001272:	1ae4      	subs	r4, r4, r3
 8001274:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8001278:	0ae4      	lsrs	r4, r4, #11
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	fb03 f404 	mul.w	r4, r3, r4
 8001282:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 8001286:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <SYS_GetTemperatureLevel+0xa8>)
 800128c:	fb83 2304 	smull	r2, r3, r3, r4
 8001290:	17e4      	asrs	r4, r4, #31
 8001292:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 8001296:	341e      	adds	r4, #30
 8001298:	b224      	sxth	r4, r4
 800129a:	f8ad 4006 	strh.w	r4, [sp, #6]
 800129e:	e7d7      	b.n	8001250 <SYS_GetTemperatureLevel+0x48>
 80012a0:	b0001000 	.word	0xb0001000
 80012a4:	1fff7500 	.word	0x1fff7500
 80012a8:	09ee009f 	.word	0x09ee009f
 80012ac:	00100101 	.word	0x00100101
 80012b0:	68db8bad 	.word	0x68db8bad

080012b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012b4:	b500      	push	{lr}
 80012b6:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012be:	f042 0204 	orr.w	r2, r2, #4
 80012c2:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012c6:	f002 0204 	and.w	r2, r2, #4
 80012ca:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80012cc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012d0:	f042 0201 	orr.w	r2, r2, #1
 80012d4:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80012de:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2102      	movs	r1, #2
 80012e4:	200f      	movs	r0, #15
 80012e6:	f002 fb2b 	bl	8003940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012ea:	200f      	movs	r0, #15
 80012ec:	f002 fb60 	bl	80039b0 <HAL_NVIC_EnableIRQ>

}
 80012f0:	b003      	add	sp, #12
 80012f2:	f85d fb04 	ldr.w	pc, [sp], #4

080012f6 <FLASH_IF_IsEmpty>:
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80012f6:	e000      	b.n	80012fa <FLASH_IF_IsEmpty+0x4>
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 80012f8:	3901      	subs	r1, #1
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80012fa:	f010 0307 	ands.w	r3, r0, #7
 80012fe:	d012      	beq.n	8001326 <FLASH_IF_IsEmpty+0x30>
    if (*addr++ != UINT8_MAX)
 8001300:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001304:	2bff      	cmp	r3, #255	; 0xff
 8001306:	d0f7      	beq.n	80012f8 <FLASH_IF_IsEmpty+0x2>
      return FLASH_NOT_EMPTY;
 8001308:	2001      	movs	r0, #1
 800130a:	4770      	bx	lr
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 800130c:	3901      	subs	r1, #1
  while (size != 0)
 800130e:	b129      	cbz	r1, 800131c <FLASH_IF_IsEmpty+0x26>
    if (*addr++ != UINT8_MAX)
 8001310:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001314:	2bff      	cmp	r3, #255	; 0xff
 8001316:	d0f9      	beq.n	800130c <FLASH_IF_IsEmpty+0x16>
      return FLASH_NOT_EMPTY;
 8001318:	2001      	movs	r0, #1
 800131a:	e002      	b.n	8001322 <FLASH_IF_IsEmpty+0x2c>
  }
  return FLASH_EMPTY;
 800131c:	2000      	movs	r0, #0
 800131e:	e000      	b.n	8001322 <FLASH_IF_IsEmpty+0x2c>
      return FLASH_NOT_EMPTY;
 8001320:	2001      	movs	r0, #1
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001322:	bc10      	pop	{r4}
 8001324:	4770      	bx	lr
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001326:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800132a:	d212      	bcs.n	8001352 <FLASH_IF_IsEmpty+0x5c>
{
 800132c:	b410      	push	{r4}
    if (*addr64++ != UINT64_MAX)
 800132e:	4602      	mov	r2, r0
 8001330:	f852 4b08 	ldr.w	r4, [r2], #8
 8001334:	6840      	ldr	r0, [r0, #4]
 8001336:	f1b0 3fff 	cmp.w	r0, #4294967295
 800133a:	bf08      	it	eq
 800133c:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8001340:	d1ee      	bne.n	8001320 <FLASH_IF_IsEmpty+0x2a>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001342:	3301      	adds	r3, #1
    if (*addr64++ != UINT64_MAX)
 8001344:	4610      	mov	r0, r2
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001346:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800134a:	d3f0      	bcc.n	800132e <FLASH_IF_IsEmpty+0x38>
  size -= sizeof(uint64_t) * i;
 800134c:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 8001350:	e7dd      	b.n	800130e <FLASH_IF_IsEmpty+0x18>
  size -= sizeof(uint64_t) * i;
 8001352:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 8001356:	b129      	cbz	r1, 8001364 <FLASH_IF_IsEmpty+0x6e>
    if (*addr++ != UINT8_MAX)
 8001358:	f810 3b01 	ldrb.w	r3, [r0], #1
 800135c:	2bff      	cmp	r3, #255	; 0xff
 800135e:	d103      	bne.n	8001368 <FLASH_IF_IsEmpty+0x72>
    size--;
 8001360:	3901      	subs	r1, #1
 8001362:	e7f8      	b.n	8001356 <FLASH_IF_IsEmpty+0x60>
  return FLASH_EMPTY;
 8001364:	2000      	movs	r0, #0
 8001366:	4770      	bx	lr
      return FLASH_NOT_EMPTY;
 8001368:	2001      	movs	r0, #1
}
 800136a:	4770      	bx	lr

0800136c <FLASH_IF_Write64>:
{
 800136c:	b570      	push	{r4, r5, r6, lr}
 800136e:	4604      	mov	r4, r0
 8001370:	4616      	mov	r6, r2
 8001372:	461d      	mov	r5, r3
  while (*(uint64_t *)address != data)
 8001374:	e005      	b.n	8001382 <FLASH_IF_Write64+0x16>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001376:	4632      	mov	r2, r6
 8001378:	462b      	mov	r3, r5
 800137a:	4621      	mov	r1, r4
 800137c:	2001      	movs	r0, #1
 800137e:	f002 fe43 	bl	8004008 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001382:	6822      	ldr	r2, [r4, #0]
 8001384:	6863      	ldr	r3, [r4, #4]
 8001386:	42ab      	cmp	r3, r5
 8001388:	bf08      	it	eq
 800138a:	42b2      	cmpeq	r2, r6
 800138c:	d005      	beq.n	800139a <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 800138e:	4904      	ldr	r1, [pc, #16]	; (80013a0 <FLASH_IF_Write64+0x34>)
 8001390:	6909      	ldr	r1, [r1, #16]
 8001392:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 8001396:	d1fa      	bne.n	800138e <FLASH_IF_Write64+0x22>
 8001398:	e7ed      	b.n	8001376 <FLASH_IF_Write64+0xa>
}
 800139a:	2000      	movs	r0, #0
 800139c:	bd70      	pop	{r4, r5, r6, pc}
 800139e:	bf00      	nop
 80013a0:	58004000 	.word	0x58004000

080013a4 <FLASH_IF_Write_Buffer>:
{
 80013a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	4606      	mov	r6, r0
 80013ac:	460c      	mov	r4, r1
 80013ae:	4690      	mov	r8, r2
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013b0:	2500      	movs	r5, #0
  int32_t status = FLASH_OK;
 80013b2:	462f      	mov	r7, r5
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013b4:	e003      	b.n	80013be <FLASH_IF_Write_Buffer+0x1a>
    pDestination += sizeof(uint64_t);
 80013b6:	3608      	adds	r6, #8
    pSrc += sizeof(uint64_t);
 80013b8:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 80013ba:	b9af      	cbnz	r7, 80013e8 <FLASH_IF_Write_Buffer+0x44>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013bc:	3501      	adds	r5, #1
 80013be:	ebb5 0fd8 	cmp.w	r5, r8, lsr #3
 80013c2:	d211      	bcs.n	80013e8 <FLASH_IF_Write_Buffer+0x44>
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80013c4:	2208      	movs	r2, #8
 80013c6:	4621      	mov	r1, r4
 80013c8:	4668      	mov	r0, sp
 80013ca:	f010 fed9 	bl	8012180 <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 80013ce:	9a00      	ldr	r2, [sp, #0]
 80013d0:	9b01      	ldr	r3, [sp, #4]
 80013d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d6:	bf08      	it	eq
 80013d8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80013dc:	d0eb      	beq.n	80013b6 <FLASH_IF_Write_Buffer+0x12>
      status = FLASH_IF_Write64(pDestination, src_value);
 80013de:	4630      	mov	r0, r6
 80013e0:	f7ff ffc4 	bl	800136c <FLASH_IF_Write64>
 80013e4:	4607      	mov	r7, r0
 80013e6:	e7e6      	b.n	80013b6 <FLASH_IF_Write_Buffer+0x12>
}
 80013e8:	4638      	mov	r0, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080013f0 <FLASH_IF_EraseByPages>:
{
 80013f0:	b500      	push	{lr}
 80013f2:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80013f4:	2302      	movs	r3, #2
 80013f6:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 80013f8:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 80013fa:	9103      	str	r1, [sp, #12]
  if (interrupt)
 80013fc:	b13a      	cbz	r2, 800140e <FLASH_IF_EraseByPages+0x1e>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 80013fe:	a801      	add	r0, sp, #4
 8001400:	f002 feca 	bl	8004198 <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001404:	b140      	cbz	r0, 8001418 <FLASH_IF_EraseByPages+0x28>
 8001406:	2802      	cmp	r0, #2
 8001408:	d10a      	bne.n	8001420 <FLASH_IF_EraseByPages+0x30>
 800140a:	2001      	movs	r0, #1
 800140c:	e005      	b.n	800141a <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800140e:	4669      	mov	r1, sp
 8001410:	a801      	add	r0, sp, #4
 8001412:	f002 fe81 	bl	8004118 <HAL_FLASHEx_Erase>
 8001416:	e7f5      	b.n	8001404 <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001418:	2000      	movs	r0, #0
}
 800141a:	b005      	add	sp, #20
 800141c:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001420:	f06f 0001 	mvn.w	r0, #1
 8001424:	e7f9      	b.n	800141a <FLASH_IF_EraseByPages+0x2a>
	...

08001428 <FLASH_IF_Write>:
{
 8001428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800142c:	4693      	mov	fp, r2
 800142e:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 8001430:	f100 4578 	add.w	r5, r0, #4160749568	; 0xf8000000
 8001434:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <FLASH_IF_Write+0x108>)
 8001436:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800143a:	4b3e      	ldr	r3, [pc, #248]	; (8001534 <FLASH_IF_Write+0x10c>)
 800143c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001440:	fbb5 f2f3 	udiv	r2, r5, r3
 8001444:	fb03 5512 	mls	r5, r3, r2, r5
  uint32_t page_end_index = PAGE(address + size - 1);
 8001448:	eb00 0a0b 	add.w	sl, r0, fp
 800144c:	f10a 4a78 	add.w	sl, sl, #4160749568	; 0xf8000000
 8001450:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001454:	fbba f2f3 	udiv	r2, sl, r3
 8001458:	fb03 aa12 	mls	sl, r3, r2, sl
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 800145c:	2900      	cmp	r1, #0
 800145e:	d052      	beq.n	8001506 <FLASH_IF_Write+0xde>
 8001460:	4606      	mov	r6, r0
 8001462:	0aed      	lsrs	r5, r5, #11
 8001464:	ea4f 2ada 	mov.w	sl, sl, lsr #11
 8001468:	4688      	mov	r8, r1
 800146a:	f01b 0f07 	tst.w	fp, #7
 800146e:	d14d      	bne.n	800150c <FLASH_IF_Write+0xe4>
 8001470:	f010 0f07 	tst.w	r0, #7
 8001474:	d14d      	bne.n	8001512 <FLASH_IF_Write+0xea>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001476:	4b30      	ldr	r3, [pc, #192]	; (8001538 <FLASH_IF_Write+0x110>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db4c      	blt.n	8001518 <FLASH_IF_Write+0xf0>
  if (page_start_index != page_end_index)
 800147e:	4555      	cmp	r5, sl
 8001480:	d004      	beq.n	800148c <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8001482:	f3c0 040a 	ubfx	r4, r0, #0, #11
 8001486:	f5c4 6400 	rsb	r4, r4, #2048	; 0x800
 800148a:	e00d      	b.n	80014a8 <FLASH_IF_Write+0x80>
  uint32_t curr_size = size;
 800148c:	465c      	mov	r4, fp
 800148e:	e00b      	b.n	80014a8 <FLASH_IF_Write+0x80>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001490:	4622      	mov	r2, r4
 8001492:	4641      	mov	r1, r8
 8001494:	4630      	mov	r0, r6
 8001496:	f7ff ff85 	bl	80013a4 <FLASH_IF_Write_Buffer>
 800149a:	2800      	cmp	r0, #0
 800149c:	d145      	bne.n	800152a <FLASH_IF_Write+0x102>
    curr_dest_addr += curr_size;
 800149e:	4426      	add	r6, r4
    curr_src_addr += curr_size;
 80014a0:	44a0      	add	r8, r4
    curr_size = size - curr_size;
 80014a2:	ebab 0404 	sub.w	r4, fp, r4
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80014a6:	3501      	adds	r5, #1
 80014a8:	4555      	cmp	r5, sl
 80014aa:	d829      	bhi.n	8001500 <FLASH_IF_Write+0xd8>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80014ac:	4621      	mov	r1, r4
 80014ae:	4630      	mov	r0, r6
 80014b0:	f7ff ff21 	bl	80012f6 <FLASH_IF_IsEmpty>
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d0eb      	beq.n	8001490 <FLASH_IF_Write+0x68>
      if (dataTempPage == NULL)
 80014b8:	f1b9 0f00 	cmp.w	r9, #0
 80014bc:	d02f      	beq.n	800151e <FLASH_IF_Write+0xf6>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80014be:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 80014c2:	02ff      	lsls	r7, r7, #11
 80014c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014c8:	4639      	mov	r1, r7
 80014ca:	4648      	mov	r0, r9
 80014cc:	f010 fe58 	bl	8012180 <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80014d0:	f3c6 000a 	ubfx	r0, r6, #0, #11
 80014d4:	b2a2      	uxth	r2, r4
 80014d6:	4641      	mov	r1, r8
 80014d8:	4448      	add	r0, r9
 80014da:	f010 fe51 	bl	8012180 <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80014de:	2200      	movs	r2, #0
 80014e0:	2101      	movs	r1, #1
 80014e2:	4628      	mov	r0, r5
 80014e4:	f7ff ff84 	bl	80013f0 <FLASH_IF_EraseByPages>
 80014e8:	b9e0      	cbnz	r0, 8001524 <FLASH_IF_Write+0xfc>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80014ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ee:	4649      	mov	r1, r9
 80014f0:	4638      	mov	r0, r7
 80014f2:	f7ff ff57 	bl	80013a4 <FLASH_IF_Write_Buffer>
 80014f6:	2800      	cmp	r0, #0
 80014f8:	d0d1      	beq.n	800149e <FLASH_IF_Write+0x76>
          status = FLASH_WRITE_ERROR;
 80014fa:	f06f 0002 	mvn.w	r0, #2
 80014fe:	e000      	b.n	8001502 <FLASH_IF_Write+0xda>
  int32_t status = FLASH_OK;
 8001500:	2000      	movs	r0, #0
}
 8001502:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 8001506:	f06f 0004 	mvn.w	r0, #4
 800150a:	e7fa      	b.n	8001502 <FLASH_IF_Write+0xda>
 800150c:	f06f 0004 	mvn.w	r0, #4
 8001510:	e7f7      	b.n	8001502 <FLASH_IF_Write+0xda>
 8001512:	f06f 0004 	mvn.w	r0, #4
 8001516:	e7f4      	b.n	8001502 <FLASH_IF_Write+0xda>
    return FLASH_LOCK_ERROR;
 8001518:	f06f 0003 	mvn.w	r0, #3
 800151c:	e7f1      	b.n	8001502 <FLASH_IF_Write+0xda>
        return FLASH_PARAM_ERROR;
 800151e:	f06f 0004 	mvn.w	r0, #4
 8001522:	e7ee      	b.n	8001502 <FLASH_IF_Write+0xda>
        status = FLASH_ERASE_ERROR;
 8001524:	f06f 0001 	mvn.w	r0, #1
 8001528:	e7eb      	b.n	8001502 <FLASH_IF_Write+0xda>
        status = FLASH_WRITE_ERROR;
 800152a:	f06f 0002 	mvn.w	r0, #2
 800152e:	e7e8      	b.n	8001502 <FLASH_IF_Write+0xda>
 8001530:	1fff7000 	.word	0x1fff7000
 8001534:	03fffc00 	.word	0x03fffc00
 8001538:	58004000 	.word	0x58004000

0800153c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800153c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001540:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	2400      	movs	r4, #0
 8001544:	9403      	str	r4, [sp, #12]
 8001546:	9404      	str	r4, [sp, #16]
 8001548:	9405      	str	r4, [sp, #20]
 800154a:	9406      	str	r4, [sp, #24]
 800154c:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800154e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001554:	f042 0202 	orr.w	r2, r2, #2
 8001558:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800155a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800155c:	f002 0202 	and.w	r2, r2, #2
 8001560:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001562:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001566:	f042 0204 	orr.w	r2, r2, #4
 800156a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800156c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800156e:	f002 0204 	and.w	r2, r2, #4
 8001572:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001574:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001578:	f042 0201 	orr.w	r2, r2, #1
 800157c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001586:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|GPIO_PIN_3|LED2_Pin|PROB2_Pin
 8001588:	4e2b      	ldr	r6, [pc, #172]	; (8001638 <MX_GPIO_Init+0xfc>)
 800158a:	4622      	mov	r2, r4
 800158c:	f64b 2108 	movw	r1, #47624	; 0xba08
 8001590:	4630      	mov	r0, r6
 8001592:	f002 ff8c 	bl	80044ae <HAL_GPIO_WritePin>
                          |PROB1_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001596:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 800159a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2501      	movs	r5, #1
 800159e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a2:	2302      	movs	r3, #2
 80015a4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	a903      	add	r1, sp, #12
 80015a8:	4630      	mov	r0, r6
 80015aa:	f002 fe29 	bl	8004200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015ae:	2308      	movs	r3, #8
 80015b0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	a903      	add	r1, sp, #12
 80015ba:	4630      	mov	r0, r6
 80015bc:	f002 fe20 	bl	8004200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80015c0:	f04f 0803 	mov.w	r8, #3
 80015c4:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c8:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80015cc:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ce:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	a903      	add	r1, sp, #12
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d6:	f002 fe13 	bl	8004200 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80015da:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015de:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	a903      	add	r1, sp, #12
 80015ea:	4630      	mov	r0, r6
 80015ec:	f002 fe08 	bl	8004200 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80015f0:	2340      	movs	r3, #64	; 0x40
 80015f2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015f4:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80015f8:	a903      	add	r1, sp, #12
 80015fa:	4810      	ldr	r0, [pc, #64]	; (800163c <MX_GPIO_Init+0x100>)
 80015fc:	f002 fe00 	bl	8004200 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001600:	4622      	mov	r2, r4
 8001602:	4621      	mov	r1, r4
 8001604:	2006      	movs	r0, #6
 8001606:	f002 f99b 	bl	8003940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800160a:	2006      	movs	r0, #6
 800160c:	f002 f9d0 	bl	80039b0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001610:	4622      	mov	r2, r4
 8001612:	4621      	mov	r1, r4
 8001614:	2007      	movs	r0, #7
 8001616:	f002 f993 	bl	8003940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800161a:	2007      	movs	r0, #7
 800161c:	f002 f9c8 	bl	80039b0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001620:	4622      	mov	r2, r4
 8001622:	4621      	mov	r1, r4
 8001624:	2016      	movs	r0, #22
 8001626:	f002 f98b 	bl	8003940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800162a:	2016      	movs	r0, #22
 800162c:	f002 f9c0 	bl	80039b0 <HAL_NVIC_EnableIRQ>

}
 8001630:	b008      	add	sp, #32
 8001632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001636:	bf00      	nop
 8001638:	48000400 	.word	0x48000400
 800163c:	48000800 	.word	0x48000800

08001640 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001642:	e7fe      	b.n	8001642 <Error_Handler+0x2>

08001644 <SystemClock_Config>:
{
 8001644:	b510      	push	{r4, lr}
 8001646:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001648:	2248      	movs	r2, #72	; 0x48
 800164a:	2100      	movs	r1, #0
 800164c:	a808      	add	r0, sp, #32
 800164e:	f011 fa59 	bl	8012b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001652:	2400      	movs	r4, #0
 8001654:	9401      	str	r4, [sp, #4]
 8001656:	9402      	str	r4, [sp, #8]
 8001658:	9403      	str	r4, [sp, #12]
 800165a:	9404      	str	r4, [sp, #16]
 800165c:	9405      	str	r4, [sp, #20]
 800165e:	9406      	str	r4, [sp, #24]
 8001660:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001662:	f002 ff41 	bl	80044e8 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001666:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800166a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800166e:	f023 0318 	bic.w	r3, r3, #24
 8001672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001676:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800167a:	6813      	ldr	r3, [r2, #0]
 800167c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001680:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	6813      	ldr	r3, [r2, #0]
 8001688:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001690:	2324      	movs	r3, #36	; 0x24
 8001692:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001694:	2381      	movs	r3, #129	; 0x81
 8001696:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001698:	2301      	movs	r3, #1
 800169a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800169c:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800169e:	23b0      	movs	r3, #176	; 0xb0
 80016a0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016a2:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a4:	a808      	add	r0, sp, #32
 80016a6:	f003 f8b9 	bl	800481c <HAL_RCC_OscConfig>
 80016aa:	b970      	cbnz	r0, 80016ca <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80016ac:	234f      	movs	r3, #79	; 0x4f
 80016ae:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80016b0:	2300      	movs	r3, #0
 80016b2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016b6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80016ba:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016bc:	2102      	movs	r1, #2
 80016be:	a801      	add	r0, sp, #4
 80016c0:	f003 fbe8 	bl	8004e94 <HAL_RCC_ClockConfig>
 80016c4:	b918      	cbnz	r0, 80016ce <SystemClock_Config+0x8a>
}
 80016c6:	b01a      	add	sp, #104	; 0x68
 80016c8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80016ca:	f7ff ffb9 	bl	8001640 <Error_Handler>
    Error_Handler();
 80016ce:	f7ff ffb7 	bl	8001640 <Error_Handler>

080016d2 <main>:
{
 80016d2:	b508      	push	{r3, lr}
  HAL_Init();
 80016d4:	f001 fbf0 	bl	8002eb8 <HAL_Init>
  SystemClock_Config();
 80016d8:	f7ff ffb4 	bl	8001644 <SystemClock_Config>
  MX_GPIO_Init();
 80016dc:	f7ff ff2e 	bl	800153c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80016e0:	f000 fe8c 	bl	80023fc <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 80016e4:	f000 fe90 	bl	8002408 <MX_LoRaWAN_Process>
  while (1)
 80016e8:	e7fc      	b.n	80016e4 <main+0x12>
	...

080016ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016ec:	b500      	push	{lr}
 80016ee:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80016f0:	222c      	movs	r2, #44	; 0x2c
 80016f2:	2100      	movs	r1, #0
 80016f4:	a801      	add	r0, sp, #4
 80016f6:	f011 fa05 	bl	8012b04 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016fa:	4819      	ldr	r0, [pc, #100]	; (8001760 <MX_RTC_Init+0x74>)
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <MX_RTC_Init+0x78>)
 80016fe:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001700:	231f      	movs	r3, #31
 8001702:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001708:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800170a:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800170c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001710:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001712:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001718:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800171a:	f003 ff21 	bl	8005560 <HAL_RTC_Init>
 800171e:	b9a8      	cbnz	r0, 800174c <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001720:	480f      	ldr	r0, [pc, #60]	; (8001760 <MX_RTC_Init+0x74>)
 8001722:	f004 f857 	bl	80057d4 <HAL_RTCEx_SetSSRU_IT>
 8001726:	b9a0      	cbnz	r0, 8001752 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001728:	2200      	movs	r2, #0
 800172a:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800172c:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800172e:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001730:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001734:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800173c:	a901      	add	r1, sp, #4
 800173e:	4808      	ldr	r0, [pc, #32]	; (8001760 <MX_RTC_Init+0x74>)
 8001740:	f003 ff6c 	bl	800561c <HAL_RTC_SetAlarm_IT>
 8001744:	b940      	cbnz	r0, 8001758 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001746:	b00d      	add	sp, #52	; 0x34
 8001748:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800174c:	f7ff ff78 	bl	8001640 <Error_Handler>
 8001750:	e7e6      	b.n	8001720 <MX_RTC_Init+0x34>
    Error_Handler();
 8001752:	f7ff ff75 	bl	8001640 <Error_Handler>
 8001756:	e7e7      	b.n	8001728 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001758:	f7ff ff72 	bl	8001640 <Error_Handler>
}
 800175c:	e7f3      	b.n	8001746 <MX_RTC_Init+0x5a>
 800175e:	bf00      	nop
 8001760:	20000198 	.word	0x20000198
 8001764:	40002800 	.word	0x40002800

08001768 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001768:	b510      	push	{r4, lr}
 800176a:	b090      	sub	sp, #64	; 0x40
 800176c:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800176e:	2238      	movs	r2, #56	; 0x38
 8001770:	2100      	movs	r1, #0
 8001772:	a802      	add	r0, sp, #8
 8001774:	f011 f9c6 	bl	8012b04 <memset>
  if(rtcHandle->Instance==RTC)
 8001778:	6822      	ldr	r2, [r4, #0]
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_RTC_MspInit+0x7c>)
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001780:	b010      	add	sp, #64	; 0x40
 8001782:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001788:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800178a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800178e:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001790:	a802      	add	r0, sp, #8
 8001792:	f003 fcd3 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 8001796:	bb08      	cbnz	r0, 80017dc <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80017a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017ae:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80017b8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	4611      	mov	r1, r2
 80017be:	2002      	movs	r0, #2
 80017c0:	f002 f8be 	bl	8003940 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80017c4:	2002      	movs	r0, #2
 80017c6:	f002 f8f3 	bl	80039b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	4611      	mov	r1, r2
 80017ce:	202a      	movs	r0, #42	; 0x2a
 80017d0:	f002 f8b6 	bl	8003940 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017d4:	202a      	movs	r0, #42	; 0x2a
 80017d6:	f002 f8eb 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 80017da:	e7d1      	b.n	8001780 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80017dc:	f7ff ff30 	bl	8001640 <Error_Handler>
 80017e0:	e7da      	b.n	8001798 <HAL_RTC_MspInit+0x30>
 80017e2:	bf00      	nop
 80017e4:	40002800 	.word	0x40002800

080017e8 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80017e8:	4770      	bx	lr

080017ea <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80017ea:	4770      	bx	lr

080017ec <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80017ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80017ee:	f001 fb79 	bl	8002ee4 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80017f2:	2001      	movs	r0, #1
 80017f4:	4b02      	ldr	r3, [pc, #8]	; (8001800 <PWR_EnterStopMode+0x14>)
 80017f6:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80017fa:	f002 fed9 	bl	80045b0 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80017fe:	bd08      	pop	{r3, pc}
 8001800:	58000400 	.word	0x58000400

08001804 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001804:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001806:	f001 fb74 	bl	8002ef2 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800180a:	bd08      	pop	{r3, pc}

0800180c <PWR_ExitStopMode>:
{
 800180c:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 800180e:	f001 fb70 	bl	8002ef2 <HAL_ResumeTick>
  vcom_Resume();
 8001812:	f000 fc71 	bl	80020f8 <vcom_Resume>
}
 8001816:	bd08      	pop	{r3, pc}

08001818 <PWR_EnterSleepMode>:
{
 8001818:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800181a:	f001 fb63 	bl	8002ee4 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800181e:	2101      	movs	r1, #1
 8001820:	2000      	movs	r0, #0
 8001822:	f002 fe69 	bl	80044f8 <HAL_PWR_EnterSLEEPMode>
}
 8001826:	bd08      	pop	{r3, pc}

08001828 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001828:	4770      	bx	lr

0800182a <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800182a:	e7fe      	b.n	800182a <NMI_Handler>

0800182c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <HardFault_Handler>

0800182e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <MemManage_Handler>

08001830 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <BusFault_Handler>

08001832 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <UsageFault_Handler>

08001834 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001834:	4770      	bx	lr

08001836 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001836:	4770      	bx	lr

08001838 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001838:	4770      	bx	lr

0800183a <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183a:	4770      	bx	lr

0800183c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800183c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800183e:	4802      	ldr	r0, [pc, #8]	; (8001848 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001840:	f003 fff4 	bl	800582c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001844:	bd08      	pop	{r3, pc}
 8001846:	bf00      	nop
 8001848:	20000198 	.word	0x20000198

0800184c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800184c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 800184e:	2001      	movs	r0, #1
 8001850:	f002 fe3c 	bl	80044cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001854:	bd08      	pop	{r3, pc}

08001856 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001856:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001858:	2002      	movs	r0, #2
 800185a:	f002 fe37 	bl	80044cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800185e:	bd08      	pop	{r3, pc}

08001860 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001860:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001862:	4802      	ldr	r0, [pc, #8]	; (800186c <DMA1_Channel5_IRQHandler+0xc>)
 8001864:	f002 fac2 	bl	8003dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001868:	bd08      	pop	{r3, pc}
 800186a:	bf00      	nop
 800186c:	200001e4 	.word	0x200001e4

08001870 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001870:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001872:	2040      	movs	r0, #64	; 0x40
 8001874:	f002 fe2a 	bl	80044cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001878:	bd08      	pop	{r3, pc}
	...

0800187c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800187c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800187e:	4802      	ldr	r0, [pc, #8]	; (8001888 <USART2_IRQHandler+0xc>)
 8001880:	f004 fc90 	bl	80061a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001884:	bd08      	pop	{r3, pc}
 8001886:	bf00      	nop
 8001888:	20000244 	.word	0x20000244

0800188c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800188c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800188e:	4802      	ldr	r0, [pc, #8]	; (8001898 <RTC_Alarm_IRQHandler+0xc>)
 8001890:	f003 fdde 	bl	8005450 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001894:	bd08      	pop	{r3, pc}
 8001896:	bf00      	nop
 8001898:	20000198 	.word	0x20000198

0800189c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800189c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800189e:	4802      	ldr	r0, [pc, #8]	; (80018a8 <SUBGHZ_Radio_IRQHandler+0xc>)
 80018a0:	f004 fa6e 	bl	8005d80 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80018a4:	bd08      	pop	{r3, pc}
 80018a6:	bf00      	nop
 80018a8:	200001d0 	.word	0x200001d0

080018ac <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80018ac:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_SUBGHZ_Init+0x18>)
 80018b0:	2308      	movs	r3, #8
 80018b2:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80018b4:	f003 fff0 	bl	8005898 <HAL_SUBGHZ_Init>
 80018b8:	b900      	cbnz	r0, 80018bc <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80018ba:	bd08      	pop	{r3, pc}
    Error_Handler();
 80018bc:	f7ff fec0 	bl	8001640 <Error_Handler>
}
 80018c0:	e7fb      	b.n	80018ba <MX_SUBGHZ_Init+0xe>
 80018c2:	bf00      	nop
 80018c4:	200001d0 	.word	0x200001d0

080018c8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80018c8:	b500      	push	{lr}
 80018ca:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80018d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80018e0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	4611      	mov	r1, r2
 80018e6:	2032      	movs	r0, #50	; 0x32
 80018e8:	f002 f82a 	bl	8003940 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80018ec:	2032      	movs	r0, #50	; 0x32
 80018ee:	f002 f85f 	bl	80039b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80018f2:	b003      	add	sp, #12
 80018f4:	f85d fb04 	ldr.w	pc, [sp], #4

080018f8 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80018f8:	b40c      	push	{r2, r3}
 80018fa:	b500      	push	{lr}
 80018fc:	b083      	sub	sp, #12
 80018fe:	ab04      	add	r3, sp, #16
 8001900:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001904:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001906:	f011 f815 	bl	8012934 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800190a:	b003      	add	sp, #12
 800190c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001910:	b002      	add	sp, #8
 8001912:	4770      	bx	lr

08001914 <TimestampNow>:
{
 8001914:	b530      	push	{r4, r5, lr}
 8001916:	b085      	sub	sp, #20
 8001918:	4604      	mov	r4, r0
 800191a:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 800191c:	a802      	add	r0, sp, #8
 800191e:	f010 fd7f 	bl	8012420 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001922:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	9b02      	ldr	r3, [sp, #8]
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <TimestampNow+0x2c>)
 800192c:	2110      	movs	r1, #16
 800192e:	4620      	mov	r0, r4
 8001930:	f7ff ffe2 	bl	80018f8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001934:	4620      	mov	r0, r4
 8001936:	f7fe fc1f 	bl	8000178 <strlen>
 800193a:	8028      	strh	r0, [r5, #0]
}
 800193c:	b005      	add	sp, #20
 800193e:	bd30      	pop	{r4, r5, pc}
 8001940:	08012cdc 	.word	0x08012cdc

08001944 <SystemApp_Init>:
{
 8001944:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800194a:	6893      	ldr	r3, [r2, #8]
 800194c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001950:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001952:	f010 fde9 	bl	8012528 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001956:	2401      	movs	r4, #1
 8001958:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <SystemApp_Init+0x4c>)
 800195a:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 800195c:	f000 f8dc 	bl	8001b18 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001960:	f010 fa84 	bl	8011e6c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001964:	480b      	ldr	r0, [pc, #44]	; (8001994 <SystemApp_Init+0x50>)
 8001966:	f010 fa9b 	bl	8011ea0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <SystemApp_Init+0x54>)
 800196c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001970:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001972:	2002      	movs	r0, #2
 8001974:	f010 fa9a 	bl	8011eac <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001978:	f7ff fc1c 	bl	80011b4 <SYS_InitMeasurement>
  EnvSensors_Init();
 800197c:	f000 f95a 	bl	8001c34 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001980:	f010 fba4 	bl	80120cc <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001984:	4621      	mov	r1, r4
 8001986:	4620      	mov	r0, r4
 8001988:	f010 fbc0 	bl	801210c <UTIL_LPM_SetOffMode>
}
 800198c:	bd10      	pop	{r4, pc}
 800198e:	bf00      	nop
 8001990:	200001dc 	.word	0x200001dc
 8001994:	08001915 	.word	0x08001915
 8001998:	58004000 	.word	0x58004000

0800199c <UTIL_SEQ_Idle>:
{
 800199c:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 800199e:	f010 fbcb 	bl	8012138 <UTIL_LPM_EnterLowPower>
}
 80019a2:	bd08      	pop	{r3, pc}

080019a4 <GetBatteryLevel>:
{
 80019a4:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80019a6:	f7ff fc0d 	bl	80011c4 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80019aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80019ae:	4298      	cmp	r0, r3
 80019b0:	d80d      	bhi.n	80019ce <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80019b2:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80019b6:	d30c      	bcc.n	80019d2 <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80019b8:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80019bc:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80019c0:	0040      	lsls	r0, r0, #1
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <GetBatteryLevel+0x34>)
 80019c4:	fba3 3000 	umull	r3, r0, r3, r0
 80019c8:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 80019cc:	e000      	b.n	80019d0 <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 80019ce:	20fe      	movs	r0, #254	; 0xfe
}
 80019d0:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 80019d2:	2000      	movs	r0, #0
 80019d4:	e7fc      	b.n	80019d0 <GetBatteryLevel+0x2c>
 80019d6:	bf00      	nop
 80019d8:	1b4e81b5 	.word	0x1b4e81b5

080019dc <GetTemperatureLevel>:
{
 80019dc:	b500      	push	{lr}
 80019de:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 80019e0:	4668      	mov	r0, sp
 80019e2:	f000 f90b 	bl	8001bfc <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80019e6:	9801      	ldr	r0, [sp, #4]
 80019e8:	f7ff f95e 	bl	8000ca8 <__aeabi_f2iz>
}
 80019ec:	b200      	sxth	r0, r0
 80019ee:	b007      	add	sp, #28
 80019f0:	f85d fb04 	ldr.w	pc, [sp], #4

080019f4 <GetUniqueId>:
{
 80019f4:	b538      	push	{r3, r4, r5, lr}
 80019f6:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <GetUniqueId+0x68>)
 80019fa:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80019fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a02:	d013      	beq.n	8001a2c <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001a04:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001a06:	0a1a      	lsrs	r2, r3, #8
 8001a08:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001a0a:	0c1a      	lsrs	r2, r3, #16
 8001a0c:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001a0e:	0e1b      	lsrs	r3, r3, #24
 8001a10:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <GetUniqueId+0x68>)
 8001a14:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001a18:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001a1a:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001a1e:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001a20:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001a22:	0c1a      	lsrs	r2, r3, #16
 8001a24:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001a26:	0e1b      	lsrs	r3, r3, #24
 8001a28:	7003      	strb	r3, [r0, #0]
}
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a2c:	f001 fa68 	bl	8002f00 <HAL_GetUIDw0>
 8001a30:	4605      	mov	r5, r0
 8001a32:	f001 fa71 	bl	8002f18 <HAL_GetUIDw2>
 8001a36:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a38:	f001 fa68 	bl	8002f0c <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001a3c:	0e2b      	lsrs	r3, r5, #24
 8001a3e:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001a40:	0c2b      	lsrs	r3, r5, #16
 8001a42:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001a44:	0a2b      	lsrs	r3, r5, #8
 8001a46:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001a48:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001a4a:	0e03      	lsrs	r3, r0, #24
 8001a4c:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001a4e:	0c03      	lsrs	r3, r0, #16
 8001a50:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001a52:	0a03      	lsrs	r3, r0, #8
 8001a54:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001a56:	7020      	strb	r0, [r4, #0]
 8001a58:	e7e7      	b.n	8001a2a <GetUniqueId+0x36>
 8001a5a:	bf00      	nop
 8001a5c:	1fff7000 	.word	0x1fff7000

08001a60 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <GetDevAddr+0x24>)
 8001a62:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 8001a66:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a6a:	d000      	beq.n	8001a6e <GetDevAddr+0xe>
}
 8001a6c:	4770      	bx	lr
{
 8001a6e:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001a70:	f001 fa46 	bl	8002f00 <HAL_GetUIDw0>
 8001a74:	4604      	mov	r4, r0
 8001a76:	f001 fa49 	bl	8002f0c <HAL_GetUIDw1>
 8001a7a:	4044      	eors	r4, r0
 8001a7c:	f001 fa4c 	bl	8002f18 <HAL_GetUIDw2>
 8001a80:	4060      	eors	r0, r4
}
 8001a82:	bd10      	pop	{r4, pc}
 8001a84:	1fff7000 	.word	0x1fff7000

08001a88 <GetTemperatureAndhumidityLevel>:
void GetTemperatureAndhumidityLevel(uint16_t *Hum, int16_t *Temp){
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	4605      	mov	r5, r0
 8001a8e:	460c      	mov	r4, r1
	DHT_GetData(&DHT11_Data);
 8001a90:	a802      	add	r0, sp, #8
 8001a92:	f000 fc71 	bl	8002378 <DHT_GetData>
	h = DHT11_Data.Humidity;
 8001a96:	9f03      	ldr	r7, [sp, #12]
	t = DHT11_Data.Temperature;
 8001a98:	9e02      	ldr	r6, [sp, #8]
	APP_LOG(TS_ON, VLEVEL_M, "DHT11 Temp: %d\r\nDHT11 Humid: %d\r\n",(int)t, (int)h);
 8001a9a:	4638      	mov	r0, r7
 8001a9c:	f7ff f904 	bl	8000ca8 <__aeabi_f2iz>
 8001aa0:	9001      	str	r0, [sp, #4]
 8001aa2:	4630      	mov	r0, r6
 8001aa4:	f7ff f900 	bl	8000ca8 <__aeabi_f2iz>
 8001aa8:	9000      	str	r0, [sp, #0]
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <GetTemperatureAndhumidityLevel+0x44>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f010 fa4f 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
	*Hum = (uint16_t)h;
 8001ab6:	4638      	mov	r0, r7
 8001ab8:	f7ff f91c 	bl	8000cf4 <__aeabi_f2uiz>
 8001abc:	8028      	strh	r0, [r5, #0]
	*Temp = (int16_t)t;
 8001abe:	4630      	mov	r0, r6
 8001ac0:	f7ff f8f2 	bl	8000ca8 <__aeabi_f2iz>
 8001ac4:	8020      	strh	r0, [r4, #0]
}
 8001ac6:	b005      	add	sp, #20
 8001ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	08012ce8 	.word	0x08012ce8

08001ad0 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001ad0:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f010 fb03 	bl	80120e0 <UTIL_LPM_SetStopMode>
}
 8001ada:	bd08      	pop	{r3, pc}

08001adc <UTIL_ADV_TRACE_PostSendHook>:
{
 8001adc:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f010 fafd 	bl	80120e0 <UTIL_LPM_SetStopMode>
}
 8001ae6:	bd08      	pop	{r3, pc}

08001ae8 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001ae8:	2000      	movs	r0, #0
 8001aea:	4770      	bx	lr

08001aec <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001aec:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <HAL_GetTick+0x14>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b90b      	cbnz	r3, 8001af8 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001af4:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001af6:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001af8:	f000 f8c8 	bl	8001c8c <TIMER_IF_GetTimerValue>
 8001afc:	e7fb      	b.n	8001af6 <HAL_GetTick+0xa>
 8001afe:	bf00      	nop
 8001b00:	200001dc 	.word	0x200001dc

08001b04 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001b04:	b500      	push	{lr}
 8001b06:	b083      	sub	sp, #12
 8001b08:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001b0a:	9801      	ldr	r0, [sp, #4]
 8001b0c:	f000 f9a4 	bl	8001e58 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001b10:	b003      	add	sp, #12
 8001b12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001b18 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b1c:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001b1e:	f001 fa01 	bl	8002f24 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001b22:	f001 fa07 	bl	8002f34 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001b26:	f001 fa0d 	bl	8002f44 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001b2a:	2400      	movs	r4, #0
 8001b2c:	9405      	str	r4, [sp, #20]
 8001b2e:	9406      	str	r4, [sp, #24]
 8001b30:	9407      	str	r4, [sp, #28]
 8001b32:	9408      	str	r4, [sp, #32]
 8001b34:	9409      	str	r4, [sp, #36]	; 0x24

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	9308      	str	r3, [sp, #32]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b44:	f042 0202 	orr.w	r2, r2, #2
 8001b48:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4c:	f002 0202 	and.w	r2, r2, #2
 8001b50:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8001b52:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b56:	f042 0202 	orr.w	r2, r2, #2
 8001b5a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b5e:	f002 0202 	and.w	r2, r2, #2
 8001b62:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001b64:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b68:	f042 0202 	orr.w	r2, r2, #2
 8001b6c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b70:	f002 0202 	and.w	r2, r2, #2
 8001b74:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001b76:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b7a:	f042 0202 	orr.w	r2, r2, #2
 8001b7e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b88:	9b01      	ldr	r3, [sp, #4]
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();
  PROBE_LINE3_CLK_ENABLE();
  PROBE_LINE4_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001b8a:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8001b8e:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001b92:	4d19      	ldr	r5, [pc, #100]	; (8001bf8 <DBG_Init+0xe0>)
 8001b94:	a905      	add	r1, sp, #20
 8001b96:	4628      	mov	r0, r5
 8001b98:	f002 fb32 	bl	8004200 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001b9c:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 8001ba0:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001ba4:	a905      	add	r1, sp, #20
 8001ba6:	4628      	mov	r0, r5
 8001ba8:	f002 fb2a 	bl	8004200 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001bac:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001bb0:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001bb2:	a905      	add	r1, sp, #20
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	f002 fb23 	bl	8004200 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001bba:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8001bbe:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001bc0:	a905      	add	r1, sp, #20
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f002 fb1c 	bl	8004200 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001bc8:	4622      	mov	r2, r4
 8001bca:	4649      	mov	r1, r9
 8001bcc:	4628      	mov	r0, r5
 8001bce:	f002 fc6e 	bl	80044ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	4628      	mov	r0, r5
 8001bd8:	f002 fc69 	bl	80044ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001bdc:	4622      	mov	r2, r4
 8001bde:	4639      	mov	r1, r7
 8001be0:	4628      	mov	r0, r5
 8001be2:	f002 fc64 	bl	80044ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001be6:	4622      	mov	r2, r4
 8001be8:	4631      	mov	r1, r6
 8001bea:	4628      	mov	r0, r5
 8001bec:	f002 fc5f 	bl	80044ae <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001bf0:	b00b      	add	sp, #44	; 0x2c
 8001bf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bf6:	bf00      	nop
 8001bf8:	48000400 	.word	0x48000400

08001bfc <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001bfc:	b510      	push	{r4, lr}
 8001bfe:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001c00:	f7ff fb02 	bl	8001208 <SYS_GetTemperatureLevel>
 8001c04:	f340 200f 	sbfx	r0, r0, #8, #16
 8001c08:	f7fe fe34 	bl	8000874 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <EnvSensors_Read+0x28>)
 8001c0e:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001c10:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <EnvSensors_Read+0x2c>)
 8001c14:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <EnvSensors_Read+0x30>)
 8001c18:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <EnvSensors_Read+0x34>)
 8001c1c:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001c1e:	2000      	movs	r0, #0
 8001c20:	bd10      	pop	{r4, pc}
 8001c22:	bf00      	nop
 8001c24:	42480000 	.word	0x42480000
 8001c28:	447a0000 	.word	0x447a0000
 8001c2c:	003e090d 	.word	0x003e090d
 8001c30:	000503ab 	.word	0x000503ab

08001c34 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001c34:	2000      	movs	r0, #0
 8001c36:	4770      	bx	lr

08001c38 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <TIMER_IF_SetTimerContext+0x1c>)
 8001c3a:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c3c:	e001      	b.n	8001c42 <TIMER_IF_SetTimerContext+0xa>
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <TIMER_IF_SetTimerContext+0x1c>)
 8001c40:	6898      	ldr	r0, [r3, #8]
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <TIMER_IF_SetTimerContext+0x1c>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	4283      	cmp	r3, r0
 8001c48:	d1f9      	bne.n	8001c3e <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001c4a:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001c4c:	4b02      	ldr	r3, [pc, #8]	; (8001c58 <TIMER_IF_SetTimerContext+0x20>)
 8001c4e:	6018      	str	r0, [r3, #0]
}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40002800 	.word	0x40002800
 8001c58:	200001e0 	.word	0x200001e0

08001c5c <TIMER_IF_GetTimerContext>:
}
 8001c5c:	4b01      	ldr	r3, [pc, #4]	; (8001c64 <TIMER_IF_GetTimerContext+0x8>)
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	200001e0 	.word	0x200001e0

08001c68 <TIMER_IF_GetTimerElapsedTime>:
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001c6a:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c6c:	e001      	b.n	8001c72 <TIMER_IF_GetTimerElapsedTime+0xa>
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001c70:	6898      	ldr	r0, [r3, #8]
 8001c72:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	4283      	cmp	r3, r0
 8001c78:	d1f9      	bne.n	8001c6e <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001c7a:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001c7c:	4b02      	ldr	r3, [pc, #8]	; (8001c88 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	1ac0      	subs	r0, r0, r3
 8001c82:	4770      	bx	lr
 8001c84:	40002800 	.word	0x40002800
 8001c88:	200001e0 	.word	0x200001e0

08001c8c <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <TIMER_IF_GetTimerValue+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b153      	cbz	r3, 8001ca8 <TIMER_IF_GetTimerValue+0x1c>
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <TIMER_IF_GetTimerValue+0x24>)
 8001c94:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001c96:	e001      	b.n	8001c9c <TIMER_IF_GetTimerValue+0x10>
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <TIMER_IF_GetTimerValue+0x24>)
 8001c9a:	6898      	ldr	r0, [r3, #8]
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <TIMER_IF_GetTimerValue+0x24>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4283      	cmp	r3, r0
 8001ca2:	d1f9      	bne.n	8001c98 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001ca4:	43c0      	mvns	r0, r0
 8001ca6:	4770      	bx	lr
  uint32_t ret = 0;
 8001ca8:	2000      	movs	r0, #0
}
 8001caa:	4770      	bx	lr
 8001cac:	200001dd 	.word	0x200001dd
 8001cb0:	40002800 	.word	0x40002800

08001cb4 <TIMER_IF_GetMinimumTimeout>:
}
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	4770      	bx	lr

08001cb8 <TIMER_IF_Convert_ms2Tick>:
{
 8001cb8:	b508      	push	{r3, lr}
 8001cba:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001cbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	0280      	lsls	r0, r0, #10
 8001cc4:	0d89      	lsrs	r1, r1, #22
 8001cc6:	f7ff f835 	bl	8000d34 <__aeabi_uldivmod>
}
 8001cca:	bd08      	pop	{r3, pc}

08001ccc <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001ccc:	0ec2      	lsrs	r2, r0, #27
 8001cce:	0143      	lsls	r3, r0, #5
 8001cd0:	1a1b      	subs	r3, r3, r0
 8001cd2:	f162 0200 	sbc.w	r2, r2, #0
 8001cd6:	0092      	lsls	r2, r2, #2
 8001cd8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	181b      	adds	r3, r3, r0
 8001ce0:	f142 0000 	adc.w	r0, r2, #0
 8001ce4:	00c0      	lsls	r0, r0, #3
 8001ce6:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001cea:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001cee:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001cf2:	4770      	bx	lr

08001cf4 <TIMER_IF_StopTimer>:
{
 8001cf4:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <TIMER_IF_StopTimer+0x20>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001cfc:	4c06      	ldr	r4, [pc, #24]	; (8001d18 <TIMER_IF_StopTimer+0x24>)
 8001cfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d02:	4620      	mov	r0, r4
 8001d04:	f003 fb64 	bl	80053d0 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001d0e:	2000      	movs	r0, #0
 8001d10:	bd10      	pop	{r4, pc}
 8001d12:	bf00      	nop
 8001d14:	40002800 	.word	0x40002800
 8001d18:	20000198 	.word	0x20000198

08001d1c <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001d1c:	b508      	push	{r3, lr}
 8001d1e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001d20:	2102      	movs	r1, #2
 8001d22:	4802      	ldr	r0, [pc, #8]	; (8001d2c <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001d24:	f003 fd97 	bl	8005856 <HAL_RTCEx_BKUPWrite>
}
 8001d28:	bd08      	pop	{r3, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000198 	.word	0x20000198

08001d30 <TIMER_IF_Init>:
{
 8001d30:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <TIMER_IF_Init+0x40>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b10b      	cbz	r3, 8001d3c <TIMER_IF_Init+0xc>
}
 8001d38:	2000      	movs	r0, #0
 8001d3a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d3c:	4c0d      	ldr	r4, [pc, #52]	; (8001d74 <TIMER_IF_Init+0x44>)
 8001d3e:	f04f 35ff 	mov.w	r5, #4294967295
 8001d42:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001d44:	f7ff fcd2 	bl	80016ec <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001d48:	f7ff ffd4 	bl	8001cf4 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d50:	4620      	mov	r0, r4
 8001d52:	f003 fb3d 	bl	80053d0 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d56:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f003 fd1b 	bl	8005794 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff ffdc 	bl	8001d1c <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001d64:	f7ff ff68 	bl	8001c38 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001d68:	4b01      	ldr	r3, [pc, #4]	; (8001d70 <TIMER_IF_Init+0x40>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	e7e3      	b.n	8001d38 <TIMER_IF_Init+0x8>
 8001d70:	200001dd 	.word	0x200001dd
 8001d74:	20000198 	.word	0x20000198

08001d78 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001d78:	b508      	push	{r3, lr}
 8001d7a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4802      	ldr	r0, [pc, #8]	; (8001d88 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001d80:	f003 fd69 	bl	8005856 <HAL_RTCEx_BKUPWrite>
}
 8001d84:	bd08      	pop	{r3, pc}
 8001d86:	bf00      	nop
 8001d88:	20000198 	.word	0x20000198

08001d8c <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001d8c:	b508      	push	{r3, lr}
 8001d8e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001d90:	2101      	movs	r1, #1
 8001d92:	4802      	ldr	r0, [pc, #8]	; (8001d9c <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001d94:	f003 fd5f 	bl	8005856 <HAL_RTCEx_BKUPWrite>
}
 8001d98:	bd08      	pop	{r3, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000198 	.word	0x20000198

08001da0 <TIMER_IF_StartTimer>:
{
 8001da0:	b510      	push	{r4, lr}
 8001da2:	b08c      	sub	sp, #48	; 0x30
 8001da4:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001da6:	222c      	movs	r2, #44	; 0x2c
 8001da8:	2100      	movs	r1, #0
 8001daa:	a801      	add	r0, sp, #4
 8001dac:	f010 feaa 	bl	8012b04 <memset>
  TIMER_IF_StopTimer();
 8001db0:	f7ff ffa0 	bl	8001cf4 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <TIMER_IF_StartTimer+0x48>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001dbe:	43e4      	mvns	r4, r4
 8001dc0:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001dc2:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001dc4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001dc8:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001dca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dce:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	a901      	add	r1, sp, #4
 8001dd4:	4805      	ldr	r0, [pc, #20]	; (8001dec <TIMER_IF_StartTimer+0x4c>)
 8001dd6:	f003 fc21 	bl	800561c <HAL_RTC_SetAlarm_IT>
 8001dda:	b910      	cbnz	r0, 8001de2 <TIMER_IF_StartTimer+0x42>
}
 8001ddc:	2000      	movs	r0, #0
 8001dde:	b00c      	add	sp, #48	; 0x30
 8001de0:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001de2:	f7ff fc2d 	bl	8001640 <Error_Handler>
 8001de6:	e7f9      	b.n	8001ddc <TIMER_IF_StartTimer+0x3c>
 8001de8:	200001e0 	.word	0x200001e0
 8001dec:	20000198 	.word	0x20000198

08001df0 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001df0:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001df2:	2102      	movs	r1, #2
 8001df4:	4801      	ldr	r0, [pc, #4]	; (8001dfc <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001df6:	f003 fd35 	bl	8005864 <HAL_RTCEx_BKUPRead>
}
 8001dfa:	bd08      	pop	{r3, pc}
 8001dfc:	20000198 	.word	0x20000198

08001e00 <TIMER_IF_GetTime>:
{
 8001e00:	b538      	push	{r3, r4, r5, lr}
 8001e02:	4605      	mov	r5, r0
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <TIMER_IF_GetTime+0x34>)
 8001e06:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001e08:	e001      	b.n	8001e0e <TIMER_IF_GetTime+0xe>
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <TIMER_IF_GetTime+0x34>)
 8001e0c:	689c      	ldr	r4, [r3, #8]
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <TIMER_IF_GetTime+0x34>)
 8001e10:	6892      	ldr	r2, [r2, #8]
 8001e12:	42a2      	cmp	r2, r4
 8001e14:	d1f9      	bne.n	8001e0a <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001e16:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001e18:	f7ff ffea 	bl	8001df0 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001e1c:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001e1e:	0aa4      	lsrs	r4, r4, #10
 8001e20:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001e24:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001e28:	f7ff ff50 	bl	8001ccc <TIMER_IF_Convert_Tick2ms>
 8001e2c:	8028      	strh	r0, [r5, #0]
}
 8001e2e:	4620      	mov	r0, r4
 8001e30:	bd38      	pop	{r3, r4, r5, pc}
 8001e32:	bf00      	nop
 8001e34:	40002800 	.word	0x40002800

08001e38 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001e38:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4801      	ldr	r0, [pc, #4]	; (8001e44 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001e3e:	f003 fd11 	bl	8005864 <HAL_RTCEx_BKUPRead>
}
 8001e42:	bd08      	pop	{r3, pc}
 8001e44:	20000198 	.word	0x20000198

08001e48 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001e48:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	4801      	ldr	r0, [pc, #4]	; (8001e54 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001e4e:	f003 fd09 	bl	8005864 <HAL_RTCEx_BKUPRead>
}
 8001e52:	bd08      	pop	{r3, pc}
 8001e54:	20000198 	.word	0x20000198

08001e58 <TIMER_IF_DelayMs>:
{
 8001e58:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001e5a:	f7ff ff2d 	bl	8001cb8 <TIMER_IF_Convert_ms2Tick>
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <TIMER_IF_DelayMs+0x3c>)
 8001e60:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001e62:	e001      	b.n	8001e68 <TIMER_IF_DelayMs+0x10>
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <TIMER_IF_DelayMs+0x3c>)
 8001e66:	6899      	ldr	r1, [r3, #8]
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <TIMER_IF_DelayMs+0x3c>)
 8001e6a:	6892      	ldr	r2, [r2, #8]
 8001e6c:	428a      	cmp	r2, r1
 8001e6e:	d1f9      	bne.n	8001e64 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001e70:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001e72:	e00a      	b.n	8001e8a <TIMER_IF_DelayMs+0x32>
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <TIMER_IF_DelayMs+0x3c>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <TIMER_IF_DelayMs+0x3c>)
 8001e7a:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d1f9      	bne.n	8001e74 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001e80:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001e82:	1a5b      	subs	r3, r3, r1
 8001e84:	4283      	cmp	r3, r0
 8001e86:	d203      	bcs.n	8001e90 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001e88:	bf00      	nop
 8001e8a:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <TIMER_IF_DelayMs+0x3c>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001e8e:	e7f3      	b.n	8001e78 <TIMER_IF_DelayMs+0x20>
}
 8001e90:	bd08      	pop	{r3, pc}
 8001e92:	bf00      	nop
 8001e94:	40002800 	.word	0x40002800

08001e98 <HAL_RTC_AlarmAEventCallback>:
{
 8001e98:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001e9a:	f010 fc69 	bl	8012770 <UTIL_TIMER_IRQ_Handler>
}
 8001e9e:	bd08      	pop	{r3, pc}

08001ea0 <HAL_RTCEx_SSRUEventCallback>:
{
 8001ea0:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001ea2:	f7ff ffa5 	bl	8001df0 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001ea6:	3001      	adds	r0, #1
 8001ea8:	f7ff ff38 	bl	8001d1c <TIMER_IF_BkUp_Write_MSBticks>
}
 8001eac:	bd08      	pop	{r3, pc}
	...

08001eb0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001eb0:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001eb2:	4817      	ldr	r0, [pc, #92]	; (8001f10 <MX_USART2_UART_Init+0x60>)
 8001eb4:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <MX_USART2_UART_Init+0x64>)
 8001eb6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001eb8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ebc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ec4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eca:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ecc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ece:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ed0:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ed4:	f004 ffc5 	bl	8006e62 <HAL_UART_Init>
 8001ed8:	b970      	cbnz	r0, 8001ef8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eda:	2100      	movs	r1, #0
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <MX_USART2_UART_Init+0x60>)
 8001ede:	f005 f982 	bl	80071e6 <HAL_UARTEx_SetTxFifoThreshold>
 8001ee2:	b960      	cbnz	r0, 8001efe <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	480a      	ldr	r0, [pc, #40]	; (8001f10 <MX_USART2_UART_Init+0x60>)
 8001ee8:	f005 f9a2 	bl	8007230 <HAL_UARTEx_SetRxFifoThreshold>
 8001eec:	b950      	cbnz	r0, 8001f04 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001eee:	4808      	ldr	r0, [pc, #32]	; (8001f10 <MX_USART2_UART_Init+0x60>)
 8001ef0:	f005 f955 	bl	800719e <HAL_UARTEx_EnableFifoMode>
 8001ef4:	b948      	cbnz	r0, 8001f0a <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ef6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001ef8:	f7ff fba2 	bl	8001640 <Error_Handler>
 8001efc:	e7ed      	b.n	8001eda <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001efe:	f7ff fb9f 	bl	8001640 <Error_Handler>
 8001f02:	e7ef      	b.n	8001ee4 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001f04:	f7ff fb9c 	bl	8001640 <Error_Handler>
 8001f08:	e7f1      	b.n	8001eee <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001f0a:	f7ff fb99 	bl	8001640 <Error_Handler>
}
 8001f0e:	e7f2      	b.n	8001ef6 <MX_USART2_UART_Init+0x46>
 8001f10:	20000244 	.word	0x20000244
 8001f14:	40004400 	.word	0x40004400

08001f18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f18:	b530      	push	{r4, r5, lr}
 8001f1a:	b097      	sub	sp, #92	; 0x5c
 8001f1c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	2100      	movs	r1, #0
 8001f20:	9111      	str	r1, [sp, #68]	; 0x44
 8001f22:	9112      	str	r1, [sp, #72]	; 0x48
 8001f24:	9113      	str	r1, [sp, #76]	; 0x4c
 8001f26:	9114      	str	r1, [sp, #80]	; 0x50
 8001f28:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f2a:	2238      	movs	r2, #56	; 0x38
 8001f2c:	a803      	add	r0, sp, #12
 8001f2e:	f010 fde9 	bl	8012b04 <memset>
  if(uartHandle->Instance==USART2)
 8001f32:	6822      	ldr	r2, [r4, #0]
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_UART_MspInit+0xd4>)
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f3a:	b017      	add	sp, #92	; 0x5c
 8001f3c:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001f42:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <HAL_UART_MspInit+0xd8>)
 8001f44:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f46:	a803      	add	r0, sp, #12
 8001f48:	f003 f8f8 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	d144      	bne.n	8001fda <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f56:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f5a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f5e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001f62:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001f64:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001f76:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001f78:	230c      	movs	r3, #12
 8001f7a:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2500      	movs	r5, #0
 8001f82:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f88:	2307      	movs	r3, #7
 8001f8a:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	a911      	add	r1, sp, #68	; 0x44
 8001f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f92:	f002 f935 	bl	8004200 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001f96:	4817      	ldr	r0, [pc, #92]	; (8001ff4 <HAL_UART_MspInit+0xdc>)
 8001f98:	4b17      	ldr	r3, [pc, #92]	; (8001ff8 <HAL_UART_MspInit+0xe0>)
 8001f9a:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001f9c:	2314      	movs	r3, #20
 8001f9e:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa4:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001faa:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fac:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001fae:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb0:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001fb2:	f001 fd8d 	bl	8003ad0 <HAL_DMA_Init>
 8001fb6:	b998      	cbnz	r0, 8001fe0 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001fb8:	2110      	movs	r1, #16
 8001fba:	480e      	ldr	r0, [pc, #56]	; (8001ff4 <HAL_UART_MspInit+0xdc>)
 8001fbc:	f001 ff8a 	bl	8003ed4 <HAL_DMA_ConfigChannelAttributes>
 8001fc0:	b988      	cbnz	r0, 8001fe6 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_UART_MspInit+0xdc>)
 8001fc4:	67a3      	str	r3, [r4, #120]	; 0x78
 8001fc6:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2102      	movs	r1, #2
 8001fcc:	2025      	movs	r0, #37	; 0x25
 8001fce:	f001 fcb7 	bl	8003940 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fd2:	2025      	movs	r0, #37	; 0x25
 8001fd4:	f001 fcec 	bl	80039b0 <HAL_NVIC_EnableIRQ>
}
 8001fd8:	e7af      	b.n	8001f3a <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001fda:	f7ff fb31 	bl	8001640 <Error_Handler>
 8001fde:	e7b7      	b.n	8001f50 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001fe0:	f7ff fb2e 	bl	8001640 <Error_Handler>
 8001fe4:	e7e8      	b.n	8001fb8 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001fe6:	f7ff fb2b 	bl	8001640 <Error_Handler>
 8001fea:	e7ea      	b.n	8001fc2 <HAL_UART_MspInit+0xaa>
 8001fec:	40004400 	.word	0x40004400
 8001ff0:	000c0004 	.word	0x000c0004
 8001ff4:	200001e4 	.word	0x200001e4
 8001ff8:	40020058 	.word	0x40020058

08001ffc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001ffc:	6802      	ldr	r2, [r0, #0]
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_UART_MspDeInit+0x34>)
 8002000:	429a      	cmp	r2, r3
 8002002:	d000      	beq.n	8002006 <HAL_UART_MspDeInit+0xa>
 8002004:	4770      	bx	lr
{
 8002006:	b510      	push	{r4, lr}
 8002008:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800200a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800200e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002010:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002014:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8002016:	210c      	movs	r1, #12
 8002018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201c:	f002 f9c2 	bl	80043a4 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002020:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002022:	f001 fdc7 	bl	8003bb4 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002026:	2025      	movs	r0, #37	; 0x25
 8002028:	f001 fcd0 	bl	80039cc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800202c:	bd10      	pop	{r4, pc}
 800202e:	bf00      	nop
 8002030:	40004400 	.word	0x40004400

08002034 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002034:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <vcom_Init+0x20>)
 8002038:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 800203a:	f7ff f93b 	bl	80012b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800203e:	f7ff ff37 	bl	8001eb0 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002042:	4a05      	ldr	r2, [pc, #20]	; (8002058 <vcom_Init+0x24>)
 8002044:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002048:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800204c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002050:	2000      	movs	r0, #0
 8002052:	bd08      	pop	{r3, pc}
 8002054:	200002d8 	.word	0x200002d8
 8002058:	58000800 	.word	0x58000800

0800205c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800205c:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800205e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002064:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800206a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800206c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002072:	4804      	ldr	r0, [pc, #16]	; (8002084 <vcom_DeInit+0x28>)
 8002074:	f7ff ffc2 	bl	8001ffc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002078:	200f      	movs	r0, #15
 800207a:	f001 fca7 	bl	80039cc <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800207e:	2000      	movs	r0, #0
 8002080:	bd08      	pop	{r3, pc}
 8002082:	bf00      	nop
 8002084:	20000244 	.word	0x20000244

08002088 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002088:	b508      	push	{r3, lr}
 800208a:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 800208c:	4601      	mov	r1, r0
 800208e:	4802      	ldr	r0, [pc, #8]	; (8002098 <vcom_Trace_DMA+0x10>)
 8002090:	f003 ffb4 	bl	8005ffc <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002094:	2000      	movs	r0, #0
 8002096:	bd08      	pop	{r3, pc}
 8002098:	20000244 	.word	0x20000244

0800209c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800209c:	b510      	push	{r4, lr}
 800209e:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <vcom_ReceiveInit+0x50>)
 80020a2:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80020a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020a8:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80020aa:	ab02      	add	r3, sp, #8
 80020ac:	e913 0006 	ldmdb	r3, {r1, r2}
 80020b0:	480f      	ldr	r0, [pc, #60]	; (80020f0 <vcom_ReceiveInit+0x54>)
 80020b2:	f005 f81c 	bl	80070ee <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <vcom_ReceiveInit+0x54>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69da      	ldr	r2, [r3, #28]
 80020bc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80020c0:	d1f9      	bne.n	80020b6 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80020c8:	d0fb      	beq.n	80020c2 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80020d0:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80020d2:	4c07      	ldr	r4, [pc, #28]	; (80020f0 <vcom_ReceiveInit+0x54>)
 80020d4:	4620      	mov	r0, r4
 80020d6:	f005 f84b 	bl	8007170 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80020da:	2201      	movs	r2, #1
 80020dc:	4905      	ldr	r1, [pc, #20]	; (80020f4 <vcom_ReceiveInit+0x58>)
 80020de:	4620      	mov	r0, r4
 80020e0:	f004 ff96 	bl	8007010 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80020e4:	2000      	movs	r0, #0
 80020e6:	b002      	add	sp, #8
 80020e8:	bd10      	pop	{r4, pc}
 80020ea:	bf00      	nop
 80020ec:	200002d4 	.word	0x200002d4
 80020f0:	20000244 	.word	0x20000244
 80020f4:	200002dc 	.word	0x200002dc

080020f8 <vcom_Resume>:

void vcom_Resume(void)
{
 80020f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020fa:	4807      	ldr	r0, [pc, #28]	; (8002118 <vcom_Resume+0x20>)
 80020fc:	f004 feb1 	bl	8006e62 <HAL_UART_Init>
 8002100:	b920      	cbnz	r0, 800210c <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002102:	4806      	ldr	r0, [pc, #24]	; (800211c <vcom_Resume+0x24>)
 8002104:	f001 fce4 	bl	8003ad0 <HAL_DMA_Init>
 8002108:	b918      	cbnz	r0, 8002112 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800210a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800210c:	f7ff fa98 	bl	8001640 <Error_Handler>
 8002110:	e7f7      	b.n	8002102 <vcom_Resume+0xa>
    Error_Handler();
 8002112:	f7ff fa95 	bl	8001640 <Error_Handler>
}
 8002116:	e7f8      	b.n	800210a <vcom_Resume+0x12>
 8002118:	20000244 	.word	0x20000244
 800211c:	200001e4 	.word	0x200001e4

08002120 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002120:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002122:	6802      	ldr	r2, [r0, #0]
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <HAL_UART_TxCpltCallback+0x18>)
 8002126:	429a      	cmp	r2, r3
 8002128:	d000      	beq.n	800212c <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800212a:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <HAL_UART_TxCpltCallback+0x1c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2000      	movs	r0, #0
 8002132:	4798      	blx	r3
}
 8002134:	e7f9      	b.n	800212a <HAL_UART_TxCpltCallback+0xa>
 8002136:	bf00      	nop
 8002138:	40004400 	.word	0x40004400
 800213c:	200002d8 	.word	0x200002d8

08002140 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002140:	6802      	ldr	r2, [r0, #0]
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_UART_RxCpltCallback+0x2c>)
 8002144:	429a      	cmp	r2, r3
 8002146:	d000      	beq.n	800214a <HAL_UART_RxCpltCallback+0xa>
 8002148:	4770      	bx	lr
{
 800214a:	b510      	push	{r4, lr}
 800214c:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_UART_RxCpltCallback+0x30>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	b12b      	cbz	r3, 8002160 <HAL_UART_RxCpltCallback+0x20>
 8002154:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8002158:	b912      	cbnz	r2, 8002160 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 800215a:	2101      	movs	r1, #1
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <HAL_UART_RxCpltCallback+0x34>)
 800215e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002160:	2201      	movs	r2, #1
 8002162:	4904      	ldr	r1, [pc, #16]	; (8002174 <HAL_UART_RxCpltCallback+0x34>)
 8002164:	4620      	mov	r0, r4
 8002166:	f004 ff53 	bl	8007010 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800216a:	bd10      	pop	{r4, pc}
 800216c:	40004400 	.word	0x40004400
 8002170:	200002d4 	.word	0x200002d4
 8002174:	200002dc 	.word	0x200002dc

08002178 <DWT_Delay_Init>:
#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <DWT_Delay_Init+0x44>)
 800217a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800217e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002182:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8002186:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800218a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800218e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002192:	f5a3 435d 	sub.w	r3, r3, #56576	; 0xdd00
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80021a6:	2200      	movs	r2, #0
 80021a8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80021aa:	bf00      	nop
     __ASM volatile ("NOP");
 80021ac:	bf00      	nop
  __ASM volatile ("NOP");
 80021ae:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	b10b      	cbz	r3, 80021b8 <DWT_Delay_Init+0x40>
     {
       return 0; /*clock cycle counter started*/
 80021b4:	4610      	mov	r0, r2
 80021b6:	4770      	bx	lr
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80021b8:	2001      	movs	r0, #1
  }
}
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <Set_Pin_Output>:
  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
}

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c0:	b500      	push	{lr}
 80021c2:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	2300      	movs	r3, #0
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	9303      	str	r3, [sp, #12]
 80021cc:	9304      	str	r3, [sp, #16]
 80021ce:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80021d0:	9101      	str	r1, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80021d6:	a901      	add	r1, sp, #4
 80021d8:	f002 f812 	bl	8004200 <HAL_GPIO_Init>
}
 80021dc:	b007      	add	sp, #28
 80021de:	f85d fb04 	ldr.w	pc, [sp], #4

080021e2 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021e2:	b500      	push	{lr}
 80021e4:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e6:	2300      	movs	r3, #0
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	9302      	str	r3, [sp, #8]
 80021ec:	9303      	str	r3, [sp, #12]
 80021ee:	9304      	str	r3, [sp, #16]
 80021f0:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80021f2:	9101      	str	r1, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80021f4:	a901      	add	r1, sp, #4
 80021f6:	f002 f803 	bl	8004200 <HAL_GPIO_Init>
}
 80021fa:	b007      	add	sp, #28
 80021fc:	f85d fb04 	ldr.w	pc, [sp], #4

08002200 <DHT_Start>:


void DHT_Start (void)
{
 8002200:	b538      	push	{r3, r4, r5, lr}
	DWT_Delay_Init();
 8002202:	f7ff ffb9 	bl	8002178 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8002206:	4c1a      	ldr	r4, [pc, #104]	; (8002270 <DHT_Start+0x70>)
 8002208:	2108      	movs	r1, #8
 800220a:	4620      	mov	r0, r4
 800220c:	f7ff ffd8 	bl	80021c0 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8002210:	2200      	movs	r2, #0
 8002212:	2108      	movs	r1, #8
 8002214:	4620      	mov	r0, r4
 8002216:	f002 f94a 	bl	80044ae <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 800221a:	f244 6450 	movw	r4, #18000	; 0x4650
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <DHT_Start+0x74>)
 8002220:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002222:	f002 faeb 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <DHT_Start+0x78>)
 8002228:	fba3 2300 	umull	r2, r3, r3, r0
 800222c:	0c9b      	lsrs	r3, r3, #18
 800222e:	fb03 f404 	mul.w	r4, r3, r4
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <DHT_Start+0x74>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	1b5b      	subs	r3, r3, r5
 8002238:	42a3      	cmp	r3, r4
 800223a:	d3fa      	bcc.n	8002232 <DHT_Start+0x32>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800223c:	2201      	movs	r2, #1
 800223e:	2108      	movs	r1, #8
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <DHT_Start+0x70>)
 8002242:	f002 f934 	bl	80044ae <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8002246:	2414      	movs	r4, #20
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <DHT_Start+0x74>)
 800224a:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800224c:	f002 fad6 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <DHT_Start+0x78>)
 8002252:	fba3 2300 	umull	r2, r3, r3, r0
 8002256:	0c9b      	lsrs	r3, r3, #18
 8002258:	fb03 f404 	mul.w	r4, r3, r4
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <DHT_Start+0x74>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	1b5b      	subs	r3, r3, r5
 8002262:	42a3      	cmp	r3, r4
 8002264:	d3fa      	bcc.n	800225c <DHT_Start+0x5c>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8002266:	2108      	movs	r1, #8
 8002268:	4801      	ldr	r0, [pc, #4]	; (8002270 <DHT_Start+0x70>)
 800226a:	f7ff ffba 	bl	80021e2 <Set_Pin_Input>
}
 800226e:	bd38      	pop	{r3, r4, r5, pc}
 8002270:	48000400 	.word	0x48000400
 8002274:	e0001000 	.word	0xe0001000
 8002278:	431bde83 	.word	0x431bde83

0800227c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800227c:	b538      	push	{r3, r4, r5, lr}
	uint8_t Response = 0;
	delay (40);
 800227e:	2428      	movs	r4, #40	; 0x28
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002280:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <DHT_Check_Response+0x70>)
 8002282:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002284:	f002 faba 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <DHT_Check_Response+0x74>)
 800228a:	fba3 2300 	umull	r2, r3, r3, r0
 800228e:	0c9b      	lsrs	r3, r3, #18
 8002290:	fb03 f404 	mul.w	r4, r3, r4
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002294:	4b15      	ldr	r3, [pc, #84]	; (80022ec <DHT_Check_Response+0x70>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	1b5b      	subs	r3, r3, r5
 800229a:	42a3      	cmp	r3, r4
 800229c:	d3fa      	bcc.n	8002294 <DHT_Check_Response+0x18>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800229e:	2108      	movs	r1, #8
 80022a0:	4814      	ldr	r0, [pc, #80]	; (80022f4 <DHT_Check_Response+0x78>)
 80022a2:	f002 f8fd 	bl	80044a0 <HAL_GPIO_ReadPin>
 80022a6:	b140      	cbz	r0, 80022ba <DHT_Check_Response+0x3e>
	uint8_t Response = 0;
 80022a8:	2400      	movs	r4, #0
	{
		delay (80);
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
		else Response = -1;
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80022aa:	2108      	movs	r1, #8
 80022ac:	4811      	ldr	r0, [pc, #68]	; (80022f4 <DHT_Check_Response+0x78>)
 80022ae:	f002 f8f7 	bl	80044a0 <HAL_GPIO_ReadPin>
 80022b2:	2800      	cmp	r0, #0
 80022b4:	d1f9      	bne.n	80022aa <DHT_Check_Response+0x2e>

	return Response;
}
 80022b6:	4620      	mov	r0, r4
 80022b8:	bd38      	pop	{r3, r4, r5, pc}
		delay (80);
 80022ba:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <DHT_Check_Response+0x70>)
 80022be:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80022c0:	f002 fa9c 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <DHT_Check_Response+0x74>)
 80022c6:	fba3 2300 	umull	r2, r3, r3, r0
 80022ca:	0c9b      	lsrs	r3, r3, #18
 80022cc:	fb03 f404 	mul.w	r4, r3, r4
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <DHT_Check_Response+0x70>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	1b5b      	subs	r3, r3, r5
 80022d6:	42a3      	cmp	r3, r4
 80022d8:	d3fa      	bcc.n	80022d0 <DHT_Check_Response+0x54>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 80022da:	2108      	movs	r1, #8
 80022dc:	4805      	ldr	r0, [pc, #20]	; (80022f4 <DHT_Check_Response+0x78>)
 80022de:	f002 f8df 	bl	80044a0 <HAL_GPIO_ReadPin>
 80022e2:	b108      	cbz	r0, 80022e8 <DHT_Check_Response+0x6c>
 80022e4:	2401      	movs	r4, #1
 80022e6:	e7e0      	b.n	80022aa <DHT_Check_Response+0x2e>
		else Response = -1;
 80022e8:	24ff      	movs	r4, #255	; 0xff
 80022ea:	e7de      	b.n	80022aa <DHT_Check_Response+0x2e>
 80022ec:	e0001000 	.word	0xe0001000
 80022f0:	431bde83 	.word	0x431bde83
 80022f4:	48000400 	.word	0x48000400

080022f8 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80022f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fa:	2600      	movs	r6, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80022fc:	4635      	mov	r5, r6
 80022fe:	e00d      	b.n	800231c <DHT_Read+0x24>
		delay (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
		{
			i&= ~(1<<(7-j));   // write 0
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8002300:	f1c5 0207 	rsb	r2, r5, #7
 8002304:	2301      	movs	r3, #1
 8002306:	4093      	lsls	r3, r2
 8002308:	431e      	orrs	r6, r3
 800230a:	b2f6      	uxtb	r6, r6
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 800230c:	2108      	movs	r1, #8
 800230e:	4817      	ldr	r0, [pc, #92]	; (800236c <DHT_Read+0x74>)
 8002310:	f002 f8c6 	bl	80044a0 <HAL_GPIO_ReadPin>
 8002314:	2800      	cmp	r0, #0
 8002316:	d1f9      	bne.n	800230c <DHT_Read+0x14>
	for (j=0;j<8;j++)
 8002318:	3501      	adds	r5, #1
 800231a:	b2ed      	uxtb	r5, r5
 800231c:	2d07      	cmp	r5, #7
 800231e:	d822      	bhi.n	8002366 <DHT_Read+0x6e>
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8002320:	2108      	movs	r1, #8
 8002322:	4812      	ldr	r0, [pc, #72]	; (800236c <DHT_Read+0x74>)
 8002324:	f002 f8bc 	bl	80044a0 <HAL_GPIO_ReadPin>
 8002328:	2800      	cmp	r0, #0
 800232a:	d0f9      	beq.n	8002320 <DHT_Read+0x28>
		delay (40);   // wait for 40 us
 800232c:	2428      	movs	r4, #40	; 0x28
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <DHT_Read+0x78>)
 8002330:	685f      	ldr	r7, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002332:	f002 fa63 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <DHT_Read+0x7c>)
 8002338:	fba3 2300 	umull	r2, r3, r3, r0
 800233c:	0c9b      	lsrs	r3, r3, #18
 800233e:	fb03 f404 	mul.w	r4, r3, r4
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <DHT_Read+0x78>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	1bdb      	subs	r3, r3, r7
 8002348:	42a3      	cmp	r3, r4
 800234a:	d3fa      	bcc.n	8002342 <DHT_Read+0x4a>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800234c:	2108      	movs	r1, #8
 800234e:	4807      	ldr	r0, [pc, #28]	; (800236c <DHT_Read+0x74>)
 8002350:	f002 f8a6 	bl	80044a0 <HAL_GPIO_ReadPin>
 8002354:	2800      	cmp	r0, #0
 8002356:	d1d3      	bne.n	8002300 <DHT_Read+0x8>
			i&= ~(1<<(7-j));   // write 0
 8002358:	f1c5 0207 	rsb	r2, r5, #7
 800235c:	2301      	movs	r3, #1
 800235e:	4093      	lsls	r3, r2
 8002360:	ea26 0603 	bic.w	r6, r6, r3
 8002364:	e7d2      	b.n	800230c <DHT_Read+0x14>
	}
	return i;
}
 8002366:	4630      	mov	r0, r6
 8002368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800236a:	bf00      	nop
 800236c:	48000400 	.word	0x48000400
 8002370:	e0001000 	.word	0xe0001000
 8002374:	431bde83 	.word	0x431bde83

08002378 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8002378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800237c:	4604      	mov	r4, r0
    DHT_Start ();
 800237e:	f7ff ff3f 	bl	8002200 <DHT_Start>
	Presence = DHT_Check_Response ();
 8002382:	f7ff ff7b 	bl	800227c <DHT_Check_Response>
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <DHT_GetData+0x6c>)
 8002388:	7018      	strb	r0, [r3, #0]
	Rh_byte1 = DHT_Read ();
 800238a:	f7ff ffb5 	bl	80022f8 <DHT_Read>
 800238e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80023e8 <DHT_GetData+0x70>
 8002392:	f888 0000 	strb.w	r0, [r8]
	Rh_byte2 = DHT_Read ();
 8002396:	f7ff ffaf 	bl	80022f8 <DHT_Read>
 800239a:	4f14      	ldr	r7, [pc, #80]	; (80023ec <DHT_GetData+0x74>)
 800239c:	7038      	strb	r0, [r7, #0]
	Temp_byte1 = DHT_Read ();
 800239e:	f7ff ffab 	bl	80022f8 <DHT_Read>
 80023a2:	4e13      	ldr	r6, [pc, #76]	; (80023f0 <DHT_GetData+0x78>)
 80023a4:	7030      	strb	r0, [r6, #0]
	Temp_byte2 = DHT_Read ();
 80023a6:	f7ff ffa7 	bl	80022f8 <DHT_Read>
 80023aa:	4d12      	ldr	r5, [pc, #72]	; (80023f4 <DHT_GetData+0x7c>)
 80023ac:	7028      	strb	r0, [r5, #0]
	SUM = DHT_Read();
 80023ae:	f7ff ffa3 	bl	80022f8 <DHT_Read>
 80023b2:	b282      	uxth	r2, r0
 80023b4:	4b10      	ldr	r3, [pc, #64]	; (80023f8 <DHT_GetData+0x80>)
 80023b6:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80023b8:	f898 3000 	ldrb.w	r3, [r8]
 80023bc:	7839      	ldrb	r1, [r7, #0]
 80023be:	440b      	add	r3, r1
 80023c0:	7830      	ldrb	r0, [r6, #0]
 80023c2:	4403      	add	r3, r0
 80023c4:	7829      	ldrb	r1, [r5, #0]
 80023c6:	440b      	add	r3, r1
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <DHT_GetData+0x58>
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80023cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			DHT_Data->Temperature = Temp_byte1;
 80023d0:	f7fe fa4c 	bl	800086c <__aeabi_ui2f>
 80023d4:	6020      	str	r0, [r4, #0]
			DHT_Data->Humidity = Rh_byte1;
 80023d6:	f898 0000 	ldrb.w	r0, [r8]
 80023da:	f7fe fa47 	bl	800086c <__aeabi_ui2f>
 80023de:	6060      	str	r0, [r4, #4]
}
 80023e0:	e7f4      	b.n	80023cc <DHT_GetData+0x54>
 80023e2:	bf00      	nop
 80023e4:	200002dd 	.word	0x200002dd
 80023e8:	200002de 	.word	0x200002de
 80023ec:	200002df 	.word	0x200002df
 80023f0:	200002e2 	.word	0x200002e2
 80023f4:	200002e3 	.word	0x200002e3
 80023f8:	200002e0 	.word	0x200002e0

080023fc <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80023fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80023fe:	f7ff faa1 	bl	8001944 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002402:	f000 fb91 	bl	8002b28 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002406:	bd08      	pop	{r3, pc}

08002408 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002408:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800240a:	f04f 30ff 	mov.w	r0, #4294967295
 800240e:	f00f feff 	bl	8012210 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002412:	bd08      	pop	{r3, pc}

08002414 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8002414:	4b01      	ldr	r3, [pc, #4]	; (800241c <OnTxFrameCtrlChanged+0x8>)
 8002416:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000058 	.word	0x20000058

08002420 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002420:	4b01      	ldr	r3, [pc, #4]	; (8002428 <OnPingSlotPeriodicityChanged+0x8>)
 8002422:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20000058 	.word	0x20000058

0800242c <OnBeaconStatusChange>:
  if (params != NULL)
 800242c:	2800      	cmp	r0, #0
 800242e:	d03f      	beq.n	80024b0 <OnBeaconStatusChange+0x84>
{
 8002430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002434:	b08c      	sub	sp, #48	; 0x30
 8002436:	4603      	mov	r3, r0
    switch (params->State)
 8002438:	7842      	ldrb	r2, [r0, #1]
 800243a:	2a02      	cmp	r2, #2
 800243c:	d00a      	beq.n	8002454 <OnBeaconStatusChange+0x28>
 800243e:	2a03      	cmp	r2, #3
 8002440:	d02f      	beq.n	80024a2 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <OnBeaconStatusChange+0x88>)
 8002444:	2200      	movs	r2, #0
 8002446:	4611      	mov	r1, r2
 8002448:	2002      	movs	r0, #2
 800244a:	f00f fd83 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 800244e:	b00c      	add	sp, #48	; 0x30
 8002450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002454:	7c02      	ldrb	r2, [r0, #16]
 8002456:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 800245a:	f990 0014 	ldrsb.w	r0, [r0, #20]
 800245e:	7d9c      	ldrb	r4, [r3, #22]
 8002460:	7ddd      	ldrb	r5, [r3, #23]
 8002462:	7e1e      	ldrb	r6, [r3, #24]
 8002464:	7e5f      	ldrb	r7, [r3, #25]
 8002466:	f893 c01a 	ldrb.w	ip, [r3, #26]
 800246a:	f893 e01b 	ldrb.w	lr, [r3, #27]
 800246e:	f893 801c 	ldrb.w	r8, [r3, #28]
 8002472:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8002476:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800247a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800247e:	9708      	str	r7, [sp, #32]
 8002480:	9607      	str	r6, [sp, #28]
 8002482:	9506      	str	r5, [sp, #24]
 8002484:	9405      	str	r4, [sp, #20]
 8002486:	685c      	ldr	r4, [r3, #4]
 8002488:	9404      	str	r4, [sp, #16]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	9303      	str	r3, [sp, #12]
 800248e:	9002      	str	r0, [sp, #8]
 8002490:	9101      	str	r1, [sp, #4]
 8002492:	9200      	str	r2, [sp, #0]
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <OnBeaconStatusChange+0x8c>)
 8002496:	2200      	movs	r2, #0
 8002498:	4611      	mov	r1, r2
 800249a:	2002      	movs	r0, #2
 800249c:	f00f fd5a 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80024a0:	e7d5      	b.n	800244e <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <OnBeaconStatusChange+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	4611      	mov	r1, r2
 80024a8:	2002      	movs	r0, #2
 80024aa:	f00f fd53 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 80024ae:	e7ce      	b.n	800244e <OnBeaconStatusChange+0x22>
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	08012d5c 	.word	0x08012d5c
 80024b8:	08012d74 	.word	0x08012d74
 80024bc:	08012de8 	.word	0x08012de8

080024c0 <OnClassChange>:
{
 80024c0:	b500      	push	{lr}
 80024c2:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <OnClassChange+0x1c>)
 80024c6:	5c1b      	ldrb	r3, [r3, r0]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <OnClassChange+0x20>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	4611      	mov	r1, r2
 80024d0:	2002      	movs	r0, #2
 80024d2:	f00f fd3f 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 80024d6:	b003      	add	sp, #12
 80024d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80024dc:	08012e24 	.word	0x08012e24
 80024e0:	08012e08 	.word	0x08012e08

080024e4 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80024e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80024e6:	2801      	cmp	r0, #1
 80024e8:	d006      	beq.n	80024f8 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <OnNvmDataChange+0x24>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	4611      	mov	r1, r2
 80024f0:	2002      	movs	r0, #2
 80024f2:	f00f fd2f 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80024f6:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <OnNvmDataChange+0x28>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	4611      	mov	r1, r2
 80024fe:	2002      	movs	r0, #2
 8002500:	f00f fd28 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 8002504:	e7f7      	b.n	80024f6 <OnNvmDataChange+0x12>
 8002506:	bf00      	nop
 8002508:	08012e3c 	.word	0x08012e3c
 800250c:	08012e28 	.word	0x08012e28

08002510 <OnMacProcessNotify>:
{
 8002510:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002512:	2100      	movs	r1, #0
 8002514:	2001      	movs	r0, #1
 8002516:	f00f fe47 	bl	80121a8 <UTIL_SEQ_SetTask>
}
 800251a:	bd08      	pop	{r3, pc}

0800251c <OnSystemReset>:
{
 800251c:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800251e:	f005 fc43 	bl	8007da8 <LmHandlerHalt>
 8002522:	b100      	cbz	r0, 8002526 <OnSystemReset+0xa>
}
 8002524:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002526:	f005 f85d 	bl	80075e4 <LmHandlerJoinStatus>
 800252a:	2801      	cmp	r0, #1
 800252c:	d1fa      	bne.n	8002524 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800252e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002532:	4905      	ldr	r1, [pc, #20]	; (8002548 <OnSystemReset+0x2c>)
 8002534:	68ca      	ldr	r2, [r1, #12]
 8002536:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <OnSystemReset+0x30>)
 800253c:	4313      	orrs	r3, r2
 800253e:	60cb      	str	r3, [r1, #12]
 8002540:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002544:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002546:	e7fd      	b.n	8002544 <OnSystemReset+0x28>
 8002548:	e000ed00 	.word	0xe000ed00
 800254c:	05fa0004 	.word	0x05fa0004

08002550 <OnTxPeriodicityChanged>:
{
 8002550:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <OnTxPeriodicityChanged+0x28>)
 8002554:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8002556:	b910      	cbnz	r0, 800255e <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002558:	f64e 2260 	movw	r2, #60000	; 0xea60
 800255c:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 800255e:	4c07      	ldr	r4, [pc, #28]	; (800257c <OnTxPeriodicityChanged+0x2c>)
 8002560:	4620      	mov	r0, r4
 8002562:	f010 f84b 	bl	80125fc <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <OnTxPeriodicityChanged+0x28>)
 8002568:	6819      	ldr	r1, [r3, #0]
 800256a:	4620      	mov	r0, r4
 800256c:	f010 f8e6 	bl	801273c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002570:	4620      	mov	r0, r4
 8002572:	f010 f89d 	bl	80126b0 <UTIL_TIMER_Start>
}
 8002576:	bd10      	pop	{r4, pc}
 8002578:	2000006c 	.word	0x2000006c
 800257c:	2000043c 	.word	0x2000043c

08002580 <OnTxData>:
  if ((params != NULL))
 8002580:	2800      	cmp	r0, #0
 8002582:	d042      	beq.n	800260a <OnTxData+0x8a>
{
 8002584:	b510      	push	{r4, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800258a:	7803      	ldrb	r3, [r0, #0]
 800258c:	b90b      	cbnz	r3, 8002592 <OnTxData+0x12>
}
 800258e:	b004      	add	sp, #16
 8002590:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002592:	2201      	movs	r2, #1
 8002594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002598:	481c      	ldr	r0, [pc, #112]	; (800260c <OnTxData+0x8c>)
 800259a:	f001 ff88 	bl	80044ae <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800259e:	481c      	ldr	r0, [pc, #112]	; (8002610 <OnTxData+0x90>)
 80025a0:	f010 f886 	bl	80126b0 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <OnTxData+0x94>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	4611      	mov	r1, r2
 80025aa:	2002      	movs	r0, #2
 80025ac:	f00f fcd2 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80025b0:	7c23      	ldrb	r3, [r4, #16]
 80025b2:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80025b6:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80025ba:	9103      	str	r1, [sp, #12]
 80025bc:	9202      	str	r2, [sp, #8]
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	68e3      	ldr	r3, [r4, #12]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <OnTxData+0x98>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	4611      	mov	r1, r2
 80025ca:	2003      	movs	r0, #3
 80025cc:	f00f fcc2 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <OnTxData+0x9c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	4611      	mov	r1, r2
 80025d6:	2003      	movs	r0, #3
 80025d8:	f00f fcbc 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80025dc:	7a23      	ldrb	r3, [r4, #8]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10c      	bne.n	80025fc <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80025e2:	7a63      	ldrb	r3, [r4, #9]
 80025e4:	b143      	cbz	r3, 80025f8 <OnTxData+0x78>
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <OnTxData+0xa0>)
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <OnTxData+0xa4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	4611      	mov	r1, r2
 80025f0:	2003      	movs	r0, #3
 80025f2:	f00f fcaf 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 80025f6:	e7ca      	b.n	800258e <OnTxData+0xe>
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <OnTxData+0xa8>)
 80025fa:	e7f5      	b.n	80025e8 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <OnTxData+0xac>)
 80025fe:	2200      	movs	r2, #0
 8002600:	4611      	mov	r1, r2
 8002602:	2003      	movs	r0, #3
 8002604:	f00f fca6 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 8002608:	e7c1      	b.n	800258e <OnTxData+0xe>
 800260a:	4770      	bx	lr
 800260c:	48000400 	.word	0x48000400
 8002610:	20000424 	.word	0x20000424
 8002614:	08012e5c 	.word	0x08012e5c
 8002618:	08012e90 	.word	0x08012e90
 800261c:	08012ec4 	.word	0x08012ec4
 8002620:	08012e58 	.word	0x08012e58
 8002624:	08012ed4 	.word	0x08012ed4
 8002628:	08012e50 	.word	0x08012e50
 800262c:	08012ee8 	.word	0x08012ee8

08002630 <OnJoinRequest>:
  if (joinParams != NULL)
 8002630:	b358      	cbz	r0, 800268a <OnJoinRequest+0x5a>
{
 8002632:	b510      	push	{r4, lr}
 8002634:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002636:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800263a:	b9fb      	cbnz	r3, 800267c <OnJoinRequest+0x4c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 800263c:	4813      	ldr	r0, [pc, #76]	; (800268c <OnJoinRequest+0x5c>)
 800263e:	f00f ffdd 	bl	80125fc <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002642:	2200      	movs	r2, #0
 8002644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002648:	4811      	ldr	r0, [pc, #68]	; (8002690 <OnJoinRequest+0x60>)
 800264a:	f001 ff30 	bl	80044ae <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <OnJoinRequest+0x64>)
 8002650:	2200      	movs	r2, #0
 8002652:	4611      	mov	r1, r2
 8002654:	2002      	movs	r0, #2
 8002656:	f00f fc7d 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800265a:	79a3      	ldrb	r3, [r4, #6]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d006      	beq.n	800266e <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <OnJoinRequest+0x68>)
 8002662:	2200      	movs	r2, #0
 8002664:	4611      	mov	r1, r2
 8002666:	2002      	movs	r0, #2
 8002668:	f00f fc74 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 800266c:	e00c      	b.n	8002688 <OnJoinRequest+0x58>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <OnJoinRequest+0x6c>)
 8002670:	2200      	movs	r2, #0
 8002672:	4611      	mov	r1, r2
 8002674:	2002      	movs	r0, #2
 8002676:	f00f fc6d 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 800267a:	e005      	b.n	8002688 <OnJoinRequest+0x58>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800267c:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <OnJoinRequest+0x70>)
 800267e:	2200      	movs	r2, #0
 8002680:	4611      	mov	r1, r2
 8002682:	2002      	movs	r0, #2
 8002684:	f00f fc66 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 8002688:	bd10      	pop	{r4, pc}
 800268a:	4770      	bx	lr
 800268c:	200003d8 	.word	0x200003d8
 8002690:	48000400 	.word	0x48000400
 8002694:	08012ef8 	.word	0x08012ef8
 8002698:	08012f30 	.word	0x08012f30
 800269c:	08012f10 	.word	0x08012f10
 80026a0:	08012f50 	.word	0x08012f50

080026a4 <OnStopJoinTimerEvent>:
{
 80026a4:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <OnStopJoinTimerEvent+0x3c>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d013      	beq.n	80026d6 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80026ae:	4c0d      	ldr	r4, [pc, #52]	; (80026e4 <OnStopJoinTimerEvent+0x40>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b6:	4620      	mov	r0, r4
 80026b8:	f001 fef9 	bl	80044ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80026bc:	2200      	movs	r2, #0
 80026be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026c2:	4620      	mov	r0, r4
 80026c4:	f001 fef3 	bl	80044ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80026c8:	2200      	movs	r2, #0
 80026ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ce:	4620      	mov	r0, r4
 80026d0:	f001 feed 	bl	80044ae <HAL_GPIO_WritePin>
}
 80026d4:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80026d6:	2100      	movs	r1, #0
 80026d8:	2008      	movs	r0, #8
 80026da:	f00f fd65 	bl	80121a8 <UTIL_SEQ_SetTask>
 80026de:	e7e6      	b.n	80026ae <OnStopJoinTimerEvent+0xa>
 80026e0:	20000000 	.word	0x20000000
 80026e4:	48000400 	.word	0x48000400

080026e8 <OnRxTimerLedEvent>:
{
 80026e8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80026ea:	2200      	movs	r2, #0
 80026ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f0:	4801      	ldr	r0, [pc, #4]	; (80026f8 <OnRxTimerLedEvent+0x10>)
 80026f2:	f001 fedc 	bl	80044ae <HAL_GPIO_WritePin>
}
 80026f6:	bd08      	pop	{r3, pc}
 80026f8:	48000400 	.word	0x48000400

080026fc <OnTxTimerLedEvent>:
{
 80026fc:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80026fe:	2200      	movs	r2, #0
 8002700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002704:	4801      	ldr	r0, [pc, #4]	; (800270c <OnTxTimerLedEvent+0x10>)
 8002706:	f001 fed2 	bl	80044ae <HAL_GPIO_WritePin>
}
 800270a:	bd08      	pop	{r3, pc}
 800270c:	48000400 	.word	0x48000400

08002710 <OnRxData>:
  if (params != NULL)
 8002710:	2900      	cmp	r1, #0
 8002712:	f000 808f 	beq.w	8002834 <OnRxData+0x124>
{
 8002716:	b570      	push	{r4, r5, r6, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	4604      	mov	r4, r0
 800271c:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800271e:	2201      	movs	r2, #1
 8002720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002724:	4844      	ldr	r0, [pc, #272]	; (8002838 <OnRxData+0x128>)
 8002726:	f001 fec2 	bl	80044ae <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 800272a:	4844      	ldr	r0, [pc, #272]	; (800283c <OnRxData+0x12c>)
 800272c:	f00f ffc0 	bl	80126b0 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002730:	782e      	ldrb	r6, [r5, #0]
 8002732:	2e00      	cmp	r6, #0
 8002734:	d062      	beq.n	80027fc <OnRxData+0xec>
      if (appData != NULL)
 8002736:	2c00      	cmp	r4, #0
 8002738:	d05f      	beq.n	80027fa <OnRxData+0xea>
        RxPort = appData->Port;
 800273a:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800273c:	6862      	ldr	r2, [r4, #4]
 800273e:	2a00      	cmp	r2, #0
 8002740:	d05c      	beq.n	80027fc <OnRxData+0xec>
          switch (appData->Port)
 8002742:	1eb3      	subs	r3, r6, #2
 8002744:	2b04      	cmp	r3, #4
 8002746:	d859      	bhi.n	80027fc <OnRxData+0xec>
 8002748:	e8df f003 	tbb	[pc, r3]
 800274c:	3d300319 	.word	0x3d300319
 8002750:	4a          	.byte	0x4a
 8002751:	00          	.byte	0x00
              if (appData->BufferSize == 1)
 8002752:	7863      	ldrb	r3, [r4, #1]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d151      	bne.n	80027fc <OnRxData+0xec>
                switch (appData->Buffer[0])
 8002758:	7813      	ldrb	r3, [r2, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d007      	beq.n	800276e <OnRxData+0x5e>
 800275e:	2b02      	cmp	r3, #2
 8002760:	d009      	beq.n	8002776 <OnRxData+0x66>
 8002762:	2b00      	cmp	r3, #0
 8002764:	d14a      	bne.n	80027fc <OnRxData+0xec>
                    LmHandlerRequestClass(CLASS_A);
 8002766:	2000      	movs	r0, #0
 8002768:	f005 f81e 	bl	80077a8 <LmHandlerRequestClass>
                    break;
 800276c:	e046      	b.n	80027fc <OnRxData+0xec>
                    LmHandlerRequestClass(CLASS_B);
 800276e:	2001      	movs	r0, #1
 8002770:	f005 f81a 	bl	80077a8 <LmHandlerRequestClass>
                    break;
 8002774:	e042      	b.n	80027fc <OnRxData+0xec>
                    LmHandlerRequestClass(CLASS_C);
 8002776:	2002      	movs	r0, #2
 8002778:	f005 f816 	bl	80077a8 <LmHandlerRequestClass>
                    break;
 800277c:	e03e      	b.n	80027fc <OnRxData+0xec>
              if (appData->BufferSize == 1)
 800277e:	7863      	ldrb	r3, [r4, #1]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d13b      	bne.n	80027fc <OnRxData+0xec>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002784:	7813      	ldrb	r3, [r2, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	4a2d      	ldr	r2, [pc, #180]	; (8002840 <OnRxData+0x130>)
 800278c:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 800278e:	b933      	cbnz	r3, 800279e <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002790:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <OnRxData+0x134>)
 8002792:	2200      	movs	r2, #0
 8002794:	4611      	mov	r1, r2
 8002796:	2003      	movs	r0, #3
 8002798:	f00f fbdc 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 800279c:	e02e      	b.n	80027fc <OnRxData+0xec>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800279e:	4b2a      	ldr	r3, [pc, #168]	; (8002848 <OnRxData+0x138>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	4611      	mov	r1, r2
 80027a4:	2003      	movs	r0, #3
 80027a6:	f00f fbd5 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 80027aa:	e027      	b.n	80027fc <OnRxData+0xec>
			if (appData->BufferSize == 1)
 80027ac:	7863      	ldrb	r3, [r4, #1]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d124      	bne.n	80027fc <OnRxData+0xec>
			  APP_LOG(TS_OFF, VLEVEL_M, "SWITCHED TO MSG CONTENT 1\r\n");
 80027b2:	4b26      	ldr	r3, [pc, #152]	; (800284c <OnRxData+0x13c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	4611      	mov	r1, r2
 80027b8:	2002      	movs	r0, #2
 80027ba:	f00f fbcb 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
			  MsgContent = MSG_CONTENT_1;
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <OnRxData+0x140>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
 80027c4:	e01a      	b.n	80027fc <OnRxData+0xec>
			if (appData->BufferSize == 1)
 80027c6:	7863      	ldrb	r3, [r4, #1]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d117      	bne.n	80027fc <OnRxData+0xec>
			  APP_LOG(TS_OFF, VLEVEL_M, "SWITCHED TO MSG CONTENT 2\r\n");
 80027cc:	4b21      	ldr	r3, [pc, #132]	; (8002854 <OnRxData+0x144>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	4611      	mov	r1, r2
 80027d2:	2002      	movs	r0, #2
 80027d4:	f00f fbbe 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
			  MsgContent = MSG_CONTENT_2;
 80027d8:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <OnRxData+0x140>)
 80027da:	2201      	movs	r2, #1
 80027dc:	701a      	strb	r2, [r3, #0]
 80027de:	e00d      	b.n	80027fc <OnRxData+0xec>
			if (appData->BufferSize == 1)
 80027e0:	7863      	ldrb	r3, [r4, #1]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10a      	bne.n	80027fc <OnRxData+0xec>
			  APP_LOG(TS_OFF, VLEVEL_M, "SWITCHED TO MSG CONTENT 3\r\n");
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <OnRxData+0x148>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	4611      	mov	r1, r2
 80027ec:	2002      	movs	r0, #2
 80027ee:	f00f fbb1 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
			  MsgContent = MSG_CONTENT_3;
 80027f2:	4b17      	ldr	r3, [pc, #92]	; (8002850 <OnRxData+0x140>)
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e000      	b.n	80027fc <OnRxData+0xec>
  uint8_t RxPort = 0;
 80027fa:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80027fc:	7c2b      	ldrb	r3, [r5, #16]
 80027fe:	2b05      	cmp	r3, #5
 8002800:	d901      	bls.n	8002806 <OnRxData+0xf6>
}
 8002802:	b006      	add	sp, #24
 8002804:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8002806:	f995 2008 	ldrsb.w	r2, [r5, #8]
 800280a:	f995 1009 	ldrsb.w	r1, [r5, #9]
 800280e:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8002812:	9005      	str	r0, [sp, #20]
 8002814:	9104      	str	r1, [sp, #16]
 8002816:	4911      	ldr	r1, [pc, #68]	; (800285c <OnRxData+0x14c>)
 8002818:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800281c:	9303      	str	r3, [sp, #12]
 800281e:	9202      	str	r2, [sp, #8]
 8002820:	9601      	str	r6, [sp, #4]
 8002822:	68eb      	ldr	r3, [r5, #12]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <OnRxData+0x150>)
 8002828:	2200      	movs	r2, #0
 800282a:	4611      	mov	r1, r2
 800282c:	2003      	movs	r0, #3
 800282e:	f00f fb91 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 8002832:	e7e6      	b.n	8002802 <OnRxData+0xf2>
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	48000400 	.word	0x48000400
 800283c:	200003f4 	.word	0x200003f4
 8002840:	200003d6 	.word	0x200003d6
 8002844:	08012f6c 	.word	0x08012f6c
 8002848:	08012f78 	.word	0x08012f78
 800284c:	08012f84 	.word	0x08012f84
 8002850:	200003f0 	.word	0x200003f0
 8002854:	08012fa0 	.word	0x08012fa0
 8002858:	08012fbc 	.word	0x08012fbc
 800285c:	080131c0 	.word	0x080131c0
 8002860:	08012fd8 	.word	0x08012fd8

08002864 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002864:	b538      	push	{r3, r4, r5, lr}
 8002866:	4605      	mov	r5, r0
 8002868:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800286a:	f001 fb71 	bl	8003f50 <HAL_FLASH_Unlock>
 800286e:	b100      	cbz	r0, 8002872 <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002870:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <OnStoreContextRequest+0x4c>)
 8002874:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <OnStoreContextRequest+0x50>)
 800287a:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 800287e:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8002882:	fbb3 f3f0 	udiv	r3, r3, r0
 8002886:	fb00 f303 	mul.w	r3, r0, r3
 800288a:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 800288e:	2200      	movs	r2, #0
 8002890:	2101      	movs	r1, #1
 8002892:	0ad8      	lsrs	r0, r3, #11
 8002894:	f7fe fdac 	bl	80013f0 <FLASH_IF_EraseByPages>
 8002898:	b110      	cbz	r0, 80028a0 <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 800289a:	f001 fb71 	bl	8003f80 <HAL_FLASH_Lock>
}
 800289e:	e7e7      	b.n	8002870 <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 80028a0:	2300      	movs	r3, #0
 80028a2:	4622      	mov	r2, r4
 80028a4:	4629      	mov	r1, r5
 80028a6:	4804      	ldr	r0, [pc, #16]	; (80028b8 <OnStoreContextRequest+0x54>)
 80028a8:	f7fe fdbe 	bl	8001428 <FLASH_IF_Write>
 80028ac:	e7f5      	b.n	800289a <OnStoreContextRequest+0x36>
 80028ae:	bf00      	nop
 80028b0:	1fff7000 	.word	0x1fff7000
 80028b4:	03fffc00 	.word	0x03fffc00
 80028b8:	0803f000 	.word	0x0803f000

080028bc <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 80028bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 80028be:	b28a      	uxth	r2, r1
 80028c0:	4901      	ldr	r1, [pc, #4]	; (80028c8 <OnRestoreContextRequest+0xc>)
 80028c2:	f00f fc5d 	bl	8012180 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 80028c6:	bd08      	pop	{r3, pc}
 80028c8:	0803f000 	.word	0x0803f000

080028cc <StopJoin>:
{
 80028cc:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 80028ce:	4c1e      	ldr	r4, [pc, #120]	; (8002948 <StopJoin+0x7c>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028d6:	4620      	mov	r0, r4
 80028d8:	f001 fde9 	bl	80044ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80028dc:	2201      	movs	r2, #1
 80028de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028e2:	4620      	mov	r0, r4
 80028e4:	f001 fde3 	bl	80044ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80028e8:	2201      	movs	r2, #1
 80028ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028ee:	4620      	mov	r0, r4
 80028f0:	f001 fddd 	bl	80044ae <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 80028f4:	4815      	ldr	r0, [pc, #84]	; (800294c <StopJoin+0x80>)
 80028f6:	f00f fe81 	bl	80125fc <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80028fa:	f005 fa4d 	bl	8007d98 <LmHandlerStop>
 80028fe:	b148      	cbz	r0, 8002914 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <StopJoin+0x84>)
 8002902:	2200      	movs	r2, #0
 8002904:	4611      	mov	r1, r2
 8002906:	2002      	movs	r0, #2
 8002908:	f00f fb24 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 800290c:	4811      	ldr	r0, [pc, #68]	; (8002954 <StopJoin+0x88>)
 800290e:	f00f fecf 	bl	80126b0 <UTIL_TIMER_Start>
}
 8002912:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <StopJoin+0x8c>)
 8002916:	2200      	movs	r2, #0
 8002918:	4611      	mov	r1, r2
 800291a:	2002      	movs	r0, #2
 800291c:	f00f fb1a 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 8002920:	4c0e      	ldr	r4, [pc, #56]	; (800295c <StopJoin+0x90>)
 8002922:	2501      	movs	r5, #1
 8002924:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8002926:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <StopJoin+0x94>)
 8002928:	2200      	movs	r2, #0
 800292a:	4611      	mov	r1, r2
 800292c:	2002      	movs	r0, #2
 800292e:	f00f fb11 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 8002932:	480c      	ldr	r0, [pc, #48]	; (8002964 <StopJoin+0x98>)
 8002934:	f005 f8a8 	bl	8007a88 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8002938:	4629      	mov	r1, r5
 800293a:	7820      	ldrb	r0, [r4, #0]
 800293c:	f004 fdee 	bl	800751c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8002940:	4802      	ldr	r0, [pc, #8]	; (800294c <StopJoin+0x80>)
 8002942:	f00f feb5 	bl	80126b0 <UTIL_TIMER_Start>
 8002946:	e7e1      	b.n	800290c <StopJoin+0x40>
 8002948:	48000400 	.word	0x48000400
 800294c:	2000043c 	.word	0x2000043c
 8002950:	08013020 	.word	0x08013020
 8002954:	2000040c 	.word	0x2000040c
 8002958:	08013040 	.word	0x08013040
 800295c:	20000000 	.word	0x20000000
 8002960:	08013054 	.word	0x08013054
 8002964:	20000058 	.word	0x20000058

08002968 <StoreContext>:
{
 8002968:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 800296a:	f005 fa25 	bl	8007db8 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800296e:	f110 0f08 	cmn.w	r0, #8
 8002972:	d003      	beq.n	800297c <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002974:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002978:	d007      	beq.n	800298a <StoreContext+0x22>
}
 800297a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <StoreContext+0x30>)
 800297e:	2200      	movs	r2, #0
 8002980:	4611      	mov	r1, r2
 8002982:	2002      	movs	r0, #2
 8002984:	f00f fae6 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 8002988:	e7f7      	b.n	800297a <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800298a:	4b04      	ldr	r3, [pc, #16]	; (800299c <StoreContext+0x34>)
 800298c:	2200      	movs	r2, #0
 800298e:	4611      	mov	r1, r2
 8002990:	2002      	movs	r0, #2
 8002992:	f00f fadf 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 8002996:	e7f0      	b.n	800297a <StoreContext+0x12>
 8002998:	08013074 	.word	0x08013074
 800299c:	0801308c 	.word	0x0801308c

080029a0 <SendTxData>:
{
 80029a0:	b530      	push	{r4, r5, lr}
 80029a2:	b08b      	sub	sp, #44	; 0x2c
  uint8_t batteryLevel = GetBatteryLevel();
 80029a4:	f7fe fffe 	bl	80019a4 <GetBatteryLevel>
 80029a8:	4604      	mov	r4, r0
  switch (MsgContent){
 80029aa:	4b4f      	ldr	r3, [pc, #316]	; (8002ae8 <SendTxData+0x148>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d04c      	beq.n	8002a4c <SendTxData+0xac>
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d05b      	beq.n	8002a6e <SendTxData+0xce>
 80029b6:	b343      	cbz	r3, 8002a0a <SendTxData+0x6a>
 80029b8:	2500      	movs	r5, #0
  EnvSensors_Read(&sensor_data);
 80029ba:	a804      	add	r0, sp, #16
 80029bc:	f7ff f91e 	bl	8001bfc <EnvSensors_Read>
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 80029c0:	9400      	str	r4, [sp, #0]
 80029c2:	4b4a      	ldr	r3, [pc, #296]	; (8002aec <SendTxData+0x14c>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	2100      	movs	r1, #0
 80029c8:	2002      	movs	r0, #2
 80029ca:	f00f fac3 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 80029ce:	9805      	ldr	r0, [sp, #20]
 80029d0:	f7fe f96a 	bl	8000ca8 <__aeabi_f2iz>
 80029d4:	b200      	sxth	r0, r0
 80029d6:	9000      	str	r0, [sp, #0]
 80029d8:	4b45      	ldr	r3, [pc, #276]	; (8002af0 <SendTxData+0x150>)
 80029da:	2201      	movs	r2, #1
 80029dc:	2100      	movs	r1, #0
 80029de:	2002      	movs	r0, #2
 80029e0:	f00f fab8 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
  AppData.BufferSize = i;
 80029e4:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <SendTxData+0x154>)
 80029e6:	705d      	strb	r5, [r3, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80029e8:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <SendTxData+0x158>)
 80029ea:	7a5b      	ldrb	r3, [r3, #9]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d155      	bne.n	8002a9c <SendTxData+0xfc>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 80029f0:	2200      	movs	r2, #0
 80029f2:	4b42      	ldr	r3, [pc, #264]	; (8002afc <SendTxData+0x15c>)
 80029f4:	78d9      	ldrb	r1, [r3, #3]
 80029f6:	483f      	ldr	r0, [pc, #252]	; (8002af4 <SendTxData+0x154>)
 80029f8:	f004 fe06 	bl	8007608 <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 80029fc:	2800      	cmp	r0, #0
 80029fe:	d05b      	beq.n	8002ab8 <SendTxData+0x118>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002a00:	f110 0f06 	cmn.w	r0, #6
 8002a04:	d05f      	beq.n	8002ac6 <SendTxData+0x126>
}
 8002a06:	b00b      	add	sp, #44	; 0x2c
 8002a08:	bd30      	pop	{r4, r5, pc}
		  Get_ADC_Measurement(ADC_CHANNEL_3, photoresistance);
 8002a0a:	a902      	add	r1, sp, #8
 8002a0c:	483c      	ldr	r0, [pc, #240]	; (8002b00 <SendTxData+0x160>)
 8002a0e:	f7fe fbbd 	bl	800118c <Get_ADC_Measurement>
		  AppData.Buffer[i++] = photoresistance[0];
 8002a12:	4d38      	ldr	r5, [pc, #224]	; (8002af4 <SendTxData+0x154>)
 8002a14:	686b      	ldr	r3, [r5, #4]
 8002a16:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002a1a:	701a      	strb	r2, [r3, #0]
		  AppData.Buffer[i++] = photoresistance[1];
 8002a1c:	686b      	ldr	r3, [r5, #4]
 8002a1e:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8002a22:	705a      	strb	r2, [r3, #1]
		  GetTemperatureAndhumidityLevel(&Humidity, &Temperature);
 8002a24:	f10d 010a 	add.w	r1, sp, #10
 8002a28:	a803      	add	r0, sp, #12
 8002a2a:	f7ff f82d 	bl	8001a88 <GetTemperatureAndhumidityLevel>
		  AppData.Buffer[i++] = (uint8_t)((Humidity >> 8) & 0xFF);
 8002a2e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8002a32:	686a      	ldr	r2, [r5, #4]
 8002a34:	0a19      	lsrs	r1, r3, #8
 8002a36:	7091      	strb	r1, [r2, #2]
		  AppData.Buffer[i++] = (uint8_t)(Humidity & 0xFF);
 8002a38:	686a      	ldr	r2, [r5, #4]
 8002a3a:	70d3      	strb	r3, [r2, #3]
		  AppData.Buffer[i++] = (uint8_t)(Temperature & 0xFF);
 8002a3c:	686b      	ldr	r3, [r5, #4]
 8002a3e:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8002a42:	711a      	strb	r2, [r3, #4]
		  AppData.Port = LORAWAN_USER_APP_PORT; //	2
 8002a44:	2302      	movs	r3, #2
 8002a46:	702b      	strb	r3, [r5, #0]
		  AppData.Buffer[i++] = (uint8_t)(Temperature & 0xFF);
 8002a48:	2505      	movs	r5, #5
 8002a4a:	e7b6      	b.n	80029ba <SendTxData+0x1a>
		  Get_ADC_Measurement(ADC_CHANNEL_3, photoresistance);
 8002a4c:	a903      	add	r1, sp, #12
 8002a4e:	482c      	ldr	r0, [pc, #176]	; (8002b00 <SendTxData+0x160>)
 8002a50:	f7fe fb9c 	bl	800118c <Get_ADC_Measurement>
		  AppData.Buffer[i++] = photoresistance[0];
 8002a54:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <SendTxData+0x154>)
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002a5c:	7011      	strb	r1, [r2, #0]
		  AppData.Buffer[i++] = photoresistance[1];
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8002a64:	7051      	strb	r1, [r2, #1]
		  AppData.Port = 4;
 8002a66:	2204      	movs	r2, #4
 8002a68:	701a      	strb	r2, [r3, #0]
		  AppData.Buffer[i++] = photoresistance[1];
 8002a6a:	2502      	movs	r5, #2
 8002a6c:	e7a5      	b.n	80029ba <SendTxData+0x1a>
		  GetTemperatureAndhumidityLevel(&Humidity, &Temperature);
 8002a6e:	f10d 010a 	add.w	r1, sp, #10
 8002a72:	a803      	add	r0, sp, #12
 8002a74:	f7ff f808 	bl	8001a88 <GetTemperatureAndhumidityLevel>
		  AppData.Buffer[i++] = (uint8_t)((Humidity >> 8) & 0xFF);
 8002a78:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <SendTxData+0x154>)
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8002a80:	0a12      	lsrs	r2, r2, #8
 8002a82:	700a      	strb	r2, [r1, #0]
		  AppData.Buffer[i++] = (uint8_t)(Humidity & 0xFF);
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002a8a:	7051      	strb	r1, [r2, #1]
		  AppData.Buffer[i++] = (uint8_t)(Temperature & 0xFF);
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8002a92:	7091      	strb	r1, [r2, #2]
		  AppData.Port = 5;
 8002a94:	2205      	movs	r2, #5
 8002a96:	701a      	strb	r2, [r3, #0]
		  AppData.Buffer[i++] = (uint8_t)(Temperature & 0xFF);
 8002a98:	2503      	movs	r5, #3
 8002a9a:	e78e      	b.n	80029ba <SendTxData+0x1a>
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002a9c:	f004 fda2 	bl	80075e4 <LmHandlerJoinStatus>
 8002aa0:	2801      	cmp	r0, #1
 8002aa2:	d1a5      	bne.n	80029f0 <SendTxData+0x50>
    UTIL_TIMER_Stop(&JoinLedTimer);
 8002aa4:	4814      	ldr	r0, [pc, #80]	; (8002af8 <SendTxData+0x158>)
 8002aa6:	f00f fda9 	bl	80125fc <UTIL_TIMER_Stop>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ab0:	4814      	ldr	r0, [pc, #80]	; (8002b04 <SendTxData+0x164>)
 8002ab2:	f001 fcfc 	bl	80044ae <HAL_GPIO_WritePin>
 8002ab6:	e79b      	b.n	80029f0 <SendTxData+0x50>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002ab8:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <SendTxData+0x168>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	2100      	movs	r1, #0
 8002abe:	4610      	mov	r0, r2
 8002ac0:	f00f fa48 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 8002ac4:	e79f      	b.n	8002a06 <SendTxData+0x66>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002ac6:	f004 fd87 	bl	80075d8 <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8002aca:	2800      	cmp	r0, #0
 8002acc:	d09b      	beq.n	8002a06 <SendTxData+0x66>
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002ace:	4a0f      	ldr	r2, [pc, #60]	; (8002b0c <SendTxData+0x16c>)
 8002ad0:	fba2 2300 	umull	r2, r3, r2, r0
 8002ad4:	099b      	lsrs	r3, r3, #6
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <SendTxData+0x170>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	2100      	movs	r1, #0
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f00f fa38 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 8002ae4:	e78f      	b.n	8002a06 <SendTxData+0x66>
 8002ae6:	bf00      	nop
 8002ae8:	200003f0 	.word	0x200003f0
 8002aec:	080130a4 	.word	0x080130a4
 8002af0:	080130b0 	.word	0x080130b0
 8002af4:	20000004 	.word	0x20000004
 8002af8:	200003d8 	.word	0x200003d8
 8002afc:	20000058 	.word	0x20000058
 8002b00:	0c000008 	.word	0x0c000008
 8002b04:	48000400 	.word	0x48000400
 8002b08:	080130bc 	.word	0x080130bc
 8002b0c:	10624dd3 	.word	0x10624dd3
 8002b10:	080130cc 	.word	0x080130cc

08002b14 <OnJoinTimerLedEvent>:
{
 8002b14:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002b16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b1a:	4802      	ldr	r0, [pc, #8]	; (8002b24 <OnJoinTimerLedEvent+0x10>)
 8002b1c:	f001 fccc 	bl	80044b8 <HAL_GPIO_TogglePin>
}
 8002b20:	bd08      	pop	{r3, pc}
 8002b22:	bf00      	nop
 8002b24:	48000400 	.word	0x48000400

08002b28 <LoRaWAN_Init>:
{
 8002b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2c:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 8002b2e:	2400      	movs	r4, #0
 8002b30:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002b32:	9402      	str	r4, [sp, #8]
 8002b34:	2502      	movs	r5, #2
 8002b36:	9501      	str	r5, [sp, #4]
 8002b38:	2601      	movs	r6, #1
 8002b3a:	9600      	str	r6, [sp, #0]
 8002b3c:	4b45      	ldr	r3, [pc, #276]	; (8002c54 <LoRaWAN_Init+0x12c>)
 8002b3e:	4622      	mov	r2, r4
 8002b40:	4621      	mov	r1, r4
 8002b42:	4628      	mov	r0, r5
 8002b44:	f00f fa06 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002b48:	9402      	str	r4, [sp, #8]
 8002b4a:	2704      	movs	r7, #4
 8002b4c:	9701      	str	r7, [sp, #4]
 8002b4e:	9500      	str	r5, [sp, #0]
 8002b50:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <LoRaWAN_Init+0x130>)
 8002b52:	4622      	mov	r2, r4
 8002b54:	4621      	mov	r1, r4
 8002b56:	4628      	mov	r0, r5
 8002b58:	f00f f9fc 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002b5c:	9402      	str	r4, [sp, #8]
 8002b5e:	9501      	str	r5, [sp, #4]
 8002b60:	9600      	str	r6, [sp, #0]
 8002b62:	4b3e      	ldr	r3, [pc, #248]	; (8002c5c <LoRaWAN_Init+0x134>)
 8002b64:	4622      	mov	r2, r4
 8002b66:	4621      	mov	r1, r4
 8002b68:	4628      	mov	r0, r5
 8002b6a:	f00f f9f3 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002b6e:	a905      	add	r1, sp, #20
 8002b70:	4620      	mov	r0, r4
 8002b72:	f005 f8fb 	bl	8007d6c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002b76:	9b05      	ldr	r3, [sp, #20]
 8002b78:	0e1a      	lsrs	r2, r3, #24
 8002b7a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002b7e:	9102      	str	r1, [sp, #8]
 8002b80:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	9200      	str	r2, [sp, #0]
 8002b88:	4b35      	ldr	r3, [pc, #212]	; (8002c60 <LoRaWAN_Init+0x138>)
 8002b8a:	4622      	mov	r2, r4
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	4628      	mov	r0, r5
 8002b90:	f00f f9e0 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002b94:	a905      	add	r1, sp, #20
 8002b96:	4630      	mov	r0, r6
 8002b98:	f005 f8e8 	bl	8007d6c <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002b9c:	9b05      	ldr	r3, [sp, #20]
 8002b9e:	0e1a      	lsrs	r2, r3, #24
 8002ba0:	b2d9      	uxtb	r1, r3
 8002ba2:	9103      	str	r1, [sp, #12]
 8002ba4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002ba8:	9102      	str	r1, [sp, #8]
 8002baa:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	9200      	str	r2, [sp, #0]
 8002bb2:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <LoRaWAN_Init+0x13c>)
 8002bb4:	4622      	mov	r2, r4
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f00f f9cb 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002bbe:	9400      	str	r4, [sp, #0]
 8002bc0:	4b29      	ldr	r3, [pc, #164]	; (8002c68 <LoRaWAN_Init+0x140>)
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bc8:	4828      	ldr	r0, [pc, #160]	; (8002c6c <LoRaWAN_Init+0x144>)
 8002bca:	f00f fcb9 	bl	8012540 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002bce:	9400      	str	r4, [sp, #0]
 8002bd0:	4b27      	ldr	r3, [pc, #156]	; (8002c70 <LoRaWAN_Init+0x148>)
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bd8:	4826      	ldr	r0, [pc, #152]	; (8002c74 <LoRaWAN_Init+0x14c>)
 8002bda:	f00f fcb1 	bl	8012540 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002bde:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002c78 <LoRaWAN_Init+0x150>
 8002be2:	9400      	str	r4, [sp, #0]
 8002be4:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <LoRaWAN_Init+0x154>)
 8002be6:	4632      	mov	r2, r6
 8002be8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002bec:	4640      	mov	r0, r8
 8002bee:	f00f fca7 	bl	8012540 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002bf2:	9400      	str	r4, [sp, #0]
 8002bf4:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <LoRaWAN_Init+0x158>)
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002bfc:	4821      	ldr	r0, [pc, #132]	; (8002c84 <LoRaWAN_Init+0x15c>)
 8002bfe:	f00f fc9f 	bl	8012540 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8002c02:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <LoRaWAN_Init+0x160>)
 8002c04:	4621      	mov	r1, r4
 8002c06:	4630      	mov	r0, r6
 8002c08:	f00f fb9a 	bl	8012340 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <LoRaWAN_Init+0x164>)
 8002c0e:	4621      	mov	r1, r4
 8002c10:	4628      	mov	r0, r5
 8002c12:	f00f fb95 	bl	8012340 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8002c16:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <LoRaWAN_Init+0x168>)
 8002c18:	4621      	mov	r1, r4
 8002c1a:	4638      	mov	r0, r7
 8002c1c:	f00f fb90 	bl	8012340 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8002c20:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <LoRaWAN_Init+0x16c>)
 8002c22:	4621      	mov	r1, r4
 8002c24:	2008      	movs	r0, #8
 8002c26:	f00f fb8b 	bl	8012340 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002c2a:	f000 f853 	bl	8002cd4 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002c2e:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 8002c32:	4819      	ldr	r0, [pc, #100]	; (8002c98 <LoRaWAN_Init+0x170>)
 8002c34:	f005 f860 	bl	8007cf8 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002c38:	4818      	ldr	r0, [pc, #96]	; (8002c9c <LoRaWAN_Init+0x174>)
 8002c3a:	f004 ff25 	bl	8007a88 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002c3e:	4640      	mov	r0, r8
 8002c40:	f00f fd36 	bl	80126b0 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002c44:	4621      	mov	r1, r4
 8002c46:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <LoRaWAN_Init+0x178>)
 8002c48:	7818      	ldrb	r0, [r3, #0]
 8002c4a:	f004 fc67 	bl	800751c <LmHandlerJoin>
}
 8002c4e:	b006      	add	sp, #24
 8002c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c54:	080130ec 	.word	0x080130ec
 8002c58:	08013110 	.word	0x08013110
 8002c5c:	08013134 	.word	0x08013134
 8002c60:	08013158 	.word	0x08013158
 8002c64:	0801317c 	.word	0x0801317c
 8002c68:	080026fd 	.word	0x080026fd
 8002c6c:	20000424 	.word	0x20000424
 8002c70:	080026e9 	.word	0x080026e9
 8002c74:	200003f4 	.word	0x200003f4
 8002c78:	200003d8 	.word	0x200003d8
 8002c7c:	08002b15 	.word	0x08002b15
 8002c80:	080026a5 	.word	0x080026a5
 8002c84:	2000040c 	.word	0x2000040c
 8002c88:	08007705 	.word	0x08007705
 8002c8c:	080029a1 	.word	0x080029a1
 8002c90:	08002969 	.word	0x08002969
 8002c94:	080028cd 	.word	0x080028cd
 8002c98:	2000000c 	.word	0x2000000c
 8002c9c:	20000058 	.word	0x20000058
 8002ca0:	20000000 	.word	0x20000000

08002ca4 <HAL_GPIO_EXTI_Callback>:
{
 8002ca4:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8002ca6:	2802      	cmp	r0, #2
 8002ca8:	d009      	beq.n	8002cbe <HAL_GPIO_EXTI_Callback+0x1a>
 8002caa:	2840      	cmp	r0, #64	; 0x40
 8002cac:	d00c      	beq.n	8002cc8 <HAL_GPIO_EXTI_Callback+0x24>
 8002cae:	2801      	cmp	r0, #1
 8002cb0:	d000      	beq.n	8002cb4 <HAL_GPIO_EXTI_Callback+0x10>
}
 8002cb2:	bd08      	pop	{r3, pc}
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	2002      	movs	r0, #2
 8002cb8:	f00f fa76 	bl	80121a8 <UTIL_SEQ_SetTask>
 8002cbc:	e7f9      	b.n	8002cb2 <HAL_GPIO_EXTI_Callback+0xe>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	2008      	movs	r0, #8
 8002cc2:	f00f fa71 	bl	80121a8 <UTIL_SEQ_SetTask>
      break;
 8002cc6:	e7f4      	b.n	8002cb2 <HAL_GPIO_EXTI_Callback+0xe>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 8002cc8:	2100      	movs	r1, #0
 8002cca:	2004      	movs	r0, #4
 8002ccc:	f00f fa6c 	bl	80121a8 <UTIL_SEQ_SetTask>
}
 8002cd0:	e7ef      	b.n	8002cb2 <HAL_GPIO_EXTI_Callback+0xe>
	...

08002cd4 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <LoraInfo_Init+0x1c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002cda:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002cdc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002cde:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	605a      	str	r2, [r3, #4]
    }
    while (1) {} /* At least one region shall be defined */
  }

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  loraInfo.ClassB = 1;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	609a      	str	r2, [r3, #8]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8002ce8:	2203      	movs	r2, #3
 8002cea:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000454 	.word	0x20000454

08002cf4 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002cf4:	4800      	ldr	r0, [pc, #0]	; (8002cf8 <LoraInfo_GetPtr+0x4>)
 8002cf6:	4770      	bx	lr
 8002cf8:	20000454 	.word	0x20000454

08002cfc <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002cfc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002cfe:	f000 f83f 	bl	8002d80 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002d02:	bd08      	pop	{r3, pc}

08002d04 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002d04:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002d06:	f000 f87d 	bl	8002e04 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002d0a:	bd08      	pop	{r3, pc}

08002d0c <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002d0c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002d0e:	f000 f8c7 	bl	8002ea0 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002d12:	bd08      	pop	{r3, pc}

08002d14 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002d14:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002d16:	f000 f8c5 	bl	8002ea4 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002d1a:	bd08      	pop	{r3, pc}

08002d1c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002d1c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002d1e:	f000 f8c3 	bl	8002ea8 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002d22:	bd08      	pop	{r3, pc}

08002d24 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002d24:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002d26:	f000 f8c1 	bl	8002eac <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002d2a:	bd08      	pop	{r3, pc}

08002d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d2c:	480d      	ldr	r0, [pc, #52]	; (8002d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d30:	f000 f8c1 	bl	8002eb6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d34:	480c      	ldr	r0, [pc, #48]	; (8002d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d36:	490d      	ldr	r1, [pc, #52]	; (8002d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d38:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <LoopForever+0xe>)
  movs r3, #0
 8002d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d3c:	e002      	b.n	8002d44 <LoopCopyDataInit>

08002d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d42:	3304      	adds	r3, #4

08002d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d48:	d3f9      	bcc.n	8002d3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d4c:	4c0a      	ldr	r4, [pc, #40]	; (8002d78 <LoopForever+0x16>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d50:	e001      	b.n	8002d56 <LoopFillZerobss>

08002d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d54:	3204      	adds	r2, #4

08002d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d58:	d3fb      	bcc.n	8002d52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d5a:	f00f feaf 	bl	8012abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d5e:	f7fe fcb8 	bl	80016d2 <main>

08002d62 <LoopForever>:

LoopForever:
    b LoopForever
 8002d62:	e7fe      	b.n	8002d62 <LoopForever>
  ldr   r0, =_estack
 8002d64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d6c:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8002d70:	08013b70 	.word	0x08013b70
  ldr r2, =_sbss
 8002d74:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002d78:	20001740 	.word	0x20001740

08002d7c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d7c:	e7fe      	b.n	8002d7c <ADC_IRQHandler>
	...

08002d80 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d84:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002d86:	2400      	movs	r4, #0
 8002d88:	9401      	str	r4, [sp, #4]
 8002d8a:	9402      	str	r4, [sp, #8]
 8002d8c:	9403      	str	r4, [sp, #12]
 8002d8e:	9404      	str	r4, [sp, #16]
 8002d90:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d98:	f042 0204 	orr.w	r2, r2, #4
 8002d9c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002da6:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002da8:	2710      	movs	r7, #16
 8002daa:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002dac:	2301      	movs	r3, #1
 8002dae:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db0:	2303      	movs	r3, #3
 8002db2:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002db4:	4d12      	ldr	r5, [pc, #72]	; (8002e00 <BSP_RADIO_Init+0x80>)
 8002db6:	a901      	add	r1, sp, #4
 8002db8:	4628      	mov	r0, r5
 8002dba:	f001 fa21 	bl	8004200 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002dbe:	f04f 0820 	mov.w	r8, #32
 8002dc2:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002dc6:	a901      	add	r1, sp, #4
 8002dc8:	4628      	mov	r0, r5
 8002dca:	f001 fa19 	bl	8004200 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002dce:	2608      	movs	r6, #8
 8002dd0:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002dd2:	a901      	add	r1, sp, #4
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	f001 fa13 	bl	8004200 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002dda:	4622      	mov	r2, r4
 8002ddc:	4641      	mov	r1, r8
 8002dde:	4628      	mov	r0, r5
 8002de0:	f001 fb65 	bl	80044ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002de4:	4622      	mov	r2, r4
 8002de6:	4639      	mov	r1, r7
 8002de8:	4628      	mov	r0, r5
 8002dea:	f001 fb60 	bl	80044ae <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002dee:	4622      	mov	r2, r4
 8002df0:	4631      	mov	r1, r6
 8002df2:	4628      	mov	r0, r5
 8002df4:	f001 fb5b 	bl	80044ae <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002df8:	4620      	mov	r0, r4
 8002dfa:	b006      	add	sp, #24
 8002dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e00:	48000800 	.word	0x48000800

08002e04 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002e04:	b510      	push	{r4, lr}
  switch (Config)
 8002e06:	2803      	cmp	r0, #3
 8002e08:	d813      	bhi.n	8002e32 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002e0a:	e8df f000 	tbb	[pc, r0]
 8002e0e:	1402      	.short	0x1402
 8002e10:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002e12:	4c22      	ldr	r4, [pc, #136]	; (8002e9c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	2108      	movs	r1, #8
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f001 fb48 	bl	80044ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2110      	movs	r1, #16
 8002e22:	4620      	mov	r0, r4
 8002e24:	f001 fb43 	bl	80044ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2120      	movs	r1, #32
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f001 fb3e 	bl	80044ae <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002e32:	2000      	movs	r0, #0
 8002e34:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002e36:	4c19      	ldr	r4, [pc, #100]	; (8002e9c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	2108      	movs	r1, #8
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f001 fb36 	bl	80044ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e42:	2201      	movs	r2, #1
 8002e44:	2110      	movs	r1, #16
 8002e46:	4620      	mov	r0, r4
 8002e48:	f001 fb31 	bl	80044ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2120      	movs	r1, #32
 8002e50:	4620      	mov	r0, r4
 8002e52:	f001 fb2c 	bl	80044ae <HAL_GPIO_WritePin>
      break;
 8002e56:	e7ec      	b.n	8002e32 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002e58:	4c10      	ldr	r4, [pc, #64]	; (8002e9c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	2108      	movs	r1, #8
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f001 fb25 	bl	80044ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002e64:	2201      	movs	r2, #1
 8002e66:	2110      	movs	r1, #16
 8002e68:	4620      	mov	r0, r4
 8002e6a:	f001 fb20 	bl	80044ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e6e:	2201      	movs	r2, #1
 8002e70:	2120      	movs	r1, #32
 8002e72:	4620      	mov	r0, r4
 8002e74:	f001 fb1b 	bl	80044ae <HAL_GPIO_WritePin>
      break;
 8002e78:	e7db      	b.n	8002e32 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002e7a:	4c08      	ldr	r4, [pc, #32]	; (8002e9c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	2108      	movs	r1, #8
 8002e80:	4620      	mov	r0, r4
 8002e82:	f001 fb14 	bl	80044ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002e86:	2200      	movs	r2, #0
 8002e88:	2110      	movs	r1, #16
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f001 fb0f 	bl	80044ae <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002e90:	2201      	movs	r2, #1
 8002e92:	2120      	movs	r1, #32
 8002e94:	4620      	mov	r0, r4
 8002e96:	f001 fb0a 	bl	80044ae <HAL_GPIO_WritePin>
      break;
 8002e9a:	e7ca      	b.n	8002e32 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002e9c:	48000800 	.word	0x48000800

08002ea0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	4770      	bx	lr

08002ea4 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	4770      	bx	lr

08002ea8 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	4770      	bx	lr

08002eac <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002eac:	b908      	cbnz	r0, 8002eb2 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002eae:	200f      	movs	r0, #15
 8002eb0:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002eb2:	2016      	movs	r0, #22
  }

  return ret;
}
 8002eb4:	4770      	bx	lr

08002eb6 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb8:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eba:	2003      	movs	r0, #3
 8002ebc:	f000 fd2e 	bl	800391c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ec0:	f001 fc9c 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 8002ec4:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_Init+0x28>)
 8002ec6:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ec8:	200f      	movs	r0, #15
 8002eca:	f7fe fe0d 	bl	8001ae8 <HAL_InitTick>
 8002ece:	b110      	cbz	r0, 8002ed6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002ed0:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	bd10      	pop	{r4, pc}
 8002ed6:	4604      	mov	r4, r0
    HAL_MspInit();
 8002ed8:	f7fe fca6 	bl	8001828 <HAL_MspInit>
 8002edc:	e7f9      	b.n	8002ed2 <HAL_Init+0x1a>
 8002ede:	bf00      	nop
 8002ee0:	20000070 	.word	0x20000070

08002ee4 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002ee4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002ee8:	6913      	ldr	r3, [r2, #16]
 8002eea:	f023 0302 	bic.w	r3, r3, #2
 8002eee:	6113      	str	r3, [r2, #16]
}
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002ef2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002ef6:	6913      	ldr	r3, [r2, #16]
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	6113      	str	r3, [r2, #16]
}
 8002efe:	4770      	bx	lr

08002f00 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002f00:	4b01      	ldr	r3, [pc, #4]	; (8002f08 <HAL_GetUIDw0+0x8>)
 8002f02:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8002f06:	4770      	bx	lr
 8002f08:	1fff7000 	.word	0x1fff7000

08002f0c <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002f0c:	4b01      	ldr	r3, [pc, #4]	; (8002f14 <HAL_GetUIDw1+0x8>)
 8002f0e:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8002f12:	4770      	bx	lr
 8002f14:	1fff7000 	.word	0x1fff7000

08002f18 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002f18:	4b01      	ldr	r3, [pc, #4]	; (8002f20 <HAL_GetUIDw2+0x8>)
 8002f1a:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8002f1e:	4770      	bx	lr
 8002f20:	1fff7000 	.word	0x1fff7000

08002f24 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f24:	4a02      	ldr	r2, [pc, #8]	; (8002f30 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002f26:	6853      	ldr	r3, [r2, #4]
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8002f2e:	4770      	bx	lr
 8002f30:	e0042000 	.word	0xe0042000

08002f34 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002f34:	4a02      	ldr	r2, [pc, #8]	; (8002f40 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002f36:	6853      	ldr	r3, [r2, #4]
 8002f38:	f023 0302 	bic.w	r3, r3, #2
 8002f3c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8002f3e:	4770      	bx	lr
 8002f40:	e0042000 	.word	0xe0042000

08002f44 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f44:	4a02      	ldr	r2, [pc, #8]	; (8002f50 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002f46:	6853      	ldr	r3, [r2, #4]
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8002f4e:	4770      	bx	lr
 8002f50:	e0042000 	.word	0xe0042000

08002f54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	f000 811b 	beq.w	8003198 <HAL_ADC_Init+0x244>
 8002f62:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f64:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002f66:	b1bb      	cbz	r3, 8002f98 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f68:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f6a:	6893      	ldr	r3, [r2, #8]
 8002f6c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002f70:	d11f      	bne.n	8002fb2 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8002f72:	6893      	ldr	r3, [r2, #8]
 8002f74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f78:	f023 0317 	bic.w	r3, r3, #23
 8002f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f80:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f82:	4b86      	ldr	r3, [pc, #536]	; (800319c <HAL_ADC_Init+0x248>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	099b      	lsrs	r3, r3, #6
 8002f88:	4a85      	ldr	r2, [pc, #532]	; (80031a0 <HAL_ADC_Init+0x24c>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	3301      	adds	r3, #1
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002f96:	e009      	b.n	8002fac <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8002f98:	f7fe f87a 	bl	8001090 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002fa0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002fa4:	e7e0      	b.n	8002f68 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002fa6:	9b01      	ldr	r3, [sp, #4]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002fac:	9b01      	ldr	r3, [sp, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f9      	bne.n	8002fa6 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fb2:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fb4:	6893      	ldr	r3, [r2, #8]
 8002fb6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002fba:	f040 809c 	bne.w	80030f6 <HAL_ADC_Init+0x1a2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fc0:	f043 0310 	orr.w	r3, r3, #16
 8002fc4:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fce:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fd0:	6893      	ldr	r3, [r2, #8]
 8002fd2:	f013 0304 	ands.w	r3, r3, #4
 8002fd6:	d000      	beq.n	8002fda <HAL_ADC_Init+0x86>
 8002fd8:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fda:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002fdc:	f011 0f10 	tst.w	r1, #16
 8002fe0:	f040 80d3 	bne.w	800318a <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 80d0 	bne.w	800318a <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002fec:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002ff0:	f041 0102 	orr.w	r1, r1, #2
 8002ff4:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ff6:	6891      	ldr	r1, [r2, #8]
 8002ff8:	f011 0f01 	tst.w	r1, #1
 8002ffc:	d151      	bne.n	80030a2 <HAL_ADC_Init+0x14e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002ffe:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003000:	7e25      	ldrb	r5, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003002:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003006:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003008:	ea41 31c5 	orr.w	r1, r1, r5, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800300c:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800300e:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003012:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003014:	b10d      	cbz	r5, 800301a <HAL_ADC_Init+0xc6>
 8003016:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800301a:	4329      	orrs	r1, r5
                   hadc->Init.DataAlign                                           |
 800301c:	68e5      	ldr	r5, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800301e:	4329      	orrs	r1, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003020:	6925      	ldr	r5, [r4, #16]
 8003022:	2d00      	cmp	r5, #0
 8003024:	db69      	blt.n	80030fa <HAL_ADC_Init+0x1a6>
 8003026:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800302a:	4329      	orrs	r1, r5
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800302c:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003030:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003034:	f894 5020 	ldrb.w	r5, [r4, #32]
 8003038:	2d01      	cmp	r5, #1
 800303a:	d061      	beq.n	8003100 <HAL_ADC_Init+0x1ac>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800303c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800303e:	b125      	cbz	r5, 800304a <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003040:	f405 75e0 	and.w	r5, r5, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003044:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003046:	4335      	orrs	r5, r6
 8003048:	4329      	orrs	r1, r5
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800304a:	68d5      	ldr	r5, [r2, #12]
 800304c:	f425 3cfe 	bic.w	ip, r5, #130048	; 0x1fc00
 8003050:	f42c 7cff 	bic.w	ip, ip, #510	; 0x1fe
 8003054:	ea4c 0101 	orr.w	r1, ip, r1
 8003058:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800305a:	6862      	ldr	r2, [r4, #4]
 800305c:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003060:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003062:	ea42 0501 	orr.w	r5, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003066:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800306a:	2901      	cmp	r1, #1
 800306c:	d055      	beq.n	800311a <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800306e:	6822      	ldr	r2, [r4, #0]
 8003070:	6916      	ldr	r6, [r2, #16]
 8003072:	494c      	ldr	r1, [pc, #304]	; (80031a4 <HAL_ADC_Init+0x250>)
 8003074:	4031      	ands	r1, r6
 8003076:	4329      	orrs	r1, r5
 8003078:	6111      	str	r1, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800307a:	6862      	ldr	r2, [r4, #4]
 800307c:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8003080:	d00f      	beq.n	80030a2 <HAL_ADC_Init+0x14e>
 8003082:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003086:	d00c      	beq.n	80030a2 <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003088:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800308c:	d009      	beq.n	80030a2 <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800308e:	4d46      	ldr	r5, [pc, #280]	; (80031a8 <HAL_ADC_Init+0x254>)
 8003090:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 8003094:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8003098:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 800309c:	430a      	orrs	r2, r1
 800309e:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80030a2:	6825      	ldr	r5, [r4, #0]
 80030a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 80030a6:	6969      	ldr	r1, [r5, #20]
 80030a8:	f021 0107 	bic.w	r1, r1, #7
 80030ac:	430a      	orrs	r2, r1
 80030ae:	616a      	str	r2, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80030b0:	6821      	ldr	r1, [r4, #0]
 80030b2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80030b4:	694a      	ldr	r2, [r1, #20]
 80030b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030ba:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80030be:	614a      	str	r2, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80030c0:	6922      	ldr	r2, [r4, #16]
 80030c2:	2a00      	cmp	r2, #0
 80030c4:	d133      	bne.n	800312e <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80030c6:	6822      	ldr	r2, [r4, #0]
 80030c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80030ca:	f063 030f 	orn	r3, r3, #15
 80030ce:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80030d0:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 80030d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80030da:	429a      	cmp	r2, r3
 80030dc:	d04c      	beq.n	8003178 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80030de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030e0:	f023 0312 	bic.w	r3, r3, #18
 80030e4:	f043 0310 	orr.w	r3, r3, #16
 80030e8:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80030f2:	2001      	movs	r0, #1
 80030f4:	e04e      	b.n	8003194 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030f6:	2000      	movs	r0, #0
 80030f8:	e76a      	b.n	8002fd0 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80030fa:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 80030fe:	e794      	b.n	800302a <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003100:	b916      	cbnz	r6, 8003108 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003102:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003106:	e799      	b.n	800303c <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003108:	6da5      	ldr	r5, [r4, #88]	; 0x58
 800310a:	f045 0520 	orr.w	r5, r5, #32
 800310e:	65a5      	str	r5, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003110:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8003112:	f045 0501 	orr.w	r5, r5, #1
 8003116:	65e5      	str	r5, [r4, #92]	; 0x5c
 8003118:	e790      	b.n	800303c <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 800311a:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800311c:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 800311e:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003120:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8003122:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003124:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003126:	432a      	orrs	r2, r5
 8003128:	f042 0501 	orr.w	r5, r2, #1
 800312c:	e79f      	b.n	800306e <HAL_ADC_Init+0x11a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800312e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003132:	d1cd      	bne.n	80030d0 <HAL_ADC_Init+0x17c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003134:	2b07      	cmp	r3, #7
 8003136:	d808      	bhi.n	800314a <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003138:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800313a:	0099      	lsls	r1, r3, #2
 800313c:	40ca      	lsrs	r2, r1
 800313e:	f002 020f 	and.w	r2, r2, #15
 8003142:	2a0f      	cmp	r2, #15
 8003144:	d001      	beq.n	800314a <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003146:	3301      	adds	r3, #1
 8003148:	e7f4      	b.n	8003134 <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800314a:	2b01      	cmp	r3, #1
 800314c:	d00e      	beq.n	800316c <HAL_ADC_Init+0x218>
        MODIFY_REG(hadc->Instance->CHSELR,
 800314e:	6821      	ldr	r1, [r4, #0]
 8003150:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003152:	69e3      	ldr	r3, [r4, #28]
 8003154:	3b01      	subs	r3, #1
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	f003 031c 	and.w	r3, r3, #28
 800315c:	f06f 020f 	mvn.w	r2, #15
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003166:	4313      	orrs	r3, r2
 8003168:	628b      	str	r3, [r1, #40]	; 0x28
 800316a:	e7b1      	b.n	80030d0 <HAL_ADC_Init+0x17c>
        SET_BIT(hadc->Instance->CHSELR,
 800316c:	6822      	ldr	r2, [r4, #0]
 800316e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003170:	f063 030f 	orn	r3, r3, #15
 8003174:	6293      	str	r3, [r2, #40]	; 0x28
 8003176:	e7ab      	b.n	80030d0 <HAL_ADC_Init+0x17c>
      ADC_CLEAR_ERRORCODE(hadc);
 8003178:	2300      	movs	r3, #0
 800317a:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800317c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800317e:	f023 0303 	bic.w	r3, r3, #3
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	65a3      	str	r3, [r4, #88]	; 0x58
 8003188:	e004      	b.n	8003194 <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800318a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800318c:	f043 0310 	orr.w	r3, r3, #16
 8003190:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003192:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003194:	b002      	add	sp, #8
 8003196:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003198:	2001      	movs	r0, #1
 800319a:	e7fb      	b.n	8003194 <HAL_ADC_Init+0x240>
 800319c:	20000070 	.word	0x20000070
 80031a0:	053e2d63 	.word	0x053e2d63
 80031a4:	1ffffc02 	.word	0x1ffffc02
 80031a8:	40012000 	.word	0x40012000

080031ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	4604      	mov	r4, r0
 80031b0:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80031b2:	6946      	ldr	r6, [r0, #20]
 80031b4:	2e08      	cmp	r6, #8
 80031b6:	d005      	beq.n	80031c4 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80031b8:	6803      	ldr	r3, [r0, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f013 0f01 	tst.w	r3, #1
 80031c0:	d11e      	bne.n	8003200 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80031c2:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80031c4:	f7fe fc92 	bl	8001aec <HAL_GetTick>
 80031c8:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4232      	tst	r2, r6
 80031d0:	d11c      	bne.n	800320c <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80031d2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80031d6:	d0f8      	beq.n	80031ca <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80031d8:	f7fe fc88 	bl	8001aec <HAL_GetTick>
 80031dc:	1bc3      	subs	r3, r0, r7
 80031de:	42ab      	cmp	r3, r5
 80031e0:	d801      	bhi.n	80031e6 <HAL_ADC_PollForConversion+0x3a>
 80031e2:	2d00      	cmp	r5, #0
 80031e4:	d1f1      	bne.n	80031ca <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4233      	tst	r3, r6
 80031ec:	d1ed      	bne.n	80031ca <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80031f6:	2300      	movs	r3, #0
 80031f8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 80031fc:	2003      	movs	r0, #3
 80031fe:	e028      	b.n	8003252 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003200:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003202:	f043 0320 	orr.w	r3, r3, #32
 8003206:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8003208:	2001      	movs	r0, #1
 800320a:	e022      	b.n	8003252 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800320c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800320e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003212:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800321a:	d115      	bne.n	8003248 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800321c:	7ea2      	ldrb	r2, [r4, #26]
 800321e:	b99a      	cbnz	r2, 8003248 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	f012 0f08 	tst.w	r2, #8
 8003226:	d00f      	beq.n	8003248 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	f012 0f04 	tst.w	r2, #4
 800322e:	d111      	bne.n	8003254 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	f022 020c 	bic.w	r2, r2, #12
 8003236:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003238:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800323a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003248:	7e20      	ldrb	r0, [r4, #24]
 800324a:	b960      	cbnz	r0, 8003266 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800324c:	6823      	ldr	r3, [r4, #0]
 800324e:	220c      	movs	r2, #12
 8003250:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8003252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003254:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003256:	f043 0320 	orr.w	r3, r3, #32
 800325a:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003264:	e7f0      	b.n	8003248 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8003266:	2000      	movs	r0, #0
 8003268:	e7f3      	b.n	8003252 <HAL_ADC_PollForConversion+0xa6>

0800326a <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800326a:	6803      	ldr	r3, [r0, #0]
 800326c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800326e:	4770      	bx	lr

08003270 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003270:	b470      	push	{r4, r5, r6}
 8003272:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003274:	2200      	movs	r2, #0
 8003276:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003278:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800327a:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 800327e:	2a01      	cmp	r2, #1
 8003280:	f000 8105 	beq.w	800348e <HAL_ADC_ConfigChannel+0x21e>
 8003284:	4603      	mov	r3, r0
 8003286:	2201      	movs	r2, #1
 8003288:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800328c:	6802      	ldr	r2, [r0, #0]
 800328e:	6890      	ldr	r0, [r2, #8]
 8003290:	f010 0f04 	tst.w	r0, #4
 8003294:	d00a      	beq.n	80032ac <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003296:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003298:	f042 0220 	orr.w	r2, r2, #32
 800329c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800329e:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 80032a6:	b003      	add	sp, #12
 80032a8:	bc70      	pop	{r4, r5, r6}
 80032aa:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 80032ac:	6848      	ldr	r0, [r1, #4]
 80032ae:	2802      	cmp	r0, #2
 80032b0:	f000 809e 	beq.w	80033f0 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80032b4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80032b8:	d029      	beq.n	800330e <HAL_ADC_ConfigChannel+0x9e>
 80032ba:	4d76      	ldr	r5, [pc, #472]	; (8003494 <HAL_ADC_ConfigChannel+0x224>)
 80032bc:	42ac      	cmp	r4, r5
 80032be:	d026      	beq.n	800330e <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80032c0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80032c2:	f000 001f 	and.w	r0, r0, #31
 80032c6:	250f      	movs	r5, #15
 80032c8:	4085      	lsls	r5, r0
 80032ca:	ea24 0505 	bic.w	r5, r4, r5
 80032ce:	680c      	ldr	r4, [r1, #0]
 80032d0:	f3c4 0611 	ubfx	r6, r4, #0, #18
 80032d4:	2e00      	cmp	r6, #0
 80032d6:	d133      	bne.n	8003340 <HAL_ADC_ConfigChannel+0xd0>
 80032d8:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80032dc:	fa04 f000 	lsl.w	r0, r4, r0
 80032e0:	4328      	orrs	r0, r5
 80032e2:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80032e4:	684c      	ldr	r4, [r1, #4]
 80032e6:	08a0      	lsrs	r0, r4, #2
 80032e8:	3001      	adds	r0, #1
 80032ea:	69dd      	ldr	r5, [r3, #28]
 80032ec:	42a8      	cmp	r0, r5
 80032ee:	d814      	bhi.n	800331a <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80032f0:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 80032f2:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80032f4:	f004 041f 	and.w	r4, r4, #31
 80032f8:	260f      	movs	r6, #15
 80032fa:	40a6      	lsls	r6, r4
 80032fc:	ea20 0006 	bic.w	r0, r0, r6
 8003300:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8003304:	fa05 f404 	lsl.w	r4, r5, r4
 8003308:	4304      	orrs	r4, r0
 800330a:	6294      	str	r4, [r2, #40]	; 0x28
}
 800330c:	e005      	b.n	800331a <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800330e:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003310:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003312:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003316:	4320      	orrs	r0, r4
 8003318:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800331a:	681c      	ldr	r4, [r3, #0]
 800331c:	680d      	ldr	r5, [r1, #0]
 800331e:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8003320:	6960      	ldr	r0, [r4, #20]
 8003322:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8003326:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 800332a:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 800332e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003332:	4302      	orrs	r2, r0
 8003334:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003336:	680a      	ldr	r2, [r1, #0]
 8003338:	2a00      	cmp	r2, #0
 800333a:	db09      	blt.n	8003350 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333c:	2000      	movs	r0, #0
 800333e:	e7af      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003344:	b114      	cbz	r4, 800334c <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003346:	fab4 f484 	clz	r4, r4
 800334a:	e7c7      	b.n	80032dc <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 800334c:	2420      	movs	r4, #32
 800334e:	e7c5      	b.n	80032dc <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003350:	4951      	ldr	r1, [pc, #324]	; (8003498 <HAL_ADC_ConfigChannel+0x228>)
 8003352:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8003356:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800335a:	4c50      	ldr	r4, [pc, #320]	; (800349c <HAL_ADC_ConfigChannel+0x22c>)
 800335c:	42a2      	cmp	r2, r4
 800335e:	d007      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003360:	4c4f      	ldr	r4, [pc, #316]	; (80034a0 <HAL_ADC_ConfigChannel+0x230>)
 8003362:	42a2      	cmp	r2, r4
 8003364:	d026      	beq.n	80033b4 <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003366:	4c4f      	ldr	r4, [pc, #316]	; (80034a4 <HAL_ADC_ConfigChannel+0x234>)
 8003368:	42a2      	cmp	r2, r4
 800336a:	d032      	beq.n	80033d2 <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800336c:	2000      	movs	r0, #0
 800336e:	e797      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003370:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8003374:	d1f4      	bne.n	8003360 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003376:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800337a:	4847      	ldr	r0, [pc, #284]	; (8003498 <HAL_ADC_ConfigChannel+0x228>)
 800337c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003380:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003384:	4311      	orrs	r1, r2
 8003386:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800338a:	4a47      	ldr	r2, [pc, #284]	; (80034a8 <HAL_ADC_ConfigChannel+0x238>)
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	0992      	lsrs	r2, r2, #6
 8003390:	4946      	ldr	r1, [pc, #280]	; (80034ac <HAL_ADC_ConfigChannel+0x23c>)
 8003392:	fba1 1202 	umull	r1, r2, r1, r2
 8003396:	0992      	lsrs	r2, r2, #6
 8003398:	3201      	adds	r2, #1
 800339a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800339e:	0092      	lsls	r2, r2, #2
 80033a0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80033a2:	e002      	b.n	80033aa <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 80033a4:	9a01      	ldr	r2, [sp, #4]
 80033a6:	3a01      	subs	r2, #1
 80033a8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80033aa:	9a01      	ldr	r2, [sp, #4]
 80033ac:	2a00      	cmp	r2, #0
 80033ae:	d1f9      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b0:	2000      	movs	r0, #0
 80033b2:	e775      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033b4:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80033b8:	d1d5      	bne.n	8003366 <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ba:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80033be:	4836      	ldr	r0, [pc, #216]	; (8003498 <HAL_ADC_ConfigChannel+0x228>)
 80033c0:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80033c4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80033c8:	4311      	orrs	r1, r2
 80033ca:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ce:	2000      	movs	r0, #0
}
 80033d0:	e766      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80033d2:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80033d6:	d158      	bne.n	800348a <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033d8:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033dc:	482e      	ldr	r0, [pc, #184]	; (8003498 <HAL_ADC_ConfigChannel+0x228>)
 80033de:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80033e2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80033e6:	430a      	orrs	r2, r1
 80033e8:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ec:	2000      	movs	r0, #0
}
 80033ee:	e757      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80033f0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80033f4:	d002      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x18c>
 80033f6:	4827      	ldr	r0, [pc, #156]	; (8003494 <HAL_ADC_ConfigChannel+0x224>)
 80033f8:	4284      	cmp	r4, r0
 80033fa:	d106      	bne.n	800340a <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80033fc:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80033fe:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003400:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003404:	ea20 0004 	bic.w	r0, r0, r4
 8003408:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800340a:	680a      	ldr	r2, [r1, #0]
 800340c:	2a00      	cmp	r2, #0
 800340e:	db01      	blt.n	8003414 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003410:	2000      	movs	r0, #0
 8003412:	e745      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003414:	4920      	ldr	r1, [pc, #128]	; (8003498 <HAL_ADC_ConfigChannel+0x228>)
 8003416:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800341a:	4820      	ldr	r0, [pc, #128]	; (800349c <HAL_ADC_ConfigChannel+0x22c>)
 800341c:	4282      	cmp	r2, r0
 800341e:	d007      	beq.n	8003430 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003420:	481f      	ldr	r0, [pc, #124]	; (80034a0 <HAL_ADC_ConfigChannel+0x230>)
 8003422:	4282      	cmp	r2, r0
 8003424:	d013      	beq.n	800344e <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003426:	481f      	ldr	r0, [pc, #124]	; (80034a4 <HAL_ADC_ConfigChannel+0x234>)
 8003428:	4282      	cmp	r2, r0
 800342a:	d01f      	beq.n	800346c <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342c:	2000      	movs	r0, #0
 800342e:	e737      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003430:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003434:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8003438:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 800343c:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003440:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003444:	4311      	orrs	r1, r2
 8003446:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800344a:	2000      	movs	r0, #0
}
 800344c:	e728      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800344e:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003452:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8003456:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 800345a:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800345e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003462:	430a      	orrs	r2, r1
 8003464:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003468:	2000      	movs	r0, #0
}
 800346a:	e719      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800346c:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003470:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8003474:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003478:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800347c:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003480:	430a      	orrs	r2, r1
 8003482:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003486:	2000      	movs	r0, #0
}
 8003488:	e70a      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x30>
 800348a:	2000      	movs	r0, #0
 800348c:	e708      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800348e:	2002      	movs	r0, #2
 8003490:	e709      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x36>
 8003492:	bf00      	nop
 8003494:	80000004 	.word	0x80000004
 8003498:	40012000 	.word	0x40012000
 800349c:	b0001000 	.word	0xb0001000
 80034a0:	b8004000 	.word	0xb8004000
 80034a4:	b4002000 	.word	0xb4002000
 80034a8:	20000070 	.word	0x20000070
 80034ac:	053e2d63 	.word	0x053e2d63

080034b0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80034b0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80034b2:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	f012 0f04 	tst.w	r2, #4
 80034ba:	d02a      	beq.n	8003512 <ADC_ConversionStop+0x62>
 80034bc:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	f012 0f02 	tst.w	r2, #2
 80034c4:	d107      	bne.n	80034d6 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034cc:	f022 0217 	bic.w	r2, r2, #23
 80034d0:	f042 0210 	orr.w	r2, r2, #16
 80034d4:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034d6:	f7fe fb09 	bl	8001aec <HAL_GetTick>
 80034da:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f013 0f04 	tst.w	r3, #4
 80034e4:	d013      	beq.n	800350e <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80034e6:	f7fe fb01 	bl	8001aec <HAL_GetTick>
 80034ea:	1b43      	subs	r3, r0, r5
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d9f5      	bls.n	80034dc <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f013 0f04 	tst.w	r3, #4
 80034f8:	d0f0      	beq.n	80034dc <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034fc:	f043 0310 	orr.w	r3, r3, #16
 8003500:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003502:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 800350a:	2001      	movs	r0, #1
 800350c:	e002      	b.n	8003514 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800350e:	2000      	movs	r0, #0
 8003510:	e000      	b.n	8003514 <ADC_ConversionStop+0x64>
 8003512:	2000      	movs	r0, #0
}
 8003514:	bd38      	pop	{r3, r4, r5, pc}
	...

08003518 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003518:	b530      	push	{r4, r5, lr}
 800351a:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800351c:	2300      	movs	r3, #0
 800351e:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003520:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	f012 0f01 	tst.w	r2, #1
 8003528:	d15b      	bne.n	80035e2 <ADC_Enable+0xca>
 800352a:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800352c:	6899      	ldr	r1, [r3, #8]
 800352e:	4a2e      	ldr	r2, [pc, #184]	; (80035e8 <ADC_Enable+0xd0>)
 8003530:	4211      	tst	r1, r2
 8003532:	d117      	bne.n	8003564 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800353a:	f022 0217 	bic.w	r2, r2, #23
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003544:	4b29      	ldr	r3, [pc, #164]	; (80035ec <ADC_Enable+0xd4>)
 8003546:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800354a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800354e:	d019      	beq.n	8003584 <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003550:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <ADC_Enable+0xd8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	099b      	lsrs	r3, r3, #6
 8003556:	4a27      	ldr	r2, [pc, #156]	; (80035f4 <ADC_Enable+0xdc>)
 8003558:	fba2 2303 	umull	r2, r3, r2, r3
 800355c:	099b      	lsrs	r3, r3, #6
 800355e:	3301      	adds	r3, #1
 8003560:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003562:	e00c      	b.n	800357e <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003564:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003566:	f043 0310 	orr.w	r3, r3, #16
 800356a:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8003574:	2001      	movs	r0, #1
 8003576:	e035      	b.n	80035e4 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8003578:	9b01      	ldr	r3, [sp, #4]
 800357a:	3b01      	subs	r3, #1
 800357c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800357e:	9b01      	ldr	r3, [sp, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1f9      	bne.n	8003578 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003584:	7e63      	ldrb	r3, [r4, #25]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800358a:	2000      	movs	r0, #0
 800358c:	e02a      	b.n	80035e4 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 800358e:	f7fe faad 	bl	8001aec <HAL_GetTick>
 8003592:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	f012 0f01 	tst.w	r2, #1
 800359c:	d11f      	bne.n	80035de <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	f012 0f01 	tst.w	r2, #1
 80035a4:	d107      	bne.n	80035b6 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035ac:	f022 0217 	bic.w	r2, r2, #23
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035b6:	f7fe fa99 	bl	8001aec <HAL_GetTick>
 80035ba:	1b40      	subs	r0, r0, r5
 80035bc:	2802      	cmp	r0, #2
 80035be:	d9e9      	bls.n	8003594 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f013 0f01 	tst.w	r3, #1
 80035c8:	d1e4      	bne.n	8003594 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035cc:	f043 0310 	orr.w	r3, r3, #16
 80035d0:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80035da:	2001      	movs	r0, #1
 80035dc:	e002      	b.n	80035e4 <ADC_Enable+0xcc>
  return HAL_OK;
 80035de:	2000      	movs	r0, #0
 80035e0:	e000      	b.n	80035e4 <ADC_Enable+0xcc>
 80035e2:	2000      	movs	r0, #0
}
 80035e4:	b003      	add	sp, #12
 80035e6:	bd30      	pop	{r4, r5, pc}
 80035e8:	80000017 	.word	0x80000017
 80035ec:	40012000 	.word	0x40012000
 80035f0:	20000070 	.word	0x20000070
 80035f4:	053e2d63 	.word	0x053e2d63

080035f8 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035f8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f013 0f04 	tst.w	r3, #4
 8003600:	d128      	bne.n	8003654 <HAL_ADC_Start+0x5c>
{
 8003602:	b510      	push	{r4, lr}
 8003604:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8003606:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800360a:	2b01      	cmp	r3, #1
 800360c:	d024      	beq.n	8003658 <HAL_ADC_Start+0x60>
 800360e:	2301      	movs	r3, #1
 8003610:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003614:	f7ff ff80 	bl	8003518 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003618:	b9c0      	cbnz	r0, 800364c <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 800361a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800361c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003628:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800362a:	2300      	movs	r3, #0
 800362c:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	211c      	movs	r1, #28
 8003632:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003634:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003638:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800363a:	6893      	ldr	r3, [r2, #8]
 800363c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003640:	f023 0317 	bic.w	r3, r3, #23
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	6093      	str	r3, [r2, #8]
}
 800364a:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 800364c:	2300      	movs	r3, #0
 800364e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003652:	e7fa      	b.n	800364a <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8003654:	2002      	movs	r0, #2
}
 8003656:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003658:	2002      	movs	r0, #2
 800365a:	e7f6      	b.n	800364a <HAL_ADC_Start+0x52>

0800365c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003660:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003662:	6893      	ldr	r3, [r2, #8]
 8003664:	f013 0302 	ands.w	r3, r3, #2
 8003668:	d000      	beq.n	800366c <ADC_Disable+0x10>
 800366a:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800366c:	6891      	ldr	r1, [r2, #8]
 800366e:	f011 0f01 	tst.w	r1, #1
 8003672:	d039      	beq.n	80036e8 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003674:	2b00      	cmp	r3, #0
 8003676:	d139      	bne.n	80036ec <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003678:	6893      	ldr	r3, [r2, #8]
 800367a:	f003 0305 	and.w	r3, r3, #5
 800367e:	2b01      	cmp	r3, #1
 8003680:	d009      	beq.n	8003696 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003682:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003684:	f043 0310 	orr.w	r3, r3, #16
 8003688:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8003692:	2001      	movs	r0, #1
 8003694:	e029      	b.n	80036ea <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8003696:	6893      	ldr	r3, [r2, #8]
 8003698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800369c:	f023 0317 	bic.w	r3, r3, #23
 80036a0:	f043 0302 	orr.w	r3, r3, #2
 80036a4:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	2203      	movs	r2, #3
 80036aa:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036ac:	f7fe fa1e 	bl	8001aec <HAL_GetTick>
 80036b0:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f013 0f01 	tst.w	r3, #1
 80036ba:	d013      	beq.n	80036e4 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036bc:	f7fe fa16 	bl	8001aec <HAL_GetTick>
 80036c0:	1b40      	subs	r0, r0, r5
 80036c2:	2802      	cmp	r0, #2
 80036c4:	d9f5      	bls.n	80036b2 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f013 0f01 	tst.w	r3, #1
 80036ce:	d0f0      	beq.n	80036b2 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036d2:	f043 0310 	orr.w	r3, r3, #16
 80036d6:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80036e0:	2001      	movs	r0, #1
 80036e2:	e002      	b.n	80036ea <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036e4:	2000      	movs	r0, #0
 80036e6:	e000      	b.n	80036ea <ADC_Disable+0x8e>
 80036e8:	2000      	movs	r0, #0
}
 80036ea:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80036ec:	2000      	movs	r0, #0
 80036ee:	e7fc      	b.n	80036ea <ADC_Disable+0x8e>

080036f0 <HAL_ADC_DeInit>:
{
 80036f0:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d04c      	beq.n	8003790 <HAL_ADC_DeInit+0xa0>
 80036f6:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80036f8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003700:	f7ff fed6 	bl	80034b0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003704:	4606      	mov	r6, r0
 8003706:	2800      	cmp	r0, #0
 8003708:	d033      	beq.n	8003772 <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	6853      	ldr	r3, [r2, #4]
 800370e:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	f240 329f 	movw	r2, #927	; 0x39f
 800371e:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003720:	6822      	ldr	r2, [r4, #0]
 8003722:	68d1      	ldr	r1, [r2, #12]
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_ADC_DeInit+0xa4>)
 8003726:	400b      	ands	r3, r1
 8003728:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800372a:	6822      	ldr	r2, [r4, #0]
 800372c:	6913      	ldr	r3, [r2, #16]
 800372e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003732:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003734:	6822      	ldr	r2, [r4, #0]
 8003736:	6953      	ldr	r3, [r2, #20]
 8003738:	f023 0307 	bic.w	r3, r3, #7
 800373c:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800373e:	6822      	ldr	r2, [r4, #0]
 8003740:	6a13      	ldr	r3, [r2, #32]
 8003742:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003746:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800374c:	2500      	movs	r5, #0
 800374e:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003750:	4a11      	ldr	r2, [pc, #68]	; (8003798 <HAL_ADC_DeInit+0xa8>)
 8003752:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 8003756:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800375a:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 800375e:	4620      	mov	r0, r4
 8003760:	f7fd fcc6 	bl	80010f0 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003764:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8003766:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003768:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 800376a:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 800376e:	4630      	mov	r0, r6
 8003770:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003772:	4620      	mov	r0, r4
 8003774:	f7ff ff72 	bl	800365c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003778:	4606      	mov	r6, r0
 800377a:	b908      	cbnz	r0, 8003780 <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 800377c:	2301      	movs	r3, #1
 800377e:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003780:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003782:	6893      	ldr	r3, [r2, #8]
 8003784:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003788:	f023 0317 	bic.w	r3, r3, #23
 800378c:	6093      	str	r3, [r2, #8]
}
 800378e:	e7bc      	b.n	800370a <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003790:	2601      	movs	r6, #1
 8003792:	e7ec      	b.n	800376e <HAL_ADC_DeInit+0x7e>
 8003794:	833e0200 	.word	0x833e0200
 8003798:	40012000 	.word	0x40012000

0800379c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800379c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d019      	beq.n	80037d8 <HAL_ADC_Stop+0x3c>
{
 80037a4:	b510      	push	{r4, lr}
 80037a6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80037a8:	2301      	movs	r3, #1
 80037aa:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 80037ae:	f7ff fe7f 	bl	80034b0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80037b2:	b118      	cbz	r0, 80037bc <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80037b4:	2300      	movs	r3, #0
 80037b6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 80037ba:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80037bc:	4620      	mov	r0, r4
 80037be:	f7ff ff4d 	bl	800365c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d1f6      	bne.n	80037b4 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80037c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80037c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037cc:	f023 0301 	bic.w	r3, r3, #1
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80037d6:	e7ed      	b.n	80037b4 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80037d8:	2002      	movs	r0, #2
}
 80037da:	4770      	bx	lr

080037dc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80037dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037de:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80037e4:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	f000 8094 	beq.w	8003916 <HAL_ADCEx_Calibration_Start+0x13a>
 80037ee:	4604      	mov	r4, r0
 80037f0:	2301      	movs	r3, #1
 80037f2:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80037f6:	f7ff ff31 	bl	800365c <ADC_Disable>
 80037fa:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037fc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	f012 0201 	ands.w	r2, r2, #1
 8003804:	d009      	beq.n	800381a <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003808:	f043 0310 	orr.w	r3, r3, #16
 800380c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800380e:	2300      	movs	r3, #0
 8003810:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8003814:	4628      	mov	r0, r5
 8003816:	b003      	add	sp, #12
 8003818:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800381a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800381c:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003820:	f041 0102 	orr.w	r1, r1, #2
 8003824:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003826:	68de      	ldr	r6, [r3, #12]
 8003828:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 800382c:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8003830:	0436      	lsls	r6, r6, #16
 8003832:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003834:	68d9      	ldr	r1, [r3, #12]
 8003836:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800383a:	f021 0103 	bic.w	r1, r1, #3
 800383e:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8003840:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003842:	e005      	b.n	8003850 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003844:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800384c:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800384e:	3201      	adds	r2, #1
 8003850:	2a07      	cmp	r2, #7
 8003852:	d81e      	bhi.n	8003892 <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8003854:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003856:	688b      	ldr	r3, [r1, #8]
 8003858:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800385c:	f023 0317 	bic.w	r3, r3, #23
 8003860:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003864:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003866:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003868:	6899      	ldr	r1, [r3, #8]
 800386a:	2900      	cmp	r1, #0
 800386c:	daea      	bge.n	8003844 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 800386e:	9b01      	ldr	r3, [sp, #4]
 8003870:	3301      	adds	r3, #1
 8003872:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003874:	9b01      	ldr	r3, [sp, #4]
 8003876:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800387a:	d3f4      	bcc.n	8003866 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 800387c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800387e:	f023 0312 	bic.w	r3, r3, #18
 8003882:	f043 0310 	orr.w	r3, r3, #16
 8003886:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003888:	2300      	movs	r3, #0
 800388a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800388e:	2501      	movs	r5, #1
 8003890:	e7c0      	b.n	8003814 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 8003892:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8003896:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003898:	688b      	ldr	r3, [r1, #8]
 800389a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800389e:	f023 0317 	bic.w	r3, r3, #23
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80038a8:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 80038aa:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80038ae:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 80038b2:	4302      	orrs	r2, r0
 80038b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 80038b8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80038ba:	6893      	ldr	r3, [r2, #8]
 80038bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038c0:	f023 0317 	bic.w	r3, r3, #23
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80038ca:	f7fe f90f 	bl	8001aec <HAL_GetTick>
 80038ce:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038d0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	f012 0f01 	tst.w	r2, #1
 80038d8:	d109      	bne.n	80038ee <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	4316      	orrs	r6, r2
 80038de:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80038e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038e2:	f023 0303 	bic.w	r3, r3, #3
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80038ec:	e78f      	b.n	800380e <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038ee:	f7fe f8fd 	bl	8001aec <HAL_GetTick>
 80038f2:	1bc3      	subs	r3, r0, r7
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d9eb      	bls.n	80038d0 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f013 0f01 	tst.w	r3, #1
 8003900:	d0e6      	beq.n	80038d0 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003902:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003904:	f043 0310 	orr.w	r3, r3, #16
 8003908:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8003912:	2501      	movs	r5, #1
 8003914:	e77e      	b.n	8003814 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8003916:	2502      	movs	r5, #2
 8003918:	e77c      	b.n	8003814 <HAL_ADCEx_Calibration_Start+0x38>
	...

0800391c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800391c:	4a07      	ldr	r2, [pc, #28]	; (800393c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800391e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003920:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003928:	0200      	lsls	r0, r0, #8
 800392a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800392e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003938:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800393a:	4770      	bx	lr
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003940:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_NVIC_SetPriority+0x68>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800394a:	f1c3 0c07 	rsb	ip, r3, #7
 800394e:	f1bc 0f04 	cmp.w	ip, #4
 8003952:	bf28      	it	cs
 8003954:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003958:	f103 0e04 	add.w	lr, r3, #4
 800395c:	f1be 0f06 	cmp.w	lr, #6
 8003960:	d918      	bls.n	8003994 <HAL_NVIC_SetPriority+0x54>
 8003962:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003964:	f04f 3eff 	mov.w	lr, #4294967295
 8003968:	fa0e fc0c 	lsl.w	ip, lr, ip
 800396c:	ea21 010c 	bic.w	r1, r1, ip
 8003970:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003972:	fa0e f303 	lsl.w	r3, lr, r3
 8003976:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800397c:	2800      	cmp	r0, #0
 800397e:	db0b      	blt.n	8003998 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003980:	0109      	lsls	r1, r1, #4
 8003982:	b2c9      	uxtb	r1, r1
 8003984:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003988:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800398c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003990:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003994:	2300      	movs	r3, #0
 8003996:	e7e5      	b.n	8003964 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003998:	f000 000f 	and.w	r0, r0, #15
 800399c:	0109      	lsls	r1, r1, #4
 800399e:	b2c9      	uxtb	r1, r1
 80039a0:	4b02      	ldr	r3, [pc, #8]	; (80039ac <HAL_NVIC_SetPriority+0x6c>)
 80039a2:	5419      	strb	r1, [r3, r0]
 80039a4:	e7f4      	b.n	8003990 <HAL_NVIC_SetPriority+0x50>
 80039a6:	bf00      	nop
 80039a8:	e000ed00 	.word	0xe000ed00
 80039ac:	e000ed14 	.word	0xe000ed14

080039b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80039b0:	2800      	cmp	r0, #0
 80039b2:	db07      	blt.n	80039c4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b4:	f000 021f 	and.w	r2, r0, #31
 80039b8:	0940      	lsrs	r0, r0, #5
 80039ba:	2301      	movs	r3, #1
 80039bc:	4093      	lsls	r3, r2
 80039be:	4a02      	ldr	r2, [pc, #8]	; (80039c8 <HAL_NVIC_EnableIRQ+0x18>)
 80039c0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	e000e100 	.word	0xe000e100

080039cc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80039cc:	2800      	cmp	r0, #0
 80039ce:	db0c      	blt.n	80039ea <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d0:	f000 021f 	and.w	r2, r0, #31
 80039d4:	0940      	lsrs	r0, r0, #5
 80039d6:	2301      	movs	r3, #1
 80039d8:	4093      	lsls	r3, r2
 80039da:	3020      	adds	r0, #32
 80039dc:	4a03      	ldr	r2, [pc, #12]	; (80039ec <HAL_NVIC_DisableIRQ+0x20>)
 80039de:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80039e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80039e6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80039ea:	4770      	bx	lr
 80039ec:	e000e100 	.word	0xe000e100

080039f0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f0:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f2:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80039f4:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 80039f8:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80039fc:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80039fe:	b124      	cbz	r4, 8003a0a <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a00:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003a02:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8003a06:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a0a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003a0c:	f004 0c1c 	and.w	ip, r4, #28
 8003a10:	2401      	movs	r4, #1
 8003a12:	fa04 f40c 	lsl.w	r4, r4, ip
 8003a16:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8003a1a:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a1e:	6804      	ldr	r4, [r0, #0]
 8003a20:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a22:	6883      	ldr	r3, [r0, #8]
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d005      	beq.n	8003a34 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003a28:	6803      	ldr	r3, [r0, #0]
 8003a2a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003a2c:	6803      	ldr	r3, [r0, #0]
 8003a2e:	60da      	str	r2, [r3, #12]
  }
}
 8003a30:	bc10      	pop	{r4}
 8003a32:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003a34:	6803      	ldr	r3, [r0, #0]
 8003a36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003a38:	6803      	ldr	r3, [r0, #0]
 8003a3a:	60d9      	str	r1, [r3, #12]
 8003a3c:	e7f8      	b.n	8003a30 <DMA_SetConfig+0x40>
	...

08003a40 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a40:	6803      	ldr	r3, [r0, #0]
 8003a42:	4a14      	ldr	r2, [pc, #80]	; (8003a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d816      	bhi.n	8003a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003a48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003a4a:	f022 0203 	bic.w	r2, r2, #3
 8003a4e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003a52:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8003a56:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	3b08      	subs	r3, #8
 8003a5c:	4a0e      	ldr	r2, [pc, #56]	; (8003a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a64:	4a0d      	ldr	r2, [pc, #52]	; (8003a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8003a66:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003a74:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003a76:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003a78:	f022 0103 	bic.w	r1, r2, #3
 8003a7c:	4a08      	ldr	r2, [pc, #32]	; (8003aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003a7e:	440a      	add	r2, r1
 8003a80:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	3b08      	subs	r3, #8
 8003a86:	4a04      	ldr	r2, [pc, #16]	; (8003a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	3307      	adds	r3, #7
 8003a90:	e7e8      	b.n	8003a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8003a92:	bf00      	nop
 8003a94:	40020407 	.word	0x40020407
 8003a98:	cccccccd 	.word	0xcccccccd
 8003a9c:	40020880 	.word	0x40020880
 8003aa0:	4002081c 	.word	0x4002081c

08003aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003aa4:	6843      	ldr	r3, [r0, #4]
 8003aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003aaa:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003aac:	441a      	add	r2, r3
 8003aae:	0092      	lsls	r2, r2, #2
 8003ab0:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ab2:	4a06      	ldr	r2, [pc, #24]	; (8003acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8003ab4:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2201      	movs	r2, #1
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	1000823f 	.word	0x1000823f
 8003acc:	40020940 	.word	0x40020940

08003ad0 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d060      	beq.n	8003b96 <HAL_DMA_Init+0xc6>
{
 8003ad4:	b510      	push	{r4, lr}
 8003ad6:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ad8:	6802      	ldr	r2, [r0, #0]
 8003ada:	4b30      	ldr	r3, [pc, #192]	; (8003b9c <HAL_DMA_Init+0xcc>)
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d842      	bhi.n	8003b66 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <HAL_DMA_Init+0xd0>)
 8003ae2:	4413      	add	r3, r2
 8003ae4:	492f      	ldr	r1, [pc, #188]	; (8003ba4 <HAL_DMA_Init+0xd4>)
 8003ae6:	fba1 1303 	umull	r1, r3, r1, r3
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003af0:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <HAL_DMA_Init+0xd8>)
 8003af2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003af4:	2302      	movs	r3, #2
 8003af6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003afa:	6813      	ldr	r3, [r2, #0]
 8003afc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b04:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003b06:	6821      	ldr	r1, [r4, #0]
 8003b08:	680a      	ldr	r2, [r1, #0]
 8003b0a:	68a3      	ldr	r3, [r4, #8]
 8003b0c:	68e0      	ldr	r0, [r4, #12]
 8003b0e:	4303      	orrs	r3, r0
 8003b10:	6920      	ldr	r0, [r4, #16]
 8003b12:	4303      	orrs	r3, r0
 8003b14:	6960      	ldr	r0, [r4, #20]
 8003b16:	4303      	orrs	r3, r0
 8003b18:	69a0      	ldr	r0, [r4, #24]
 8003b1a:	4303      	orrs	r3, r0
 8003b1c:	69e0      	ldr	r0, [r4, #28]
 8003b1e:	4303      	orrs	r3, r0
 8003b20:	6a20      	ldr	r0, [r4, #32]
 8003b22:	4303      	orrs	r3, r0
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7ff ff89 	bl	8003a40 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b2e:	68a3      	ldr	r3, [r4, #8]
 8003b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b34:	d022      	beq.n	8003b7c <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b36:	6863      	ldr	r3, [r4, #4]
 8003b38:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b3e:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b40:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003b42:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003b44:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b46:	6863      	ldr	r3, [r4, #4]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d919      	bls.n	8003b82 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b52:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b54:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b56:	2000      	movs	r0, #0
 8003b58:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003b60:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003b64:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b66:	4b11      	ldr	r3, [pc, #68]	; (8003bac <HAL_DMA_Init+0xdc>)
 8003b68:	4413      	add	r3, r2
 8003b6a:	490e      	ldr	r1, [pc, #56]	; (8003ba4 <HAL_DMA_Init+0xd4>)
 8003b6c:	fba1 1303 	umull	r1, r3, r1, r3
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b76:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <HAL_DMA_Init+0xe0>)
 8003b78:	6403      	str	r3, [r0, #64]	; 0x40
 8003b7a:	e7bb      	b.n	8003af4 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6063      	str	r3, [r4, #4]
 8003b80:	e7d9      	b.n	8003b36 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b82:	4620      	mov	r0, r4
 8003b84:	f7ff ff8e 	bl	8003aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b88:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b90:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003b92:	605a      	str	r2, [r3, #4]
 8003b94:	e7df      	b.n	8003b56 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8003b96:	2001      	movs	r0, #1
}
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40020407 	.word	0x40020407
 8003ba0:	bffdfff8 	.word	0xbffdfff8
 8003ba4:	cccccccd 	.word	0xcccccccd
 8003ba8:	40020000 	.word	0x40020000
 8003bac:	bffdfbf8 	.word	0xbffdfbf8
 8003bb0:	40020400 	.word	0x40020400

08003bb4 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	d04b      	beq.n	8003c50 <HAL_DMA_DeInit+0x9c>
{
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003bbc:	6802      	ldr	r2, [r0, #0]
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003bc6:	6802      	ldr	r2, [r0, #0]
 8003bc8:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <HAL_DMA_DeInit+0xa0>)
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d82c      	bhi.n	8003c28 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003bce:	4b22      	ldr	r3, [pc, #136]	; (8003c58 <HAL_DMA_DeInit+0xa4>)
 8003bd0:	4413      	add	r3, r2
 8003bd2:	4922      	ldr	r1, [pc, #136]	; (8003c5c <HAL_DMA_DeInit+0xa8>)
 8003bd4:	fba1 1303 	umull	r1, r3, r1, r3
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bde:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <HAL_DMA_DeInit+0xac>)
 8003be0:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8003be2:	2500      	movs	r5, #0
 8003be4:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003be6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003be8:	f003 021c 	and.w	r2, r3, #28
 8003bec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4093      	lsls	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f7ff ff23 	bl	8003a40 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8003bfa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003bfc:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bfe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003c00:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003c02:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c04:	6863      	ldr	r3, [r4, #4]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d918      	bls.n	8003c3e <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003c10:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c12:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8003c14:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003c16:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003c18:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003c1a:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c1c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003c1e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003c22:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003c26:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c28:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <HAL_DMA_DeInit+0xb0>)
 8003c2a:	4413      	add	r3, r2
 8003c2c:	490b      	ldr	r1, [pc, #44]	; (8003c5c <HAL_DMA_DeInit+0xa8>)
 8003c2e:	fba1 1303 	umull	r1, r3, r1, r3
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_DMA_DeInit+0xb4>)
 8003c3a:	6403      	str	r3, [r0, #64]	; 0x40
 8003c3c:	e7d1      	b.n	8003be2 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c3e:	4620      	mov	r0, r4
 8003c40:	f7ff ff30 	bl	8003aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c46:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	e7dd      	b.n	8003c0c <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003c50:	2001      	movs	r0, #1
}
 8003c52:	4770      	bx	lr
 8003c54:	40020407 	.word	0x40020407
 8003c58:	bffdfff8 	.word	0xbffdfff8
 8003c5c:	cccccccd 	.word	0xcccccccd
 8003c60:	40020000 	.word	0x40020000
 8003c64:	bffdfbf8 	.word	0xbffdfbf8
 8003c68:	40020400 	.word	0x40020400

08003c6c <HAL_DMA_Start_IT>:
{
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003c70:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8003c74:	2801      	cmp	r0, #1
 8003c76:	d043      	beq.n	8003d00 <HAL_DMA_Start_IT+0x94>
 8003c78:	2001      	movs	r0, #1
 8003c7a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003c7e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8003c82:	b2c0      	uxtb	r0, r0
 8003c84:	2801      	cmp	r0, #1
 8003c86:	d006      	beq.n	8003c96 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8003c92:	2001      	movs	r0, #1
}
 8003c94:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c96:	2002      	movs	r0, #2
 8003c98:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003ca0:	6825      	ldr	r5, [r4, #0]
 8003ca2:	6828      	ldr	r0, [r5, #0]
 8003ca4:	f020 0001 	bic.w	r0, r0, #1
 8003ca8:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003caa:	4620      	mov	r0, r4
 8003cac:	f7ff fea0 	bl	80039f0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003cb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003cb2:	b1d3      	cbz	r3, 8003cea <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cb4:	6822      	ldr	r2, [r4, #0]
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	f043 030e 	orr.w	r3, r3, #14
 8003cbc:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cbe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003cc6:	d003      	beq.n	8003cd0 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cce:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003cd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cd2:	b11b      	cbz	r3, 8003cdc <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cda:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003cdc:	6822      	ldr	r2, [r4, #0]
 8003cde:	6813      	ldr	r3, [r2, #0]
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	e7d4      	b.n	8003c94 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cea:	6822      	ldr	r2, [r4, #0]
 8003cec:	6813      	ldr	r3, [r2, #0]
 8003cee:	f023 0304 	bic.w	r3, r3, #4
 8003cf2:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	6813      	ldr	r3, [r2, #0]
 8003cf8:	f043 030a 	orr.w	r3, r3, #10
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	e7de      	b.n	8003cbe <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003d00:	2002      	movs	r0, #2
 8003d02:	e7c7      	b.n	8003c94 <HAL_DMA_Start_IT+0x28>

08003d04 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003d04:	4603      	mov	r3, r0
 8003d06:	2800      	cmp	r0, #0
 8003d08:	d034      	beq.n	8003d74 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d0a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	2a02      	cmp	r2, #2
 8003d12:	d006      	beq.n	8003d22 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d14:	2204      	movs	r2, #4
 8003d16:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003d1e:	2001      	movs	r0, #1
 8003d20:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d22:	6801      	ldr	r1, [r0, #0]
 8003d24:	680a      	ldr	r2, [r1, #0]
 8003d26:	f022 020e 	bic.w	r2, r2, #14
 8003d2a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d2c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003d2e:	680a      	ldr	r2, [r1, #0]
 8003d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d34:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003d36:	6801      	ldr	r1, [r0, #0]
 8003d38:	680a      	ldr	r2, [r1, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d42:	f002 011c 	and.w	r1, r2, #28
 8003d46:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003d48:	2201      	movs	r2, #1
 8003d4a:	408a      	lsls	r2, r1
 8003d4c:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d52:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d56:	b132      	cbz	r2, 8003d66 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d58:	6811      	ldr	r1, [r2, #0]
 8003d5a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003d5e:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d62:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003d64:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8003d72:	4770      	bx	lr
    return HAL_ERROR;
 8003d74:	2001      	movs	r0, #1
}
 8003d76:	4770      	bx	lr

08003d78 <HAL_DMA_Abort_IT>:
{
 8003d78:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d7a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d003      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d84:	2304      	movs	r3, #4
 8003d86:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003d88:	2001      	movs	r0, #1
}
 8003d8a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d8c:	6802      	ldr	r2, [r0, #0]
 8003d8e:	6813      	ldr	r3, [r2, #0]
 8003d90:	f023 030e 	bic.w	r3, r3, #14
 8003d94:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003d96:	6802      	ldr	r2, [r0, #0]
 8003d98:	6813      	ldr	r3, [r2, #0]
 8003d9a:	f023 0301 	bic.w	r3, r3, #1
 8003d9e:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003da0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003da2:	6813      	ldr	r3, [r2, #0]
 8003da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003daa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003dac:	f003 021c 	and.w	r2, r3, #28
 8003db0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003db2:	2301      	movs	r3, #1
 8003db4:	4093      	lsls	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003db8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003dba:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003dbc:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003dbe:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003dc0:	b133      	cbz	r3, 8003dd0 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dca:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003dcc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003dce:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003ddc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003dde:	b113      	cbz	r3, 8003de6 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003de0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003de2:	2000      	movs	r0, #0
 8003de4:	e7d1      	b.n	8003d8a <HAL_DMA_Abort_IT+0x12>
 8003de6:	2000      	movs	r0, #0
 8003de8:	e7cf      	b.n	8003d8a <HAL_DMA_Abort_IT+0x12>
	...

08003dec <HAL_DMA_IRQHandler>:
{
 8003dec:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003df0:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003df2:	6804      	ldr	r4, [r0, #0]
 8003df4:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003df6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003df8:	f003 031c 	and.w	r3, r3, #28
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	420a      	tst	r2, r1
 8003e02:	d015      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x44>
 8003e04:	f015 0f04 	tst.w	r5, #4
 8003e08:	d012      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	f013 0f20 	tst.w	r3, #32
 8003e10:	d103      	bne.n	8003e1a <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	f023 0304 	bic.w	r3, r3, #4
 8003e18:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003e1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e1c:	f003 021c 	and.w	r2, r3, #28
 8003e20:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003e22:	2304      	movs	r3, #4
 8003e24:	4093      	lsls	r3, r2
 8003e26:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003e28:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003e2a:	b103      	cbz	r3, 8003e2e <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003e2c:	4798      	blx	r3
}
 8003e2e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003e30:	2202      	movs	r2, #2
 8003e32:	409a      	lsls	r2, r3
 8003e34:	420a      	tst	r2, r1
 8003e36:	d028      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x9e>
 8003e38:	f015 0f02 	tst.w	r5, #2
 8003e3c:	d025      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	f013 0f20 	tst.w	r3, #32
 8003e44:	d106      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	f023 030a 	bic.w	r3, r3, #10
 8003e4c:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003e54:	6802      	ldr	r2, [r0, #0]
 8003e56:	4b1c      	ldr	r3, [pc, #112]	; (8003ec8 <HAL_DMA_IRQHandler+0xdc>)
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d90e      	bls.n	8003e7a <HAL_DMA_IRQHandler+0x8e>
 8003e5c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e5e:	f003 021c 	and.w	r2, r3, #28
 8003e62:	2302      	movs	r3, #2
 8003e64:	4093      	lsls	r3, r2
 8003e66:	4a19      	ldr	r2, [pc, #100]	; (8003ecc <HAL_DMA_IRQHandler+0xe0>)
 8003e68:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8003e70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0db      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003e76:	4798      	blx	r3
 8003e78:	e7d9      	b.n	8003e2e <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003e7a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e7c:	f003 021c 	and.w	r2, r3, #28
 8003e80:	2302      	movs	r3, #2
 8003e82:	4093      	lsls	r3, r2
 8003e84:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <HAL_DMA_IRQHandler+0xe4>)
 8003e86:	6053      	str	r3, [r2, #4]
 8003e88:	e7ef      	b.n	8003e6a <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	420b      	tst	r3, r1
 8003e92:	d0cc      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x42>
 8003e94:	f015 0f08 	tst.w	r5, #8
 8003e98:	d0c9      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	f023 030e 	bic.w	r3, r3, #14
 8003ea0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ea2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ea4:	f003 031c 	and.w	r3, r3, #28
 8003ea8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003eaa:	2201      	movs	r2, #1
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003eb2:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003eb4:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003ebe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0b4      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003ec4:	4798      	blx	r3
  return;
 8003ec6:	e7b2      	b.n	8003e2e <HAL_DMA_IRQHandler+0x42>
 8003ec8:	40020080 	.word	0x40020080
 8003ecc:	40020400 	.word	0x40020400
 8003ed0:	40020000 	.word	0x40020000

08003ed4 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003ed4:	b178      	cbz	r0, 8003ef6 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003ed6:	6803      	ldr	r3, [r0, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003eda:	f011 0f10 	tst.w	r1, #16
 8003ede:	d004      	beq.n	8003eea <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003ee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003ee4:	d004      	beq.n	8003ef0 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003ee6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003eea:	601a      	str	r2, [r3, #0]
  return status;
 8003eec:	2000      	movs	r0, #0
 8003eee:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003ef0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003ef4:	e7f9      	b.n	8003eea <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003ef6:	2001      	movs	r0, #1
}
 8003ef8:	4770      	bx	lr
	...

08003efc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003efc:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003efe:	4c05      	ldr	r4, [pc, #20]	; (8003f14 <FLASH_Program_DoubleWord+0x18>)
 8003f00:	6961      	ldr	r1, [r4, #20]
 8003f02:	f041 0101 	orr.w	r1, r1, #1
 8003f06:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003f08:	6002      	str	r2, [r0, #0]
 8003f0a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003f0e:	6043      	str	r3, [r0, #4]
}
 8003f10:	bc10      	pop	{r4}
 8003f12:	4770      	bx	lr
 8003f14:	58004000 	.word	0x58004000

08003f18 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003f18:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <FLASH_Program_Fast+0x34>)
 8003f1a:	6953      	ldr	r3, [r2, #20]
 8003f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f20:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f22:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003f26:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003f28:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003f2a:	f851 2b04 	ldr.w	r2, [r1], #4
 8003f2e:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8003f32:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8003f34:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003f38:	d1f7      	bne.n	8003f2a <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8003f3a:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <FLASH_Program_Fast+0x34>)
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003f42:	d1fa      	bne.n	8003f3a <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f44:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	58004000 	.word	0x58004000

08003f50 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003f50:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <HAL_FLASH_Unlock+0x28>)
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	db01      	blt.n	8003f5c <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003f58:	2000      	movs	r0, #0
 8003f5a:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <HAL_FLASH_Unlock+0x28>)
 8003f5e:	4a07      	ldr	r2, [pc, #28]	; (8003f7c <HAL_FLASH_Unlock+0x2c>)
 8003f60:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003f62:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003f66:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	db01      	blt.n	8003f72 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2000      	movs	r0, #0
 8003f70:	4770      	bx	lr
      status = HAL_ERROR;
 8003f72:	2001      	movs	r0, #1
}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	58004000 	.word	0x58004000
 8003f7c:	45670123 	.word	0x45670123

08003f80 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_FLASH_Lock+0x18>)
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f88:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	db01      	blt.n	8003f94 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8003f90:	2001      	movs	r0, #1
}
 8003f92:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003f94:	2000      	movs	r0, #0
 8003f96:	4770      	bx	lr
 8003f98:	58004000 	.word	0x58004000

08003f9c <FLASH_WaitForLastOperation>:
{
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003fa0:	f7fd fda4 	bl	8001aec <HAL_GetTick>
 8003fa4:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003fa6:	4b16      	ldr	r3, [pc, #88]	; (8004000 <FLASH_WaitForLastOperation+0x64>)
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003fae:	d006      	beq.n	8003fbe <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003fb0:	f7fd fd9c 	bl	8001aec <HAL_GetTick>
 8003fb4:	1b00      	subs	r0, r0, r4
 8003fb6:	42a8      	cmp	r0, r5
 8003fb8:	d3f5      	bcc.n	8003fa6 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8003fba:	2003      	movs	r0, #3
}
 8003fbc:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8003fbe:	4b10      	ldr	r3, [pc, #64]	; (8004000 <FLASH_WaitForLastOperation+0x64>)
 8003fc0:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003fc2:	f013 0f01 	tst.w	r3, #1
 8003fc6:	d002      	beq.n	8003fce <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003fc8:	4a0d      	ldr	r2, [pc, #52]	; (8004000 <FLASH_WaitForLastOperation+0x64>)
 8003fca:	2101      	movs	r1, #1
 8003fcc:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8003fce:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d001      	beq.n	8003fda <FLASH_WaitForLastOperation+0x3e>
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <FLASH_WaitForLastOperation+0x64>)
 8003fd8:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8003fda:	b95b      	cbnz	r3, 8003ff4 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003fdc:	4b08      	ldr	r3, [pc, #32]	; (8004000 <FLASH_WaitForLastOperation+0x64>)
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003fe4:	d00a      	beq.n	8003ffc <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003fe6:	f7fd fd81 	bl	8001aec <HAL_GetTick>
 8003fea:	1b00      	subs	r0, r0, r4
 8003fec:	42a8      	cmp	r0, r5
 8003fee:	d3f5      	bcc.n	8003fdc <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8003ff0:	2003      	movs	r0, #3
 8003ff2:	e7e3      	b.n	8003fbc <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8003ff4:	4a03      	ldr	r2, [pc, #12]	; (8004004 <FLASH_WaitForLastOperation+0x68>)
 8003ff6:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	e7df      	b.n	8003fbc <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	e7dd      	b.n	8003fbc <FLASH_WaitForLastOperation+0x20>
 8004000:	58004000 	.word	0x58004000
 8004004:	20000464 	.word	0x20000464

08004008 <HAL_FLASH_Program>:
{
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 800400c:	4b15      	ldr	r3, [pc, #84]	; (8004064 <HAL_FLASH_Program+0x5c>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d025      	beq.n	8004060 <HAL_FLASH_Program+0x58>
 8004014:	4604      	mov	r4, r0
 8004016:	460d      	mov	r5, r1
 8004018:	4616      	mov	r6, r2
 800401a:	4b12      	ldr	r3, [pc, #72]	; (8004064 <HAL_FLASH_Program+0x5c>)
 800401c:	2201      	movs	r2, #1
 800401e:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004020:	2200      	movs	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004024:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004028:	f7ff ffb8 	bl	8003f9c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800402c:	b970      	cbnz	r0, 800404c <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800402e:	2c01      	cmp	r4, #1
 8004030:	d010      	beq.n	8004054 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004032:	4631      	mov	r1, r6
 8004034:	4628      	mov	r0, r5
 8004036:	f7ff ff6f 	bl	8003f18 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800403a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800403e:	f7ff ffad 	bl	8003f9c <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004042:	4a09      	ldr	r2, [pc, #36]	; (8004068 <HAL_FLASH_Program+0x60>)
 8004044:	6953      	ldr	r3, [r2, #20]
 8004046:	ea23 0404 	bic.w	r4, r3, r4
 800404a:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_FLASH_Program+0x5c>)
 800404e:	2200      	movs	r2, #0
 8004050:	701a      	strb	r2, [r3, #0]
}
 8004052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8004054:	4632      	mov	r2, r6
 8004056:	463b      	mov	r3, r7
 8004058:	4628      	mov	r0, r5
 800405a:	f7ff ff4f 	bl	8003efc <FLASH_Program_DoubleWord>
 800405e:	e7ec      	b.n	800403a <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8004060:	2002      	movs	r0, #2
 8004062:	e7f6      	b.n	8004052 <HAL_FLASH_Program+0x4a>
 8004064:	20000464 	.word	0x20000464
 8004068:	58004000 	.word	0x58004000

0800406c <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800406c:	4a03      	ldr	r2, [pc, #12]	; (800407c <FLASH_MassErase+0x10>)
 800406e:	6953      	ldr	r3, [r2, #20]
 8004070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004074:	f043 0304 	orr.w	r3, r3, #4
 8004078:	6153      	str	r3, [r2, #20]
#endif
}
 800407a:	4770      	bx	lr
 800407c:	58004000 	.word	0x58004000

08004080 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004080:	4b18      	ldr	r3, [pc, #96]	; (80040e4 <FLASH_FlushCaches+0x64>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004088:	2b01      	cmp	r3, #1
 800408a:	d006      	beq.n	800409a <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 800408c:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <FLASH_FlushCaches+0x64>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004094:	2b01      	cmp	r3, #1
 8004096:	d012      	beq.n	80040be <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8004098:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800409a:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <FLASH_FlushCaches+0x64>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80040a2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040b2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e7e6      	b.n	800408c <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <FLASH_FlushCaches+0x64>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c6:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040ce:	601a      	str	r2, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040d6:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040de:	601a      	str	r2, [r3, #0]
}
 80040e0:	e7da      	b.n	8004098 <FLASH_FlushCaches+0x18>
 80040e2:	bf00      	nop
 80040e4:	58004000 	.word	0x58004000

080040e8 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80040e8:	4a03      	ldr	r2, [pc, #12]	; (80040f8 <FLASH_AcknowledgePageErase+0x10>)
 80040ea:	6953      	ldr	r3, [r2, #20]
 80040ec:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80040f0:	f023 0302 	bic.w	r3, r3, #2
 80040f4:	6153      	str	r3, [r2, #20]
#endif
}
 80040f6:	4770      	bx	lr
 80040f8:	58004000 	.word	0x58004000

080040fc <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80040fc:	4a05      	ldr	r2, [pc, #20]	; (8004114 <FLASH_PageErase+0x18>)
 80040fe:	6953      	ldr	r3, [r2, #20]
 8004100:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004104:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8004108:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800410c:	f040 0002 	orr.w	r0, r0, #2
 8004110:	6150      	str	r0, [r2, #20]
}
 8004112:	4770      	bx	lr
 8004114:	58004000 	.word	0x58004000

08004118 <HAL_FLASHEx_Erase>:
{
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800411a:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <HAL_FLASHEx_Erase+0x7c>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d035      	beq.n	800418e <HAL_FLASHEx_Erase+0x76>
 8004122:	4605      	mov	r5, r0
 8004124:	460f      	mov	r7, r1
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_FLASHEx_Erase+0x7c>)
 8004128:	2201      	movs	r2, #1
 800412a:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800412c:	2200      	movs	r2, #0
 800412e:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004134:	f7ff ff32 	bl	8003f9c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004138:	4606      	mov	r6, r0
 800413a:	bb18      	cbnz	r0, 8004184 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	2b04      	cmp	r3, #4
 8004140:	d013      	beq.n	800416a <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8004142:	f04f 33ff 	mov.w	r3, #4294967295
 8004146:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004148:	686c      	ldr	r4, [r5, #4]
 800414a:	686b      	ldr	r3, [r5, #4]
 800414c:	68aa      	ldr	r2, [r5, #8]
 800414e:	4413      	add	r3, r2
 8004150:	42a3      	cmp	r3, r4
 8004152:	d913      	bls.n	800417c <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8004154:	4620      	mov	r0, r4
 8004156:	f7ff ffd1 	bl	80040fc <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800415a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800415e:	f7ff ff1d 	bl	8003f9c <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8004162:	4606      	mov	r6, r0
 8004164:	b948      	cbnz	r0, 800417a <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004166:	3401      	adds	r4, #1
 8004168:	e7ef      	b.n	800414a <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 800416a:	f7ff ff7f 	bl	800406c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800416e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004172:	f7ff ff13 	bl	8003f9c <FLASH_WaitForLastOperation>
 8004176:	4606      	mov	r6, r0
 8004178:	e002      	b.n	8004180 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 800417a:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 800417c:	f7ff ffb4 	bl	80040e8 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8004180:	f7ff ff7e 	bl	8004080 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <HAL_FLASHEx_Erase+0x7c>)
 8004186:	2200      	movs	r2, #0
 8004188:	701a      	strb	r2, [r3, #0]
}
 800418a:	4630      	mov	r0, r6
 800418c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800418e:	2602      	movs	r6, #2
 8004190:	e7fb      	b.n	800418a <HAL_FLASHEx_Erase+0x72>
 8004192:	bf00      	nop
 8004194:	20000464 	.word	0x20000464

08004198 <HAL_FLASHEx_Erase_IT>:
{
 8004198:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 800419a:	4b17      	ldr	r3, [pc, #92]	; (80041f8 <HAL_FLASHEx_Erase_IT+0x60>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d028      	beq.n	80041f4 <HAL_FLASHEx_Erase_IT+0x5c>
 80041a2:	4604      	mov	r4, r0
 80041a4:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <HAL_FLASHEx_Erase_IT+0x60>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80041aa:	2200      	movs	r2, #0
 80041ac:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 80041ae:	6802      	ldr	r2, [r0, #0]
 80041b0:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041b6:	f7ff fef1 	bl	8003f9c <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 80041ba:	4605      	mov	r5, r0
 80041bc:	b120      	cbz	r0, 80041c8 <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <HAL_FLASHEx_Erase_IT+0x60>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
}
 80041c4:	4628      	mov	r0, r5
 80041c6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80041c8:	4a0c      	ldr	r2, [pc, #48]	; (80041fc <HAL_FLASHEx_Erase_IT+0x64>)
 80041ca:	6953      	ldr	r3, [r2, #20]
 80041cc:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80041d0:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d007      	beq.n	80041e8 <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80041d8:	68a2      	ldr	r2, [r4, #8]
 80041da:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <HAL_FLASHEx_Erase_IT+0x60>)
 80041dc:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 80041de:	6860      	ldr	r0, [r4, #4]
 80041e0:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 80041e2:	f7ff ff8b 	bl	80040fc <FLASH_PageErase>
 80041e6:	e7ed      	b.n	80041c4 <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_FLASHEx_Erase_IT+0x60>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 80041ee:	f7ff ff3d 	bl	800406c <FLASH_MassErase>
 80041f2:	e7e7      	b.n	80041c4 <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 80041f4:	2502      	movs	r5, #2
 80041f6:	e7e5      	b.n	80041c4 <HAL_FLASHEx_Erase_IT+0x2c>
 80041f8:	20000464 	.word	0x20000464
 80041fc:	58004000 	.word	0x58004000

08004200 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004200:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8004202:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004204:	e069      	b.n	80042da <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004206:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004208:	005e      	lsls	r6, r3, #1
 800420a:	2403      	movs	r4, #3
 800420c:	40b4      	lsls	r4, r6
 800420e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004212:	68cc      	ldr	r4, [r1, #12]
 8004214:	40b4      	lsls	r4, r6
 8004216:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004218:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800421a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800421c:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004220:	684c      	ldr	r4, [r1, #4]
 8004222:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004226:	409c      	lsls	r4, r3
 8004228:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 800422c:	6044      	str	r4, [r0, #4]
 800422e:	e065      	b.n	80042fc <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004230:	08dd      	lsrs	r5, r3, #3
 8004232:	3508      	adds	r5, #8
 8004234:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004238:	f003 0407 	and.w	r4, r3, #7
 800423c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004240:	240f      	movs	r4, #15
 8004242:	fa04 f40c 	lsl.w	r4, r4, ip
 8004246:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800424a:	690c      	ldr	r4, [r1, #16]
 800424c:	fa04 f40c 	lsl.w	r4, r4, ip
 8004250:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004254:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004258:	e067      	b.n	800432a <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800425a:	2402      	movs	r4, #2
 800425c:	e000      	b.n	8004260 <HAL_GPIO_Init+0x60>
 800425e:	2400      	movs	r4, #0
 8004260:	fa04 f40e 	lsl.w	r4, r4, lr
 8004264:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004266:	f10c 0c02 	add.w	ip, ip, #2
 800426a:	4d4b      	ldr	r5, [pc, #300]	; (8004398 <HAL_GPIO_Init+0x198>)
 800426c:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004270:	4c4a      	ldr	r4, [pc, #296]	; (800439c <HAL_GPIO_Init+0x19c>)
 8004272:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004274:	43d4      	mvns	r4, r2
 8004276:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800427a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800427e:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8004282:	d001      	beq.n	8004288 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004284:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004288:	4d44      	ldr	r5, [pc, #272]	; (800439c <HAL_GPIO_Init+0x19c>)
 800428a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800428c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800428e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004292:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004296:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 800429a:	d001      	beq.n	80042a0 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 800429c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80042a0:	4d3e      	ldr	r5, [pc, #248]	; (800439c <HAL_GPIO_Init+0x19c>)
 80042a2:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80042a4:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80042a8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042ac:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80042b0:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 80042b4:	d001      	beq.n	80042ba <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80042b6:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80042ba:	4d38      	ldr	r5, [pc, #224]	; (800439c <HAL_GPIO_Init+0x19c>)
 80042bc:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80042c0:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80042c4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042c6:	684e      	ldr	r6, [r1, #4]
 80042c8:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80042cc:	d001      	beq.n	80042d2 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 80042ce:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80042d2:	4a32      	ldr	r2, [pc, #200]	; (800439c <HAL_GPIO_Init+0x19c>)
 80042d4:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80042d8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042da:	680a      	ldr	r2, [r1, #0]
 80042dc:	fa32 f403 	lsrs.w	r4, r2, r3
 80042e0:	d058      	beq.n	8004394 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042e2:	f04f 0c01 	mov.w	ip, #1
 80042e6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80042ea:	ea1c 0202 	ands.w	r2, ip, r2
 80042ee:	d0f3      	beq.n	80042d8 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042f0:	684c      	ldr	r4, [r1, #4]
 80042f2:	f004 0403 	and.w	r4, r4, #3
 80042f6:	3c01      	subs	r4, #1
 80042f8:	2c01      	cmp	r4, #1
 80042fa:	d984      	bls.n	8004206 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042fc:	684c      	ldr	r4, [r1, #4]
 80042fe:	f004 0403 	and.w	r4, r4, #3
 8004302:	2c03      	cmp	r4, #3
 8004304:	d00c      	beq.n	8004320 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8004306:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004308:	005d      	lsls	r5, r3, #1
 800430a:	f04f 0c03 	mov.w	ip, #3
 800430e:	fa0c fc05 	lsl.w	ip, ip, r5
 8004312:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004316:	688c      	ldr	r4, [r1, #8]
 8004318:	40ac      	lsls	r4, r5
 800431a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800431e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004320:	684c      	ldr	r4, [r1, #4]
 8004322:	f004 0403 	and.w	r4, r4, #3
 8004326:	2c02      	cmp	r4, #2
 8004328:	d082      	beq.n	8004230 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800432a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800432c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004330:	f04f 0c03 	mov.w	ip, #3
 8004334:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004338:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800433c:	684c      	ldr	r4, [r1, #4]
 800433e:	f004 0403 	and.w	r4, r4, #3
 8004342:	fa04 f40e 	lsl.w	r4, r4, lr
 8004346:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800434a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800434c:	684c      	ldr	r4, [r1, #4]
 800434e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8004352:	d0c1      	beq.n	80042d8 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8004354:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004358:	f10c 0502 	add.w	r5, ip, #2
 800435c:	4c0e      	ldr	r4, [pc, #56]	; (8004398 <HAL_GPIO_Init+0x198>)
 800435e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004362:	f003 0403 	and.w	r4, r3, #3
 8004366:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800436a:	2407      	movs	r4, #7
 800436c:	fa04 f40e 	lsl.w	r4, r4, lr
 8004370:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004374:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004378:	f43f af71 	beq.w	800425e <HAL_GPIO_Init+0x5e>
 800437c:	4c08      	ldr	r4, [pc, #32]	; (80043a0 <HAL_GPIO_Init+0x1a0>)
 800437e:	42a0      	cmp	r0, r4
 8004380:	d006      	beq.n	8004390 <HAL_GPIO_Init+0x190>
 8004382:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004386:	42a0      	cmp	r0, r4
 8004388:	f43f af67 	beq.w	800425a <HAL_GPIO_Init+0x5a>
 800438c:	2407      	movs	r4, #7
 800438e:	e767      	b.n	8004260 <HAL_GPIO_Init+0x60>
 8004390:	2401      	movs	r4, #1
 8004392:	e765      	b.n	8004260 <HAL_GPIO_Init+0x60>
  }
}
 8004394:	bd70      	pop	{r4, r5, r6, pc}
 8004396:	bf00      	nop
 8004398:	40010000 	.word	0x40010000
 800439c:	58000800 	.word	0x58000800
 80043a0:	48000400 	.word	0x48000400

080043a4 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80043a4:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80043a6:	fa31 f203 	lsrs.w	r2, r1, r3
 80043aa:	d071      	beq.n	8004490 <HAL_GPIO_DeInit+0xec>
{
 80043ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ae:	e02e      	b.n	800440e <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80043b0:	2502      	movs	r5, #2
 80043b2:	e000      	b.n	80043b6 <HAL_GPIO_DeInit+0x12>
 80043b4:	2500      	movs	r5, #0
 80043b6:	fa05 fc0c 	lsl.w	ip, r5, ip
 80043ba:	45a4      	cmp	ip, r4
 80043bc:	d049      	beq.n	8004452 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80043be:	6804      	ldr	r4, [r0, #0]
 80043c0:	005d      	lsls	r5, r3, #1
 80043c2:	f04f 0c03 	mov.w	ip, #3
 80043c6:	fa0c fc05 	lsl.w	ip, ip, r5
 80043ca:	ea44 040c 	orr.w	r4, r4, ip
 80043ce:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80043d0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80043d4:	f10e 0e08 	add.w	lr, lr, #8
 80043d8:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80043dc:	f003 0507 	and.w	r5, r3, #7
 80043e0:	00ae      	lsls	r6, r5, #2
 80043e2:	250f      	movs	r5, #15
 80043e4:	40b5      	lsls	r5, r6
 80043e6:	ea24 0405 	bic.w	r4, r4, r5
 80043ea:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043ee:	6884      	ldr	r4, [r0, #8]
 80043f0:	ea24 040c 	bic.w	r4, r4, ip
 80043f4:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80043f6:	6844      	ldr	r4, [r0, #4]
 80043f8:	ea24 0202 	bic.w	r2, r4, r2
 80043fc:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043fe:	68c2      	ldr	r2, [r0, #12]
 8004400:	ea22 020c 	bic.w	r2, r2, ip
 8004404:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004406:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004408:	fa31 f203 	lsrs.w	r2, r1, r3
 800440c:	d03f      	beq.n	800448e <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 800440e:	2201      	movs	r2, #1
 8004410:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8004412:	ea12 0701 	ands.w	r7, r2, r1
 8004416:	d0f6      	beq.n	8004406 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004418:	089e      	lsrs	r6, r3, #2
 800441a:	1cb5      	adds	r5, r6, #2
 800441c:	4c1d      	ldr	r4, [pc, #116]	; (8004494 <HAL_GPIO_DeInit+0xf0>)
 800441e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004422:	f003 0c03 	and.w	ip, r3, #3
 8004426:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800442a:	f04f 0e07 	mov.w	lr, #7
 800442e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004432:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004436:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800443a:	d0bb      	beq.n	80043b4 <HAL_GPIO_DeInit+0x10>
 800443c:	4d16      	ldr	r5, [pc, #88]	; (8004498 <HAL_GPIO_DeInit+0xf4>)
 800443e:	42a8      	cmp	r0, r5
 8004440:	d005      	beq.n	800444e <HAL_GPIO_DeInit+0xaa>
 8004442:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004446:	42a8      	cmp	r0, r5
 8004448:	d0b2      	beq.n	80043b0 <HAL_GPIO_DeInit+0xc>
 800444a:	2507      	movs	r5, #7
 800444c:	e7b3      	b.n	80043b6 <HAL_GPIO_DeInit+0x12>
 800444e:	2501      	movs	r5, #1
 8004450:	e7b1      	b.n	80043b6 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8004452:	4c12      	ldr	r4, [pc, #72]	; (800449c <HAL_GPIO_DeInit+0xf8>)
 8004454:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004458:	ea25 0507 	bic.w	r5, r5, r7
 800445c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004460:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8004464:	ea25 0507 	bic.w	r5, r5, r7
 8004468:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800446c:	6825      	ldr	r5, [r4, #0]
 800446e:	ea25 0507 	bic.w	r5, r5, r7
 8004472:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004474:	6865      	ldr	r5, [r4, #4]
 8004476:	ea25 0707 	bic.w	r7, r5, r7
 800447a:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800447c:	4d05      	ldr	r5, [pc, #20]	; (8004494 <HAL_GPIO_DeInit+0xf0>)
 800447e:	3602      	adds	r6, #2
 8004480:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8004484:	ea24 040e 	bic.w	r4, r4, lr
 8004488:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 800448c:	e797      	b.n	80043be <HAL_GPIO_DeInit+0x1a>
  }
}
 800448e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000
 8004498:	48000400 	.word	0x48000400
 800449c:	58000800 	.word	0x58000800

080044a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80044a0:	6903      	ldr	r3, [r0, #16]
 80044a2:	4219      	tst	r1, r3
 80044a4:	d001      	beq.n	80044aa <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80044a6:	2001      	movs	r0, #1
 80044a8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044aa:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80044ac:	4770      	bx	lr

080044ae <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044ae:	b10a      	cbz	r2, 80044b4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044b0:	6181      	str	r1, [r0, #24]
 80044b2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044b4:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80044b6:	4770      	bx	lr

080044b8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044b8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044ba:	ea01 0203 	and.w	r2, r1, r3
 80044be:	ea21 0103 	bic.w	r1, r1, r3
 80044c2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80044c6:	6181      	str	r1, [r0, #24]
}
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044cc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	4203      	tst	r3, r0
 80044d4:	d100      	bne.n	80044d8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80044d6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044d8:	4b02      	ldr	r3, [pc, #8]	; (80044e4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80044da:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044dc:	f7fe fbe2 	bl	8002ca4 <HAL_GPIO_EXTI_Callback>
}
 80044e0:	e7f9      	b.n	80044d6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80044e2:	bf00      	nop
 80044e4:	58000800 	.word	0x58000800

080044e8 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044e8:	4a02      	ldr	r2, [pc, #8]	; (80044f4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80044ea:	6813      	ldr	r3, [r2, #0]
 80044ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f0:	6013      	str	r3, [r2, #0]
}
 80044f2:	4770      	bx	lr
 80044f4:	58000400 	.word	0x58000400

080044f8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80044f8:	b510      	push	{r4, lr}
 80044fa:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80044fc:	b9a0      	cbnz	r0, 8004528 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <HAL_PWR_EnterSLEEPMode+0x44>)
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004506:	d10a      	bne.n	800451e <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004508:	4a0d      	ldr	r2, [pc, #52]	; (8004540 <HAL_PWR_EnterSLEEPMode+0x48>)
 800450a:	6913      	ldr	r3, [r2, #16]
 800450c:	f023 0304 	bic.w	r3, r3, #4
 8004510:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004512:	2c01      	cmp	r4, #1
 8004514:	d010      	beq.n	8004538 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004516:	bf40      	sev
    __WFE();
 8004518:	bf20      	wfe
    __WFE();
 800451a:	bf20      	wfe
  }
}
 800451c:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800451e:	f000 f821 	bl	8004564 <HAL_PWREx_DisableLowPowerRunMode>
 8004522:	2800      	cmp	r0, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_PWR_EnterSLEEPMode+0x10>
 8004526:	e7f9      	b.n	800451c <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004528:	4b04      	ldr	r3, [pc, #16]	; (800453c <HAL_PWR_EnterSLEEPMode+0x44>)
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004530:	d1ea      	bne.n	8004508 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8004532:	f000 f80f 	bl	8004554 <HAL_PWREx_EnableLowPowerRunMode>
 8004536:	e7e7      	b.n	8004508 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004538:	bf30      	wfi
 800453a:	e7ef      	b.n	800451c <HAL_PWR_EnterSLEEPMode+0x24>
 800453c:	58000400 	.word	0x58000400
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8004544:	4b02      	ldr	r3, [pc, #8]	; (8004550 <HAL_PWREx_GetVoltageRange+0xc>)
 8004546:	6818      	ldr	r0, [r3, #0]
}
 8004548:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	58000400 	.word	0x58000400

08004554 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004554:	4a02      	ldr	r2, [pc, #8]	; (8004560 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800455c:	6013      	str	r3, [r2, #0]
}
 800455e:	4770      	bx	lr
 8004560:	58000400 	.word	0x58000400

08004564 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004564:	4a0f      	ldr	r2, [pc, #60]	; (80045a4 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004566:	6813      	ldr	r3, [r2, #0]
 8004568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800456c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800456e:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2232      	movs	r2, #50	; 0x32
 8004574:	fb02 f303 	mul.w	r3, r2, r3
 8004578:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004580:	e000      	b.n	8004584 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8004582:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004584:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004586:	6952      	ldr	r2, [r2, #20]
 8004588:	f412 7f00 	tst.w	r2, #512	; 0x200
 800458c:	d001      	beq.n	8004592 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f7      	bne.n	8004582 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004592:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f413 7f00 	tst.w	r3, #512	; 0x200
 800459a:	d101      	bne.n	80045a0 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 800459c:	2000      	movs	r0, #0
 800459e:	4770      	bx	lr
    return HAL_TIMEOUT;
 80045a0:	2003      	movs	r0, #3
}
 80045a2:	4770      	bx	lr
 80045a4:	58000400 	.word	0x58000400
 80045a8:	20000070 	.word	0x20000070
 80045ac:	431bde83 	.word	0x431bde83

080045b0 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80045b0:	4a0c      	ldr	r2, [pc, #48]	; (80045e4 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80045b2:	6813      	ldr	r3, [r2, #0]
 80045b4:	f023 0307 	bic.w	r3, r3, #7
 80045b8:	f043 0302 	orr.w	r3, r3, #2
 80045bc:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80045be:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80045c0:	6913      	ldr	r3, [r2, #16]
 80045c2:	f043 0304 	orr.w	r3, r3, #4
 80045c6:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80045c8:	2801      	cmp	r0, #1
 80045ca:	d008      	beq.n	80045de <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80045cc:	bf40      	sev
    __WFE();
 80045ce:	bf20      	wfe
    __WFE();
 80045d0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80045d2:	4a05      	ldr	r2, [pc, #20]	; (80045e8 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80045d4:	6913      	ldr	r3, [r2, #16]
 80045d6:	f023 0304 	bic.w	r3, r3, #4
 80045da:	6113      	str	r3, [r2, #16]
}
 80045dc:	4770      	bx	lr
    __WFI();
 80045de:	bf30      	wfi
 80045e0:	e7f7      	b.n	80045d2 <HAL_PWREx_EnterSTOP2Mode+0x22>
 80045e2:	bf00      	nop
 80045e4:	58000400 	.word	0x58000400
 80045e8:	e000ed00 	.word	0xe000ed00

080045ec <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80045ec:	b530      	push	{r4, r5, lr}
 80045ee:	b089      	sub	sp, #36	; 0x24
 80045f0:	4604      	mov	r4, r0
 80045f2:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80045f4:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <RCC_SetFlashLatency+0xb4>)
 80045f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80045fa:	9006      	str	r0, [sp, #24]
 80045fc:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004600:	f103 0208 	add.w	r2, r3, #8
 8004604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004608:	9004      	str	r0, [sp, #16]
 800460a:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800460e:	ad01      	add	r5, sp, #4
 8004610:	3310      	adds	r3, #16
 8004612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004616:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800461a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800461e:	d007      	beq.n	8004630 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004620:	2300      	movs	r3, #0
 8004622:	e014      	b.n	800464e <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8004624:	aa08      	add	r2, sp, #32
 8004626:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800462a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800462e:	e01e      	b.n	800466e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004630:	2300      	movs	r3, #0
 8004632:	2b02      	cmp	r3, #2
 8004634:	d808      	bhi.n	8004648 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004636:	aa08      	add	r2, sp, #32
 8004638:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800463c:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8004640:	42a2      	cmp	r2, r4
 8004642:	d2ef      	bcs.n	8004624 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004644:	3301      	adds	r3, #1
 8004646:	e7f4      	b.n	8004632 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004648:	2500      	movs	r5, #0
 800464a:	e010      	b.n	800466e <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800464c:	3301      	adds	r3, #1
 800464e:	2b02      	cmp	r3, #2
 8004650:	d80c      	bhi.n	800466c <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004652:	aa08      	add	r2, sp, #32
 8004654:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004658:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 800465c:	42a2      	cmp	r2, r4
 800465e:	d3f5      	bcc.n	800464c <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004660:	aa08      	add	r2, sp, #32
 8004662:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004666:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800466a:	e000      	b.n	800466e <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800466c:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800466e:	4a0d      	ldr	r2, [pc, #52]	; (80046a4 <RCC_SetFlashLatency+0xb8>)
 8004670:	6813      	ldr	r3, [r2, #0]
 8004672:	f023 0307 	bic.w	r3, r3, #7
 8004676:	432b      	orrs	r3, r5
 8004678:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800467a:	f7fd fa37 	bl	8001aec <HAL_GetTick>
 800467e:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004680:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <RCC_SetFlashLatency+0xb8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	42ab      	cmp	r3, r5
 800468a:	d006      	beq.n	800469a <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800468c:	f7fd fa2e 	bl	8001aec <HAL_GetTick>
 8004690:	1b00      	subs	r0, r0, r4
 8004692:	2802      	cmp	r0, #2
 8004694:	d9f4      	bls.n	8004680 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8004696:	2003      	movs	r0, #3
 8004698:	e000      	b.n	800469c <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 800469a:	2000      	movs	r0, #0
}
 800469c:	b009      	add	sp, #36	; 0x24
 800469e:	bd30      	pop	{r4, r5, pc}
 80046a0:	08012c30 	.word	0x08012c30
 80046a4:	58004000 	.word	0x58004000

080046a8 <RCC_SetFlashLatencyFromMSIRange>:
{
 80046a8:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80046aa:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80046b0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80046b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80046bc:	f003 030f 	and.w	r3, r3, #15
 80046c0:	4a08      	ldr	r2, [pc, #32]	; (80046e4 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80046c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046c6:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80046ca:	f7ff ff3b 	bl	8004544 <HAL_PWREx_GetVoltageRange>
 80046ce:	4601      	mov	r1, r0
 80046d0:	4805      	ldr	r0, [pc, #20]	; (80046e8 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80046d2:	fba0 3004 	umull	r3, r0, r0, r4
 80046d6:	0c80      	lsrs	r0, r0, #18
 80046d8:	f7ff ff88 	bl	80045ec <RCC_SetFlashLatency>
}
 80046dc:	bd10      	pop	{r4, pc}
 80046de:	bf00      	nop
 80046e0:	08013238 	.word	0x08013238
 80046e4:	080131d8 	.word	0x080131d8
 80046e8:	431bde83 	.word	0x431bde83

080046ec <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80046ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f0:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80046f8:	f011 010c 	ands.w	r1, r1, #12
 80046fc:	d00a      	beq.n	8004714 <HAL_RCC_GetSysClockFreq+0x28>
 80046fe:	290c      	cmp	r1, #12
 8004700:	d006      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004702:	2904      	cmp	r1, #4
 8004704:	d047      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004706:	2908      	cmp	r1, #8
 8004708:	d03b      	beq.n	8004782 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 800470a:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 800470c:	4610      	mov	r0, r2
 800470e:	e026      	b.n	800475e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004710:	2b01      	cmp	r3, #1
 8004712:	d1f6      	bne.n	8004702 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f013 0308 	ands.w	r3, r3, #8
 800471e:	d00d      	beq.n	800473c <HAL_RCC_GetSysClockFreq+0x50>
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f013 0308 	ands.w	r3, r3, #8
 800472a:	d124      	bne.n	8004776 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800472c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004730:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004734:	4a2e      	ldr	r2, [pc, #184]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004736:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800473a:	e00e      	b.n	800475a <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800473c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	f012 0f08 	tst.w	r2, #8
 8004746:	d112      	bne.n	800476e <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004750:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004754:	4a26      	ldr	r2, [pc, #152]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8004756:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800475a:	b1d1      	cbz	r1, 8004792 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 800475c:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800475e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004768:	2b0c      	cmp	r3, #12
 800476a:	d01a      	beq.n	80047a2 <HAL_RCC_GetSysClockFreq+0xb6>
}
 800476c:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800476e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	e7ee      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x68>
 8004776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477a:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800477c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004780:	e7d8      	b.n	8004734 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 800478c:	d106      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 800478e:	4819      	ldr	r0, [pc, #100]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004790:	e7e5      	b.n	800475e <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8004792:	4610      	mov	r0, r2
 8004794:	e7e3      	b.n	800475e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004796:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8004798:	4817      	ldr	r0, [pc, #92]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800479a:	e7e0      	b.n	800475e <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800479c:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 800479e:	4816      	ldr	r0, [pc, #88]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047a0:	e7dd      	b.n	800475e <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80047a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d009      	beq.n	80047c4 <HAL_RCC_GetSysClockFreq+0xd8>
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d108      	bne.n	80047c6 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80047b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80047be:	d115      	bne.n	80047ec <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80047c0:	4a0c      	ldr	r2, [pc, #48]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c2:	e000      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80047c4:	4a0c      	ldr	r2, [pc, #48]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80047c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ca:	68d8      	ldr	r0, [r3, #12]
 80047cc:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80047d0:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80047d4:	68d8      	ldr	r0, [r3, #12]
 80047d6:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80047da:	3001      	adds	r0, #1
 80047dc:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80047e0:	68d8      	ldr	r0, [r3, #12]
 80047e2:	0f40      	lsrs	r0, r0, #29
 80047e4:	3001      	adds	r0, #1
 80047e6:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80047ea:	e7bf      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80047ec:	4a02      	ldr	r2, [pc, #8]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80047ee:	e7ea      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0xda>
 80047f0:	08013238 	.word	0x08013238
 80047f4:	01e84800 	.word	0x01e84800
 80047f8:	00f42400 	.word	0x00f42400

080047fc <HAL_RCC_GetHCLKFreq>:
{
 80047fc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80047fe:	f7ff ff75 	bl	80046ec <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800480c:	4a02      	ldr	r2, [pc, #8]	; (8004818 <HAL_RCC_GetHCLKFreq+0x1c>)
 800480e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004812:	fbb0 f0f3 	udiv	r0, r0, r3
 8004816:	bd08      	pop	{r3, pc}
 8004818:	080131d8 	.word	0x080131d8

0800481c <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800481c:	2800      	cmp	r0, #0
 800481e:	f000 8319 	beq.w	8004e54 <HAL_RCC_OscConfig+0x638>
{
 8004822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004824:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800482a:	689d      	ldr	r5, [r3, #8]
 800482c:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004830:	68de      	ldr	r6, [r3, #12]
 8004832:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004836:	6803      	ldr	r3, [r0, #0]
 8004838:	f013 0f20 	tst.w	r3, #32
 800483c:	f000 808f 	beq.w	800495e <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004840:	b1ed      	cbz	r5, 800487e <HAL_RCC_OscConfig+0x62>
 8004842:	2d0c      	cmp	r5, #12
 8004844:	d019      	beq.n	800487a <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004846:	6a23      	ldr	r3, [r4, #32]
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80bc 	beq.w	80049c6 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800484e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004852:	6813      	ldr	r3, [r2, #0]
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800485a:	f7fd f947 	bl	8001aec <HAL_GetTick>
 800485e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f013 0f02 	tst.w	r3, #2
 800486a:	d165      	bne.n	8004938 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800486c:	f7fd f93e 	bl	8001aec <HAL_GetTick>
 8004870:	1bc0      	subs	r0, r0, r7
 8004872:	2802      	cmp	r0, #2
 8004874:	d9f4      	bls.n	8004860 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8004876:	2003      	movs	r0, #3
 8004878:	e2f9      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800487a:	2e01      	cmp	r6, #1
 800487c:	d1e3      	bne.n	8004846 <HAL_RCC_OscConfig+0x2a>
 800487e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f013 0f02 	tst.w	r3, #2
 8004888:	d003      	beq.n	8004892 <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800488a:	6a23      	ldr	r3, [r4, #32]
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 82e3 	beq.w	8004e58 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004892:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f013 0f08 	tst.w	r3, #8
 800489e:	d029      	beq.n	80048f4 <HAL_RCC_OscConfig+0xd8>
 80048a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048aa:	4298      	cmp	r0, r3
 80048ac:	d92a      	bls.n	8004904 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048ae:	f7ff fefb 	bl	80046a8 <RCC_SetFlashLatencyFromMSIRange>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	f040 82d2 	bne.w	8004e5c <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	f042 0208 	orr.w	r2, r2, #8
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80048ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80048d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80048dc:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80048de:	f7ff ff8d 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 80048e2:	4bb0      	ldr	r3, [pc, #704]	; (8004ba4 <HAL_RCC_OscConfig+0x388>)
 80048e4:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80048e6:	4bb0      	ldr	r3, [pc, #704]	; (8004ba8 <HAL_RCC_OscConfig+0x38c>)
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	f7fd f8fd 	bl	8001ae8 <HAL_InitTick>
        if (status != HAL_OK)
 80048ee:	2800      	cmp	r0, #0
 80048f0:	d035      	beq.n	800495e <HAL_RCC_OscConfig+0x142>
 80048f2:	e2bc      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004902:	e7d2      	b.n	80048aa <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	f042 0208 	orr.w	r2, r2, #8
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004916:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004918:	430a      	orrs	r2, r1
 800491a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800491c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004924:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004928:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800492a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800492c:	f7ff febc 	bl	80046a8 <RCC_SetFlashLatencyFromMSIRange>
 8004930:	2800      	cmp	r0, #0
 8004932:	d0d4      	beq.n	80048de <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8004934:	2001      	movs	r0, #1
 8004936:	e29a      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	f042 0208 	orr.w	r2, r2, #8
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800494a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004950:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004958:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800495c:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	f013 0f01 	tst.w	r3, #1
 8004964:	d051      	beq.n	8004a0a <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004966:	2d08      	cmp	r5, #8
 8004968:	d045      	beq.n	80049f6 <HAL_RCC_OscConfig+0x1da>
 800496a:	2d0c      	cmp	r5, #12
 800496c:	d041      	beq.n	80049f2 <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800496e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004972:	6813      	ldr	r3, [r2, #0]
 8004974:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004978:	68a1      	ldr	r1, [r4, #8]
 800497a:	430b      	orrs	r3, r1
 800497c:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800497e:	6863      	ldr	r3, [r4, #4]
 8004980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004984:	d063      	beq.n	8004a4e <HAL_RCC_OscConfig+0x232>
 8004986:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800498a:	d065      	beq.n	8004a58 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800498c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004996:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800499e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049a0:	6863      	ldr	r3, [r4, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d063      	beq.n	8004a6e <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 80049a6:	f7fd f8a1 	bl	8001aec <HAL_GetTick>
 80049aa:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80049ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80049b6:	d128      	bne.n	8004a0a <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b8:	f7fd f898 	bl	8001aec <HAL_GetTick>
 80049bc:	1bc0      	subs	r0, r0, r7
 80049be:	2864      	cmp	r0, #100	; 0x64
 80049c0:	d9f4      	bls.n	80049ac <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80049c2:	2003      	movs	r0, #3
 80049c4:	e253      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80049c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ca:	6813      	ldr	r3, [r2, #0]
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80049d2:	f7fd f88b 	bl	8001aec <HAL_GetTick>
 80049d6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f013 0f02 	tst.w	r3, #2
 80049e2:	d0bc      	beq.n	800495e <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049e4:	f7fd f882 	bl	8001aec <HAL_GetTick>
 80049e8:	1bc0      	subs	r0, r0, r7
 80049ea:	2802      	cmp	r0, #2
 80049ec:	d9f4      	bls.n	80049d8 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 80049ee:	2003      	movs	r0, #3
 80049f0:	e23d      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049f2:	2e03      	cmp	r6, #3
 80049f4:	d1bb      	bne.n	800496e <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80049f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004a00:	d003      	beq.n	8004a0a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a02:	6863      	ldr	r3, [r4, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 822b 	beq.w	8004e60 <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	f013 0f02 	tst.w	r3, #2
 8004a10:	d052      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004a12:	2d04      	cmp	r5, #4
 8004a14:	d03d      	beq.n	8004a92 <HAL_RCC_OscConfig+0x276>
 8004a16:	2d0c      	cmp	r5, #12
 8004a18:	d039      	beq.n	8004a8e <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a1a:	6923      	ldr	r3, [r4, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 8091 	beq.w	8004b44 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a26:	6813      	ldr	r3, [r2, #0]
 8004a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a2e:	f7fd f85d 	bl	8001aec <HAL_GetTick>
 8004a32:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004a3e:	d177      	bne.n	8004b30 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a40:	f7fd f854 	bl	8001aec <HAL_GetTick>
 8004a44:	1b80      	subs	r0, r0, r6
 8004a46:	2802      	cmp	r0, #2
 8004a48:	d9f4      	bls.n	8004a34 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8004a4a:	2003      	movs	r0, #3
 8004a4c:	e20f      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004a4e:	6813      	ldr	r3, [r2, #0]
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
}
 8004a56:	e7a3      	b.n	80049a0 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004a62:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004a6a:	601a      	str	r2, [r3, #0]
}
 8004a6c:	e798      	b.n	80049a0 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8004a6e:	f7fd f83d 	bl	8001aec <HAL_GetTick>
 8004a72:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004a7e:	d0c4      	beq.n	8004a0a <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a80:	f7fd f834 	bl	8001aec <HAL_GetTick>
 8004a84:	1bc0      	subs	r0, r0, r7
 8004a86:	2864      	cmp	r0, #100	; 0x64
 8004a88:	d9f4      	bls.n	8004a74 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8004a8a:	2003      	movs	r0, #3
 8004a8c:	e1ef      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a8e:	2e02      	cmp	r6, #2
 8004a90:	d1c3      	bne.n	8004a1a <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a9e:	6923      	ldr	r3, [r4, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 81df 	beq.w	8004e64 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aac:	6853      	ldr	r3, [r2, #4]
 8004aae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ab2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004ab6:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	f013 0f08 	tst.w	r3, #8
 8004abe:	f000 808e 	beq.w	8004bde <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ac2:	69a3      	ldr	r3, [r4, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d071      	beq.n	8004bac <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004ad0:	69e1      	ldr	r1, [r4, #28]
 8004ad2:	f003 0210 	and.w	r2, r3, #16
 8004ad6:	4291      	cmp	r1, r2
 8004ad8:	d011      	beq.n	8004afe <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004ada:	f003 0203 	and.w	r2, r3, #3
 8004ade:	2a02      	cmp	r2, #2
 8004ae0:	f000 81c2 	beq.w	8004e68 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004ae4:	f013 0f01 	tst.w	r3, #1
 8004ae8:	d142      	bne.n	8004b70 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aee:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004af2:	f023 0310 	bic.w	r3, r3, #16
 8004af6:	69e1      	ldr	r1, [r4, #28]
 8004af8:	430b      	orrs	r3, r1
 8004afa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b02:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004b0e:	f7fc ffed 	bl	8001aec <HAL_GetTick>
 8004b12:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b1c:	f013 0f02 	tst.w	r3, #2
 8004b20:	d15d      	bne.n	8004bde <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b22:	f7fc ffe3 	bl	8001aec <HAL_GetTick>
 8004b26:	1b80      	subs	r0, r0, r6
 8004b28:	2811      	cmp	r0, #17
 8004b2a:	d9f3      	bls.n	8004b14 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8004b2c:	2003      	movs	r0, #3
 8004b2e:	e19e      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b30:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b36:	6853      	ldr	r3, [r2, #4]
 8004b38:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004b3c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004b40:	6053      	str	r3, [r2, #4]
}
 8004b42:	e7b9      	b.n	8004ab8 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b48:	6813      	ldr	r3, [r2, #0]
 8004b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b4e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004b50:	f7fc ffcc 	bl	8001aec <HAL_GetTick>
 8004b54:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004b60:	d0aa      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b62:	f7fc ffc3 	bl	8001aec <HAL_GetTick>
 8004b66:	1b80      	subs	r0, r0, r6
 8004b68:	2802      	cmp	r0, #2
 8004b6a:	d9f4      	bls.n	8004b56 <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8004b6c:	2003      	movs	r0, #3
 8004b6e:	e17e      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b74:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004b80:	f7fc ffb4 	bl	8001aec <HAL_GetTick>
 8004b84:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b8e:	f013 0f02 	tst.w	r3, #2
 8004b92:	d0aa      	beq.n	8004aea <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b94:	f7fc ffaa 	bl	8001aec <HAL_GetTick>
 8004b98:	1b80      	subs	r0, r0, r6
 8004b9a:	2811      	cmp	r0, #17
 8004b9c:	d9f3      	bls.n	8004b86 <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8004b9e:	2003      	movs	r0, #3
 8004ba0:	e165      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
 8004ba2:	bf00      	nop
 8004ba4:	20000070 	.word	0x20000070
 8004ba8:	20000074 	.word	0x20000074
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004bbc:	f7fc ff96 	bl	8001aec <HAL_GetTick>
 8004bc0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bca:	f013 0f02 	tst.w	r3, #2
 8004bce:	d006      	beq.n	8004bde <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd0:	f7fc ff8c 	bl	8001aec <HAL_GetTick>
 8004bd4:	1b80      	subs	r0, r0, r6
 8004bd6:	2811      	cmp	r0, #17
 8004bd8:	d9f3      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 8004bda:	2003      	movs	r0, #3
 8004bdc:	e147      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	f013 0f04 	tst.w	r3, #4
 8004be4:	f000 80b1 	beq.w	8004d4a <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004be8:	4ba8      	ldr	r3, [pc, #672]	; (8004e8c <HAL_RCC_OscConfig+0x670>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004bf0:	d110      	bne.n	8004c14 <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 8004bf2:	f7ff fc79 	bl	80044e8 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8004bf6:	f7fc ff79 	bl	8001aec <HAL_GetTick>
 8004bfa:	4606      	mov	r6, r0
 8004bfc:	4ba3      	ldr	r3, [pc, #652]	; (8004e8c <HAL_RCC_OscConfig+0x670>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c06:	f7fc ff71 	bl	8001aec <HAL_GetTick>
 8004c0a:	1b80      	subs	r0, r0, r6
 8004c0c:	2802      	cmp	r0, #2
 8004c0e:	d9f5      	bls.n	8004bfc <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 8004c10:	2003      	movs	r0, #3
 8004c12:	e12c      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c14:	68e3      	ldr	r3, [r4, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d061      	beq.n	8004cde <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004c1a:	2b85      	cmp	r3, #133	; 0x85
 8004c1c:	d001      	beq.n	8004c22 <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004c1e:	2b05      	cmp	r3, #5
 8004c20:	d107      	bne.n	8004c32 <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c26:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c2a:	f043 0304 	orr.w	r3, r3, #4
 8004c2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004c32:	f7fc ff5b 	bl	8001aec <HAL_GetTick>
 8004c36:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c3c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c40:	f043 0301 	orr.w	r3, r3, #1
 8004c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c50:	f013 0f02 	tst.w	r3, #2
 8004c54:	d108      	bne.n	8004c68 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fc ff49 	bl	8001aec <HAL_GetTick>
 8004c5a:	1b80      	subs	r0, r0, r6
 8004c5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c60:	4298      	cmp	r0, r3
 8004c62:	d9f1      	bls.n	8004c48 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 8004c64:	2003      	movs	r0, #3
 8004c66:	e102      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004c68:	68e3      	ldr	r3, [r4, #12]
 8004c6a:	2b81      	cmp	r3, #129	; 0x81
 8004c6c:	d001      	beq.n	8004c72 <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004c6e:	2b85      	cmp	r3, #133	; 0x85
 8004c70:	d11a      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 8004c72:	f7fc ff3b 	bl	8001aec <HAL_GetTick>
 8004c76:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004c78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c7c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c90:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004c94:	d159      	bne.n	8004d4a <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fc ff29 	bl	8001aec <HAL_GetTick>
 8004c9a:	1b80      	subs	r0, r0, r6
 8004c9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ca0:	4298      	cmp	r0, r3
 8004ca2:	d9f1      	bls.n	8004c88 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8004ca4:	2003      	movs	r0, #3
 8004ca6:	e0e2      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8004ca8:	f7fc ff20 	bl	8001aec <HAL_GetTick>
 8004cac:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cb2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004cca:	d03e      	beq.n	8004d4a <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ccc:	f7fc ff0e 	bl	8001aec <HAL_GetTick>
 8004cd0:	1b80      	subs	r0, r0, r6
 8004cd2:	f241 3388 	movw	r3, #5000	; 0x1388
 8004cd6:	4298      	cmp	r0, r3
 8004cd8:	d9f1      	bls.n	8004cbe <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 8004cda:	2003      	movs	r0, #3
 8004cdc:	e0c7      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8004cde:	f7fc ff05 	bl	8001aec <HAL_GetTick>
 8004ce2:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ce8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfc:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004d00:	d008      	beq.n	8004d14 <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fc fef3 	bl	8001aec <HAL_GetTick>
 8004d06:	1b80      	subs	r0, r0, r6
 8004d08:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d0c:	4298      	cmp	r0, r3
 8004d0e:	d9f1      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 8004d10:	2003      	movs	r0, #3
 8004d12:	e0ac      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8004d14:	f7fc feea 	bl	8001aec <HAL_GetTick>
 8004d18:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d1e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	f013 0f02 	tst.w	r3, #2
 8004d36:	d008      	beq.n	8004d4a <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d38:	f7fc fed8 	bl	8001aec <HAL_GetTick>
 8004d3c:	1b80      	subs	r0, r0, r6
 8004d3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d42:	4298      	cmp	r0, r3
 8004d44:	d9f1      	bls.n	8004d2a <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 8004d46:	2003      	movs	r0, #3
 8004d48:	e091      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 808d 	beq.w	8004e6c <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d52:	2d0c      	cmp	r5, #12
 8004d54:	d062      	beq.n	8004e1c <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d01f      	beq.n	8004d9a <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004d64:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	f022 0203 	bic.w	r2, r2, #3
 8004d6c:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8004d6e:	68da      	ldr	r2, [r3, #12]
 8004d70:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8004d74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d78:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004d7a:	f7fc feb7 	bl	8001aec <HAL_GetTick>
 8004d7e:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004d8a:	d073      	beq.n	8004e74 <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d8c:	f7fc feae 	bl	8001aec <HAL_GetTick>
 8004d90:	1b00      	subs	r0, r0, r4
 8004d92:	280a      	cmp	r0, #10
 8004d94:	d9f4      	bls.n	8004d80 <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 8004d96:	2003      	movs	r0, #3
 8004d98:	e069      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d9e:	6813      	ldr	r3, [r2, #0]
 8004da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004da4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004da6:	f7fc fea1 	bl	8001aec <HAL_GetTick>
 8004daa:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004db6:	d12a      	bne.n	8004e0e <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dbc:	68d3      	ldr	r3, [r2, #12]
 8004dbe:	4934      	ldr	r1, [pc, #208]	; (8004e90 <HAL_RCC_OscConfig+0x674>)
 8004dc0:	4019      	ands	r1, r3
 8004dc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004dc4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004dc6:	4303      	orrs	r3, r0
 8004dc8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004dca:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004dce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004dd0:	4303      	orrs	r3, r0
 8004dd2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004dd4:	4303      	orrs	r3, r0
 8004dd6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004dd8:	4303      	orrs	r3, r0
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004dde:	6813      	ldr	r3, [r2, #0]
 8004de0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004de4:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004de6:	68d3      	ldr	r3, [r2, #12]
 8004de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dec:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004dee:	f7fc fe7d 	bl	8001aec <HAL_GetTick>
 8004df2:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004dfe:	d137      	bne.n	8004e70 <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e00:	f7fc fe74 	bl	8001aec <HAL_GetTick>
 8004e04:	1b00      	subs	r0, r0, r4
 8004e06:	280a      	cmp	r0, #10
 8004e08:	d9f4      	bls.n	8004df4 <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 8004e0a:	2003      	movs	r0, #3
 8004e0c:	e02f      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e0e:	f7fc fe6d 	bl	8001aec <HAL_GetTick>
 8004e12:	1b40      	subs	r0, r0, r5
 8004e14:	280a      	cmp	r0, #10
 8004e16:	d9c9      	bls.n	8004dac <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8004e18:	2003      	movs	r0, #3
 8004e1a:	e028      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d02b      	beq.n	8004e78 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 8004e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e24:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004e26:	f003 0103 	and.w	r1, r3, #3
 8004e2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e2c:	4291      	cmp	r1, r2
 8004e2e:	d125      	bne.n	8004e7c <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004e30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e36:	428a      	cmp	r2, r1
 8004e38:	d122      	bne.n	8004e80 <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004e3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e40:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004e44:	d11e      	bne.n	8004e84 <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004e46:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004e4a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d11b      	bne.n	8004e88 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8004e50:	2000      	movs	r0, #0
 8004e52:	e00c      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 8004e54:	2001      	movs	r0, #1
}
 8004e56:	4770      	bx	lr
        return HAL_ERROR;
 8004e58:	2001      	movs	r0, #1
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 8004e5c:	2001      	movs	r0, #1
 8004e5e:	e006      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004e60:	2001      	movs	r0, #1
 8004e62:	e004      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004e64:	2001      	movs	r0, #1
 8004e66:	e002      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8004e68:	2001      	movs	r0, #1
 8004e6a:	e000      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 8004e6c:	2000      	movs	r0, #0
}
 8004e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004e70:	2000      	movs	r0, #0
 8004e72:	e7fc      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
 8004e74:	2000      	movs	r0, #0
 8004e76:	e7fa      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004e78:	2001      	movs	r0, #1
 8004e7a:	e7f8      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	e7f6      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
 8004e80:	2001      	movs	r0, #1
 8004e82:	e7f4      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
 8004e84:	2001      	movs	r0, #1
 8004e86:	e7f2      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
 8004e88:	2001      	movs	r0, #1
 8004e8a:	e7f0      	b.n	8004e6e <HAL_RCC_OscConfig+0x652>
 8004e8c:	58000400 	.word	0x58000400
 8004e90:	11c1808c 	.word	0x11c1808c

08004e94 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004e94:	2800      	cmp	r0, #0
 8004e96:	f000 8127 	beq.w	80050e8 <HAL_RCC_ClockConfig+0x254>
{
 8004e9a:	b570      	push	{r4, r5, r6, lr}
 8004e9c:	460c      	mov	r4, r1
 8004e9e:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea0:	4b93      	ldr	r3, [pc, #588]	; (80050f0 <HAL_RCC_ClockConfig+0x25c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	428b      	cmp	r3, r1
 8004eaa:	d32d      	bcc.n	8004f08 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	f013 0f02 	tst.w	r3, #2
 8004eb2:	d13f      	bne.n	8004f34 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	f013 0f20 	tst.w	r3, #32
 8004eba:	d153      	bne.n	8004f64 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004ebc:	682b      	ldr	r3, [r5, #0]
 8004ebe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004ec2:	d16a      	bne.n	8004f9a <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	f013 0f04 	tst.w	r3, #4
 8004eca:	f040 8083 	bne.w	8004fd4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ece:	682b      	ldr	r3, [r5, #0]
 8004ed0:	f013 0f08 	tst.w	r3, #8
 8004ed4:	f040 8097 	bne.w	8005006 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	f013 0f01 	tst.w	r3, #1
 8004ede:	f000 80de 	beq.w	800509e <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ee2:	686b      	ldr	r3, [r5, #4]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	f000 80a8 	beq.w	800503a <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	f000 80ad 	beq.w	800504a <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 80b2 	bne.w	800505a <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	f012 0f02 	tst.w	r2, #2
 8004f00:	f040 80b1 	bne.w	8005066 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004f04:	2001      	movs	r0, #1
 8004f06:	e0ee      	b.n	80050e6 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f08:	4a79      	ldr	r2, [pc, #484]	; (80050f0 <HAL_RCC_ClockConfig+0x25c>)
 8004f0a:	6813      	ldr	r3, [r2, #0]
 8004f0c:	f023 0307 	bic.w	r3, r3, #7
 8004f10:	430b      	orrs	r3, r1
 8004f12:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004f14:	f7fc fdea 	bl	8001aec <HAL_GetTick>
 8004f18:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1a:	4b75      	ldr	r3, [pc, #468]	; (80050f0 <HAL_RCC_ClockConfig+0x25c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	42a3      	cmp	r3, r4
 8004f24:	d0c2      	beq.n	8004eac <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f26:	f7fc fde1 	bl	8001aec <HAL_GetTick>
 8004f2a:	1b80      	subs	r0, r0, r6
 8004f2c:	2802      	cmp	r0, #2
 8004f2e:	d9f4      	bls.n	8004f1a <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8004f30:	2003      	movs	r0, #3
 8004f32:	e0d8      	b.n	80050e6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004f34:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f3a:	688a      	ldr	r2, [r1, #8]
 8004f3c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004f40:	4313      	orrs	r3, r2
 8004f42:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004f44:	f7fc fdd2 	bl	8001aec <HAL_GetTick>
 8004f48:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004f54:	d1ae      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f56:	f7fc fdc9 	bl	8001aec <HAL_GetTick>
 8004f5a:	1b80      	subs	r0, r0, r6
 8004f5c:	2802      	cmp	r0, #2
 8004f5e:	d9f4      	bls.n	8004f4a <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004f60:	2003      	movs	r0, #3
 8004f62:	e0c0      	b.n	80050e6 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004f64:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f6a:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8004f6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004f78:	f7fc fdb8 	bl	8001aec <HAL_GetTick>
 8004f7c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004f8a:	d197      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f8c:	f7fc fdae 	bl	8001aec <HAL_GetTick>
 8004f90:	1b80      	subs	r0, r0, r6
 8004f92:	2802      	cmp	r0, #2
 8004f94:	d9f3      	bls.n	8004f7e <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004f96:	2003      	movs	r0, #3
 8004f98:	e0a5      	b.n	80050e6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004f9a:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fa0:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8004fa4:	f023 030f 	bic.w	r3, r3, #15
 8004fa8:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8004fac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004fb0:	f7fc fd9c 	bl	8001aec <HAL_GetTick>
 8004fb4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fbe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004fc2:	f47f af7f 	bne.w	8004ec4 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fc6:	f7fc fd91 	bl	8001aec <HAL_GetTick>
 8004fca:	1b80      	subs	r0, r0, r6
 8004fcc:	2802      	cmp	r0, #2
 8004fce:	d9f2      	bls.n	8004fb6 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8004fd0:	2003      	movs	r0, #3
 8004fd2:	e088      	b.n	80050e6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004fd4:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fda:	688a      	ldr	r2, [r1, #8]
 8004fdc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004fe4:	f7fc fd82 	bl	8001aec <HAL_GetTick>
 8004fe8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004ff4:	f47f af6b 	bne.w	8004ece <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ff8:	f7fc fd78 	bl	8001aec <HAL_GetTick>
 8004ffc:	1b80      	subs	r0, r0, r6
 8004ffe:	2802      	cmp	r0, #2
 8005000:	d9f3      	bls.n	8004fea <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8005002:	2003      	movs	r0, #3
 8005004:	e06f      	b.n	80050e6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005006:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800500c:	6893      	ldr	r3, [r2, #8]
 800500e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005012:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005016:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005018:	f7fc fd68 	bl	8001aec <HAL_GetTick>
 800501c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800501e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005028:	f47f af56 	bne.w	8004ed8 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800502c:	f7fc fd5e 	bl	8001aec <HAL_GetTick>
 8005030:	1b80      	subs	r0, r0, r6
 8005032:	2802      	cmp	r0, #2
 8005034:	d9f3      	bls.n	800501e <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8005036:	2003      	movs	r0, #3
 8005038:	e055      	b.n	80050e6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800503a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005044:	d10f      	bne.n	8005066 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005046:	2001      	movs	r0, #1
 8005048:	e04d      	b.n	80050e6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800504a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800504e:	6812      	ldr	r2, [r2, #0]
 8005050:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005054:	d107      	bne.n	8005066 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005056:	2001      	movs	r0, #1
 8005058:	e045      	b.n	80050e6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800505a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005064:	d042      	beq.n	80050ec <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800506a:	688a      	ldr	r2, [r1, #8]
 800506c:	f022 0203 	bic.w	r2, r2, #3
 8005070:	4313      	orrs	r3, r2
 8005072:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005074:	f7fc fd3a 	bl	8001aec <HAL_GetTick>
 8005078:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800507a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005084:	686a      	ldr	r2, [r5, #4]
 8005086:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800508a:	d008      	beq.n	800509e <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800508c:	f7fc fd2e 	bl	8001aec <HAL_GetTick>
 8005090:	1b80      	subs	r0, r0, r6
 8005092:	f241 3388 	movw	r3, #5000	; 0x1388
 8005096:	4298      	cmp	r0, r3
 8005098:	d9ef      	bls.n	800507a <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 800509a:	2003      	movs	r0, #3
 800509c:	e023      	b.n	80050e6 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800509e:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <HAL_RCC_ClockConfig+0x25c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	42a3      	cmp	r3, r4
 80050a8:	d915      	bls.n	80050d6 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050aa:	4a11      	ldr	r2, [pc, #68]	; (80050f0 <HAL_RCC_ClockConfig+0x25c>)
 80050ac:	6813      	ldr	r3, [r2, #0]
 80050ae:	f023 0307 	bic.w	r3, r3, #7
 80050b2:	4323      	orrs	r3, r4
 80050b4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80050b6:	f7fc fd19 	bl	8001aec <HAL_GetTick>
 80050ba:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <HAL_RCC_ClockConfig+0x25c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	d006      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050c8:	f7fc fd10 	bl	8001aec <HAL_GetTick>
 80050cc:	1b40      	subs	r0, r0, r5
 80050ce:	2802      	cmp	r0, #2
 80050d0:	d9f4      	bls.n	80050bc <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80050d2:	2003      	movs	r0, #3
 80050d4:	e007      	b.n	80050e6 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80050d6:	f7ff fb91 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_RCC_ClockConfig+0x260>)
 80050dc:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_RCC_ClockConfig+0x264>)
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	f7fc fd01 	bl	8001ae8 <HAL_InitTick>
}
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80050e8:	2001      	movs	r0, #1
}
 80050ea:	4770      	bx	lr
        return HAL_ERROR;
 80050ec:	2001      	movs	r0, #1
 80050ee:	e7fa      	b.n	80050e6 <HAL_RCC_ClockConfig+0x252>
 80050f0:	58004000 	.word	0x58004000
 80050f4:	20000070 	.word	0x20000070
 80050f8:	20000074 	.word	0x20000074

080050fc <HAL_RCC_GetPCLK1Freq>:
{
 80050fc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80050fe:	f7ff fb7d 	bl	80047fc <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800510c:	4a02      	ldr	r2, [pc, #8]	; (8005118 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005112:	40d8      	lsrs	r0, r3
 8005114:	bd08      	pop	{r3, pc}
 8005116:	bf00      	nop
 8005118:	08013218 	.word	0x08013218

0800511c <HAL_RCC_GetPCLK2Freq>:
{
 800511c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800511e:	f7ff fb6d 	bl	80047fc <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800512c:	4a02      	ldr	r2, [pc, #8]	; (8005138 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800512e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005132:	40d8      	lsrs	r0, r3
 8005134:	bd08      	pop	{r3, pc}
 8005136:	bf00      	nop
 8005138:	08013218 	.word	0x08013218

0800513c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005140:	6803      	ldr	r3, [r0, #0]
 8005142:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005146:	f040 80ab 	bne.w	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800514a:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	f013 0f01 	tst.w	r3, #1
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005154:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800515a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800515e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005162:	b292      	uxth	r2, r2
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	f013 0f02 	tst.w	r3, #2
 8005170:	d00a      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005172:	68a2      	ldr	r2, [r4, #8]
 8005174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005178:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800517c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005180:	b292      	uxth	r2, r2
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	f013 0f20 	tst.w	r3, #32
 800518e:	d009      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005190:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005196:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800519a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80051aa:	d00c      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ac:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80051ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80051b6:	0c02      	lsrs	r2, r0, #16
 80051b8:	0412      	lsls	r2, r2, #16
 80051ba:	ea23 0302 	bic.w	r3, r3, r2
 80051be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80051cc:	d00c      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80051d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051d4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80051d8:	0c02      	lsrs	r2, r0, #16
 80051da:	0412      	lsls	r2, r2, #16
 80051dc:	ea23 0302 	bic.w	r3, r3, r2
 80051e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80051e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80051e8:	6823      	ldr	r3, [r4, #0]
 80051ea:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80051ee:	d00c      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80051f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80051f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80051fa:	0c02      	lsrs	r2, r0, #16
 80051fc:	0412      	lsls	r2, r2, #16
 80051fe:	ea23 0302 	bic.w	r3, r3, r2
 8005202:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005210:	f040 809e 	bne.w	8005350 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	f013 0f80 	tst.w	r3, #128	; 0x80
 800521a:	f040 80aa 	bne.w	8005372 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005224:	f040 80b6 	bne.w	8005394 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	f013 0f10 	tst.w	r3, #16
 800522e:	d00e      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005230:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005236:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800523a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005244:	68e3      	ldr	r3, [r4, #12]
 8005246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524a:	f000 80b4 	beq.w	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005254:	d00f      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005256:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800525c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005260:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800526a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800526c:	b91b      	cbnz	r3, 8005276 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800526e:	68cb      	ldr	r3, [r1, #12]
 8005270:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005274:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800527c:	d00e      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800527e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005284:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005288:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005292:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005298:	f000 8092 	beq.w	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 800529c:	4628      	mov	r0, r5
 800529e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80052a0:	f7ff f922 	bl	80044e8 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80052a4:	f7fc fc22 	bl	8001aec <HAL_GetTick>
 80052a8:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80052aa:	4b48      	ldr	r3, [pc, #288]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f413 7f80 	tst.w	r3, #256	; 0x100
 80052b2:	d106      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b4:	f7fc fc1a 	bl	8001aec <HAL_GetTick>
 80052b8:	1b40      	subs	r0, r0, r5
 80052ba:	2802      	cmp	r0, #2
 80052bc:	d9f5      	bls.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 80052be:	2503      	movs	r5, #3
 80052c0:	e000      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80052c2:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80052c4:	2d00      	cmp	r5, #0
 80052c6:	f47f af41 	bne.w	800514c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80052d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80052d8:	429a      	cmp	r2, r3
 80052da:	d024      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80052e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80052e8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80052ec:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80052f0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80052f4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80052f8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80052fc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005300:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005304:	f012 0f02 	tst.w	r2, #2
 8005308:	d10f      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 800530a:	2d00      	cmp	r5, #0
 800530c:	f47f af1e 	bne.w	800514c <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005310:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005316:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800531a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800531e:	4313      	orrs	r3, r2
 8005320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005324:	e712      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8005326:	2200      	movs	r2, #0
 8005328:	e7ec      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 800532a:	f7fc fbdf 	bl	8001aec <HAL_GetTick>
 800532e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005338:	f013 0f02 	tst.w	r3, #2
 800533c:	d1e5      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533e:	f7fc fbd5 	bl	8001aec <HAL_GetTick>
 8005342:	1b80      	subs	r0, r0, r6
 8005344:	f241 3388 	movw	r3, #5000	; 0x1388
 8005348:	4298      	cmp	r0, r3
 800534a:	d9f1      	bls.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 800534c:	2503      	movs	r5, #3
 800534e:	e7dc      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005350:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005352:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005356:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800535a:	0919      	lsrs	r1, r3, #4
 800535c:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8005360:	ea22 0201 	bic.w	r2, r2, r1
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8005370:	e750      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005372:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005374:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005378:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800537c:	0919      	lsrs	r1, r3, #4
 800537e:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8005382:	ea22 0201 	bic.w	r2, r2, r1
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8005392:	e744      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005394:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005396:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800539a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800539e:	0919      	lsrs	r1, r3, #4
 80053a0:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80053a4:	ea22 0201 	bic.w	r2, r2, r1
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80053b4:	e738      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80053b6:	68cb      	ldr	r3, [r1, #12]
 80053b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053bc:	60cb      	str	r3, [r1, #12]
 80053be:	e746      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053c0:	68cb      	ldr	r3, [r1, #12]
 80053c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c6:	60cb      	str	r3, [r1, #12]
 80053c8:	e768      	b.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80053ca:	bf00      	nop
 80053cc:	58000400 	.word	0x58000400

080053d0 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053d0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d036      	beq.n	8005446 <HAL_RTC_DeactivateAlarm+0x76>
 80053d8:	2301      	movs	r3, #1
 80053da:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053de:	2302      	movs	r3, #2
 80053e0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053e4:	4b19      	ldr	r3, [pc, #100]	; (800544c <HAL_RTC_DeactivateAlarm+0x7c>)
 80053e6:	22ca      	movs	r2, #202	; 0xca
 80053e8:	625a      	str	r2, [r3, #36]	; 0x24
 80053ea:	2253      	movs	r2, #83	; 0x53
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80053ee:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80053f2:	d019      	beq.n	8005428 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80053f4:	4b15      	ldr	r3, [pc, #84]	; (800544c <HAL_RTC_DeactivateAlarm+0x7c>)
 80053f6:	699a      	ldr	r2, [r3, #24]
 80053f8:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80053fc:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80053fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005400:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005404:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005406:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005408:	f022 0202 	bic.w	r2, r2, #2
 800540c:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800540e:	2202      	movs	r2, #2
 8005410:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005412:	4b0e      	ldr	r3, [pc, #56]	; (800544c <HAL_RTC_DeactivateAlarm+0x7c>)
 8005414:	22ff      	movs	r2, #255	; 0xff
 8005416:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005418:	2301      	movs	r3, #1
 800541a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800541e:	2300      	movs	r3, #0
 8005420:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005424:	4618      	mov	r0, r3
 8005426:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800542e:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005432:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005436:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005438:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005440:	2201      	movs	r2, #1
 8005442:	65da      	str	r2, [r3, #92]	; 0x5c
 8005444:	e7e5      	b.n	8005412 <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8005446:	2002      	movs	r0, #2
}
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40002800 	.word	0x40002800

08005450 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005454:	4b0d      	ldr	r3, [pc, #52]	; (800548c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005456:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8005458:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800545a:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800545c:	f015 0f01 	tst.w	r5, #1
 8005460:	d106      	bne.n	8005470 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8005462:	f015 0f02 	tst.w	r5, #2
 8005466:	d109      	bne.n	800547c <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005468:	2301      	movs	r3, #1
 800546a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800546e:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005472:	2201      	movs	r2, #1
 8005474:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005476:	f7fc fd0f 	bl	8001e98 <HAL_RTC_AlarmAEventCallback>
 800547a:	e7f2      	b.n	8005462 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800547c:	4b03      	ldr	r3, [pc, #12]	; (800548c <HAL_RTC_AlarmIRQHandler+0x3c>)
 800547e:	2202      	movs	r2, #2
 8005480:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005482:	4620      	mov	r0, r4
 8005484:	f000 f9e6 	bl	8005854 <HAL_RTCEx_AlarmBEventCallback>
 8005488:	e7ee      	b.n	8005468 <HAL_RTC_AlarmIRQHandler+0x18>
 800548a:	bf00      	nop
 800548c:	40002800 	.word	0x40002800

08005490 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005490:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005492:	4a0b      	ldr	r2, [pc, #44]	; (80054c0 <HAL_RTC_WaitForSynchro+0x30>)
 8005494:	68d3      	ldr	r3, [r2, #12]
 8005496:	f023 0320 	bic.w	r3, r3, #32
 800549a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800549c:	f7fc fb26 	bl	8001aec <HAL_GetTick>
 80054a0:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80054a2:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <HAL_RTC_WaitForSynchro+0x30>)
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f013 0f20 	tst.w	r3, #32
 80054aa:	d107      	bne.n	80054bc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054ac:	f7fc fb1e 	bl	8001aec <HAL_GetTick>
 80054b0:	1b00      	subs	r0, r0, r4
 80054b2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80054b6:	d9f4      	bls.n	80054a2 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80054b8:	2003      	movs	r0, #3
 80054ba:	e000      	b.n	80054be <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80054bc:	2000      	movs	r0, #0
}
 80054be:	bd10      	pop	{r4, pc}
 80054c0:	40002800 	.word	0x40002800

080054c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80054c4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80054c6:	4b11      	ldr	r3, [pc, #68]	; (800550c <RTC_EnterInitMode+0x48>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80054ce:	d002      	beq.n	80054d6 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80054d0:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80054d2:	4620      	mov	r0, r4
 80054d4:	bd70      	pop	{r4, r5, r6, pc}
 80054d6:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80054d8:	4a0c      	ldr	r2, [pc, #48]	; (800550c <RTC_EnterInitMode+0x48>)
 80054da:	68d3      	ldr	r3, [r2, #12]
 80054dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e0:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80054e2:	f7fc fb03 	bl	8001aec <HAL_GetTick>
 80054e6:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80054e8:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80054ea:	4b08      	ldr	r3, [pc, #32]	; (800550c <RTC_EnterInitMode+0x48>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80054f2:	d1ee      	bne.n	80054d2 <RTC_EnterInitMode+0xe>
 80054f4:	2c03      	cmp	r4, #3
 80054f6:	d0ec      	beq.n	80054d2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80054f8:	f7fc faf8 	bl	8001aec <HAL_GetTick>
 80054fc:	1b43      	subs	r3, r0, r5
 80054fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005502:	d9f2      	bls.n	80054ea <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005504:	2403      	movs	r4, #3
 8005506:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 800550a:	e7ee      	b.n	80054ea <RTC_EnterInitMode+0x26>
 800550c:	40002800 	.word	0x40002800

08005510 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005510:	b510      	push	{r4, lr}
 8005512:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005514:	4b11      	ldr	r3, [pc, #68]	; (800555c <RTC_ExitInitMode+0x4c>)
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800551c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f013 0f20 	tst.w	r3, #32
 8005524:	d107      	bne.n	8005536 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005526:	f7ff ffb3 	bl	8005490 <HAL_RTC_WaitForSynchro>
 800552a:	4603      	mov	r3, r0
 800552c:	b1a0      	cbz	r0, 8005558 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005534:	e010      	b.n	8005558 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005536:	4a09      	ldr	r2, [pc, #36]	; (800555c <RTC_ExitInitMode+0x4c>)
 8005538:	6993      	ldr	r3, [r2, #24]
 800553a:	f023 0320 	bic.w	r3, r3, #32
 800553e:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005540:	f7ff ffa6 	bl	8005490 <HAL_RTC_WaitForSynchro>
 8005544:	4603      	mov	r3, r0
 8005546:	b110      	cbz	r0, 800554e <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800554e:	4903      	ldr	r1, [pc, #12]	; (800555c <RTC_ExitInitMode+0x4c>)
 8005550:	698a      	ldr	r2, [r1, #24]
 8005552:	f042 0220 	orr.w	r2, r2, #32
 8005556:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8005558:	4618      	mov	r0, r3
 800555a:	bd10      	pop	{r4, pc}
 800555c:	40002800 	.word	0x40002800

08005560 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8005560:	2800      	cmp	r0, #0
 8005562:	d04a      	beq.n	80055fa <HAL_RTC_Init+0x9a>
{
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005568:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800556c:	b19b      	cbz	r3, 8005596 <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800556e:	2302      	movs	r3, #2
 8005570:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005574:	4b22      	ldr	r3, [pc, #136]	; (8005600 <HAL_RTC_Init+0xa0>)
 8005576:	22ca      	movs	r2, #202	; 0xca
 8005578:	625a      	str	r2, [r3, #36]	; 0x24
 800557a:	2253      	movs	r2, #83	; 0x53
 800557c:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800557e:	4620      	mov	r0, r4
 8005580:	f7ff ffa0 	bl	80054c4 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8005584:	b160      	cbz	r0, 80055a0 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005586:	4b1e      	ldr	r3, [pc, #120]	; (8005600 <HAL_RTC_Init+0xa0>)
 8005588:	22ff      	movs	r2, #255	; 0xff
 800558a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800558c:	b910      	cbnz	r0, 8005594 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 800558e:	2301      	movs	r3, #1
 8005590:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005594:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8005596:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 800559a:	f7fc f8e5 	bl	8001768 <HAL_RTC_MspInit>
 800559e:	e7e6      	b.n	800556e <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80055a0:	4b17      	ldr	r3, [pc, #92]	; (8005600 <HAL_RTC_Init+0xa0>)
 80055a2:	699a      	ldr	r2, [r3, #24]
 80055a4:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 80055a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ac:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80055ae:	6999      	ldr	r1, [r3, #24]
 80055b0:	6862      	ldr	r2, [r4, #4]
 80055b2:	6920      	ldr	r0, [r4, #16]
 80055b4:	4302      	orrs	r2, r0
 80055b6:	69a0      	ldr	r0, [r4, #24]
 80055b8:	4302      	orrs	r2, r0
 80055ba:	430a      	orrs	r2, r1
 80055bc:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80055be:	68e2      	ldr	r2, [r4, #12]
 80055c0:	68a1      	ldr	r1, [r4, #8]
 80055c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80055c6:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80055ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80055d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80055d2:	4301      	orrs	r1, r0
 80055d4:	430a      	orrs	r2, r1
 80055d6:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 80055d8:	4620      	mov	r0, r4
 80055da:	f7ff ff99 	bl	8005510 <RTC_ExitInitMode>
      if (status == HAL_OK)
 80055de:	2800      	cmp	r0, #0
 80055e0:	d1d1      	bne.n	8005586 <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 80055e2:	4907      	ldr	r1, [pc, #28]	; (8005600 <HAL_RTC_Init+0xa0>)
 80055e4:	698b      	ldr	r3, [r1, #24]
 80055e6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80055ea:	6a22      	ldr	r2, [r4, #32]
 80055ec:	69e5      	ldr	r5, [r4, #28]
 80055ee:	432a      	orrs	r2, r5
 80055f0:	6965      	ldr	r5, [r4, #20]
 80055f2:	432a      	orrs	r2, r5
 80055f4:	4313      	orrs	r3, r2
 80055f6:	618b      	str	r3, [r1, #24]
 80055f8:	e7c5      	b.n	8005586 <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 80055fa:	2001      	movs	r0, #1
}
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	40002800 	.word	0x40002800

08005604 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005604:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8005606:	e002      	b.n	800560e <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8005608:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 800560a:	380a      	subs	r0, #10
 800560c:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800560e:	2809      	cmp	r0, #9
 8005610:	d8fa      	bhi.n	8005608 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	b2db      	uxtb	r3, r3
}
 8005616:	4318      	orrs	r0, r3
 8005618:	4770      	bx	lr
	...

0800561c <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 800561c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005620:	2b01      	cmp	r3, #1
 8005622:	f000 80b0 	beq.w	8005786 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8005626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562a:	4605      	mov	r5, r0
 800562c:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800562e:	2301      	movs	r3, #1
 8005630:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005634:	2302      	movs	r3, #2
 8005636:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800563a:	4b54      	ldr	r3, [pc, #336]	; (800578c <HAL_RTC_SetAlarm_IT+0x170>)
 800563c:	68de      	ldr	r6, [r3, #12]
 800563e:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8005642:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005646:	d043      	beq.n	80056d0 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005648:	bb12      	cbnz	r2, 8005690 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005650:	d101      	bne.n	8005656 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005652:	2300      	movs	r3, #0
 8005654:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005656:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800565a:	7820      	ldrb	r0, [r4, #0]
 800565c:	f7ff ffd2 	bl	8005604 <RTC_ByteToBcd2>
 8005660:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005662:	7860      	ldrb	r0, [r4, #1]
 8005664:	f7ff ffce 	bl	8005604 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005668:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800566c:	78a0      	ldrb	r0, [r4, #2]
 800566e:	f7ff ffc9 	bl	8005604 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005672:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005674:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005676:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800567a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800567e:	f7ff ffc1 	bl	8005604 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005682:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005686:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005688:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800568a:	ea48 0000 	orr.w	r0, r8, r0
 800568e:	e020      	b.n	80056d2 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8005690:	6948      	ldr	r0, [r1, #20]
 8005692:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8005696:	d009      	beq.n	80056ac <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005698:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800569c:	d006      	beq.n	80056ac <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800569e:	4b3b      	ldr	r3, [pc, #236]	; (800578c <HAL_RTC_SetAlarm_IT+0x170>)
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80056a6:	d101      	bne.n	80056ac <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80056ac:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80056ae:	7863      	ldrb	r3, [r4, #1]
 80056b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80056b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80056b6:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80056b8:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80056ba:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80056bc:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80056c0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80056c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80056c8:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80056ca:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80056cc:	4318      	orrs	r0, r3
 80056ce:	e000      	b.n	80056d2 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80056d0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056d2:	4b2e      	ldr	r3, [pc, #184]	; (800578c <HAL_RTC_SetAlarm_IT+0x170>)
 80056d4:	22ca      	movs	r2, #202	; 0xca
 80056d6:	625a      	str	r2, [r3, #36]	; 0x24
 80056d8:	2253      	movs	r2, #83	; 0x53
 80056da:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80056dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80056de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e2:	d02a      	beq.n	800573a <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80056e4:	4b29      	ldr	r3, [pc, #164]	; (800578c <HAL_RTC_SetAlarm_IT+0x170>)
 80056e6:	699a      	ldr	r2, [r3, #24]
 80056e8:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80056ec:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80056ee:	2202      	movs	r2, #2
 80056f0:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80056f2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80056f6:	d040      	beq.n	800577a <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80056f8:	4b24      	ldr	r3, [pc, #144]	; (800578c <HAL_RTC_SetAlarm_IT+0x170>)
 80056fa:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80056fc:	69a2      	ldr	r2, [r4, #24]
 80056fe:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005700:	6862      	ldr	r2, [r4, #4]
 8005702:	4b22      	ldr	r3, [pc, #136]	; (800578c <HAL_RTC_SetAlarm_IT+0x170>)
 8005704:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005706:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005708:	f042 0202 	orr.w	r2, r2, #2
 800570c:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800570e:	699a      	ldr	r2, [r3, #24]
 8005710:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8005714:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005716:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <HAL_RTC_SetAlarm_IT+0x174>)
 8005718:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800571c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005724:	4b19      	ldr	r3, [pc, #100]	; (800578c <HAL_RTC_SetAlarm_IT+0x170>)
 8005726:	22ff      	movs	r2, #255	; 0xff
 8005728:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800572a:	2301      	movs	r3, #1
 800572c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8005730:	2000      	movs	r0, #0
 8005732:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8005736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800573a:	4b14      	ldr	r3, [pc, #80]	; (800578c <HAL_RTC_SetAlarm_IT+0x170>)
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005742:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005744:	2201      	movs	r2, #1
 8005746:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005748:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800574c:	d00f      	beq.n	800576e <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800574e:	4b0f      	ldr	r3, [pc, #60]	; (800578c <HAL_RTC_SetAlarm_IT+0x170>)
 8005750:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005752:	69a2      	ldr	r2, [r4, #24]
 8005754:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005756:	6862      	ldr	r2, [r4, #4]
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <HAL_RTC_SetAlarm_IT+0x170>)
 800575a:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800575c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 800576a:	619a      	str	r2, [r3, #24]
 800576c:	e7d3      	b.n	8005716 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800576e:	69a3      	ldr	r3, [r4, #24]
 8005770:	69e2      	ldr	r2, [r4, #28]
 8005772:	4313      	orrs	r3, r2
 8005774:	4a05      	ldr	r2, [pc, #20]	; (800578c <HAL_RTC_SetAlarm_IT+0x170>)
 8005776:	6453      	str	r3, [r2, #68]	; 0x44
 8005778:	e7ed      	b.n	8005756 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800577a:	69a3      	ldr	r3, [r4, #24]
 800577c:	69e2      	ldr	r2, [r4, #28]
 800577e:	4313      	orrs	r3, r2
 8005780:	4a02      	ldr	r2, [pc, #8]	; (800578c <HAL_RTC_SetAlarm_IT+0x170>)
 8005782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005784:	e7bc      	b.n	8005700 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8005786:	2002      	movs	r0, #2
}
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40002800 	.word	0x40002800
 8005790:	58000800 	.word	0x58000800

08005794 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005794:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d017      	beq.n	80057cc <HAL_RTCEx_EnableBypassShadow+0x38>
 800579c:	2101      	movs	r1, #1
 800579e:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057a2:	2302      	movs	r3, #2
 80057a4:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057a8:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80057aa:	22ca      	movs	r2, #202	; 0xca
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24
 80057ae:	2253      	movs	r2, #83	; 0x53
 80057b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057b2:	699a      	ldr	r2, [r3, #24]
 80057b4:	f042 0220 	orr.w	r2, r2, #32
 80057b8:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ba:	22ff      	movs	r2, #255	; 0xff
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80057be:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057c2:	2300      	movs	r3, #0
 80057c4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80057c8:	4618      	mov	r0, r3
 80057ca:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80057cc:	2002      	movs	r0, #2
}
 80057ce:	4770      	bx	lr
 80057d0:	40002800 	.word	0x40002800

080057d4 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057d4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d020      	beq.n	800581e <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80057dc:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80057de:	2101      	movs	r1, #1
 80057e0:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057e4:	2302      	movs	r3, #2
 80057e6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057ea:	4b0e      	ldr	r3, [pc, #56]	; (8005824 <HAL_RTCEx_SetSSRU_IT+0x50>)
 80057ec:	22ca      	movs	r2, #202	; 0xca
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24
 80057f0:	2253      	movs	r2, #83	; 0x53
 80057f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057fa:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80057fc:	4c0a      	ldr	r4, [pc, #40]	; (8005828 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80057fe:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005802:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005806:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800580a:	22ff      	movs	r2, #255	; 0xff
 800580c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800580e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005812:	2300      	movs	r3, #0
 8005814:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005818:	4618      	mov	r0, r3
}
 800581a:	bc10      	pop	{r4}
 800581c:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800581e:	2002      	movs	r0, #2
}
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40002800 	.word	0x40002800
 8005828:	58000800 	.word	0x58000800

0800582c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800582c:	b510      	push	{r4, lr}
 800582e:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005830:	4b07      	ldr	r3, [pc, #28]	; (8005850 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005834:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005838:	d103      	bne.n	8005842 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800583a:	2301      	movs	r3, #1
 800583c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005840:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8005842:	4b03      	ldr	r3, [pc, #12]	; (8005850 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005844:	2240      	movs	r2, #64	; 0x40
 8005846:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005848:	f7fc fb2a 	bl	8001ea0 <HAL_RTCEx_SSRUEventCallback>
 800584c:	e7f5      	b.n	800583a <HAL_RTCEx_SSRUIRQHandler+0xe>
 800584e:	bf00      	nop
 8005850:	40002800 	.word	0x40002800

08005854 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005854:	4770      	bx	lr

08005856 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005856:	0089      	lsls	r1, r1, #2
 8005858:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800585c:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005860:	600a      	str	r2, [r1, #0]
}
 8005862:	4770      	bx	lr

08005864 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005864:	0089      	lsls	r1, r1, #2
 8005866:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800586a:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800586e:	6808      	ldr	r0, [r1, #0]
}
 8005870:	4770      	bx	lr
	...

08005874 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005874:	4b07      	ldr	r3, [pc, #28]	; (8005894 <SUBGHZSPI_Init+0x20>)
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800587c:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800587e:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8005882:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005884:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005888:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005890:	601a      	str	r2, [r3, #0]
}
 8005892:	4770      	bx	lr
 8005894:	58010000 	.word	0x58010000

08005898 <HAL_SUBGHZ_Init>:
{
 8005898:	b530      	push	{r4, r5, lr}
 800589a:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 800589c:	2800      	cmp	r0, #0
 800589e:	d04e      	beq.n	800593e <HAL_SUBGHZ_Init+0xa6>
 80058a0:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80058a2:	7983      	ldrb	r3, [r0, #6]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d03b      	beq.n	8005920 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80058a8:	2302      	movs	r3, #2
 80058aa:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80058ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058b0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80058b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80058bc:	4b21      	ldr	r3, [pc, #132]	; (8005944 <HAL_SUBGHZ_Init+0xac>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80058c4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80058c8:	2264      	movs	r2, #100	; 0x64
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
 80058ce:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80058d0:	9b01      	ldr	r3, [sp, #4]
 80058d2:	b34b      	cbz	r3, 8005928 <HAL_SUBGHZ_Init+0x90>
    count--;
 80058d4:	9b01      	ldr	r3, [sp, #4]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80058da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80058e6:	d1f3      	bne.n	80058d0 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 80058e8:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80058ea:	4b17      	ldr	r3, [pc, #92]	; (8005948 <HAL_SUBGHZ_Init+0xb0>)
 80058ec:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80058f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80058f8:	4914      	ldr	r1, [pc, #80]	; (800594c <HAL_SUBGHZ_Init+0xb4>)
 80058fa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80058fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005902:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800590c:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800590e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005912:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8005914:	b15d      	cbz	r5, 800592e <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8005916:	2301      	movs	r3, #1
 8005918:	71a3      	strb	r3, [r4, #6]
}
 800591a:	4628      	mov	r0, r5
 800591c:	b003      	add	sp, #12
 800591e:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 8005920:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8005922:	f7fb ffd1 	bl	80018c8 <HAL_SUBGHZ_MspInit>
 8005926:	e7bf      	b.n	80058a8 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005928:	2501      	movs	r5, #1
 800592a:	60a5      	str	r5, [r4, #8]
      break;
 800592c:	e7dd      	b.n	80058ea <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800592e:	6820      	ldr	r0, [r4, #0]
 8005930:	f7ff ffa0 	bl	8005874 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005934:	2301      	movs	r3, #1
 8005936:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005938:	2300      	movs	r3, #0
 800593a:	60a3      	str	r3, [r4, #8]
 800593c:	e7eb      	b.n	8005916 <HAL_SUBGHZ_Init+0x7e>
    return status;
 800593e:	2501      	movs	r5, #1
 8005940:	e7eb      	b.n	800591a <HAL_SUBGHZ_Init+0x82>
 8005942:	bf00      	nop
 8005944:	20000070 	.word	0x20000070
 8005948:	58000400 	.word	0x58000400
 800594c:	58000800 	.word	0x58000800

08005950 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005950:	b082      	sub	sp, #8
 8005952:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005954:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <SUBGHZSPI_Transmit+0x70>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800595c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005960:	2064      	movs	r0, #100	; 0x64
 8005962:	fb00 f303 	mul.w	r3, r0, r3
 8005966:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005968:	9b01      	ldr	r3, [sp, #4]
 800596a:	b14b      	cbz	r3, 8005980 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800596c:	9b01      	ldr	r3, [sp, #4]
 800596e:	3b01      	subs	r3, #1
 8005970:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005972:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <SUBGHZSPI_Transmit+0x74>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f013 0f02 	tst.w	r3, #2
 800597a:	d0f5      	beq.n	8005968 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800597c:	2000      	movs	r0, #0
 800597e:	e001      	b.n	8005984 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005980:	2001      	movs	r0, #1
 8005982:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <SUBGHZSPI_Transmit+0x74>)
 8005986:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005988:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <SUBGHZSPI_Transmit+0x70>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005990:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005994:	2164      	movs	r1, #100	; 0x64
 8005996:	fb01 f303 	mul.w	r3, r1, r3
 800599a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800599c:	9b01      	ldr	r3, [sp, #4]
 800599e:	b143      	cbz	r3, 80059b2 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80059a0:	9b01      	ldr	r3, [sp, #4]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80059a6:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <SUBGHZSPI_Transmit+0x74>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f013 0f01 	tst.w	r3, #1
 80059ae:	d0f5      	beq.n	800599c <SUBGHZSPI_Transmit+0x4c>
 80059b0:	e001      	b.n	80059b6 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80059b2:	2001      	movs	r0, #1
 80059b4:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80059b6:	4b03      	ldr	r3, [pc, #12]	; (80059c4 <SUBGHZSPI_Transmit+0x74>)
 80059b8:	68db      	ldr	r3, [r3, #12]

  return status;
}
 80059ba:	b002      	add	sp, #8
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000070 	.word	0x20000070
 80059c4:	58010000 	.word	0x58010000

080059c8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80059c8:	b082      	sub	sp, #8
 80059ca:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80059cc:	4b1c      	ldr	r3, [pc, #112]	; (8005a40 <SUBGHZSPI_Receive+0x78>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80059d4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80059d8:	2064      	movs	r0, #100	; 0x64
 80059da:	fb00 f303 	mul.w	r3, r0, r3
 80059de:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80059e0:	9b01      	ldr	r3, [sp, #4]
 80059e2:	b14b      	cbz	r3, 80059f8 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80059e4:	9b01      	ldr	r3, [sp, #4]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80059ea:	4b16      	ldr	r3, [pc, #88]	; (8005a44 <SUBGHZSPI_Receive+0x7c>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f013 0f02 	tst.w	r3, #2
 80059f2:	d0f5      	beq.n	80059e0 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80059f4:	2000      	movs	r0, #0
 80059f6:	e001      	b.n	80059fc <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80059f8:	2001      	movs	r0, #1
 80059fa:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80059fc:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <SUBGHZSPI_Receive+0x7c>)
 80059fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005a02:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005a06:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <SUBGHZSPI_Receive+0x78>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005a0e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005a12:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005a16:	fb0c f303 	mul.w	r3, ip, r3
 8005a1a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005a1c:	9b01      	ldr	r3, [sp, #4]
 8005a1e:	b143      	cbz	r3, 8005a32 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005a20:	9b01      	ldr	r3, [sp, #4]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005a26:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <SUBGHZSPI_Receive+0x7c>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f013 0f01 	tst.w	r3, #1
 8005a2e:	d0f5      	beq.n	8005a1c <SUBGHZSPI_Receive+0x54>
 8005a30:	e001      	b.n	8005a36 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005a32:	2001      	movs	r0, #1
 8005a34:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005a36:	4b03      	ldr	r3, [pc, #12]	; (8005a44 <SUBGHZSPI_Receive+0x7c>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	700b      	strb	r3, [r1, #0]

  return status;
}
 8005a3c:	b002      	add	sp, #8
 8005a3e:	4770      	bx	lr
 8005a40:	20000070 	.word	0x20000070
 8005a44:	58010000 	.word	0x58010000

08005a48 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005a48:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005a4a:	4b13      	ldr	r3, [pc, #76]	; (8005a98 <SUBGHZ_WaitOnBusy+0x50>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005a52:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8005a56:	2264      	movs	r2, #100	; 0x64
 8005a58:	fb02 f303 	mul.w	r3, r2, r3
 8005a5c:	9301      	str	r3, [sp, #4]
 8005a5e:	e006      	b.n	8005a6e <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005a60:	2302      	movs	r3, #2
 8005a62:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8005a64:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8005a66:	b002      	add	sp, #8
 8005a68:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005a6a:	4213      	tst	r3, r2
 8005a6c:	d012      	beq.n	8005a94 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <SUBGHZ_WaitOnBusy+0x54>)
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f013 0304 	ands.w	r3, r3, #4
 8005a76:	d000      	beq.n	8005a7a <SUBGHZ_WaitOnBusy+0x32>
 8005a78:	2301      	movs	r3, #1
    if (count == 0U)
 8005a7a:	9a01      	ldr	r2, [sp, #4]
 8005a7c:	2a00      	cmp	r2, #0
 8005a7e:	d0ef      	beq.n	8005a60 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8005a80:	9a01      	ldr	r2, [sp, #4]
 8005a82:	3a01      	subs	r2, #1
 8005a84:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005a86:	4a05      	ldr	r2, [pc, #20]	; (8005a9c <SUBGHZ_WaitOnBusy+0x54>)
 8005a88:	6952      	ldr	r2, [r2, #20]
 8005a8a:	f012 0202 	ands.w	r2, r2, #2
 8005a8e:	d0ec      	beq.n	8005a6a <SUBGHZ_WaitOnBusy+0x22>
 8005a90:	2201      	movs	r2, #1
 8005a92:	e7ea      	b.n	8005a6a <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8005a94:	2000      	movs	r0, #0
 8005a96:	e7e6      	b.n	8005a66 <SUBGHZ_WaitOnBusy+0x1e>
 8005a98:	20000070 	.word	0x20000070
 8005a9c:	58000400 	.word	0x58000400

08005aa0 <SUBGHZ_CheckDeviceReady>:
{
 8005aa0:	b500      	push	{lr}
 8005aa2:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005aa4:	7903      	ldrb	r3, [r0, #4]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d004      	beq.n	8005ab4 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005aaa:	f7ff ffcd 	bl	8005a48 <SUBGHZ_WaitOnBusy>
}
 8005aae:	b003      	add	sp, #12
 8005ab0:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005ab4:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <SUBGHZ_CheckDeviceReady+0x4c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005abc:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8005ac0:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005ac2:	4a0b      	ldr	r2, [pc, #44]	; (8005af0 <SUBGHZ_CheckDeviceReady+0x50>)
 8005ac4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005ac8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8005ad0:	9b01      	ldr	r3, [sp, #4]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8005ad6:	9b01      	ldr	r3, [sp, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1f9      	bne.n	8005ad0 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005adc:	4a04      	ldr	r2, [pc, #16]	; (8005af0 <SUBGHZ_CheckDeviceReady+0x50>)
 8005ade:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005aea:	e7de      	b.n	8005aaa <SUBGHZ_CheckDeviceReady+0xa>
 8005aec:	20000070 	.word	0x20000070
 8005af0:	58000400 	.word	0x58000400

08005af4 <HAL_SUBGHZ_WriteRegisters>:
{
 8005af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005af8:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005afa:	7980      	ldrb	r0, [r0, #6]
 8005afc:	fa5f f880 	uxtb.w	r8, r0
 8005b00:	f1b8 0f01 	cmp.w	r8, #1
 8005b04:	d13e      	bne.n	8005b84 <HAL_SUBGHZ_WriteRegisters+0x90>
 8005b06:	460c      	mov	r4, r1
 8005b08:	4617      	mov	r7, r2
 8005b0a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005b0c:	796b      	ldrb	r3, [r5, #5]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d03b      	beq.n	8005b8a <HAL_SUBGHZ_WriteRegisters+0x96>
 8005b12:	2301      	movs	r3, #1
 8005b14:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005b16:	2302      	movs	r3, #2
 8005b18:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f7ff ffc0 	bl	8005aa0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005b20:	4a1b      	ldr	r2, [pc, #108]	; (8005b90 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005b22:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005b26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005b2e:	210d      	movs	r1, #13
 8005b30:	4628      	mov	r0, r5
 8005b32:	f7ff ff0d 	bl	8005950 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005b36:	0a21      	lsrs	r1, r4, #8
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f7ff ff09 	bl	8005950 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005b3e:	b2e1      	uxtb	r1, r4
 8005b40:	4628      	mov	r0, r5
 8005b42:	f7ff ff05 	bl	8005950 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005b46:	2400      	movs	r4, #0
 8005b48:	e005      	b.n	8005b56 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005b4a:	5d39      	ldrb	r1, [r7, r4]
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f7ff feff 	bl	8005950 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005b52:	3401      	adds	r4, #1
 8005b54:	b2a4      	uxth	r4, r4
 8005b56:	42b4      	cmp	r4, r6
 8005b58:	d3f7      	bcc.n	8005b4a <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005b5a:	4a0d      	ldr	r2, [pc, #52]	; (8005b90 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005b5c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f7ff ff6d 	bl	8005a48 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005b6e:	68ab      	ldr	r3, [r5, #8]
 8005b70:	b90b      	cbnz	r3, 8005b76 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8005b72:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b76:	2301      	movs	r3, #1
 8005b78:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	716b      	strb	r3, [r5, #5]
}
 8005b7e:	4640      	mov	r0, r8
 8005b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005b84:	f04f 0802 	mov.w	r8, #2
 8005b88:	e7f9      	b.n	8005b7e <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8005b8a:	f04f 0802 	mov.w	r8, #2
 8005b8e:	e7f6      	b.n	8005b7e <HAL_SUBGHZ_WriteRegisters+0x8a>
 8005b90:	58000400 	.word	0x58000400

08005b94 <HAL_SUBGHZ_ReadRegisters>:
{
 8005b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b98:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005b9a:	7980      	ldrb	r0, [r0, #6]
 8005b9c:	fa5f f880 	uxtb.w	r8, r0
 8005ba0:	f1b8 0f01 	cmp.w	r8, #1
 8005ba4:	d141      	bne.n	8005c2a <HAL_SUBGHZ_ReadRegisters+0x96>
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	4615      	mov	r5, r2
 8005baa:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005bac:	7973      	ldrb	r3, [r6, #5]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d03e      	beq.n	8005c30 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f7ff ff72 	bl	8005aa0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005bbc:	4a1e      	ldr	r2, [pc, #120]	; (8005c38 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8005bbe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005bc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005bca:	211d      	movs	r1, #29
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f7ff febf 	bl	8005950 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005bd2:	0a21      	lsrs	r1, r4, #8
 8005bd4:	4630      	mov	r0, r6
 8005bd6:	f7ff febb 	bl	8005950 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005bda:	b2e1      	uxtb	r1, r4
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f7ff feb7 	bl	8005950 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005be2:	2100      	movs	r1, #0
 8005be4:	4630      	mov	r0, r6
 8005be6:	f7ff feb3 	bl	8005950 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005bea:	2400      	movs	r4, #0
 8005bec:	e006      	b.n	8005bfc <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005bee:	4629      	mov	r1, r5
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f7ff fee9 	bl	80059c8 <SUBGHZSPI_Receive>
      pData++;
 8005bf6:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005bf8:	3401      	adds	r4, #1
 8005bfa:	b2a4      	uxth	r4, r4
 8005bfc:	42bc      	cmp	r4, r7
 8005bfe:	d3f6      	bcc.n	8005bee <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005c00:	4a0d      	ldr	r2, [pc, #52]	; (8005c38 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8005c02:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c0e:	4630      	mov	r0, r6
 8005c10:	f7ff ff1a 	bl	8005a48 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c14:	68b3      	ldr	r3, [r6, #8]
 8005c16:	b90b      	cbnz	r3, 8005c1c <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8005c18:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005c20:	2300      	movs	r3, #0
 8005c22:	7173      	strb	r3, [r6, #5]
}
 8005c24:	4640      	mov	r0, r8
 8005c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005c2a:	f04f 0802 	mov.w	r8, #2
 8005c2e:	e7f9      	b.n	8005c24 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8005c30:	f04f 0802 	mov.w	r8, #2
 8005c34:	e7f6      	b.n	8005c24 <HAL_SUBGHZ_ReadRegisters+0x90>
 8005c36:	bf00      	nop
 8005c38:	58000400 	.word	0x58000400

08005c3c <HAL_SUBGHZ_ExecSetCmd>:
{
 8005c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c40:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005c42:	7980      	ldrb	r0, [r0, #6]
 8005c44:	fa5f f980 	uxtb.w	r9, r0
 8005c48:	f1b9 0f01 	cmp.w	r9, #1
 8005c4c:	d143      	bne.n	8005cd6 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8005c4e:	4688      	mov	r8, r1
 8005c50:	4617      	mov	r7, r2
 8005c52:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005c54:	796b      	ldrb	r3, [r5, #5]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d040      	beq.n	8005cdc <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f7ff ff1e 	bl	8005aa0 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005c64:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005c68:	d005      	beq.n	8005c76 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8005c6a:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8005c6e:	d002      	beq.n	8005c76 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005c70:	2300      	movs	r3, #0
 8005c72:	712b      	strb	r3, [r5, #4]
 8005c74:	e001      	b.n	8005c7a <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005c76:	2301      	movs	r3, #1
 8005c78:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005c7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ce4 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005c7c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005c80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005c88:	4641      	mov	r1, r8
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	f7ff fe60 	bl	8005950 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005c90:	2400      	movs	r4, #0
 8005c92:	e005      	b.n	8005ca0 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005c94:	5d39      	ldrb	r1, [r7, r4]
 8005c96:	4628      	mov	r0, r5
 8005c98:	f7ff fe5a 	bl	8005950 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005c9c:	3401      	adds	r4, #1
 8005c9e:	b2a4      	uxth	r4, r4
 8005ca0:	42b4      	cmp	r4, r6
 8005ca2:	d3f7      	bcc.n	8005c94 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005ca4:	4a0f      	ldr	r2, [pc, #60]	; (8005ce4 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005ca6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8005cb2:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005cb6:	d10a      	bne.n	8005cce <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005cb8:	68ab      	ldr	r3, [r5, #8]
 8005cba:	b90b      	cbnz	r3, 8005cc0 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8005cbc:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	716b      	strb	r3, [r5, #5]
}
 8005cc8:	4648      	mov	r0, r9
 8005cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f7ff feba 	bl	8005a48 <SUBGHZ_WaitOnBusy>
 8005cd4:	e7f0      	b.n	8005cb8 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8005cd6:	f04f 0902 	mov.w	r9, #2
 8005cda:	e7f5      	b.n	8005cc8 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8005cdc:	f04f 0902 	mov.w	r9, #2
 8005ce0:	e7f2      	b.n	8005cc8 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8005ce2:	bf00      	nop
 8005ce4:	58000400 	.word	0x58000400

08005ce8 <HAL_SUBGHZ_ExecGetCmd>:
{
 8005ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cec:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005cee:	7980      	ldrb	r0, [r0, #6]
 8005cf0:	fa5f f880 	uxtb.w	r8, r0
 8005cf4:	f1b8 0f01 	cmp.w	r8, #1
 8005cf8:	d139      	bne.n	8005d6e <HAL_SUBGHZ_ExecGetCmd+0x86>
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	4615      	mov	r5, r2
 8005cfe:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005d00:	7973      	ldrb	r3, [r6, #5]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d036      	beq.n	8005d74 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8005d06:	2301      	movs	r3, #1
 8005d08:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f7ff fec8 	bl	8005aa0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005d10:	4a1a      	ldr	r2, [pc, #104]	; (8005d7c <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005d12:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4630      	mov	r0, r6
 8005d22:	f7ff fe15 	bl	8005950 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005d26:	2100      	movs	r1, #0
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f7ff fe11 	bl	8005950 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005d2e:	2400      	movs	r4, #0
 8005d30:	e006      	b.n	8005d40 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005d32:	4629      	mov	r1, r5
 8005d34:	4630      	mov	r0, r6
 8005d36:	f7ff fe47 	bl	80059c8 <SUBGHZSPI_Receive>
      pData++;
 8005d3a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005d3c:	3401      	adds	r4, #1
 8005d3e:	b2a4      	uxth	r4, r4
 8005d40:	42bc      	cmp	r4, r7
 8005d42:	d3f6      	bcc.n	8005d32 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005d44:	4a0d      	ldr	r2, [pc, #52]	; (8005d7c <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005d46:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005d52:	4630      	mov	r0, r6
 8005d54:	f7ff fe78 	bl	8005a48 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005d58:	68b3      	ldr	r3, [r6, #8]
 8005d5a:	b90b      	cbnz	r3, 8005d60 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005d5c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005d60:	2301      	movs	r3, #1
 8005d62:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005d64:	2300      	movs	r3, #0
 8005d66:	7173      	strb	r3, [r6, #5]
}
 8005d68:	4640      	mov	r0, r8
 8005d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005d6e:	f04f 0802 	mov.w	r8, #2
 8005d72:	e7f9      	b.n	8005d68 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8005d74:	f04f 0802 	mov.w	r8, #2
 8005d78:	e7f6      	b.n	8005d68 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8005d7a:	bf00      	nop
 8005d7c:	58000400 	.word	0x58000400

08005d80 <HAL_SUBGHZ_IRQHandler>:
{
 8005d80:	b530      	push	{r4, r5, lr}
 8005d82:	b083      	sub	sp, #12
 8005d84:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8005d86:	2300      	movs	r3, #0
 8005d88:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	aa01      	add	r2, sp, #4
 8005d90:	2112      	movs	r1, #18
 8005d92:	f7ff ffa9 	bl	8005ce8 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005d96:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005d9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005d9e:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005da2:	f013 0f01 	tst.w	r3, #1
 8005da6:	d126      	bne.n	8005df6 <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005da8:	f014 0f02 	tst.w	r4, #2
 8005dac:	d127      	bne.n	8005dfe <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005dae:	f014 0f04 	tst.w	r4, #4
 8005db2:	d128      	bne.n	8005e06 <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005db4:	f014 0f08 	tst.w	r4, #8
 8005db8:	d129      	bne.n	8005e0e <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005dba:	f014 0f10 	tst.w	r4, #16
 8005dbe:	d12a      	bne.n	8005e16 <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005dc0:	f014 0f20 	tst.w	r4, #32
 8005dc4:	d12b      	bne.n	8005e1e <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005dc6:	f014 0f40 	tst.w	r4, #64	; 0x40
 8005dca:	d12c      	bne.n	8005e26 <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005dcc:	f014 0f80 	tst.w	r4, #128	; 0x80
 8005dd0:	d006      	beq.n	8005de0 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005dd2:	f414 7f80 	tst.w	r4, #256	; 0x100
 8005dd6:	d02a      	beq.n	8005e2e <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005dd8:	2101      	movs	r1, #1
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f00b ff34 	bl	8011c48 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005de0:	f414 7f00 	tst.w	r4, #512	; 0x200
 8005de4:	d128      	bne.n	8005e38 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8005de6:	2302      	movs	r3, #2
 8005de8:	aa01      	add	r2, sp, #4
 8005dea:	4619      	mov	r1, r3
 8005dec:	4628      	mov	r0, r5
 8005dee:	f7ff ff25 	bl	8005c3c <HAL_SUBGHZ_ExecSetCmd>
}
 8005df2:	b003      	add	sp, #12
 8005df4:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005df6:	4628      	mov	r0, r5
 8005df8:	f00b ff0e 	bl	8011c18 <HAL_SUBGHZ_TxCpltCallback>
 8005dfc:	e7d4      	b.n	8005da8 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f00b ff12 	bl	8011c28 <HAL_SUBGHZ_RxCpltCallback>
 8005e04:	e7d3      	b.n	8005dae <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005e06:	4628      	mov	r0, r5
 8005e08:	f00b ff42 	bl	8011c90 <HAL_SUBGHZ_PreambleDetectedCallback>
 8005e0c:	e7d2      	b.n	8005db4 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f00b ff46 	bl	8011ca0 <HAL_SUBGHZ_SyncWordValidCallback>
 8005e14:	e7d1      	b.n	8005dba <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005e16:	4628      	mov	r0, r5
 8005e18:	f00b ff4a 	bl	8011cb0 <HAL_SUBGHZ_HeaderValidCallback>
 8005e1c:	e7d0      	b.n	8005dc0 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f00b ff2e 	bl	8011c80 <HAL_SUBGHZ_HeaderErrorCallback>
 8005e24:	e7cf      	b.n	8005dc6 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005e26:	4628      	mov	r0, r5
 8005e28:	f00b ff06 	bl	8011c38 <HAL_SUBGHZ_CRCErrorCallback>
 8005e2c:	e7ce      	b.n	8005dcc <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4628      	mov	r0, r5
 8005e32:	f00b ff09 	bl	8011c48 <HAL_SUBGHZ_CADStatusCallback>
 8005e36:	e7d3      	b.n	8005de0 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f00b ff17 	bl	8011c6c <HAL_SUBGHZ_RxTxTimeoutCallback>
 8005e3e:	e7d2      	b.n	8005de6 <HAL_SUBGHZ_IRQHandler+0x66>

08005e40 <HAL_SUBGHZ_WriteBuffer>:
{
 8005e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e44:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005e46:	7980      	ldrb	r0, [r0, #6]
 8005e48:	fa5f f880 	uxtb.w	r8, r0
 8005e4c:	f1b8 0f01 	cmp.w	r8, #1
 8005e50:	d138      	bne.n	8005ec4 <HAL_SUBGHZ_WriteBuffer+0x84>
 8005e52:	460c      	mov	r4, r1
 8005e54:	4617      	mov	r7, r2
 8005e56:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005e58:	796b      	ldrb	r3, [r5, #5]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d035      	beq.n	8005eca <HAL_SUBGHZ_WriteBuffer+0x8a>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005e62:	4628      	mov	r0, r5
 8005e64:	f7ff fe1c 	bl	8005aa0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005e68:	4a19      	ldr	r2, [pc, #100]	; (8005ed0 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005e6a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005e76:	210e      	movs	r1, #14
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f7ff fd69 	bl	8005950 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4628      	mov	r0, r5
 8005e82:	f7ff fd65 	bl	8005950 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005e86:	2400      	movs	r4, #0
 8005e88:	e005      	b.n	8005e96 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005e8a:	5d39      	ldrb	r1, [r7, r4]
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f7ff fd5f 	bl	8005950 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005e92:	3401      	adds	r4, #1
 8005e94:	b2a4      	uxth	r4, r4
 8005e96:	42b4      	cmp	r4, r6
 8005e98:	d3f7      	bcc.n	8005e8a <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005e9a:	4a0d      	ldr	r2, [pc, #52]	; (8005ed0 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005e9c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	f7ff fdcd 	bl	8005a48 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005eae:	68ab      	ldr	r3, [r5, #8]
 8005eb0:	b90b      	cbnz	r3, 8005eb6 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8005eb2:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005eba:	2300      	movs	r3, #0
 8005ebc:	716b      	strb	r3, [r5, #5]
}
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005ec4:	f04f 0802 	mov.w	r8, #2
 8005ec8:	e7f9      	b.n	8005ebe <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8005eca:	f04f 0802 	mov.w	r8, #2
 8005ece:	e7f6      	b.n	8005ebe <HAL_SUBGHZ_WriteBuffer+0x7e>
 8005ed0:	58000400 	.word	0x58000400

08005ed4 <HAL_SUBGHZ_ReadBuffer>:
{
 8005ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed8:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005eda:	7980      	ldrb	r0, [r0, #6]
 8005edc:	fa5f f880 	uxtb.w	r8, r0
 8005ee0:	f1b8 0f01 	cmp.w	r8, #1
 8005ee4:	d13d      	bne.n	8005f62 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	4615      	mov	r5, r2
 8005eea:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005eec:	7973      	ldrb	r3, [r6, #5]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d03a      	beq.n	8005f68 <HAL_SUBGHZ_ReadBuffer+0x94>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f7ff fdd2 	bl	8005aa0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005efc:	4a1c      	ldr	r2, [pc, #112]	; (8005f70 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005efe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005f02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005f0a:	211e      	movs	r1, #30
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f7ff fd1f 	bl	8005950 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005f12:	4621      	mov	r1, r4
 8005f14:	4630      	mov	r0, r6
 8005f16:	f7ff fd1b 	bl	8005950 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4630      	mov	r0, r6
 8005f1e:	f7ff fd17 	bl	8005950 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005f22:	2400      	movs	r4, #0
 8005f24:	e006      	b.n	8005f34 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005f26:	4629      	mov	r1, r5
 8005f28:	4630      	mov	r0, r6
 8005f2a:	f7ff fd4d 	bl	80059c8 <SUBGHZSPI_Receive>
      pData++;
 8005f2e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005f30:	3401      	adds	r4, #1
 8005f32:	b2a4      	uxth	r4, r4
 8005f34:	42bc      	cmp	r4, r7
 8005f36:	d3f6      	bcc.n	8005f26 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005f38:	4a0d      	ldr	r2, [pc, #52]	; (8005f70 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005f3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005f46:	4630      	mov	r0, r6
 8005f48:	f7ff fd7e 	bl	8005a48 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005f4c:	68b3      	ldr	r3, [r6, #8]
 8005f4e:	b90b      	cbnz	r3, 8005f54 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8005f50:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005f54:	2301      	movs	r3, #1
 8005f56:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005f58:	2300      	movs	r3, #0
 8005f5a:	7173      	strb	r3, [r6, #5]
}
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005f62:	f04f 0802 	mov.w	r8, #2
 8005f66:	e7f9      	b.n	8005f5c <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005f68:	f04f 0802 	mov.w	r8, #2
 8005f6c:	e7f6      	b.n	8005f5c <HAL_SUBGHZ_ReadBuffer+0x88>
 8005f6e:	bf00      	nop
 8005f70:	58000400 	.word	0x58000400

08005f74 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005f74:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	e852 3f00 	ldrex	r3, [r2]
 8005f7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	e842 3100 	strex	r1, r3, [r2]
 8005f82:	2900      	cmp	r1, #0
 8005f84:	d1f6      	bne.n	8005f74 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005f86:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	f102 0308 	add.w	r3, r2, #8
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	3208      	adds	r2, #8
 8005f96:	e842 3100 	strex	r1, r3, [r2]
 8005f9a:	2900      	cmp	r1, #0
 8005f9c:	d1f3      	bne.n	8005f86 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f9e:	2320      	movs	r3, #32
 8005fa0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8005fa4:	4770      	bx	lr

08005fa6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fa6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	e852 3f00 	ldrex	r3, [r2]
 8005fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	e842 3100 	strex	r1, r3, [r2]
 8005fb4:	2900      	cmp	r1, #0
 8005fb6:	d1f6      	bne.n	8005fa6 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fb8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	f102 0308 	add.w	r3, r2, #8
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fc6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fca:	3208      	adds	r2, #8
 8005fcc:	e842 3100 	strex	r1, r3, [r2]
 8005fd0:	2900      	cmp	r1, #0
 8005fd2:	d1f1      	bne.n	8005fb8 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d006      	beq.n	8005fe8 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fda:	2320      	movs	r3, #32
 8005fdc:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fe4:	6703      	str	r3, [r0, #112]	; 0x70
}
 8005fe6:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	e852 3f00 	ldrex	r3, [r2]
 8005fee:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	e842 3100 	strex	r1, r3, [r2]
 8005ff6:	2900      	cmp	r1, #0
 8005ff8:	d1f6      	bne.n	8005fe8 <UART_EndRxTransfer+0x42>
 8005ffa:	e7ee      	b.n	8005fda <UART_EndRxTransfer+0x34>

08005ffc <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8005ffc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006000:	2b20      	cmp	r3, #32
 8006002:	d14c      	bne.n	800609e <HAL_UART_Transmit_DMA+0xa2>
{
 8006004:	b510      	push	{r4, lr}
 8006006:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8006008:	2900      	cmp	r1, #0
 800600a:	d04a      	beq.n	80060a2 <HAL_UART_Transmit_DMA+0xa6>
 800600c:	2a00      	cmp	r2, #0
 800600e:	d04a      	beq.n	80060a6 <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8006010:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006014:	2b01      	cmp	r3, #1
 8006016:	d048      	beq.n	80060aa <HAL_UART_Transmit_DMA+0xae>
 8006018:	2301      	movs	r3, #1
 800601a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 800601e:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006020:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8006024:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006028:	2300      	movs	r3, #0
 800602a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800602e:	2321      	movs	r3, #33	; 0x21
 8006030:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8006034:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006036:	b1f3      	cbz	r3, 8006076 <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006038:	491d      	ldr	r1, [pc, #116]	; (80060b0 <HAL_UART_Transmit_DMA+0xb4>)
 800603a:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800603c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800603e:	491d      	ldr	r1, [pc, #116]	; (80060b4 <HAL_UART_Transmit_DMA+0xb8>)
 8006040:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006042:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006044:	491c      	ldr	r1, [pc, #112]	; (80060b8 <HAL_UART_Transmit_DMA+0xbc>)
 8006046:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8006048:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800604a:	2100      	movs	r1, #0
 800604c:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800604e:	6801      	ldr	r1, [r0, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	f101 0228 	add.w	r2, r1, #40	; 0x28
 8006056:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006058:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800605a:	f7fd fe07 	bl	8003c6c <HAL_DMA_Start_IT>
 800605e:	b150      	cbz	r0, 8006076 <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006060:	2310      	movs	r3, #16
 8006062:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8006066:	2300      	movs	r3, #0
 8006068:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800606c:	2320      	movs	r3, #32
 800606e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8006072:	2001      	movs	r0, #1
 8006074:	e012      	b.n	800609c <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	2240      	movs	r2, #64	; 0x40
 800607a:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800607c:	2300      	movs	r3, #0
 800607e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006082:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	f102 0308 	add.w	r3, r2, #8
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	3208      	adds	r2, #8
 8006092:	e842 3100 	strex	r1, r3, [r2]
 8006096:	2900      	cmp	r1, #0
 8006098:	d1f3      	bne.n	8006082 <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 800609a:	2000      	movs	r0, #0
}
 800609c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800609e:	2002      	movs	r0, #2
}
 80060a0:	4770      	bx	lr
      return HAL_ERROR;
 80060a2:	2001      	movs	r0, #1
 80060a4:	e7fa      	b.n	800609c <HAL_UART_Transmit_DMA+0xa0>
 80060a6:	2001      	movs	r0, #1
 80060a8:	e7f8      	b.n	800609c <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 80060aa:	2002      	movs	r0, #2
 80060ac:	e7f6      	b.n	800609c <HAL_UART_Transmit_DMA+0xa0>
 80060ae:	bf00      	nop
 80060b0:	080060bd 	.word	0x080060bd
 80060b4:	0800612b 	.word	0x0800612b
 80060b8:	08006137 	.word	0x08006137

080060bc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80060bc:	b508      	push	{r3, lr}
 80060be:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060c0:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f013 0f20 	tst.w	r3, #32
 80060ca:	d118      	bne.n	80060fe <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060d2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	f102 0308 	add.w	r3, r2, #8
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	3208      	adds	r2, #8
 80060e2:	e842 3100 	strex	r1, r3, [r2]
 80060e6:	2900      	cmp	r1, #0
 80060e8:	d1f3      	bne.n	80060d2 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ec:	e852 3f00 	ldrex	r3, [r2]
 80060f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	e842 3100 	strex	r1, r3, [r2]
 80060f8:	2900      	cmp	r1, #0
 80060fa:	d1f6      	bne.n	80060ea <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060fc:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80060fe:	f7fc f80f 	bl	8002120 <HAL_UART_TxCpltCallback>
}
 8006102:	e7fb      	b.n	80060fc <UART_DMATransmitCplt+0x40>

08006104 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006104:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006106:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	e852 3f00 	ldrex	r3, [r2]
 800610c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006110:	e842 3100 	strex	r1, r3, [r2]
 8006114:	2900      	cmp	r1, #0
 8006116:	d1f6      	bne.n	8006106 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006118:	2320      	movs	r3, #32
 800611a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006122:	f7fb fffd 	bl	8002120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006126:	bd08      	pop	{r3, pc}

08006128 <HAL_UART_TxHalfCpltCallback>:
}
 8006128:	4770      	bx	lr

0800612a <UART_DMATxHalfCplt>:
{
 800612a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800612c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800612e:	f7ff fffb 	bl	8006128 <HAL_UART_TxHalfCpltCallback>
}
 8006132:	bd08      	pop	{r3, pc}

08006134 <HAL_UART_ErrorCallback>:
}
 8006134:	4770      	bx	lr

08006136 <UART_DMAError>:
{
 8006136:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006138:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800613a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800613e:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f013 0f80 	tst.w	r3, #128	; 0x80
 800614a:	d001      	beq.n	8006150 <UART_DMAError+0x1a>
 800614c:	2a21      	cmp	r2, #33	; 0x21
 800614e:	d010      	beq.n	8006172 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006158:	d001      	beq.n	800615e <UART_DMAError+0x28>
 800615a:	2d22      	cmp	r5, #34	; 0x22
 800615c:	d010      	beq.n	8006180 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800615e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006162:	f043 0310 	orr.w	r3, r3, #16
 8006166:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 800616a:	4620      	mov	r0, r4
 800616c:	f7ff ffe2 	bl	8006134 <HAL_UART_ErrorCallback>
}
 8006170:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8006172:	2300      	movs	r3, #0
 8006174:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006178:	4620      	mov	r0, r4
 800617a:	f7ff fefb 	bl	8005f74 <UART_EndTxTransfer>
 800617e:	e7e7      	b.n	8006150 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006186:	4620      	mov	r0, r4
 8006188:	f7ff ff0d 	bl	8005fa6 <UART_EndRxTransfer>
 800618c:	e7e7      	b.n	800615e <UART_DMAError+0x28>

0800618e <UART_DMAAbortOnError>:
{
 800618e:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006190:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006198:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800619c:	f7ff ffca 	bl	8006134 <HAL_UART_ErrorCallback>
}
 80061a0:	bd08      	pop	{r3, pc}

080061a2 <HAL_UARTEx_RxEventCallback>:
}
 80061a2:	4770      	bx	lr

080061a4 <HAL_UART_IRQHandler>:
{
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80061a8:	6801      	ldr	r1, [r0, #0]
 80061aa:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061ac:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061ae:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80061b0:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80061b4:	401a      	ands	r2, r3
 80061b6:	d108      	bne.n	80061ca <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061b8:	f013 0f20 	tst.w	r3, #32
 80061bc:	d005      	beq.n	80061ca <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061be:	f010 0f20 	tst.w	r0, #32
 80061c2:	d134      	bne.n	800622e <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061c4:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80061c8:	d131      	bne.n	800622e <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 80061ca:	b12a      	cbz	r2, 80061d8 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80061cc:	4a95      	ldr	r2, [pc, #596]	; (8006424 <HAL_UART_IRQHandler+0x280>)
 80061ce:	402a      	ands	r2, r5
 80061d0:	d133      	bne.n	800623a <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80061d2:	4e95      	ldr	r6, [pc, #596]	; (8006428 <HAL_UART_IRQHandler+0x284>)
 80061d4:	4230      	tst	r0, r6
 80061d6:	d130      	bne.n	800623a <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80061da:	2a01      	cmp	r2, #1
 80061dc:	f000 80c3 	beq.w	8006366 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80061e4:	d003      	beq.n	80061ee <HAL_UART_IRQHandler+0x4a>
 80061e6:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 80061ea:	f040 815b 	bne.w	80064a4 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80061ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80061f2:	d007      	beq.n	8006204 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80061f4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80061f8:	f040 815b 	bne.w	80064b2 <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80061fc:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8006200:	f040 8157 	bne.w	80064b2 <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006204:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006208:	d003      	beq.n	8006212 <HAL_UART_IRQHandler+0x6e>
 800620a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800620e:	f040 8157 	bne.w	80064c0 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006212:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006216:	d003      	beq.n	8006220 <HAL_UART_IRQHandler+0x7c>
 8006218:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800621c:	f040 8154 	bne.w	80064c8 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006220:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006224:	d002      	beq.n	800622c <HAL_UART_IRQHandler+0x88>
 8006226:	2800      	cmp	r0, #0
 8006228:	f2c0 8152 	blt.w	80064d0 <HAL_UART_IRQHandler+0x32c>
}
 800622c:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800622e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006230:	2b00      	cmp	r3, #0
 8006232:	d0fb      	beq.n	800622c <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8006234:	4620      	mov	r0, r4
 8006236:	4798      	blx	r3
      return;
 8006238:	e7f8      	b.n	800622c <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800623a:	f013 0f01 	tst.w	r3, #1
 800623e:	d009      	beq.n	8006254 <HAL_UART_IRQHandler+0xb0>
 8006240:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006244:	d006      	beq.n	8006254 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006246:	2601      	movs	r6, #1
 8006248:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800624a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800624e:	4331      	orrs	r1, r6
 8006250:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006254:	f013 0f02 	tst.w	r3, #2
 8006258:	d00b      	beq.n	8006272 <HAL_UART_IRQHandler+0xce>
 800625a:	f015 0f01 	tst.w	r5, #1
 800625e:	d008      	beq.n	8006272 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006260:	6821      	ldr	r1, [r4, #0]
 8006262:	2602      	movs	r6, #2
 8006264:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006266:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800626a:	f041 0104 	orr.w	r1, r1, #4
 800626e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006272:	f013 0f04 	tst.w	r3, #4
 8006276:	d00b      	beq.n	8006290 <HAL_UART_IRQHandler+0xec>
 8006278:	f015 0f01 	tst.w	r5, #1
 800627c:	d008      	beq.n	8006290 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800627e:	6821      	ldr	r1, [r4, #0]
 8006280:	2604      	movs	r6, #4
 8006282:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006284:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006288:	f041 0102 	orr.w	r1, r1, #2
 800628c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006290:	f013 0f08 	tst.w	r3, #8
 8006294:	d00b      	beq.n	80062ae <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006296:	f010 0f20 	tst.w	r0, #32
 800629a:	d100      	bne.n	800629e <HAL_UART_IRQHandler+0xfa>
 800629c:	b13a      	cbz	r2, 80062ae <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800629e:	6822      	ldr	r2, [r4, #0]
 80062a0:	2108      	movs	r1, #8
 80062a2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062a4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80062a8:	430a      	orrs	r2, r1
 80062aa:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062ae:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80062b2:	d00c      	beq.n	80062ce <HAL_UART_IRQHandler+0x12a>
 80062b4:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80062b8:	d009      	beq.n	80062ce <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062c0:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062c2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80062c6:	f042 0220 	orr.w	r2, r2, #32
 80062ca:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062ce:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	d0aa      	beq.n	800622c <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062d6:	f013 0f20 	tst.w	r3, #32
 80062da:	d009      	beq.n	80062f0 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062dc:	f010 0f20 	tst.w	r0, #32
 80062e0:	d102      	bne.n	80062e8 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062e2:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 80062e6:	d003      	beq.n	80062f0 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 80062e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80062ea:	b10b      	cbz	r3, 80062f0 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 80062ec:	4620      	mov	r0, r4
 80062ee:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80062f0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80062fc:	d102      	bne.n	8006304 <HAL_UART_IRQHandler+0x160>
 80062fe:	f012 0f28 	tst.w	r2, #40	; 0x28
 8006302:	d029      	beq.n	8006358 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8006304:	4620      	mov	r0, r4
 8006306:	f7ff fe4e 	bl	8005fa6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006312:	d01d      	beq.n	8006350 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006314:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006316:	f102 0308 	add.w	r3, r2, #8
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	3208      	adds	r2, #8
 8006324:	e842 3100 	strex	r1, r3, [r2]
 8006328:	2900      	cmp	r1, #0
 800632a:	d1f3      	bne.n	8006314 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 800632c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800632e:	b15b      	cbz	r3, 8006348 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006330:	4a3e      	ldr	r2, [pc, #248]	; (800642c <HAL_UART_IRQHandler+0x288>)
 8006332:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006334:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006336:	f7fd fd1f 	bl	8003d78 <HAL_DMA_Abort_IT>
 800633a:	2800      	cmp	r0, #0
 800633c:	f43f af76 	beq.w	800622c <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006340:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006342:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006344:	4798      	blx	r3
 8006346:	e771      	b.n	800622c <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8006348:	4620      	mov	r0, r4
 800634a:	f7ff fef3 	bl	8006134 <HAL_UART_ErrorCallback>
 800634e:	e76d      	b.n	800622c <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8006350:	4620      	mov	r0, r4
 8006352:	f7ff feef 	bl	8006134 <HAL_UART_ErrorCallback>
 8006356:	e769      	b.n	800622c <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8006358:	4620      	mov	r0, r4
 800635a:	f7ff feeb 	bl	8006134 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635e:	2300      	movs	r3, #0
 8006360:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8006364:	e762      	b.n	800622c <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006366:	f013 0f10 	tst.w	r3, #16
 800636a:	f43f af39 	beq.w	80061e0 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800636e:	f010 0f10 	tst.w	r0, #16
 8006372:	f43f af35 	beq.w	80061e0 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006376:	2310      	movs	r3, #16
 8006378:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006382:	d055      	beq.n	8006430 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006384:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006386:	6813      	ldr	r3, [r2, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 800638c:	2b00      	cmp	r3, #0
 800638e:	f43f af4d 	beq.w	800622c <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006392:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006396:	4299      	cmp	r1, r3
 8006398:	f67f af48 	bls.w	800622c <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 800639c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80063a0:	6813      	ldr	r3, [r2, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f013 0f20 	tst.w	r3, #32
 80063a8:	d131      	bne.n	800640e <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063aa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	e852 3f00 	ldrex	r3, [r2]
 80063b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	e842 3100 	strex	r1, r3, [r2]
 80063b8:	2900      	cmp	r1, #0
 80063ba:	d1f6      	bne.n	80063aa <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063bc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	f102 0308 	add.w	r3, r2, #8
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	3208      	adds	r2, #8
 80063cc:	e842 3100 	strex	r1, r3, [r2]
 80063d0:	2900      	cmp	r1, #0
 80063d2:	d1f3      	bne.n	80063bc <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063d4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	f102 0308 	add.w	r3, r2, #8
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	3208      	adds	r2, #8
 80063e4:	e842 3100 	strex	r1, r3, [r2]
 80063e8:	2900      	cmp	r1, #0
 80063ea:	d1f3      	bne.n	80063d4 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 80063ec:	2320      	movs	r3, #32
 80063ee:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f2:	2300      	movs	r3, #0
 80063f4:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	e852 3f00 	ldrex	r3, [r2]
 80063fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	e842 3100 	strex	r1, r3, [r2]
 8006404:	2900      	cmp	r1, #0
 8006406:	d1f6      	bne.n	80063f6 <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006408:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800640a:	f7fd fc7b 	bl	8003d04 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800640e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006412:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006416:	b29b      	uxth	r3, r3
 8006418:	1ac9      	subs	r1, r1, r3
 800641a:	b289      	uxth	r1, r1
 800641c:	4620      	mov	r0, r4
 800641e:	f7ff fec0 	bl	80061a2 <HAL_UARTEx_RxEventCallback>
      return;
 8006422:	e703      	b.n	800622c <HAL_UART_IRQHandler+0x88>
 8006424:	10000001 	.word	0x10000001
 8006428:	04000120 	.word	0x04000120
 800642c:	0800618f 	.word	0x0800618f
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006430:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006434:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006438:	b29b      	uxth	r3, r3
 800643a:	1ac9      	subs	r1, r1, r3
 800643c:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 800643e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	f43f aef1 	beq.w	800622c <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 800644a:	2900      	cmp	r1, #0
 800644c:	f43f aeee 	beq.w	800622c <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006450:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	e852 3f00 	ldrex	r3, [r2]
 8006456:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	e842 3000 	strex	r0, r3, [r2]
 800645e:	2800      	cmp	r0, #0
 8006460:	d1f6      	bne.n	8006450 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006462:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	f102 0308 	add.w	r3, r2, #8
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006470:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	3208      	adds	r2, #8
 8006476:	e842 3000 	strex	r0, r3, [r2]
 800647a:	2800      	cmp	r0, #0
 800647c:	d1f1      	bne.n	8006462 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 800647e:	2320      	movs	r3, #32
 8006480:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006484:	2300      	movs	r3, #0
 8006486:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8006488:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800648a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648c:	e852 3f00 	ldrex	r3, [r2]
 8006490:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	e842 3000 	strex	r0, r3, [r2]
 8006498:	2800      	cmp	r0, #0
 800649a:	d1f6      	bne.n	800648a <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800649c:	4620      	mov	r0, r4
 800649e:	f7ff fe80 	bl	80061a2 <HAL_UARTEx_RxEventCallback>
      return;
 80064a2:	e6c3      	b.n	800622c <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80064a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80064a8:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80064aa:	4620      	mov	r0, r4
 80064ac:	f000 fe1c 	bl	80070e8 <HAL_UARTEx_WakeupCallback>
    return;
 80064b0:	e6bc      	b.n	800622c <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 80064b2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f43f aeb9 	beq.w	800622c <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 80064ba:	4620      	mov	r0, r4
 80064bc:	4798      	blx	r3
    return;
 80064be:	e6b5      	b.n	800622c <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 80064c0:	4620      	mov	r0, r4
 80064c2:	f7ff fe1f 	bl	8006104 <UART_EndTransmit_IT>
    return;
 80064c6:	e6b1      	b.n	800622c <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fe0f 	bl	80070ec <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80064ce:	e6ad      	b.n	800622c <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80064d0:	4620      	mov	r0, r4
 80064d2:	f000 fe0a 	bl	80070ea <HAL_UARTEx_RxFifoFullCallback>
    return;
 80064d6:	e6a9      	b.n	800622c <HAL_UART_IRQHandler+0x88>

080064d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80064d8:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80064da:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064de:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80064e2:	2a22      	cmp	r2, #34	; 0x22
 80064e4:	d005      	beq.n	80064f2 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064e6:	6802      	ldr	r2, [r0, #0]
 80064e8:	6993      	ldr	r3, [r2, #24]
 80064ea:	f043 0308 	orr.w	r3, r3, #8
 80064ee:	6193      	str	r3, [r2, #24]
  }
}
 80064f0:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064f2:	6802      	ldr	r2, [r0, #0]
 80064f4:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80064fa:	400b      	ands	r3, r1
 80064fc:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80064fe:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006500:	3301      	adds	r3, #1
 8006502:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8006504:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006508:	b29b      	uxth	r3, r3
 800650a:	3b01      	subs	r3, #1
 800650c:	b29b      	uxth	r3, r3
 800650e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8006512:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006516:	b29b      	uxth	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1e9      	bne.n	80064f0 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800651c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	e852 3f00 	ldrex	r3, [r2]
 8006522:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006526:	e842 3100 	strex	r1, r3, [r2]
 800652a:	2900      	cmp	r1, #0
 800652c:	d1f6      	bne.n	800651c <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	f102 0308 	add.w	r3, r2, #8
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653c:	3208      	adds	r2, #8
 800653e:	e842 3100 	strex	r1, r3, [r2]
 8006542:	2900      	cmp	r1, #0
 8006544:	d1f3      	bne.n	800652e <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8006546:	2320      	movs	r3, #32
 8006548:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 800654c:	2300      	movs	r3, #0
 800654e:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006550:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006552:	2b01      	cmp	r3, #1
 8006554:	d116      	bne.n	8006584 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006556:	2300      	movs	r3, #0
 8006558:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800655a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	e852 3f00 	ldrex	r3, [r2]
 8006560:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	e842 3100 	strex	r1, r3, [r2]
 8006568:	2900      	cmp	r1, #0
 800656a:	d1f6      	bne.n	800655a <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800656c:	6803      	ldr	r3, [r0, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	f012 0f10 	tst.w	r2, #16
 8006574:	d001      	beq.n	800657a <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006576:	2210      	movs	r2, #16
 8006578:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800657a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800657e:	f7ff fe10 	bl	80061a2 <HAL_UARTEx_RxEventCallback>
 8006582:	e7b5      	b.n	80064f0 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006584:	f7fb fddc 	bl	8002140 <HAL_UART_RxCpltCallback>
 8006588:	e7b2      	b.n	80064f0 <UART_RxISR_8BIT+0x18>

0800658a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800658a:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800658c:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006590:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006594:	2b22      	cmp	r3, #34	; 0x22
 8006596:	d005      	beq.n	80065a4 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006598:	6802      	ldr	r2, [r0, #0]
 800659a:	6993      	ldr	r3, [r2, #24]
 800659c:	f043 0308 	orr.w	r3, r3, #8
 80065a0:	6193      	str	r3, [r2, #24]
  }
}
 80065a2:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065a4:	6803      	ldr	r3, [r0, #0]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065a8:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80065aa:	4013      	ands	r3, r2
 80065ac:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80065ae:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80065b0:	3302      	adds	r3, #2
 80065b2:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80065b4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80065c2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1ea      	bne.n	80065a2 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065cc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	e852 3f00 	ldrex	r3, [r2]
 80065d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d6:	e842 3100 	strex	r1, r3, [r2]
 80065da:	2900      	cmp	r1, #0
 80065dc:	d1f6      	bne.n	80065cc <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	f102 0308 	add.w	r3, r2, #8
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	3208      	adds	r2, #8
 80065ee:	e842 3100 	strex	r1, r3, [r2]
 80065f2:	2900      	cmp	r1, #0
 80065f4:	d1f3      	bne.n	80065de <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80065f6:	2320      	movs	r3, #32
 80065f8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80065fc:	2300      	movs	r3, #0
 80065fe:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006600:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006602:	2b01      	cmp	r3, #1
 8006604:	d116      	bne.n	8006634 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006606:	2300      	movs	r3, #0
 8006608:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	e852 3f00 	ldrex	r3, [r2]
 8006610:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	e842 3100 	strex	r1, r3, [r2]
 8006618:	2900      	cmp	r1, #0
 800661a:	d1f6      	bne.n	800660a <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800661c:	6803      	ldr	r3, [r0, #0]
 800661e:	69da      	ldr	r2, [r3, #28]
 8006620:	f012 0f10 	tst.w	r2, #16
 8006624:	d001      	beq.n	800662a <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006626:	2210      	movs	r2, #16
 8006628:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800662a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800662e:	f7ff fdb8 	bl	80061a2 <HAL_UARTEx_RxEventCallback>
 8006632:	e7b6      	b.n	80065a2 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006634:	f7fb fd84 	bl	8002140 <HAL_UART_RxCpltCallback>
 8006638:	e7b3      	b.n	80065a2 <UART_RxISR_16BIT+0x18>
	...

0800663c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800663c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8006640:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006644:	6803      	ldr	r3, [r0, #0]
 8006646:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006648:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800664c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006650:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006654:	2a22      	cmp	r2, #34	; 0x22
 8006656:	d005      	beq.n	8006664 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006658:	699a      	ldr	r2, [r3, #24]
 800665a:	f042 0208 	orr.w	r2, r2, #8
 800665e:	619a      	str	r2, [r3, #24]
  }
}
 8006660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006664:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006666:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800666a:	e008      	b.n	800667e <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800666c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d14c      	bne.n	800670e <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8006674:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006678:	b29b      	uxth	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d04e      	beq.n	800671c <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800667e:	2f00      	cmp	r7, #0
 8006680:	f000 8087 	beq.w	8006792 <UART_RxISR_8BIT_FIFOEN+0x156>
 8006684:	f015 0f20 	tst.w	r5, #32
 8006688:	f000 8083 	beq.w	8006792 <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006690:	b2f3      	uxtb	r3, r6
 8006692:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006694:	400b      	ands	r3, r1
 8006696:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8006698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800669a:	3301      	adds	r3, #1
 800669c:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800669e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80066b0:	f015 0f07 	tst.w	r5, #7
 80066b4:	d0de      	beq.n	8006674 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066b6:	f015 0f01 	tst.w	r5, #1
 80066ba:	d009      	beq.n	80066d0 <UART_RxISR_8BIT_FIFOEN+0x94>
 80066bc:	f419 7f80 	tst.w	r9, #256	; 0x100
 80066c0:	d006      	beq.n	80066d0 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066c2:	2201      	movs	r2, #1
 80066c4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066c6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066d0:	f015 0f02 	tst.w	r5, #2
 80066d4:	d00b      	beq.n	80066ee <UART_RxISR_8BIT_FIFOEN+0xb2>
 80066d6:	f018 0f01 	tst.w	r8, #1
 80066da:	d008      	beq.n	80066ee <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	2202      	movs	r2, #2
 80066e0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066e2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80066e6:	f043 0304 	orr.w	r3, r3, #4
 80066ea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066ee:	f015 0f04 	tst.w	r5, #4
 80066f2:	d0bb      	beq.n	800666c <UART_RxISR_8BIT_FIFOEN+0x30>
 80066f4:	f018 0f01 	tst.w	r8, #1
 80066f8:	d0b8      	beq.n	800666c <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	2204      	movs	r2, #4
 80066fe:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006700:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006704:	f043 0302 	orr.w	r3, r3, #2
 8006708:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800670c:	e7ae      	b.n	800666c <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800670e:	4620      	mov	r0, r4
 8006710:	f7ff fd10 	bl	8006134 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006714:	2300      	movs	r3, #0
 8006716:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 800671a:	e7ab      	b.n	8006674 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800671c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	e852 3f00 	ldrex	r3, [r2]
 8006722:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	e842 3100 	strex	r1, r3, [r2]
 800672a:	2900      	cmp	r1, #0
 800672c:	d1f6      	bne.n	800671c <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800672e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006730:	f102 0308 	add.w	r3, r2, #8
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800673c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	3208      	adds	r2, #8
 8006742:	e842 3100 	strex	r1, r3, [r2]
 8006746:	2900      	cmp	r1, #0
 8006748:	d1f1      	bne.n	800672e <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 800674a:	2320      	movs	r3, #32
 800674c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8006750:	2300      	movs	r3, #0
 8006752:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006754:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006756:	2b01      	cmp	r3, #1
 8006758:	d003      	beq.n	8006762 <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 800675a:	4620      	mov	r0, r4
 800675c:	f7fb fcf0 	bl	8002140 <HAL_UART_RxCpltCallback>
 8006760:	e78d      	b.n	800667e <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006762:	2300      	movs	r3, #0
 8006764:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006766:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	e852 3f00 	ldrex	r3, [r2]
 800676c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	e842 3100 	strex	r1, r3, [r2]
 8006774:	2900      	cmp	r1, #0
 8006776:	d1f6      	bne.n	8006766 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	f012 0f10 	tst.w	r2, #16
 8006780:	d001      	beq.n	8006786 <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006782:	2210      	movs	r2, #16
 8006784:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006786:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800678a:	4620      	mov	r0, r4
 800678c:	f7ff fd09 	bl	80061a2 <HAL_UARTEx_RxEventCallback>
 8006790:	e775      	b.n	800667e <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006792:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006796:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006798:	2b00      	cmp	r3, #0
 800679a:	f43f af61 	beq.w	8006660 <UART_RxISR_8BIT_FIFOEN+0x24>
 800679e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80067a2:	429a      	cmp	r2, r3
 80067a4:	f67f af5c 	bls.w	8006660 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80067a8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	f102 0308 	add.w	r3, r2, #8
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	3208      	adds	r2, #8
 80067b8:	e842 3100 	strex	r1, r3, [r2]
 80067bc:	2900      	cmp	r1, #0
 80067be:	d1f3      	bne.n	80067a8 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 80067c0:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 80067c2:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80067c4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	e852 3f00 	ldrex	r3, [r2]
 80067ca:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	e842 3100 	strex	r1, r3, [r2]
 80067d2:	2900      	cmp	r1, #0
 80067d4:	d1f6      	bne.n	80067c4 <UART_RxISR_8BIT_FIFOEN+0x188>
 80067d6:	e743      	b.n	8006660 <UART_RxISR_8BIT_FIFOEN+0x24>
 80067d8:	080064d9 	.word	0x080064d9

080067dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80067e0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80067e4:	6803      	ldr	r3, [r0, #0]
 80067e6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80067e8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80067ec:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067f0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80067f4:	2a22      	cmp	r2, #34	; 0x22
 80067f6:	d005      	beq.n	8006804 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067f8:	699a      	ldr	r2, [r3, #24]
 80067fa:	f042 0208 	orr.w	r2, r2, #8
 80067fe:	619a      	str	r2, [r3, #24]
  }
}
 8006800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006804:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006806:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800680a:	e008      	b.n	800681e <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800680c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d14b      	bne.n	80068ac <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8006814:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d04d      	beq.n	80068ba <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800681e:	2f00      	cmp	r7, #0
 8006820:	f000 8086 	beq.w	8006930 <UART_RxISR_16BIT_FIFOEN+0x154>
 8006824:	f015 0f20 	tst.w	r5, #32
 8006828:	f000 8082 	beq.w	8006930 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006830:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8006832:	4033      	ands	r3, r6
 8006834:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8006836:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006838:	3302      	adds	r3, #2
 800683a:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800683c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006840:	b29b      	uxth	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	b29b      	uxth	r3, r3
 8006846:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800684e:	f015 0f07 	tst.w	r5, #7
 8006852:	d0df      	beq.n	8006814 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006854:	f015 0f01 	tst.w	r5, #1
 8006858:	d009      	beq.n	800686e <UART_RxISR_16BIT_FIFOEN+0x92>
 800685a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800685e:	d006      	beq.n	800686e <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006860:	2201      	movs	r2, #1
 8006862:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006864:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800686e:	f015 0f02 	tst.w	r5, #2
 8006872:	d00b      	beq.n	800688c <UART_RxISR_16BIT_FIFOEN+0xb0>
 8006874:	f018 0f01 	tst.w	r8, #1
 8006878:	d008      	beq.n	800688c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	2202      	movs	r2, #2
 800687e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006880:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006884:	f043 0304 	orr.w	r3, r3, #4
 8006888:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800688c:	f015 0f04 	tst.w	r5, #4
 8006890:	d0bc      	beq.n	800680c <UART_RxISR_16BIT_FIFOEN+0x30>
 8006892:	f018 0f01 	tst.w	r8, #1
 8006896:	d0b9      	beq.n	800680c <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	2204      	movs	r2, #4
 800689c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800689e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80068a2:	f043 0302 	orr.w	r3, r3, #2
 80068a6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80068aa:	e7af      	b.n	800680c <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80068ac:	4620      	mov	r0, r4
 80068ae:	f7ff fc41 	bl	8006134 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b2:	2300      	movs	r3, #0
 80068b4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80068b8:	e7ac      	b.n	8006814 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	e852 3f00 	ldrex	r3, [r2]
 80068c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	e842 3100 	strex	r1, r3, [r2]
 80068c8:	2900      	cmp	r1, #0
 80068ca:	d1f6      	bne.n	80068ba <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068cc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	f102 0308 	add.w	r3, r2, #8
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068da:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	3208      	adds	r2, #8
 80068e0:	e842 3100 	strex	r1, r3, [r2]
 80068e4:	2900      	cmp	r1, #0
 80068e6:	d1f1      	bne.n	80068cc <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80068e8:	2320      	movs	r3, #32
 80068ea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d003      	beq.n	8006900 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 80068f8:	4620      	mov	r0, r4
 80068fa:	f7fb fc21 	bl	8002140 <HAL_UART_RxCpltCallback>
 80068fe:	e78e      	b.n	800681e <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006900:	2300      	movs	r3, #0
 8006902:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006904:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	e852 3f00 	ldrex	r3, [r2]
 800690a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690e:	e842 3100 	strex	r1, r3, [r2]
 8006912:	2900      	cmp	r1, #0
 8006914:	d1f6      	bne.n	8006904 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	69da      	ldr	r2, [r3, #28]
 800691a:	f012 0f10 	tst.w	r2, #16
 800691e:	d001      	beq.n	8006924 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006920:	2210      	movs	r2, #16
 8006922:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006924:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006928:	4620      	mov	r0, r4
 800692a:	f7ff fc3a 	bl	80061a2 <HAL_UARTEx_RxEventCallback>
 800692e:	e776      	b.n	800681e <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8006930:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006934:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006936:	2b00      	cmp	r3, #0
 8006938:	f43f af62 	beq.w	8006800 <UART_RxISR_16BIT_FIFOEN+0x24>
 800693c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8006940:	429a      	cmp	r2, r3
 8006942:	f67f af5d 	bls.w	8006800 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006946:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	f102 0308 	add.w	r3, r2, #8
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	3208      	adds	r2, #8
 8006956:	e842 3100 	strex	r1, r3, [r2]
 800695a:	2900      	cmp	r1, #0
 800695c:	d1f3      	bne.n	8006946 <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 800695e:	4b06      	ldr	r3, [pc, #24]	; (8006978 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8006960:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006962:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006964:	e852 3f00 	ldrex	r3, [r2]
 8006968:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696c:	e842 3100 	strex	r1, r3, [r2]
 8006970:	2900      	cmp	r1, #0
 8006972:	d1f6      	bne.n	8006962 <UART_RxISR_16BIT_FIFOEN+0x186>
 8006974:	e744      	b.n	8006800 <UART_RxISR_16BIT_FIFOEN+0x24>
 8006976:	bf00      	nop
 8006978:	0800658b 	.word	0x0800658b

0800697c <UART_SetConfig>:
{
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006980:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006982:	6883      	ldr	r3, [r0, #8]
 8006984:	6902      	ldr	r2, [r0, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	6942      	ldr	r2, [r0, #20]
 800698a:	4313      	orrs	r3, r2
 800698c:	69c2      	ldr	r2, [r0, #28]
 800698e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006990:	6808      	ldr	r0, [r1, #0]
 8006992:	4a9d      	ldr	r2, [pc, #628]	; (8006c08 <UART_SetConfig+0x28c>)
 8006994:	4002      	ands	r2, r0
 8006996:	4313      	orrs	r3, r2
 8006998:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800699a:	6822      	ldr	r2, [r4, #0]
 800699c:	6853      	ldr	r3, [r2, #4]
 800699e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80069a2:	68e1      	ldr	r1, [r4, #12]
 80069a4:	430b      	orrs	r3, r1
 80069a6:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069a8:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	4b97      	ldr	r3, [pc, #604]	; (8006c0c <UART_SetConfig+0x290>)
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d001      	beq.n	80069b6 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 80069b2:	6a23      	ldr	r3, [r4, #32]
 80069b4:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069b6:	6893      	ldr	r3, [r2, #8]
 80069b8:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80069bc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80069c0:	430b      	orrs	r3, r1
 80069c2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069c4:	6822      	ldr	r2, [r4, #0]
 80069c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80069c8:	f023 030f 	bic.w	r3, r3, #15
 80069cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80069ce:	430b      	orrs	r3, r1
 80069d0:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	4a8e      	ldr	r2, [pc, #568]	; (8006c10 <UART_SetConfig+0x294>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d01c      	beq.n	8006a14 <UART_SetConfig+0x98>
 80069da:	4a8e      	ldr	r2, [pc, #568]	; (8006c14 <UART_SetConfig+0x298>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d031      	beq.n	8006a44 <UART_SetConfig+0xc8>
 80069e0:	4a8a      	ldr	r2, [pc, #552]	; (8006c0c <UART_SetConfig+0x290>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d04b      	beq.n	8006a7e <UART_SetConfig+0x102>
 80069e6:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80069e8:	4988      	ldr	r1, [pc, #544]	; (8006c0c <UART_SetConfig+0x290>)
 80069ea:	428b      	cmp	r3, r1
 80069ec:	d068      	beq.n	8006ac0 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ee:	69e0      	ldr	r0, [r4, #28]
 80069f0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80069f4:	f000 80a5 	beq.w	8006b42 <UART_SetConfig+0x1c6>
    switch (clocksource)
 80069f8:	2a08      	cmp	r2, #8
 80069fa:	f200 811f 	bhi.w	8006c3c <UART_SetConfig+0x2c0>
 80069fe:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006a02:	00d3      	.short	0x00d3
 8006a04:	00d100f5 	.word	0x00d100f5
 8006a08:	00f8011d 	.word	0x00f8011d
 8006a0c:	011d011d 	.word	0x011d011d
 8006a10:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a18:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006a1c:	f002 0203 	and.w	r2, r2, #3
 8006a20:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a24:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8006a28:	2a03      	cmp	r2, #3
 8006a2a:	d809      	bhi.n	8006a40 <UART_SetConfig+0xc4>
 8006a2c:	e8df f002 	tbb	[pc, r2]
 8006a30:	063c0402 	.word	0x063c0402
 8006a34:	2201      	movs	r2, #1
 8006a36:	e7d7      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006a38:	2204      	movs	r2, #4
 8006a3a:	e7d5      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	e7d3      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006a40:	2210      	movs	r2, #16
 8006a42:	e7d1      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a48:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006a4c:	f002 020c 	and.w	r2, r2, #12
 8006a50:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8006a54:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8006a58:	2a0c      	cmp	r2, #12
 8006a5a:	d80e      	bhi.n	8006a7a <UART_SetConfig+0xfe>
 8006a5c:	e8df f002 	tbb	[pc, r2]
 8006a60:	0d0d0d07 	.word	0x0d0d0d07
 8006a64:	0d0d0d09 	.word	0x0d0d0d09
 8006a68:	0d0d0d26 	.word	0x0d0d0d26
 8006a6c:	0b          	.byte	0x0b
 8006a6d:	00          	.byte	0x00
 8006a6e:	2200      	movs	r2, #0
 8006a70:	e7ba      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006a72:	2204      	movs	r2, #4
 8006a74:	e7b8      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006a76:	2208      	movs	r2, #8
 8006a78:	e7b6      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	e7b4      	b.n	80069e8 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a82:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006a86:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006a8a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006a8e:	d00f      	beq.n	8006ab0 <UART_SetConfig+0x134>
 8006a90:	d805      	bhi.n	8006a9e <UART_SetConfig+0x122>
 8006a92:	b17a      	cbz	r2, 8006ab4 <UART_SetConfig+0x138>
 8006a94:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006a98:	d10e      	bne.n	8006ab8 <UART_SetConfig+0x13c>
 8006a9a:	2204      	movs	r2, #4
 8006a9c:	e7a4      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006a9e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8006aa2:	d10b      	bne.n	8006abc <UART_SetConfig+0x140>
 8006aa4:	2208      	movs	r2, #8
 8006aa6:	e79f      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	e79d      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006aac:	2202      	movs	r2, #2
 8006aae:	e79b      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	e799      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	e797      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006ab8:	2210      	movs	r2, #16
 8006aba:	e795      	b.n	80069e8 <UART_SetConfig+0x6c>
 8006abc:	2210      	movs	r2, #16
 8006abe:	e793      	b.n	80069e8 <UART_SetConfig+0x6c>
    switch (clocksource)
 8006ac0:	2a08      	cmp	r2, #8
 8006ac2:	f200 809c 	bhi.w	8006bfe <UART_SetConfig+0x282>
 8006ac6:	e8df f002 	tbb	[pc, r2]
 8006aca:	9a08      	.short	0x9a08
 8006acc:	9a379a3a 	.word	0x9a379a3a
 8006ad0:	9a9a      	.short	0x9a9a
 8006ad2:	05          	.byte	0x05
 8006ad3:	00          	.byte	0x00
 8006ad4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006ad8:	e004      	b.n	8006ae4 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ada:	f7fe fb0f 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	f000 808f 	beq.w	8006c02 <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ae4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ae6:	4b4c      	ldr	r3, [pc, #304]	; (8006c18 <UART_SetConfig+0x29c>)
 8006ae8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006aec:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006af0:	6865      	ldr	r5, [r4, #4]
 8006af2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006af6:	4299      	cmp	r1, r3
 8006af8:	f200 8094 	bhi.w	8006c24 <UART_SetConfig+0x2a8>
 8006afc:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006b00:	f200 8092 	bhi.w	8006c28 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b04:	2600      	movs	r6, #0
 8006b06:	4633      	mov	r3, r6
 8006b08:	4631      	mov	r1, r6
 8006b0a:	f7fa f913 	bl	8000d34 <__aeabi_uldivmod>
 8006b0e:	0209      	lsls	r1, r1, #8
 8006b10:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006b14:	0200      	lsls	r0, r0, #8
 8006b16:	086b      	lsrs	r3, r5, #1
 8006b18:	18c0      	adds	r0, r0, r3
 8006b1a:	462a      	mov	r2, r5
 8006b1c:	4633      	mov	r3, r6
 8006b1e:	f141 0100 	adc.w	r1, r1, #0
 8006b22:	f7fa f907 	bl	8000d34 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b26:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006b2a:	4b3c      	ldr	r3, [pc, #240]	; (8006c1c <UART_SetConfig+0x2a0>)
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d87d      	bhi.n	8006c2c <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	60d8      	str	r0, [r3, #12]
 8006b34:	4630      	mov	r0, r6
 8006b36:	e050      	b.n	8006bda <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006b38:	f7fd fdd8 	bl	80046ec <HAL_RCC_GetSysClockFreq>
        break;
 8006b3c:	e7cf      	b.n	8006ade <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8006b3e:	4838      	ldr	r0, [pc, #224]	; (8006c20 <UART_SetConfig+0x2a4>)
 8006b40:	e7d0      	b.n	8006ae4 <UART_SetConfig+0x168>
    switch (clocksource)
 8006b42:	2a08      	cmp	r2, #8
 8006b44:	d874      	bhi.n	8006c30 <UART_SetConfig+0x2b4>
 8006b46:	e8df f002 	tbb	[pc, r2]
 8006b4a:	2707      	.short	0x2707
 8006b4c:	732a7305 	.word	0x732a7305
 8006b50:	7373      	.short	0x7373
 8006b52:	0b          	.byte	0x0b
 8006b53:	00          	.byte	0x00
 8006b54:	4832      	ldr	r0, [pc, #200]	; (8006c20 <UART_SetConfig+0x2a4>)
 8006b56:	e003      	b.n	8006b60 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b58:	f7fe fad0 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d069      	beq.n	8006c34 <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b62:	4b2d      	ldr	r3, [pc, #180]	; (8006c18 <UART_SetConfig+0x29c>)
 8006b64:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006b68:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b6c:	6862      	ldr	r2, [r4, #4]
 8006b6e:	0853      	lsrs	r3, r2, #1
 8006b70:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006b74:	fbb0 f0f2 	udiv	r0, r0, r2
 8006b78:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b7a:	f1a0 0210 	sub.w	r2, r0, #16
 8006b7e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d858      	bhi.n	8006c38 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b86:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b8a:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006b8e:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	60d8      	str	r0, [r3, #12]
 8006b94:	2000      	movs	r0, #0
 8006b96:	e020      	b.n	8006bda <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b98:	f7fe fac0 	bl	800511c <HAL_RCC_GetPCLK2Freq>
        break;
 8006b9c:	e7de      	b.n	8006b5c <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006b9e:	f7fd fda5 	bl	80046ec <HAL_RCC_GetSysClockFreq>
        break;
 8006ba2:	e7db      	b.n	8006b5c <UART_SetConfig+0x1e0>
    switch (clocksource)
 8006ba4:	481e      	ldr	r0, [pc, #120]	; (8006c20 <UART_SetConfig+0x2a4>)
 8006ba6:	e003      	b.n	8006bb0 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ba8:	f7fe faa8 	bl	80050fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d047      	beq.n	8006c40 <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006bb2:	4b19      	ldr	r3, [pc, #100]	; (8006c18 <UART_SetConfig+0x29c>)
 8006bb4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006bb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8006bbc:	6863      	ldr	r3, [r4, #4]
 8006bbe:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006bc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8006bc6:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc8:	f1a0 0210 	sub.w	r2, r0, #16
 8006bcc:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d837      	bhi.n	8006c44 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	60d8      	str	r0, [r3, #12]
 8006bd8:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006be0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8006be8:	6763      	str	r3, [r4, #116]	; 0x74
}
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bec:	f7fe fa96 	bl	800511c <HAL_RCC_GetPCLK2Freq>
        break;
 8006bf0:	e7dc      	b.n	8006bac <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf2:	f7fd fd7b 	bl	80046ec <HAL_RCC_GetSysClockFreq>
        break;
 8006bf6:	e7d9      	b.n	8006bac <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8006bf8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006bfc:	e7d8      	b.n	8006bb0 <UART_SetConfig+0x234>
    switch (clocksource)
 8006bfe:	2001      	movs	r0, #1
 8006c00:	e7eb      	b.n	8006bda <UART_SetConfig+0x25e>
 8006c02:	2000      	movs	r0, #0
 8006c04:	e7e9      	b.n	8006bda <UART_SetConfig+0x25e>
 8006c06:	bf00      	nop
 8006c08:	cfff69f3 	.word	0xcfff69f3
 8006c0c:	40008000 	.word	0x40008000
 8006c10:	40013800 	.word	0x40013800
 8006c14:	40004400 	.word	0x40004400
 8006c18:	08013278 	.word	0x08013278
 8006c1c:	000ffcff 	.word	0x000ffcff
 8006c20:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8006c24:	2001      	movs	r0, #1
 8006c26:	e7d8      	b.n	8006bda <UART_SetConfig+0x25e>
 8006c28:	2001      	movs	r0, #1
 8006c2a:	e7d6      	b.n	8006bda <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	e7d4      	b.n	8006bda <UART_SetConfig+0x25e>
    switch (clocksource)
 8006c30:	2001      	movs	r0, #1
 8006c32:	e7d2      	b.n	8006bda <UART_SetConfig+0x25e>
 8006c34:	2000      	movs	r0, #0
 8006c36:	e7d0      	b.n	8006bda <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006c38:	2001      	movs	r0, #1
 8006c3a:	e7ce      	b.n	8006bda <UART_SetConfig+0x25e>
    switch (clocksource)
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	e7cc      	b.n	8006bda <UART_SetConfig+0x25e>
 8006c40:	2000      	movs	r0, #0
 8006c42:	e7ca      	b.n	8006bda <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006c44:	2001      	movs	r0, #1
 8006c46:	e7c8      	b.n	8006bda <UART_SetConfig+0x25e>

08006c48 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c48:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006c4a:	f013 0f01 	tst.w	r3, #1
 8006c4e:	d006      	beq.n	8006c5e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c50:	6802      	ldr	r2, [r0, #0]
 8006c52:	6853      	ldr	r3, [r2, #4]
 8006c54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c58:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006c60:	f013 0f02 	tst.w	r3, #2
 8006c64:	d006      	beq.n	8006c74 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c66:	6802      	ldr	r2, [r0, #0]
 8006c68:	6853      	ldr	r3, [r2, #4]
 8006c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c6e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c74:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006c76:	f013 0f04 	tst.w	r3, #4
 8006c7a:	d006      	beq.n	8006c8a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c7c:	6802      	ldr	r2, [r0, #0]
 8006c7e:	6853      	ldr	r3, [r2, #4]
 8006c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c84:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006c86:	430b      	orrs	r3, r1
 8006c88:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006c8c:	f013 0f08 	tst.w	r3, #8
 8006c90:	d006      	beq.n	8006ca0 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c92:	6802      	ldr	r2, [r0, #0]
 8006c94:	6853      	ldr	r3, [r2, #4]
 8006c96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c9a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ca0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006ca2:	f013 0f10 	tst.w	r3, #16
 8006ca6:	d006      	beq.n	8006cb6 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ca8:	6802      	ldr	r2, [r0, #0]
 8006caa:	6893      	ldr	r3, [r2, #8]
 8006cac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cb0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cb6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006cb8:	f013 0f20 	tst.w	r3, #32
 8006cbc:	d006      	beq.n	8006ccc <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cbe:	6802      	ldr	r2, [r0, #0]
 8006cc0:	6893      	ldr	r3, [r2, #8]
 8006cc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cc6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006cc8:	430b      	orrs	r3, r1
 8006cca:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ccc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006cce:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006cd2:	d00a      	beq.n	8006cea <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cd4:	6802      	ldr	r2, [r0, #0]
 8006cd6:	6853      	ldr	r3, [r2, #4]
 8006cd8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006cdc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006cde:	430b      	orrs	r3, r1
 8006ce0:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ce2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ce8:	d00b      	beq.n	8006d02 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006cec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006cf0:	d006      	beq.n	8006d00 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cf2:	6802      	ldr	r2, [r0, #0]
 8006cf4:	6853      	ldr	r3, [r2, #4]
 8006cf6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006cfa:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	6053      	str	r3, [r2, #4]
}
 8006d00:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d02:	6802      	ldr	r2, [r0, #0]
 8006d04:	6853      	ldr	r3, [r2, #4]
 8006d06:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006d0a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	6053      	str	r3, [r2, #4]
 8006d10:	e7eb      	b.n	8006cea <UART_AdvFeatureConfig+0xa2>

08006d12 <UART_WaitOnFlagUntilTimeout>:
{
 8006d12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d16:	4605      	mov	r5, r0
 8006d18:	460f      	mov	r7, r1
 8006d1a:	4616      	mov	r6, r2
 8006d1c:	4699      	mov	r9, r3
 8006d1e:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d22:	682c      	ldr	r4, [r5, #0]
 8006d24:	69e4      	ldr	r4, [r4, #28]
 8006d26:	ea37 0304 	bics.w	r3, r7, r4
 8006d2a:	bf0c      	ite	eq
 8006d2c:	f04f 0c01 	moveq.w	ip, #1
 8006d30:	f04f 0c00 	movne.w	ip, #0
 8006d34:	45b4      	cmp	ip, r6
 8006d36:	d157      	bne.n	8006de8 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8006d38:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006d3c:	d0f1      	beq.n	8006d22 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d3e:	f7fa fed5 	bl	8001aec <HAL_GetTick>
 8006d42:	eba0 0009 	sub.w	r0, r0, r9
 8006d46:	4540      	cmp	r0, r8
 8006d48:	d82f      	bhi.n	8006daa <UART_WaitOnFlagUntilTimeout+0x98>
 8006d4a:	f1b8 0f00 	cmp.w	r8, #0
 8006d4e:	d02c      	beq.n	8006daa <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	f012 0f04 	tst.w	r2, #4
 8006d58:	d0e3      	beq.n	8006d22 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d5a:	69da      	ldr	r2, [r3, #28]
 8006d5c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006d60:	d0df      	beq.n	8006d22 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d66:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d68:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	e852 3f00 	ldrex	r3, [r2]
 8006d6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	e842 3100 	strex	r1, r3, [r2]
 8006d76:	2900      	cmp	r1, #0
 8006d78:	d1f6      	bne.n	8006d68 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d7a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	f102 0308 	add.w	r3, r2, #8
 8006d80:	e853 3f00 	ldrex	r3, [r3]
 8006d84:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	3208      	adds	r2, #8
 8006d8a:	e842 3100 	strex	r1, r3, [r2]
 8006d8e:	2900      	cmp	r1, #0
 8006d90:	d1f3      	bne.n	8006d7a <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8006d92:	2320      	movs	r3, #32
 8006d94:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006d98:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d9c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8006da0:	2300      	movs	r3, #0
 8006da2:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8006da6:	2003      	movs	r0, #3
 8006da8:	e01f      	b.n	8006dea <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006daa:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	e852 3f00 	ldrex	r3, [r2]
 8006db0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	e842 3100 	strex	r1, r3, [r2]
 8006db8:	2900      	cmp	r1, #0
 8006dba:	d1f6      	bne.n	8006daa <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbe:	f102 0308 	add.w	r3, r2, #8
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	3208      	adds	r2, #8
 8006dcc:	e842 3100 	strex	r1, r3, [r2]
 8006dd0:	2900      	cmp	r1, #0
 8006dd2:	d1f3      	bne.n	8006dbc <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8006dd4:	2320      	movs	r3, #32
 8006dd6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006dda:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8006dde:	2300      	movs	r3, #0
 8006de0:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 8006de4:	2003      	movs	r0, #3
 8006de6:	e000      	b.n	8006dea <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 8006de8:	2000      	movs	r0, #0
}
 8006dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006dee <UART_CheckIdleState>:
{
 8006dee:	b530      	push	{r4, r5, lr}
 8006df0:	b083      	sub	sp, #12
 8006df2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8006dfa:	f7fa fe77 	bl	8001aec <HAL_GetTick>
 8006dfe:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e00:	6822      	ldr	r2, [r4, #0]
 8006e02:	6812      	ldr	r2, [r2, #0]
 8006e04:	f012 0f08 	tst.w	r2, #8
 8006e08:	d10f      	bne.n	8006e2a <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f013 0f04 	tst.w	r3, #4
 8006e12:	d118      	bne.n	8006e46 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006e14:	2320      	movs	r3, #32
 8006e16:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1e:	2000      	movs	r0, #0
 8006e20:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8006e22:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006e26:	b003      	add	sp, #12
 8006e28:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	4603      	mov	r3, r0
 8006e32:	2200      	movs	r2, #0
 8006e34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f7ff ff6a 	bl	8006d12 <UART_WaitOnFlagUntilTimeout>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d0e3      	beq.n	8006e0a <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006e42:	2003      	movs	r0, #3
 8006e44:	e7ef      	b.n	8006e26 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	462b      	mov	r3, r5
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e54:	4620      	mov	r0, r4
 8006e56:	f7ff ff5c 	bl	8006d12 <UART_WaitOnFlagUntilTimeout>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d0da      	beq.n	8006e14 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006e5e:	2003      	movs	r0, #3
 8006e60:	e7e1      	b.n	8006e26 <UART_CheckIdleState+0x38>

08006e62 <HAL_UART_Init>:
  if (huart == NULL)
 8006e62:	b378      	cbz	r0, 8006ec4 <HAL_UART_Init+0x62>
{
 8006e64:	b510      	push	{r4, lr}
 8006e66:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006e68:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006e6c:	b30b      	cbz	r3, 8006eb2 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006e6e:	2324      	movs	r3, #36	; 0x24
 8006e70:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006e74:	6822      	ldr	r2, [r4, #0]
 8006e76:	6813      	ldr	r3, [r2, #0]
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f7ff fd7c 	bl	800697c <UART_SetConfig>
 8006e84:	2801      	cmp	r0, #1
 8006e86:	d013      	beq.n	8006eb0 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006e8a:	b9bb      	cbnz	r3, 8006ebc <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	6853      	ldr	r3, [r2, #4]
 8006e90:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006e94:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e96:	6822      	ldr	r2, [r4, #0]
 8006e98:	6893      	ldr	r3, [r2, #8]
 8006e9a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006e9e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006ea0:	6822      	ldr	r2, [r4, #0]
 8006ea2:	6813      	ldr	r3, [r2, #0]
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7ff ff9f 	bl	8006dee <UART_CheckIdleState>
}
 8006eb0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006eb2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006eb6:	f7fb f82f 	bl	8001f18 <HAL_UART_MspInit>
 8006eba:	e7d8      	b.n	8006e6e <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f7ff fec3 	bl	8006c48 <UART_AdvFeatureConfig>
 8006ec2:	e7e3      	b.n	8006e8c <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006ec4:	2001      	movs	r0, #1
}
 8006ec6:	4770      	bx	lr

08006ec8 <UART_Start_Receive_IT>:
{
 8006ec8:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8006eca:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006ecc:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006ed0:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8006ed8:	6883      	ldr	r3, [r0, #8]
 8006eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ede:	d006      	beq.n	8006eee <UART_Start_Receive_IT+0x26>
 8006ee0:	b9a3      	cbnz	r3, 8006f0c <UART_Start_Receive_IT+0x44>
 8006ee2:	6903      	ldr	r3, [r0, #16]
 8006ee4:	b973      	cbnz	r3, 8006f04 <UART_Start_Receive_IT+0x3c>
 8006ee6:	23ff      	movs	r3, #255	; 0xff
 8006ee8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006eec:	e014      	b.n	8006f18 <UART_Start_Receive_IT+0x50>
 8006eee:	6903      	ldr	r3, [r0, #16]
 8006ef0:	b923      	cbnz	r3, 8006efc <UART_Start_Receive_IT+0x34>
 8006ef2:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006ef6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006efa:	e00d      	b.n	8006f18 <UART_Start_Receive_IT+0x50>
 8006efc:	23ff      	movs	r3, #255	; 0xff
 8006efe:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006f02:	e009      	b.n	8006f18 <UART_Start_Receive_IT+0x50>
 8006f04:	237f      	movs	r3, #127	; 0x7f
 8006f06:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006f0a:	e005      	b.n	8006f18 <UART_Start_Receive_IT+0x50>
 8006f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f10:	d030      	beq.n	8006f74 <UART_Start_Receive_IT+0xac>
 8006f12:	2300      	movs	r3, #0
 8006f14:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f1e:	2322      	movs	r3, #34	; 0x22
 8006f20:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f24:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	f101 0308 	add.w	r3, r1, #8
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	3108      	adds	r1, #8
 8006f34:	e841 3400 	strex	r4, r3, [r1]
 8006f38:	2c00      	cmp	r4, #0
 8006f3a:	d1f3      	bne.n	8006f24 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006f3c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f42:	d021      	beq.n	8006f88 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f44:	6883      	ldr	r3, [r0, #8]
 8006f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f4a:	d048      	beq.n	8006fde <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 8006f4c:	4b2c      	ldr	r3, [pc, #176]	; (8007000 <UART_Start_Receive_IT+0x138>)
 8006f4e:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006f50:	2300      	movs	r3, #0
 8006f52:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f56:	6903      	ldr	r3, [r0, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d046      	beq.n	8006fea <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006f5c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	e852 3f00 	ldrex	r3, [r2]
 8006f62:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	e842 3100 	strex	r1, r3, [r2]
 8006f6a:	2900      	cmp	r1, #0
 8006f6c:	d1f6      	bne.n	8006f5c <UART_Start_Receive_IT+0x94>
}
 8006f6e:	2000      	movs	r0, #0
 8006f70:	bc10      	pop	{r4}
 8006f72:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006f74:	6903      	ldr	r3, [r0, #16]
 8006f76:	b91b      	cbnz	r3, 8006f80 <UART_Start_Receive_IT+0xb8>
 8006f78:	237f      	movs	r3, #127	; 0x7f
 8006f7a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006f7e:	e7cb      	b.n	8006f18 <UART_Start_Receive_IT+0x50>
 8006f80:	233f      	movs	r3, #63	; 0x3f
 8006f82:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006f86:	e7c7      	b.n	8006f18 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006f88:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d8d9      	bhi.n	8006f44 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f90:	6883      	ldr	r3, [r0, #8]
 8006f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f96:	d01c      	beq.n	8006fd2 <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006f98:	4b1a      	ldr	r3, [pc, #104]	; (8007004 <UART_Start_Receive_IT+0x13c>)
 8006f9a:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006fa2:	6903      	ldr	r3, [r0, #16]
 8006fa4:	b143      	cbz	r3, 8006fb8 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fa6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	e852 3f00 	ldrex	r3, [r2]
 8006fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	e842 3100 	strex	r1, r3, [r2]
 8006fb4:	2900      	cmp	r1, #0
 8006fb6:	d1f6      	bne.n	8006fa6 <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006fb8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	f102 0308 	add.w	r3, r2, #8
 8006fbe:	e853 3f00 	ldrex	r3, [r3]
 8006fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	3208      	adds	r2, #8
 8006fc8:	e842 3100 	strex	r1, r3, [r2]
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	d1f3      	bne.n	8006fb8 <UART_Start_Receive_IT+0xf0>
 8006fd0:	e7cd      	b.n	8006f6e <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd2:	6903      	ldr	r3, [r0, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1df      	bne.n	8006f98 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006fd8:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <UART_Start_Receive_IT+0x140>)
 8006fda:	6703      	str	r3, [r0, #112]	; 0x70
 8006fdc:	e7de      	b.n	8006f9c <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fde:	6903      	ldr	r3, [r0, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1b3      	bne.n	8006f4c <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006fe4:	4b09      	ldr	r3, [pc, #36]	; (800700c <UART_Start_Receive_IT+0x144>)
 8006fe6:	6703      	str	r3, [r0, #112]	; 0x70
 8006fe8:	e7b2      	b.n	8006f50 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006fea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	e852 3f00 	ldrex	r3, [r2]
 8006ff0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	e842 3100 	strex	r1, r3, [r2]
 8006ff8:	2900      	cmp	r1, #0
 8006ffa:	d1f6      	bne.n	8006fea <UART_Start_Receive_IT+0x122>
 8006ffc:	e7b7      	b.n	8006f6e <UART_Start_Receive_IT+0xa6>
 8006ffe:	bf00      	nop
 8007000:	080064d9 	.word	0x080064d9
 8007004:	0800663d 	.word	0x0800663d
 8007008:	080067dd 	.word	0x080067dd
 800700c:	0800658b 	.word	0x0800658b

08007010 <HAL_UART_Receive_IT>:
{
 8007010:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007012:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007016:	2b20      	cmp	r3, #32
 8007018:	d11e      	bne.n	8007058 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 800701a:	b1f9      	cbz	r1, 800705c <HAL_UART_Receive_IT+0x4c>
 800701c:	b302      	cbz	r2, 8007060 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 800701e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007022:	2b01      	cmp	r3, #1
 8007024:	d01e      	beq.n	8007064 <HAL_UART_Receive_IT+0x54>
 8007026:	2301      	movs	r3, #1
 8007028:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800702c:	2300      	movs	r3, #0
 800702e:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007030:	6803      	ldr	r3, [r0, #0]
 8007032:	4c0d      	ldr	r4, [pc, #52]	; (8007068 <HAL_UART_Receive_IT+0x58>)
 8007034:	42a3      	cmp	r3, r4
 8007036:	d00c      	beq.n	8007052 <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800703e:	d008      	beq.n	8007052 <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007040:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	e854 3f00 	ldrex	r3, [r4]
 8007046:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	e844 3500 	strex	r5, r3, [r4]
 800704e:	2d00      	cmp	r5, #0
 8007050:	d1f6      	bne.n	8007040 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8007052:	f7ff ff39 	bl	8006ec8 <UART_Start_Receive_IT>
 8007056:	e000      	b.n	800705a <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8007058:	2002      	movs	r0, #2
}
 800705a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800705c:	2001      	movs	r0, #1
 800705e:	e7fc      	b.n	800705a <HAL_UART_Receive_IT+0x4a>
 8007060:	2001      	movs	r0, #1
 8007062:	e7fa      	b.n	800705a <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8007064:	2002      	movs	r0, #2
 8007066:	e7f8      	b.n	800705a <HAL_UART_Receive_IT+0x4a>
 8007068:	40008000 	.word	0x40008000

0800706c <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800706c:	b082      	sub	sp, #8
 800706e:	ab02      	add	r3, sp, #8
 8007070:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007074:	6802      	ldr	r2, [r0, #0]
 8007076:	6853      	ldr	r3, [r2, #4]
 8007078:	f023 0310 	bic.w	r3, r3, #16
 800707c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8007080:	430b      	orrs	r3, r1
 8007082:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007084:	6802      	ldr	r2, [r0, #0]
 8007086:	6853      	ldr	r3, [r2, #4]
 8007088:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800708c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8007090:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007094:	6053      	str	r3, [r2, #4]
}
 8007096:	b002      	add	sp, #8
 8007098:	4770      	bx	lr
	...

0800709c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800709c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800709e:	b92b      	cbnz	r3, 80070ac <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 80070a0:	2301      	movs	r3, #1
 80070a2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070a6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 80070aa:	4770      	bx	lr
{
 80070ac:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070ae:	6803      	ldr	r3, [r0, #0]
 80070b0:	689a      	ldr	r2, [r3, #8]
 80070b2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070b6:	6899      	ldr	r1, [r3, #8]
 80070b8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070ba:	4d09      	ldr	r5, [pc, #36]	; (80070e0 <UARTEx_SetNbDataToProcess+0x44>)
 80070bc:	5c6b      	ldrb	r3, [r5, r1]
 80070be:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070c0:	4c08      	ldr	r4, [pc, #32]	; (80070e4 <UARTEx_SetNbDataToProcess+0x48>)
 80070c2:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070c4:	fb93 f3f1 	sdiv	r3, r3, r1
 80070c8:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070cc:	5cab      	ldrb	r3, [r5, r2]
 80070ce:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070d0:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80070d6:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80070da:	bc30      	pop	{r4, r5}
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	08013298 	.word	0x08013298
 80070e4:	08013290 	.word	0x08013290

080070e8 <HAL_UARTEx_WakeupCallback>:
}
 80070e8:	4770      	bx	lr

080070ea <HAL_UARTEx_RxFifoFullCallback>:
}
 80070ea:	4770      	bx	lr

080070ec <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80070ec:	4770      	bx	lr

080070ee <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 80070ee:	b510      	push	{r4, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	ab04      	add	r3, sp, #16
 80070f4:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 80070f8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d035      	beq.n	800716c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8007100:	4604      	mov	r4, r0
 8007102:	2301      	movs	r3, #1
 8007104:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007108:	2324      	movs	r3, #36	; 0x24
 800710a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800710e:	6802      	ldr	r2, [r0, #0]
 8007110:	6813      	ldr	r3, [r2, #0]
 8007112:	f023 0301 	bic.w	r3, r3, #1
 8007116:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007118:	6801      	ldr	r1, [r0, #0]
 800711a:	688b      	ldr	r3, [r1, #8]
 800711c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007120:	9a02      	ldr	r2, [sp, #8]
 8007122:	4313      	orrs	r3, r2
 8007124:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007126:	b1aa      	cbz	r2, 8007154 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8007128:	6822      	ldr	r2, [r4, #0]
 800712a:	6813      	ldr	r3, [r2, #0]
 800712c:	f043 0301 	orr.w	r3, r3, #1
 8007130:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8007132:	f7fa fcdb 	bl	8001aec <HAL_GetTick>
 8007136:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007138:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800713c:	9200      	str	r2, [sp, #0]
 800713e:	2200      	movs	r2, #0
 8007140:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007144:	4620      	mov	r0, r4
 8007146:	f7ff fde4 	bl	8006d12 <UART_WaitOnFlagUntilTimeout>
 800714a:	b948      	cbnz	r0, 8007160 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 800714c:	2320      	movs	r3, #32
 800714e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8007152:	e006      	b.n	8007162 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007154:	ab04      	add	r3, sp, #16
 8007156:	e913 0006 	ldmdb	r3, {r1, r2}
 800715a:	f7ff ff87 	bl	800706c <UARTEx_Wakeup_AddressConfig>
 800715e:	e7e3      	b.n	8007128 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8007160:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8007162:	2300      	movs	r3, #0
 8007164:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8007168:	b004      	add	sp, #16
 800716a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800716c:	2002      	movs	r0, #2
 800716e:	e7fb      	b.n	8007168 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08007170 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8007170:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007174:	2b01      	cmp	r3, #1
 8007176:	d010      	beq.n	800719a <HAL_UARTEx_EnableStopMode+0x2a>
 8007178:	2301      	movs	r3, #1
 800717a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800717e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	e852 3f00 	ldrex	r3, [r2]
 8007184:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	e842 3100 	strex	r1, r3, [r2]
 800718c:	2900      	cmp	r1, #0
 800718e:	d1f6      	bne.n	800717e <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8007190:	2300      	movs	r3, #0
 8007192:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8007196:	4618      	mov	r0, r3
 8007198:	4770      	bx	lr
  __HAL_LOCK(huart);
 800719a:	2002      	movs	r0, #2
}
 800719c:	4770      	bx	lr

0800719e <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800719e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d01d      	beq.n	80071e2 <HAL_UARTEx_EnableFifoMode+0x44>
{
 80071a6:	b510      	push	{r4, lr}
 80071a8:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80071aa:	2301      	movs	r3, #1
 80071ac:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80071b0:	2324      	movs	r3, #36	; 0x24
 80071b2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071b6:	6802      	ldr	r2, [r0, #0]
 80071b8:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80071ba:	6811      	ldr	r1, [r2, #0]
 80071bc:	f021 0101 	bic.w	r1, r1, #1
 80071c0:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80071c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80071ca:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071cc:	6802      	ldr	r2, [r0, #0]
 80071ce:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 80071d0:	f7ff ff64 	bl	800709c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80071d4:	2320      	movs	r3, #32
 80071d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80071da:	2000      	movs	r0, #0
 80071dc:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80071e0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 80071e2:	2002      	movs	r0, #2
}
 80071e4:	4770      	bx	lr

080071e6 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80071e6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80071e8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d01d      	beq.n	800722c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80071f0:	4604      	mov	r4, r0
 80071f2:	2301      	movs	r3, #1
 80071f4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 80071f8:	2324      	movs	r3, #36	; 0x24
 80071fa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071fe:	6803      	ldr	r3, [r0, #0]
 8007200:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	f022 0201 	bic.w	r2, r2, #1
 8007208:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800720a:	6802      	ldr	r2, [r0, #0]
 800720c:	6893      	ldr	r3, [r2, #8]
 800720e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007212:	4319      	orrs	r1, r3
 8007214:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007216:	f7ff ff41 	bl	800709c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800721e:	2320      	movs	r3, #32
 8007220:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007224:	2000      	movs	r0, #0
 8007226:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800722a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800722c:	2002      	movs	r0, #2
 800722e:	e7fc      	b.n	800722a <HAL_UARTEx_SetTxFifoThreshold+0x44>

08007230 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007230:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007232:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007236:	2b01      	cmp	r3, #1
 8007238:	d01d      	beq.n	8007276 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800723a:	4604      	mov	r4, r0
 800723c:	2301      	movs	r3, #1
 800723e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007242:	2324      	movs	r3, #36	; 0x24
 8007244:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007248:	6803      	ldr	r3, [r0, #0]
 800724a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	f022 0201 	bic.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007254:	6802      	ldr	r2, [r0, #0]
 8007256:	6893      	ldr	r3, [r2, #8]
 8007258:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800725c:	4319      	orrs	r1, r3
 800725e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007260:	f7ff ff1c 	bl	800709c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007268:	2320      	movs	r3, #32
 800726a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800726e:	2000      	movs	r0, #0
 8007270:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007274:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007276:	2002      	movs	r0, #2
 8007278:	e7fc      	b.n	8007274 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800727c <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800727c:	2804      	cmp	r0, #4
 800727e:	d807      	bhi.n	8007290 <LmHandlerPackageIsInitialized+0x14>
{
 8007280:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8007282:	4b05      	ldr	r3, [pc, #20]	; (8007298 <LmHandlerPackageIsInitialized+0x1c>)
 8007284:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	b11b      	cbz	r3, 8007294 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800728c:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800728e:	bd08      	pop	{r3, pc}
        return false;
 8007290:	2000      	movs	r0, #0
}
 8007292:	4770      	bx	lr
        return false;
 8007294:	2000      	movs	r0, #0
 8007296:	e7fa      	b.n	800728e <LmHandlerPackageIsInitialized+0x12>
 8007298:	200005a0 	.word	0x200005a0

0800729c <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	4605      	mov	r5, r0
 80072a0:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80072a2:	2400      	movs	r4, #0
 80072a4:	e005      	b.n	80072b2 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	b10b      	cbz	r3, 80072ae <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 80072aa:	4630      	mov	r0, r6
 80072ac:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80072ae:	3401      	adds	r4, #1
 80072b0:	b264      	sxtb	r4, r4
 80072b2:	2c04      	cmp	r4, #4
 80072b4:	dc24      	bgt.n	8007300 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 80072b6:	4b13      	ldr	r3, [pc, #76]	; (8007304 <LmHandlerPackagesNotify+0x68>)
 80072b8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0f6      	beq.n	80072ae <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 80072c0:	2d03      	cmp	r5, #3
 80072c2:	d8f4      	bhi.n	80072ae <LmHandlerPackagesNotify+0x12>
 80072c4:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <LmHandlerPackagesNotify+0x30>)
 80072c6:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 80072ca:	bf00      	nop
 80072cc:	080072a7 	.word	0x080072a7
 80072d0:	080072dd 	.word	0x080072dd
 80072d4:	080072e9 	.word	0x080072e9
 80072d8:	080072f5 	.word	0x080072f5
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0e5      	beq.n	80072ae <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 80072e2:	4630      	mov	r0, r6
 80072e4:	4798      	blx	r3
 80072e6:	e7e2      	b.n	80072ae <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0df      	beq.n	80072ae <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 80072ee:	4630      	mov	r0, r6
 80072f0:	4798      	blx	r3
 80072f2:	e7dc      	b.n	80072ae <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80072f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0d9      	beq.n	80072ae <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80072fa:	4630      	mov	r0, r6
 80072fc:	4798      	blx	r3
 80072fe:	e7d6      	b.n	80072ae <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 8007300:	bd70      	pop	{r4, r5, r6, pc}
 8007302:	bf00      	nop
 8007304:	200005a0 	.word	0x200005a0

08007308 <McpsConfirm>:
{
 8007308:	b510      	push	{r4, lr}
 800730a:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 800730c:	480c      	ldr	r0, [pc, #48]	; (8007340 <McpsConfirm+0x38>)
 800730e:	2301      	movs	r3, #1
 8007310:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 8007312:	7863      	ldrb	r3, [r4, #1]
 8007314:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8007316:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800731a:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800731c:	68e3      	ldr	r3, [r4, #12]
 800731e:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8007320:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8007324:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8007326:	6923      	ldr	r3, [r4, #16]
 8007328:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800732a:	7923      	ldrb	r3, [r4, #4]
 800732c:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800732e:	4b05      	ldr	r3, [pc, #20]	; (8007344 <McpsConfirm+0x3c>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8007336:	4621      	mov	r1, r4
 8007338:	2000      	movs	r0, #0
 800733a:	f7ff ffaf 	bl	800729c <LmHandlerPackagesNotify>
}
 800733e:	bd10      	pop	{r4, pc}
 8007340:	200000ac 	.word	0x200000ac
 8007344:	2000059c 	.word	0x2000059c

08007348 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 8007348:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800734a:	2400      	movs	r4, #0
 800734c:	e001      	b.n	8007352 <LmHandlerPackageIsTxPending+0xa>
 800734e:	3401      	adds	r4, #1
 8007350:	b264      	sxtb	r4, r4
 8007352:	2c04      	cmp	r4, #4
 8007354:	dc0a      	bgt.n	800736c <LmHandlerPackageIsTxPending+0x24>
    {
        if( LmHandlerPackages[i] != NULL )
 8007356:	4b07      	ldr	r3, [pc, #28]	; (8007374 <LmHandlerPackageIsTxPending+0x2c>)
 8007358:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0f6      	beq.n	800734e <LmHandlerPackageIsTxPending+0x6>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	4798      	blx	r3
 8007364:	4603      	mov	r3, r0
 8007366:	2800      	cmp	r0, #0
 8007368:	d0f1      	beq.n	800734e <LmHandlerPackageIsTxPending+0x6>
 800736a:	e000      	b.n	800736e <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	bd10      	pop	{r4, pc}
 8007372:	bf00      	nop
 8007374:	200005a0 	.word	0x200005a0

08007378 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 8007378:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800737a:	2400      	movs	r4, #0
 800737c:	e001      	b.n	8007382 <LmHandlerPackagesProcess+0xa>
 800737e:	3401      	adds	r4, #1
 8007380:	b264      	sxtb	r4, r4
 8007382:	2c04      	cmp	r4, #4
 8007384:	dc12      	bgt.n	80073ac <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8007386:	4b0a      	ldr	r3, [pc, #40]	; (80073b0 <LmHandlerPackagesProcess+0x38>)
 8007388:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0f6      	beq.n	800737e <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007390:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0f3      	beq.n	800737e <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8007396:	b2e0      	uxtb	r0, r4
 8007398:	f7ff ff70 	bl	800727c <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800739c:	2800      	cmp	r0, #0
 800739e:	d0ee      	beq.n	800737e <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 80073a0:	4b03      	ldr	r3, [pc, #12]	; (80073b0 <LmHandlerPackagesProcess+0x38>)
 80073a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	4798      	blx	r3
 80073aa:	e7e8      	b.n	800737e <LmHandlerPackagesProcess+0x6>
        }
    }
}
 80073ac:	bd38      	pop	{r3, r4, r5, pc}
 80073ae:	bf00      	nop
 80073b0:	200005a0 	.word	0x200005a0

080073b4 <LmHandlerBeaconReq>:
{
 80073b4:	b500      	push	{lr}
 80073b6:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_BEACON_ACQUISITION;
 80073b8:	230b      	movs	r3, #11
 80073ba:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 80073be:	a801      	add	r0, sp, #4
 80073c0:	f003 fff2 	bl	800b3a8 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80073c4:	9a05      	ldr	r2, [sp, #20]
 80073c6:	4b04      	ldr	r3, [pc, #16]	; (80073d8 <LmHandlerBeaconReq+0x24>)
 80073c8:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 80073ca:	b910      	cbnz	r0, 80073d2 <LmHandlerBeaconReq+0x1e>
}
 80073cc:	b007      	add	sp, #28
 80073ce:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80073d2:	f04f 30ff 	mov.w	r0, #4294967295
 80073d6:	e7f9      	b.n	80073cc <LmHandlerBeaconReq+0x18>
 80073d8:	20000594 	.word	0x20000594

080073dc <LmHandlerDeviceTimeReq>:
{
 80073dc:	b500      	push	{lr}
 80073de:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 80073e0:	2309      	movs	r3, #9
 80073e2:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 80073e6:	a801      	add	r0, sp, #4
 80073e8:	f003 ffde 	bl	800b3a8 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80073ec:	9a05      	ldr	r2, [sp, #20]
 80073ee:	4b04      	ldr	r3, [pc, #16]	; (8007400 <LmHandlerDeviceTimeReq+0x24>)
 80073f0:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 80073f2:	b910      	cbnz	r0, 80073fa <LmHandlerDeviceTimeReq+0x1e>
}
 80073f4:	b007      	add	sp, #28
 80073f6:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80073fa:	f04f 30ff 	mov.w	r0, #4294967295
 80073fe:	e7f9      	b.n	80073f4 <LmHandlerDeviceTimeReq+0x18>
 8007400:	20000594 	.word	0x20000594

08007404 <MlmeIndication>:
{
 8007404:	b510      	push	{r4, lr}
 8007406:	b08a      	sub	sp, #40	; 0x28
 8007408:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 800740a:	4b40      	ldr	r3, [pc, #256]	; (800750c <MlmeIndication+0x108>)
 800740c:	2200      	movs	r2, #0
 800740e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8007410:	7842      	ldrb	r2, [r0, #1]
 8007412:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8007414:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8007418:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800741a:	f9b1 2000 	ldrsh.w	r2, [r1]
 800741e:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8007420:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8007424:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8007426:	78ca      	ldrb	r2, [r1, #3]
 8007428:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800742a:	6842      	ldr	r2, [r0, #4]
 800742c:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800742e:	7803      	ldrb	r3, [r0, #0]
 8007430:	2b0a      	cmp	r3, #10
 8007432:	d007      	beq.n	8007444 <MlmeIndication+0x40>
 8007434:	2b0e      	cmp	r3, #14
 8007436:	d005      	beq.n	8007444 <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8007438:	4b35      	ldr	r3, [pc, #212]	; (8007510 <MlmeIndication+0x10c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743e:	4933      	ldr	r1, [pc, #204]	; (800750c <MlmeIndication+0x108>)
 8007440:	2000      	movs	r0, #0
 8007442:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8007444:	4621      	mov	r1, r4
 8007446:	2003      	movs	r0, #3
 8007448:	f7ff ff28 	bl	800729c <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 800744c:	7823      	ldrb	r3, [r4, #0]
 800744e:	2b0a      	cmp	r3, #10
 8007450:	d02a      	beq.n	80074a8 <MlmeIndication+0xa4>
 8007452:	2b0e      	cmp	r3, #14
 8007454:	d007      	beq.n	8007466 <MlmeIndication+0x62>
 8007456:	2b06      	cmp	r3, #6
 8007458:	d001      	beq.n	800745e <MlmeIndication+0x5a>
}
 800745a:	b00a      	add	sp, #40	; 0x28
 800745c:	bd10      	pop	{r4, pc}
            IsUplinkTxPending = true;
 800745e:	4b2d      	ldr	r3, [pc, #180]	; (8007514 <MlmeIndication+0x110>)
 8007460:	2201      	movs	r2, #1
 8007462:	701a      	strb	r2, [r3, #0]
        break;
 8007464:	e7f9      	b.n	800745a <MlmeIndication+0x56>
            mibReq.Type = MIB_DEVICE_CLASS;
 8007466:	2400      	movs	r4, #0
 8007468:	f88d 4004 	strb.w	r4, [sp, #4]
            mibReq.Param.Class = CLASS_A;
 800746c:	f88d 4008 	strb.w	r4, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007470:	a801      	add	r0, sp, #4
 8007472:	f003 fd13 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
            BeaconParams.State = LORAMAC_HANDLER_BEACON_LOST;
 8007476:	4828      	ldr	r0, [pc, #160]	; (8007518 <MlmeIndication+0x114>)
 8007478:	2301      	movs	r3, #1
 800747a:	7043      	strb	r3, [r0, #1]
            BeaconParams.Info.Time.Seconds = 0;
 800747c:	6044      	str	r4, [r0, #4]
            BeaconParams.Info.GwSpecific.InfoDesc = 0;
 800747e:	7584      	strb	r4, [r0, #22]
            UTIL_MEM_set_8( BeaconParams.Info.GwSpecific.Info, 0, 6 );
 8007480:	2206      	movs	r2, #6
 8007482:	4621      	mov	r1, r4
 8007484:	3017      	adds	r0, #23
 8007486:	f00a fe86 	bl	8012196 <UTIL_MEM_set_8>
            if (LmHandlerCallbacks->OnClassChange != NULL)
 800748a:	4b21      	ldr	r3, [pc, #132]	; (8007510 <MlmeIndication+0x10c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007490:	b10b      	cbz	r3, 8007496 <MlmeIndication+0x92>
                LmHandlerCallbacks->OnClassChange( CLASS_A );
 8007492:	4620      	mov	r0, r4
 8007494:	4798      	blx	r3
            if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 8007496:	4b1e      	ldr	r3, [pc, #120]	; (8007510 <MlmeIndication+0x10c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749c:	b10b      	cbz	r3, 80074a2 <MlmeIndication+0x9e>
                LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 800749e:	481e      	ldr	r0, [pc, #120]	; (8007518 <MlmeIndication+0x114>)
 80074a0:	4798      	blx	r3
            LmHandlerDeviceTimeReq( );
 80074a2:	f7ff ff9b 	bl	80073dc <LmHandlerDeviceTimeReq>
        break;
 80074a6:	e7d8      	b.n	800745a <MlmeIndication+0x56>
            if( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 80074a8:	7863      	ldrb	r3, [r4, #1]
 80074aa:	2b0d      	cmp	r3, #13
 80074ac:	d017      	beq.n	80074de <MlmeIndication+0xda>
            else if ( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND )
 80074ae:	2b0f      	cmp	r3, #15
 80074b0:	d1d3      	bne.n	800745a <MlmeIndication+0x56>
                BeaconParams.State = LORAMAC_HANDLER_BEACON_NRX;
 80074b2:	4b19      	ldr	r3, [pc, #100]	; (8007518 <MlmeIndication+0x114>)
 80074b4:	2203      	movs	r2, #3
 80074b6:	705a      	strb	r2, [r3, #1]
                BeaconParams.Info = mlmeIndication->BeaconInfo;
 80074b8:	f103 0c04 	add.w	ip, r3, #4
 80074bc:	3408      	adds	r4, #8
 80074be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80074c4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80074c8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
                if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 80074cc:	4b10      	ldr	r3, [pc, #64]	; (8007510 <MlmeIndication+0x10c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0c1      	beq.n	800745a <MlmeIndication+0x56>
                    LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 80074d6:	f1ac 0014 	sub.w	r0, ip, #20
 80074da:	4798      	blx	r3
}
 80074dc:	e7bd      	b.n	800745a <MlmeIndication+0x56>
                BeaconParams.State = LORAMAC_HANDLER_BEACON_RX;
 80074de:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <MlmeIndication+0x114>)
 80074e0:	2202      	movs	r2, #2
 80074e2:	705a      	strb	r2, [r3, #1]
                BeaconParams.Info = mlmeIndication->BeaconInfo;
 80074e4:	f103 0c04 	add.w	ip, r3, #4
 80074e8:	3408      	adds	r4, #8
 80074ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80074f0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80074f4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
                if (LmHandlerCallbacks->OnBeaconStatusChange != NULL)
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <MlmeIndication+0x10c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0ab      	beq.n	800745a <MlmeIndication+0x56>
                    LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 8007502:	f1ac 0014 	sub.w	r0, ip, #20
 8007506:	4798      	blx	r3
 8007508:	e7a7      	b.n	800745a <MlmeIndication+0x56>
 800750a:	bf00      	nop
 800750c:	20000098 	.word	0x20000098
 8007510:	2000059c 	.word	0x2000059c
 8007514:	20000599 	.word	0x20000599
 8007518:	20000570 	.word	0x20000570

0800751c <LmHandlerJoin>:
{
 800751c:	b510      	push	{r4, lr}
 800751e:	b08e      	sub	sp, #56	; 0x38
 8007520:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 8007522:	2301      	movs	r3, #1
 8007524:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007528:	4b26      	ldr	r3, [pc, #152]	; (80075c4 <LmHandlerJoin+0xa8>)
 800752a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800752e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 8007532:	2802      	cmp	r0, #2
 8007534:	d021      	beq.n	800757a <LmHandlerJoin+0x5e>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007536:	2101      	movs	r1, #1
 8007538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800753c:	4b22      	ldr	r3, [pc, #136]	; (80075c8 <LmHandlerJoin+0xac>)
 800753e:	7199      	strb	r1, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8007540:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007542:	2100      	movs	r1, #0
 8007544:	7159      	strb	r1, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 8007546:	71dc      	strb	r4, [r3, #7]
        if (CtxRestoreDone == false)
 8007548:	4b20      	ldr	r3, [pc, #128]	; (80075cc <LmHandlerJoin+0xb0>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b1f3      	cbz	r3, 800758c <LmHandlerJoin+0x70>
        LoRaMacStart();
 800754e:	f003 fa9d 	bl	800aa8c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007552:	2301      	movs	r3, #1
 8007554:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007558:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800755c:	4668      	mov	r0, sp
 800755e:	f003 fc9d 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 8007562:	4b1a      	ldr	r3, [pc, #104]	; (80075cc <LmHandlerJoin+0xb0>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	b103      	cbz	r3, 800756a <LmHandlerJoin+0x4e>
 8007568:	b114      	cbz	r4, 8007570 <LmHandlerJoin+0x54>
        LoRaMacMlmeRequest( &mlmeReq );
 800756a:	a809      	add	r0, sp, #36	; 0x24
 800756c:	f003 ff1c 	bl	800b3a8 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8007570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007572:	4b17      	ldr	r3, [pc, #92]	; (80075d0 <LmHandlerJoin+0xb4>)
 8007574:	601a      	str	r2, [r3, #0]
}
 8007576:	b00e      	add	sp, #56	; 0x38
 8007578:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800757a:	2202      	movs	r2, #2
 800757c:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8007580:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <LmHandlerJoin+0xac>)
 8007582:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8007584:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 8007586:	f003 fa81 	bl	800aa8c <LoRaMacStart>
 800758a:	e7ea      	b.n	8007562 <LmHandlerJoin+0x46>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800758c:	231f      	movs	r3, #31
 800758e:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8007592:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007596:	4668      	mov	r0, sp
 8007598:	f003 fc80 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800759c:	2320      	movs	r3, #32
 800759e:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 80075a2:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <LmHandlerJoin+0xa8>)
 80075a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80075a8:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80075ac:	4668      	mov	r0, sp
 80075ae:	f003 fc75 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80075b2:	2329      	movs	r3, #41	; 0x29
 80075b4:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80075b8:	4b06      	ldr	r3, [pc, #24]	; (80075d4 <LmHandlerJoin+0xb8>)
 80075ba:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80075bc:	4668      	mov	r0, sp
 80075be:	f003 fc6d 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
 80075c2:	e7c4      	b.n	800754e <LmHandlerJoin+0x32>
 80075c4:	200005b4 	.word	0x200005b4
 80075c8:	20000090 	.word	0x20000090
 80075cc:	20000590 	.word	0x20000590
 80075d0:	20000594 	.word	0x20000594
 80075d4:	01000400 	.word	0x01000400

080075d8 <LmHandlerGetDutyCycleWaitTime>:
}
 80075d8:	4b01      	ldr	r3, [pc, #4]	; (80075e0 <LmHandlerGetDutyCycleWaitTime+0x8>)
 80075da:	6818      	ldr	r0, [r3, #0]
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20000594 	.word	0x20000594

080075e4 <LmHandlerJoinStatus>:
{
 80075e4:	b500      	push	{lr}
 80075e6:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80075e8:	2301      	movs	r3, #1
 80075ea:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80075ee:	a801      	add	r0, sp, #4
 80075f0:	f003 fb06 	bl	800ac00 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 80075f4:	b920      	cbnz	r0, 8007600 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80075f6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80075fa:	b110      	cbz	r0, 8007602 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 80075fc:	2001      	movs	r0, #1
 80075fe:	e000      	b.n	8007602 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8007600:	2000      	movs	r0, #0
}
 8007602:	b00b      	add	sp, #44	; 0x2c
 8007604:	f85d fb04 	ldr.w	pc, [sp], #4

08007608 <LmHandlerSend>:
{
 8007608:	b570      	push	{r4, r5, r6, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	4604      	mov	r4, r0
 800760e:	460d      	mov	r5, r1
 8007610:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 8007612:	f002 fff5 	bl	800a600 <LoRaMacIsBusy>
 8007616:	2800      	cmp	r0, #0
 8007618:	d164      	bne.n	80076e4 <LmHandlerSend+0xdc>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800761a:	f7ff ffe3 	bl	80075e4 <LmHandlerJoinStatus>
 800761e:	2801      	cmp	r0, #1
 8007620:	d137      	bne.n	8007692 <LmHandlerSend+0x8a>
    TxParams.MsgType = isTxConfirmed;
 8007622:	4b33      	ldr	r3, [pc, #204]	; (80076f0 <LmHandlerSend+0xe8>)
 8007624:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8007626:	3d00      	subs	r5, #0
 8007628:	bf18      	it	ne
 800762a:	2501      	movne	r5, #1
 800762c:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8007630:	4b30      	ldr	r3, [pc, #192]	; (80076f4 <LmHandlerSend+0xec>)
 8007632:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007636:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800763a:	4669      	mov	r1, sp
 800763c:	7860      	ldrb	r0, [r4, #1]
 800763e:	f003 fa73 	bl	800ab28 <LoRaMacQueryTxPossible>
 8007642:	b370      	cbz	r0, 80076a2 <LmHandlerSend+0x9a>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8007644:	2300      	movs	r3, #0
 8007646:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800764a:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800764c:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8007650:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8007654:	4b26      	ldr	r3, [pc, #152]	; (80076f0 <LmHandlerSend+0xe8>)
 8007656:	f103 0c10 	add.w	ip, r3, #16
 800765a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800765e:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8007662:	4a24      	ldr	r2, [pc, #144]	; (80076f4 <LmHandlerSend+0xec>)
 8007664:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007668:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800766a:	4631      	mov	r1, r6
 800766c:	a801      	add	r0, sp, #4
 800766e:	f003 ff95 	bl	800b59c <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8007672:	9a05      	ldr	r2, [sp, #20]
 8007674:	4b20      	ldr	r3, [pc, #128]	; (80076f8 <LmHandlerSend+0xf0>)
 8007676:	601a      	str	r2, [r3, #0]
    switch (status)
 8007678:	2811      	cmp	r0, #17
 800767a:	d830      	bhi.n	80076de <LmHandlerSend+0xd6>
 800767c:	e8df f000 	tbb	[pc, r0]
 8007680:	2f2f1c21 	.word	0x2f2f1c21
 8007684:	352f2f2f 	.word	0x352f2f2f
 8007688:	2c2f2f2f 	.word	0x2c2f2f2f
 800768c:	1c1c2f2f 	.word	0x1c1c2f2f
 8007690:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8007692:	4b1a      	ldr	r3, [pc, #104]	; (80076fc <LmHandlerSend+0xf4>)
 8007694:	79d9      	ldrb	r1, [r3, #7]
 8007696:	7998      	ldrb	r0, [r3, #6]
 8007698:	f7ff ff40 	bl	800751c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800769c:	f06f 0502 	mvn.w	r5, #2
 80076a0:	e00c      	b.n	80076bc <LmHandlerSend+0xb4>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80076a2:	7823      	ldrb	r3, [r4, #0]
 80076a4:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80076a8:	7863      	ldrb	r3, [r4, #1]
 80076aa:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80076ae:	6863      	ldr	r3, [r4, #4]
 80076b0:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 80076b2:	f04f 35ff 	mov.w	r5, #4294967295
 80076b6:	e7cd      	b.n	8007654 <LmHandlerSend+0x4c>
    switch (status)
 80076b8:	f06f 0501 	mvn.w	r5, #1
}
 80076bc:	4628      	mov	r0, r5
 80076be:	b006      	add	sp, #24
 80076c0:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 80076c2:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <LmHandlerSend+0xf8>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	701a      	strb	r2, [r3, #0]
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 80076c8:	f115 0f07 	cmn.w	r5, #7
 80076cc:	d0f6      	beq.n	80076bc <LmHandlerSend+0xb4>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80076ce:	2500      	movs	r5, #0
 80076d0:	e7f4      	b.n	80076bc <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80076d2:	f06f 0504 	mvn.w	r5, #4
            break;
 80076d6:	e7f1      	b.n	80076bc <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80076d8:	f06f 0505 	mvn.w	r5, #5
            break;
 80076dc:	e7ee      	b.n	80076bc <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80076de:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 80076e2:	e7eb      	b.n	80076bc <LmHandlerSend+0xb4>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80076e4:	f06f 0501 	mvn.w	r5, #1
 80076e8:	e7e8      	b.n	80076bc <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80076ea:	f06f 0502 	mvn.w	r5, #2
 80076ee:	e7e5      	b.n	80076bc <LmHandlerSend+0xb4>
 80076f0:	200000ac 	.word	0x200000ac
 80076f4:	200005b4 	.word	0x200005b4
 80076f8:	20000594 	.word	0x20000594
 80076fc:	20000090 	.word	0x20000090
 8007700:	20000599 	.word	0x20000599

08007704 <LmHandlerProcess>:
{
 8007704:	b500      	push	{lr}
 8007706:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8007708:	f002 ff94 	bl	800a634 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800770c:	f7ff fe34 	bl	8007378 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8007710:	f7ff fe1a 	bl	8007348 <LmHandlerPackageIsTxPending>
 8007714:	b910      	cbnz	r0, 800771c <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8007716:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <LmHandlerProcess+0x40>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	b913      	cbnz	r3, 8007722 <LmHandlerProcess+0x1e>
}
 800771c:	b003      	add	sp, #12
 800771e:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 8007722:	2200      	movs	r2, #0
 8007724:	f88d 2000 	strb.w	r2, [sp]
 8007728:	f88d 2001 	strb.w	r2, [sp, #1]
 800772c:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800772e:	4b06      	ldr	r3, [pc, #24]	; (8007748 <LmHandlerProcess+0x44>)
 8007730:	78d9      	ldrb	r1, [r3, #3]
 8007732:	4668      	mov	r0, sp
 8007734:	f7ff ff68 	bl	8007608 <LmHandlerSend>
 8007738:	2800      	cmp	r0, #0
 800773a:	d1ef      	bne.n	800771c <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 800773c:	4b01      	ldr	r3, [pc, #4]	; (8007744 <LmHandlerProcess+0x40>)
 800773e:	2200      	movs	r2, #0
 8007740:	701a      	strb	r2, [r3, #0]
 8007742:	e7eb      	b.n	800771c <LmHandlerProcess+0x18>
 8007744:	20000599 	.word	0x20000599
 8007748:	200005b4 	.word	0x200005b4

0800774c <LmHandlerPingSlotReq>:
{
 800774c:	b510      	push	{r4, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	4604      	mov	r4, r0
    mlmeReq.Type = MLME_PING_SLOT_INFO;
 8007752:	230c      	movs	r3, #12
 8007754:	f88d 300c 	strb.w	r3, [sp, #12]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = periodicity;
 8007758:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800775c:	f360 0302 	bfi	r3, r0, #0, #3
 8007760:	f88d 3010 	strb.w	r3, [sp, #16]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.RFU = 0;
 8007764:	b2db      	uxtb	r3, r3
 8007766:	f36f 03c7 	bfc	r3, #3, #5
 800776a:	f88d 3010 	strb.w	r3, [sp, #16]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800776e:	a803      	add	r0, sp, #12
 8007770:	f003 fe1a 	bl	800b3a8 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8007774:	9a07      	ldr	r2, [sp, #28]
 8007776:	4b0a      	ldr	r3, [pc, #40]	; (80077a0 <LmHandlerPingSlotReq+0x54>)
 8007778:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800777a:	b968      	cbnz	r0, 8007798 <LmHandlerPingSlotReq+0x4c>
        LmHandlerParams.PingSlotPeriodicity = periodicity;
 800777c:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <LmHandlerPingSlotReq+0x58>)
 800777e:	731c      	strb	r4, [r3, #12]
        LmHandlerAppData_t appData =
 8007780:	2200      	movs	r2, #0
 8007782:	f88d 2004 	strb.w	r2, [sp, #4]
 8007786:	f88d 2005 	strb.w	r2, [sp, #5]
 800778a:	9202      	str	r2, [sp, #8]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
 800778c:	78d9      	ldrb	r1, [r3, #3]
 800778e:	a801      	add	r0, sp, #4
 8007790:	f7ff ff3a 	bl	8007608 <LmHandlerSend>
}
 8007794:	b008      	add	sp, #32
 8007796:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007798:	f04f 30ff 	mov.w	r0, #4294967295
 800779c:	e7fa      	b.n	8007794 <LmHandlerPingSlotReq+0x48>
 800779e:	bf00      	nop
 80077a0:	20000594 	.word	0x20000594
 80077a4:	200005b4 	.word	0x200005b4

080077a8 <LmHandlerRequestClass>:
{
 80077a8:	b510      	push	{r4, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 80077ae:	f002 ff27 	bl	800a600 <LoRaMacIsBusy>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d13e      	bne.n	8007834 <LmHandlerRequestClass+0x8c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80077b6:	f7ff ff15 	bl	80075e4 <LmHandlerJoinStatus>
 80077ba:	2801      	cmp	r0, #1
 80077bc:	d13d      	bne.n	800783a <LmHandlerRequestClass+0x92>
    mibReq.Type = MIB_DEVICE_CLASS;
 80077be:	2300      	movs	r3, #0
 80077c0:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80077c4:	a801      	add	r0, sp, #4
 80077c6:	f003 fa1b 	bl	800ac00 <LoRaMacMibGetRequestConfirm>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d138      	bne.n	8007840 <LmHandlerRequestClass+0x98>
    currentClass = mibReq.Param.Class;
 80077ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 80077d2:	42a3      	cmp	r3, r4
 80077d4:	d037      	beq.n	8007846 <LmHandlerRequestClass+0x9e>
        switch( newClass )
 80077d6:	2c01      	cmp	r4, #1
 80077d8:	d016      	beq.n	8007808 <LmHandlerRequestClass+0x60>
 80077da:	2c02      	cmp	r4, #2
 80077dc:	d01b      	beq.n	8007816 <LmHandlerRequestClass+0x6e>
 80077de:	b114      	cbz	r4, 80077e6 <LmHandlerRequestClass+0x3e>
 80077e0:	2000      	movs	r0, #0
}
 80077e2:	b00a      	add	sp, #40	; 0x28
 80077e4:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 80077e6:	b90b      	cbnz	r3, 80077ec <LmHandlerRequestClass+0x44>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80077e8:	2000      	movs	r0, #0
 80077ea:	e7fa      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
                    mibReq.Param.Class = newClass;
 80077ec:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80077f0:	a801      	add	r0, sp, #4
 80077f2:	f003 fb53 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
 80077f6:	bb40      	cbnz	r0, 800784a <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80077f8:	4b1c      	ldr	r3, [pc, #112]	; (800786c <LmHandlerRequestClass+0xc4>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fe:	b33b      	cbz	r3, 8007850 <LmHandlerRequestClass+0xa8>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8007800:	4620      	mov	r0, r4
 8007802:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007804:	2000      	movs	r0, #0
 8007806:	e7ec      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
                if( currentClass != CLASS_A )
 8007808:	bb23      	cbnz	r3, 8007854 <LmHandlerRequestClass+0xac>
                    errorStatus = LmHandlerDeviceTimeReq( );
 800780a:	f7ff fde7 	bl	80073dc <LmHandlerDeviceTimeReq>
                    IsClassBSwitchPending = true;
 800780e:	4b18      	ldr	r3, [pc, #96]	; (8007870 <LmHandlerRequestClass+0xc8>)
 8007810:	2201      	movs	r2, #1
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	e7e5      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
                if( currentClass != CLASS_A )
 8007816:	bb03      	cbnz	r3, 800785a <LmHandlerRequestClass+0xb2>
                    mibReq.Param.Class = newClass;
 8007818:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800781c:	a801      	add	r0, sp, #4
 800781e:	f003 fb3d 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
 8007822:	b9e8      	cbnz	r0, 8007860 <LmHandlerRequestClass+0xb8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8007824:	4b11      	ldr	r3, [pc, #68]	; (800786c <LmHandlerRequestClass+0xc4>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	b1e3      	cbz	r3, 8007866 <LmHandlerRequestClass+0xbe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800782c:	4620      	mov	r0, r4
 800782e:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007830:	2000      	movs	r0, #0
 8007832:	e7d6      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007834:	f06f 0001 	mvn.w	r0, #1
 8007838:	e7d3      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800783a:	f06f 0002 	mvn.w	r0, #2
 800783e:	e7d0      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
        return LORAMAC_HANDLER_ERROR;
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	e7cd      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007846:	2000      	movs	r0, #0
 8007848:	e7cb      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800784a:	f04f 30ff 	mov.w	r0, #4294967295
 800784e:	e7c8      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007850:	2000      	movs	r0, #0
 8007852:	e7c6      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8007854:	f04f 30ff 	mov.w	r0, #4294967295
 8007858:	e7c3      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800785a:	f04f 30ff 	mov.w	r0, #4294967295
 800785e:	e7c0      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8007860:	f04f 30ff 	mov.w	r0, #4294967295
 8007864:	e7bd      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8007866:	2000      	movs	r0, #0
 8007868:	e7bb      	b.n	80077e2 <LmHandlerRequestClass+0x3a>
 800786a:	bf00      	nop
 800786c:	2000059c 	.word	0x2000059c
 8007870:	20000598 	.word	0x20000598

08007874 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8007874:	b170      	cbz	r0, 8007894 <LmHandlerGetCurrentClass+0x20>
{
 8007876:	b510      	push	{r4, lr}
 8007878:	b08a      	sub	sp, #40	; 0x28
 800787a:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800787c:	2300      	movs	r3, #0
 800787e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8007882:	a801      	add	r0, sp, #4
 8007884:	f003 f9bc 	bl	800ac00 <LoRaMacMibGetRequestConfirm>
 8007888:	b938      	cbnz	r0, 800789a <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800788a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800788e:	7023      	strb	r3, [r4, #0]
}
 8007890:	b00a      	add	sp, #40	; 0x28
 8007892:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007894:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007898:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800789a:	f04f 30ff 	mov.w	r0, #4294967295
 800789e:	e7f7      	b.n	8007890 <LmHandlerGetCurrentClass+0x1c>

080078a0 <McpsIndication>:
{
 80078a0:	b530      	push	{r4, r5, lr}
 80078a2:	b085      	sub	sp, #20
 80078a4:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 80078a6:	2200      	movs	r2, #0
 80078a8:	f88d 2007 	strb.w	r2, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 80078ac:	491d      	ldr	r1, [pc, #116]	; (8007924 <McpsIndication+0x84>)
 80078ae:	2201      	movs	r2, #1
 80078b0:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 80078b2:	7842      	ldrb	r2, [r0, #1]
 80078b4:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 80078b6:	bb5a      	cbnz	r2, 8007910 <McpsIndication+0x70>
 80078b8:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 80078ba:	f990 2004 	ldrsb.w	r2, [r0, #4]
 80078be:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 80078c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80078c4:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 80078c6:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80078ca:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 80078cc:	78db      	ldrb	r3, [r3, #3]
 80078ce:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 80078d0:	6903      	ldr	r3, [r0, #16]
 80078d2:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 80078d4:	78c3      	ldrb	r3, [r0, #3]
 80078d6:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 80078da:	7b03      	ldrb	r3, [r0, #12]
 80078dc:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 80078e0:	6883      	ldr	r3, [r0, #8]
 80078e2:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 80078e4:	4d10      	ldr	r5, [pc, #64]	; (8007928 <McpsIndication+0x88>)
 80078e6:	682b      	ldr	r3, [r5, #0]
 80078e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ea:	a802      	add	r0, sp, #8
 80078ec:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 80078ee:	682b      	ldr	r3, [r5, #0]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	b113      	cbz	r3, 80078fa <McpsIndication+0x5a>
 80078f4:	7e22      	ldrb	r2, [r4, #24]
 80078f6:	b102      	cbz	r2, 80078fa <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80078f8:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80078fa:	4621      	mov	r1, r4
 80078fc:	2001      	movs	r0, #1
 80078fe:	f7ff fccd 	bl	800729c <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 8007902:	f10d 0007 	add.w	r0, sp, #7
 8007906:	f7ff ffb5 	bl	8007874 <LmHandlerGetCurrentClass>
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800790a:	7963      	ldrb	r3, [r4, #5]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d001      	beq.n	8007914 <McpsIndication+0x74>
}
 8007910:	b005      	add	sp, #20
 8007912:	bd30      	pop	{r4, r5, pc}
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 8007914:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f9      	bne.n	8007910 <McpsIndication+0x70>
        IsUplinkTxPending = true;
 800791c:	4b03      	ldr	r3, [pc, #12]	; (800792c <McpsIndication+0x8c>)
 800791e:	2201      	movs	r2, #1
 8007920:	701a      	strb	r2, [r3, #0]
 8007922:	e7f5      	b.n	8007910 <McpsIndication+0x70>
 8007924:	20000098 	.word	0x20000098
 8007928:	2000059c 	.word	0x2000059c
 800792c:	20000599 	.word	0x20000599

08007930 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 8007930:	b180      	cbz	r0, 8007954 <LmHandlerGetTxDatarate+0x24>
{
 8007932:	b510      	push	{r4, lr}
 8007934:	b08a      	sub	sp, #40	; 0x28
 8007936:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8007938:	2320      	movs	r3, #32
 800793a:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800793e:	a801      	add	r0, sp, #4
 8007940:	f003 f95e 	bl	800ac00 <LoRaMacMibGetRequestConfirm>
 8007944:	b948      	cbnz	r0, 800795a <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8007946:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 800794a:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800794c:	4a04      	ldr	r2, [pc, #16]	; (8007960 <LmHandlerGetTxDatarate+0x30>)
 800794e:	7113      	strb	r3, [r2, #4]
}
 8007950:	b00a      	add	sp, #40	; 0x28
 8007952:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007954:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007958:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800795a:	f04f 30ff 	mov.w	r0, #4294967295
 800795e:	e7f7      	b.n	8007950 <LmHandlerGetTxDatarate+0x20>
 8007960:	200005b4 	.word	0x200005b4

08007964 <MlmeConfirm>:
{
 8007964:	b510      	push	{r4, lr}
 8007966:	b08a      	sub	sp, #40	; 0x28
 8007968:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800796a:	4837      	ldr	r0, [pc, #220]	; (8007a48 <MlmeConfirm+0xe4>)
 800796c:	2300      	movs	r3, #0
 800796e:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 8007970:	7863      	ldrb	r3, [r4, #1]
 8007972:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8007974:	4b35      	ldr	r3, [pc, #212]	; (8007a4c <MlmeConfirm+0xe8>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800797c:	4621      	mov	r1, r4
 800797e:	2002      	movs	r0, #2
 8007980:	f7ff fc8c 	bl	800729c <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8007984:	7823      	ldrb	r3, [r4, #0]
 8007986:	3b01      	subs	r3, #1
 8007988:	2b0b      	cmp	r3, #11
 800798a:	d831      	bhi.n	80079f0 <MlmeConfirm+0x8c>
 800798c:	e8df f003 	tbb	[pc, r3]
 8007990:	29303006 	.word	0x29303006
 8007994:	30303030 	.word	0x30303030
 8007998:	43393032 	.word	0x43393032
            mibReq.Type = MIB_DEV_ADDR;
 800799c:	2306      	movs	r3, #6
 800799e:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80079a2:	a801      	add	r0, sp, #4
 80079a4:	f003 f92c 	bl	800ac00 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80079a8:	9a02      	ldr	r2, [sp, #8]
 80079aa:	4b29      	ldr	r3, [pc, #164]	; (8007a50 <MlmeConfirm+0xec>)
 80079ac:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80079ae:	4829      	ldr	r0, [pc, #164]	; (8007a54 <MlmeConfirm+0xf0>)
 80079b0:	f7ff ffbe 	bl	8007930 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80079b4:	7863      	ldrb	r3, [r4, #1]
 80079b6:	b163      	cbz	r3, 80079d2 <MlmeConfirm+0x6e>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80079b8:	4b27      	ldr	r3, [pc, #156]	; (8007a58 <MlmeConfirm+0xf4>)
 80079ba:	22ff      	movs	r2, #255	; 0xff
 80079bc:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80079be:	4b23      	ldr	r3, [pc, #140]	; (8007a4c <MlmeConfirm+0xe8>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	4824      	ldr	r0, [pc, #144]	; (8007a58 <MlmeConfirm+0xf4>)
 80079c6:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80079c8:	7863      	ldrb	r3, [r4, #1]
 80079ca:	b98b      	cbnz	r3, 80079f0 <MlmeConfirm+0x8c>
                SecureElementPrintSessionKeys();
 80079cc:	f008 fab2 	bl	800ff34 <SecureElementPrintSessionKeys>
        break;
 80079d0:	e00e      	b.n	80079f0 <MlmeConfirm+0x8c>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80079d2:	4b21      	ldr	r3, [pc, #132]	; (8007a58 <MlmeConfirm+0xf4>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80079d8:	4b20      	ldr	r3, [pc, #128]	; (8007a5c <MlmeConfirm+0xf8>)
 80079da:	7858      	ldrb	r0, [r3, #1]
 80079dc:	f7ff fee4 	bl	80077a8 <LmHandlerRequestClass>
 80079e0:	e7ed      	b.n	80079be <MlmeConfirm+0x5a>
            RxParams.LinkCheck = true;
 80079e2:	4b1f      	ldr	r3, [pc, #124]	; (8007a60 <MlmeConfirm+0xfc>)
 80079e4:	2201      	movs	r2, #1
 80079e6:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80079e8:	7a22      	ldrb	r2, [r4, #8]
 80079ea:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 80079ec:	7a62      	ldrb	r2, [r4, #9]
 80079ee:	74da      	strb	r2, [r3, #19]
}
 80079f0:	b00a      	add	sp, #40	; 0x28
 80079f2:	bd10      	pop	{r4, pc}
            if( IsClassBSwitchPending == true )
 80079f4:	4b1b      	ldr	r3, [pc, #108]	; (8007a64 <MlmeConfirm+0x100>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0f9      	beq.n	80079f0 <MlmeConfirm+0x8c>
                LmHandlerBeaconReq( );
 80079fc:	f7ff fcda 	bl	80073b4 <LmHandlerBeaconReq>
 8007a00:	e7f6      	b.n	80079f0 <MlmeConfirm+0x8c>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007a02:	7863      	ldrb	r3, [r4, #1]
 8007a04:	b923      	cbnz	r3, 8007a10 <MlmeConfirm+0xac>
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8007a06:	4b15      	ldr	r3, [pc, #84]	; (8007a5c <MlmeConfirm+0xf8>)
 8007a08:	7b18      	ldrb	r0, [r3, #12]
 8007a0a:	f7ff fe9f 	bl	800774c <LmHandlerPingSlotReq>
 8007a0e:	e7ef      	b.n	80079f0 <MlmeConfirm+0x8c>
                LmHandlerDeviceTimeReq( );
 8007a10:	f7ff fce4 	bl	80073dc <LmHandlerDeviceTimeReq>
 8007a14:	e7ec      	b.n	80079f0 <MlmeConfirm+0x8c>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007a16:	7863      	ldrb	r3, [r4, #1]
 8007a18:	b98b      	cbnz	r3, 8007a3e <MlmeConfirm+0xda>
                mibReq.Type = MIB_DEVICE_CLASS;
 8007a1a:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.Class = CLASS_B;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007a24:	a801      	add	r0, sp, #4
 8007a26:	f003 fa39 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
                if (LmHandlerCallbacks->OnClassChange != NULL)
 8007a2a:	4b08      	ldr	r3, [pc, #32]	; (8007a4c <MlmeConfirm+0xe8>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a30:	b10b      	cbz	r3, 8007a36 <MlmeConfirm+0xd2>
                    LmHandlerCallbacks->OnClassChange( CLASS_B );
 8007a32:	2001      	movs	r0, #1
 8007a34:	4798      	blx	r3
                IsClassBSwitchPending = false;
 8007a36:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <MlmeConfirm+0x100>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	701a      	strb	r2, [r3, #0]
 8007a3c:	e7d8      	b.n	80079f0 <MlmeConfirm+0x8c>
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8007a3e:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <MlmeConfirm+0xf8>)
 8007a40:	7b18      	ldrb	r0, [r3, #12]
 8007a42:	f7ff fe83 	bl	800774c <LmHandlerPingSlotReq>
}
 8007a46:	e7d3      	b.n	80079f0 <MlmeConfirm+0x8c>
 8007a48:	200000ac 	.word	0x200000ac
 8007a4c:	2000059c 	.word	0x2000059c
 8007a50:	20000078 	.word	0x20000078
 8007a54:	20000094 	.word	0x20000094
 8007a58:	20000090 	.word	0x20000090
 8007a5c:	200005b4 	.word	0x200005b4
 8007a60:	20000098 	.word	0x20000098
 8007a64:	20000598 	.word	0x20000598

08007a68 <LmHandlerSetSystemMaxRxError>:
{
 8007a68:	b500      	push	{lr}
 8007a6a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007a6c:	2323      	movs	r3, #35	; 0x23
 8007a6e:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8007a72:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007a74:	a801      	add	r0, sp, #4
 8007a76:	f003 fa11 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
 8007a7a:	b910      	cbnz	r0, 8007a82 <LmHandlerSetSystemMaxRxError+0x1a>
}
 8007a7c:	b00b      	add	sp, #44	; 0x2c
 8007a7e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 8007a82:	f04f 30ff 	mov.w	r0, #4294967295
 8007a86:	e7f9      	b.n	8007a7c <LmHandlerSetSystemMaxRxError+0x14>

08007a88 <LmHandlerConfigure>:
{
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	b090      	sub	sp, #64	; 0x40
 8007a8c:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8007a8e:	4c79      	ldr	r4, [pc, #484]	; (8007c74 <LmHandlerConfigure+0x1ec>)
 8007a90:	2214      	movs	r2, #20
 8007a92:	4620      	mov	r0, r4
 8007a94:	f00a fb74 	bl	8012180 <UTIL_MEM_cpy_8>
    IsClassBSwitchPending = false;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	4a77      	ldr	r2, [pc, #476]	; (8007c78 <LmHandlerConfigure+0x1f0>)
 8007a9c:	7013      	strb	r3, [r2, #0]
    IsUplinkTxPending = false;
 8007a9e:	4a77      	ldr	r2, [pc, #476]	; (8007c7c <LmHandlerConfigure+0x1f4>)
 8007aa0:	7013      	strb	r3, [r2, #0]
    loraInfo = LoraInfo_GetPtr();
 8007aa2:	f7fb f927 	bl	8002cf4 <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8007aa6:	7822      	ldrb	r2, [r4, #0]
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	4093      	lsls	r3, r2
 8007aac:	6841      	ldr	r1, [r0, #4]
 8007aae:	420b      	tst	r3, r1
 8007ab0:	d106      	bne.n	8007ac0 <LmHandlerConfigure+0x38>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8007ab2:	4b73      	ldr	r3, [pc, #460]	; (8007c80 <LmHandlerConfigure+0x1f8>)
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	4608      	mov	r0, r1
 8007aba:	f00a fa4b 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 8007abe:	e7fe      	b.n	8007abe <LmHandlerConfigure+0x36>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8007ac0:	4970      	ldr	r1, [pc, #448]	; (8007c84 <LmHandlerConfigure+0x1fc>)
 8007ac2:	4871      	ldr	r0, [pc, #452]	; (8007c88 <LmHandlerConfigure+0x200>)
 8007ac4:	f002 fe00 	bl	800a6c8 <LoRaMacInitialization>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	f040 80cf 	bne.w	8007c6c <LmHandlerConfigure+0x1e4>
    mibReq.Type = MIB_NVM_CTXS;
 8007ace:	2327      	movs	r3, #39	; 0x27
 8007ad0:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007ad4:	a807      	add	r0, sp, #28
 8007ad6:	f003 f9e1 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	f040 8087 	bne.w	8007bee <LmHandlerConfigure+0x166>
        CtxRestoreDone = true;
 8007ae0:	4b6a      	ldr	r3, [pc, #424]	; (8007c8c <LmHandlerConfigure+0x204>)
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 8007ae6:	4b69      	ldr	r3, [pc, #420]	; (8007c8c <LmHandlerConfigure+0x204>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 80a8 	beq.w	8007c40 <LmHandlerConfigure+0x1b8>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8007af0:	4b67      	ldr	r3, [pc, #412]	; (8007c90 <LmHandlerConfigure+0x208>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	b10b      	cbz	r3, 8007afc <LmHandlerConfigure+0x74>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8007af8:	2000      	movs	r0, #0
 8007afa:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 8007afc:	2306      	movs	r3, #6
 8007afe:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007b02:	a807      	add	r0, sp, #28
 8007b04:	f003 f87c 	bl	800ac00 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007b08:	9a08      	ldr	r2, [sp, #32]
 8007b0a:	4b62      	ldr	r3, [pc, #392]	; (8007c94 <LmHandlerConfigure+0x20c>)
 8007b0c:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 8007b0e:	2327      	movs	r3, #39	; 0x27
 8007b10:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007b14:	a807      	add	r0, sp, #28
 8007b16:	f003 f873 	bl	800ac00 <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 8007b1a:	9a08      	ldr	r2, [sp, #32]
 8007b1c:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 8007b20:	4b54      	ldr	r3, [pc, #336]	; (8007c74 <LmHandlerConfigure+0x1ec>)
 8007b22:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 8007b24:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 8007b28:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 8007b2a:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 8007b2e:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 8007b30:	2502      	movs	r5, #2
 8007b32:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007b36:	a807      	add	r0, sp, #28
 8007b38:	f003 f862 	bl	800ac00 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8007b3c:	4c55      	ldr	r4, [pc, #340]	; (8007c94 <LmHandlerConfigure+0x20c>)
 8007b3e:	2208      	movs	r2, #8
 8007b40:	9908      	ldr	r1, [sp, #32]
 8007b42:	4620      	mov	r0, r4
 8007b44:	f008 fb5d 	bl	8010202 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007b4e:	a807      	add	r0, sp, #28
 8007b50:	f003 f856 	bl	800ac00 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8007b54:	2208      	movs	r2, #8
 8007b56:	9908      	ldr	r1, [sp, #32]
 8007b58:	18a0      	adds	r0, r4, r2
 8007b5a:	f008 fb52 	bl	8010202 <memcpy1>
    SecureElementPrintKeys();
 8007b5e:	f008 f989 	bl	800fe74 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8007b62:	7de3      	ldrb	r3, [r4, #23]
 8007b64:	7da2      	ldrb	r2, [r4, #22]
 8007b66:	7d61      	ldrb	r1, [r4, #21]
 8007b68:	7d20      	ldrb	r0, [r4, #20]
 8007b6a:	9003      	str	r0, [sp, #12]
 8007b6c:	9102      	str	r1, [sp, #8]
 8007b6e:	9201      	str	r2, [sp, #4]
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	4b49      	ldr	r3, [pc, #292]	; (8007c98 <LmHandlerConfigure+0x210>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	4611      	mov	r1, r2
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f00a f9eb 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8007b7e:	260f      	movs	r6, #15
 8007b80:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8007b8a:	a807      	add	r0, sp, #28
 8007b8c:	f003 f986 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8007b90:	2310      	movs	r3, #16
 8007b92:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8007b96:	2500      	movs	r5, #0
 8007b98:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007b9c:	a807      	add	r0, sp, #28
 8007b9e:	f003 f97d 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8007ba2:	2304      	movs	r3, #4
 8007ba4:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8007ba8:	4c32      	ldr	r4, [pc, #200]	; (8007c74 <LmHandlerConfigure+0x1ec>)
 8007baa:	78a3      	ldrb	r3, [r4, #2]
 8007bac:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007bb0:	a807      	add	r0, sp, #28
 8007bb2:	f003 f973 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8007bb6:	2338      	movs	r3, #56	; 0x38
 8007bb8:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8007bc0:	a807      	add	r0, sp, #28
 8007bc2:	f003 f96b 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007bc6:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8007bca:	a905      	add	r1, sp, #20
 8007bcc:	7820      	ldrb	r0, [r4, #0]
 8007bce:	f006 f909 	bl	800dde4 <RegionGetPhyParam>
 8007bd2:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8007bd4:	1b43      	subs	r3, r0, r5
 8007bd6:	bf18      	it	ne
 8007bd8:	2301      	movne	r3, #1
 8007bda:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 8007bdc:	2014      	movs	r0, #20
 8007bde:	f7ff ff43 	bl	8007a68 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8007be2:	79a0      	ldrb	r0, [r4, #6]
 8007be4:	f003 fdc8 	bl	800b778 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8007be8:	4628      	mov	r0, r5
}
 8007bea:	b010      	add	sp, #64	; 0x40
 8007bec:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8007bee:	2328      	movs	r3, #40	; 0x28
 8007bf0:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 8007bf4:	4b26      	ldr	r3, [pc, #152]	; (8007c90 <LmHandlerConfigure+0x208>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	b14b      	cbz	r3, 8007c10 <LmHandlerConfigure+0x188>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007bfc:	a807      	add	r0, sp, #28
 8007bfe:	f002 ffff 	bl	800ac00 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 8007c02:	4b23      	ldr	r3, [pc, #140]	; (8007c90 <LmHandlerConfigure+0x208>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	f240 517c 	movw	r1, #1404	; 0x57c
 8007c0c:	9808      	ldr	r0, [sp, #32]
 8007c0e:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 8007c10:	2327      	movs	r3, #39	; 0x27
 8007c12:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007c16:	a807      	add	r0, sp, #28
 8007c18:	f003 f940 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f47f af62 	bne.w	8007ae6 <LmHandlerConfigure+0x5e>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007c22:	2301      	movs	r3, #1
 8007c24:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007c28:	a807      	add	r0, sp, #28
 8007c2a:	f002 ffe9 	bl	800ac00 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 8007c2e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f43f af57 	beq.w	8007ae6 <LmHandlerConfigure+0x5e>
                CtxRestoreDone = true;
 8007c38:	4b14      	ldr	r3, [pc, #80]	; (8007c8c <LmHandlerConfigure+0x204>)
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	e752      	b.n	8007ae6 <LmHandlerConfigure+0x5e>
        mibReq.Type = MIB_NET_ID;
 8007c40:	2305      	movs	r3, #5
 8007c42:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8007c46:	2300      	movs	r3, #0
 8007c48:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8007c4a:	a807      	add	r0, sp, #28
 8007c4c:	f003 f926 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8007c50:	4b0f      	ldr	r3, [pc, #60]	; (8007c90 <LmHandlerConfigure+0x208>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	4798      	blx	r3
 8007c58:	4b0e      	ldr	r3, [pc, #56]	; (8007c94 <LmHandlerConfigure+0x20c>)
 8007c5a:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 8007c5c:	2306      	movs	r3, #6
 8007c5e:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8007c62:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8007c64:	a807      	add	r0, sp, #28
 8007c66:	f003 f919 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
 8007c6a:	e761      	b.n	8007b30 <LmHandlerConfigure+0xa8>
        return LORAMAC_HANDLER_ERROR;
 8007c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c70:	e7bb      	b.n	8007bea <LmHandlerConfigure+0x162>
 8007c72:	bf00      	nop
 8007c74:	200005b4 	.word	0x200005b4
 8007c78:	20000598 	.word	0x20000598
 8007c7c:	20000599 	.word	0x20000599
 8007c80:	080132a0 	.word	0x080132a0
 8007c84:	200005d8 	.word	0x200005d8
 8007c88:	200005ec 	.word	0x200005ec
 8007c8c:	20000590 	.word	0x20000590
 8007c90:	2000059c 	.word	0x2000059c
 8007c94:	20000078 	.word	0x20000078
 8007c98:	080132ec 	.word	0x080132ec

08007c9c <LmHandlerPackageRegister>:
    switch( id )
 8007c9c:	b9f0      	cbnz	r0, 8007cdc <LmHandlerPackageRegister+0x40>
{
 8007c9e:	b538      	push	{r3, r4, r5, lr}
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 8007ca4:	f000 fb76 	bl	8008394 <LmhpCompliancePackageFactory>
    if( package != NULL )
 8007ca8:	b1a8      	cbz	r0, 8007cd6 <LmHandlerPackageRegister+0x3a>
        LmHandlerPackages[id] = package;
 8007caa:	4a0e      	ldr	r2, [pc, #56]	; (8007ce4 <LmHandlerPackageRegister+0x48>)
 8007cac:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8007cb0:	4a0d      	ldr	r2, [pc, #52]	; (8007ce8 <LmHandlerPackageRegister+0x4c>)
 8007cb2:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 8007cb4:	4a0d      	ldr	r2, [pc, #52]	; (8007cec <LmHandlerPackageRegister+0x50>)
 8007cb6:	6812      	ldr	r2, [r2, #0]
 8007cb8:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8007cba:	6301      	str	r1, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8007cbc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8007cbe:	6341      	str	r1, [r0, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8007cc0:	490b      	ldr	r1, [pc, #44]	; (8007cf0 <LmHandlerPackageRegister+0x54>)
 8007cc2:	62c1      	str	r1, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8007cc4:	6992      	ldr	r2, [r2, #24]
 8007cc6:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8007cc8:	6843      	ldr	r3, [r0, #4]
 8007cca:	22f2      	movs	r2, #242	; 0xf2
 8007ccc:	4909      	ldr	r1, [pc, #36]	; (8007cf4 <LmHandlerPackageRegister+0x58>)
 8007cce:	4620      	mov	r0, r4
 8007cd0:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8007cd2:	2000      	movs	r0, #0
}
 8007cd4:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 8007cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cda:	e7fb      	b.n	8007cd4 <LmHandlerPackageRegister+0x38>
 8007cdc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	200005a0 	.word	0x200005a0
 8007ce8:	0800751d 	.word	0x0800751d
 8007cec:	2000059c 	.word	0x2000059c
 8007cf0:	080073dd 	.word	0x080073dd
 8007cf4:	2000047c 	.word	0x2000047c

08007cf8 <LmHandlerInit>:
{
 8007cf8:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8007cfa:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <LmHandlerInit+0x50>)
 8007cfc:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <LmHandlerInit+0x54>)
 8007d00:	4a13      	ldr	r2, [pc, #76]	; (8007d50 <LmHandlerInit+0x58>)
 8007d02:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007d04:	4a13      	ldr	r2, [pc, #76]	; (8007d54 <LmHandlerInit+0x5c>)
 8007d06:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007d08:	4a13      	ldr	r2, [pc, #76]	; (8007d58 <LmHandlerInit+0x60>)
 8007d0a:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007d0c:	4a13      	ldr	r2, [pc, #76]	; (8007d5c <LmHandlerInit+0x64>)
 8007d0e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007d10:	6802      	ldr	r2, [r0, #0]
 8007d12:	4b13      	ldr	r3, [pc, #76]	; (8007d60 <LmHandlerInit+0x68>)
 8007d14:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8007d16:	6842      	ldr	r2, [r0, #4]
 8007d18:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8007d1a:	6882      	ldr	r2, [r0, #8]
 8007d1c:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8007d1e:	4a11      	ldr	r2, [pc, #68]	; (8007d64 <LmHandlerInit+0x6c>)
 8007d20:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8007d22:	6982      	ldr	r2, [r0, #24]
 8007d24:	611a      	str	r2, [r3, #16]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 8007d26:	4b10      	ldr	r3, [pc, #64]	; (8007d68 <LmHandlerInit+0x70>)
 8007d28:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8007d2a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007d2c:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 8007d2e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007d30:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 8007d32:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d34:	60da      	str	r2, [r3, #12]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8007d36:	4619      	mov	r1, r3
 8007d38:	2000      	movs	r0, #0
 8007d3a:	f7ff ffaf 	bl	8007c9c <LmHandlerPackageRegister>
 8007d3e:	b900      	cbnz	r0, 8007d42 <LmHandlerInit+0x4a>
}
 8007d40:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 8007d42:	f04f 30ff 	mov.w	r0, #4294967295
 8007d46:	e7fb      	b.n	8007d40 <LmHandlerInit+0x48>
 8007d48:	2000059c 	.word	0x2000059c
 8007d4c:	200005ec 	.word	0x200005ec
 8007d50:	08007309 	.word	0x08007309
 8007d54:	080078a1 	.word	0x080078a1
 8007d58:	08007965 	.word	0x08007965
 8007d5c:	08007405 	.word	0x08007405
 8007d60:	200005d8 	.word	0x200005d8
 8007d64:	0800dd95 	.word	0x0800dd95
 8007d68:	200005c8 	.word	0x200005c8

08007d6c <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 8007d6c:	b161      	cbz	r1, 8007d88 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 8007d6e:	b118      	cbz	r0, 8007d78 <LmHandlerGetVersion+0xc>
 8007d70:	2801      	cmp	r0, #1
 8007d72:	d005      	beq.n	8007d80 <LmHandlerGetVersion+0x14>
 8007d74:	2000      	movs	r0, #0
 8007d76:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8007d78:	4a05      	ldr	r2, [pc, #20]	; (8007d90 <LmHandlerGetVersion+0x24>)
 8007d7a:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8007d7c:	2000      	movs	r0, #0
            break;
 8007d7e:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8007d80:	4a04      	ldr	r2, [pc, #16]	; (8007d94 <LmHandlerGetVersion+0x28>)
 8007d82:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8007d84:	2000      	movs	r0, #0
            break;
 8007d86:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8007d88:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	01000400 	.word	0x01000400
 8007d94:	02010001 	.word	0x02010001

08007d98 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 8007d98:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 8007d9a:	f003 fd01 	bl	800b7a0 <LoRaMacDeInitialization>
 8007d9e:	b900      	cbnz	r0, 8007da2 <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8007da0:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007da2:	f06f 0001 	mvn.w	r0, #1
 8007da6:	e7fb      	b.n	8007da0 <LmHandlerStop+0x8>

08007da8 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 8007da8:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 8007daa:	f002 fe8b 	bl	800aac4 <LoRaMacHalt>
 8007dae:	b900      	cbnz	r0, 8007db2 <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8007db0:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007db2:	f06f 0001 	mvn.w	r0, #1
 8007db6:	e7fb      	b.n	8007db0 <LmHandlerHalt+0x8>

08007db8 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8007db8:	b510      	push	{r4, lr}
 8007dba:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8007dbc:	f7ff fff4 	bl	8007da8 <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	b148      	cbz	r0, 8007dd8 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 8007dc4:	b92c      	cbnz	r4, 8007dd2 <LmHandlerNvmDataStore+0x1a>
 8007dc6:	4b18      	ldr	r3, [pc, #96]	; (8007e28 <LmHandlerNvmDataStore+0x70>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	b10b      	cbz	r3, 8007dd2 <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8007dce:	2001      	movs	r0, #1
 8007dd0:	4798      	blx	r3
    }

    return lmhStatus;
}
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	b00a      	add	sp, #40	; 0x28
 8007dd6:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8007dd8:	f005 ffe4 	bl	800dda4 <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 8007ddc:	f110 0f02 	cmn.w	r0, #2
 8007de0:	d012      	beq.n	8007e08 <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 8007de2:	b9d0      	cbnz	r0, 8007e1a <LmHandlerNvmDataStore+0x62>
 8007de4:	4b10      	ldr	r3, [pc, #64]	; (8007e28 <LmHandlerNvmDataStore+0x70>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	b1cb      	cbz	r3, 8007e20 <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 8007dec:	2327      	movs	r3, #39	; 0x27
 8007dee:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 8007df2:	a801      	add	r0, sp, #4
 8007df4:	f002 ff04 	bl	800ac00 <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 8007df8:	4b0b      	ldr	r3, [pc, #44]	; (8007e28 <LmHandlerNvmDataStore+0x70>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8007e02:	9802      	ldr	r0, [sp, #8]
 8007e04:	4798      	blx	r3
 8007e06:	e001      	b.n	8007e0c <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8007e08:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8007e0c:	f005 ffda 	bl	800ddc4 <NvmDataMgmtStoreEnd>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d0d7      	beq.n	8007dc4 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007e14:	f04f 34ff 	mov.w	r4, #4294967295
 8007e18:	e7db      	b.n	8007dd2 <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007e1a:	f04f 34ff 	mov.w	r4, #4294967295
 8007e1e:	e7f5      	b.n	8007e0c <LmHandlerNvmDataStore+0x54>
 8007e20:	f04f 34ff 	mov.w	r4, #4294967295
 8007e24:	e7f2      	b.n	8007e0c <LmHandlerNvmDataStore+0x54>
 8007e26:	bf00      	nop
 8007e28:	2000059c 	.word	0x2000059c

08007e2c <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8007e2c:	4b01      	ldr	r3, [pc, #4]	; (8007e34 <LmhpComplianceIsInitialized+0x8>)
 8007e2e:	7818      	ldrb	r0, [r3, #0]
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	20000600 	.word	0x20000600

08007e38 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 8007e38:	4b01      	ldr	r3, [pc, #4]	; (8007e40 <LmhpComplianceIsTxPending+0x8>)
 8007e3a:	7858      	ldrb	r0, [r3, #1]
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	20000600 	.word	0x20000600

08007e44 <LmhpComplianceOnMlmeConfirm>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 8007e44:	4770      	bx	lr

08007e46 <LmhpComplianceOnMlmeIndication>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 8007e46:	4770      	bx	lr

08007e48 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 8007e48:	b508      	push	{r3, lr}
    ComplianceTestState.IsTxPending = true;
 8007e4a:	4b03      	ldr	r3, [pc, #12]	; (8007e58 <OnProcessTimer+0x10>)
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 8007e50:	4b02      	ldr	r3, [pc, #8]	; (8007e5c <OnProcessTimer+0x14>)
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	4798      	blx	r3
}
 8007e56:	bd08      	pop	{r3, pc}
 8007e58:	20000600 	.word	0x20000600
 8007e5c:	200000c8 	.word	0x200000c8

08007e60 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8007e60:	4b8d      	ldr	r3, [pc, #564]	; (8008098 <LmhpComplianceOnMcpsIndication+0x238>)
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 81fd 	beq.w	8008264 <LmhpComplianceOnMcpsIndication+0x404>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 8007e6a:	78c3      	ldrb	r3, [r0, #3]
 8007e6c:	b90b      	cbnz	r3, 8007e72 <LmhpComplianceOnMcpsIndication+0x12>
 8007e6e:	7b83      	ldrb	r3, [r0, #14]
 8007e70:	b11b      	cbz	r3, 8007e7a <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 8007e72:	4a89      	ldr	r2, [pc, #548]	; (8008098 <LmhpComplianceOnMcpsIndication+0x238>)
 8007e74:	8a13      	ldrh	r3, [r2, #16]
 8007e76:	3301      	adds	r3, #1
 8007e78:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 8007e7a:	7b43      	ldrb	r3, [r0, #13]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 81f1 	beq.w	8008264 <LmhpComplianceOnMcpsIndication+0x404>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8007e82:	78c3      	ldrb	r3, [r0, #3]
 8007e84:	2be0      	cmp	r3, #224	; 0xe0
 8007e86:	f040 81ed 	bne.w	8008264 <LmhpComplianceOnMcpsIndication+0x404>
{
 8007e8a:	b570      	push	{r4, r5, r6, lr}
 8007e8c:	b094      	sub	sp, #80	; 0x50
    ComplianceTestState.DataBufferSize = 0;
 8007e8e:	4b82      	ldr	r3, [pc, #520]	; (8008098 <LmhpComplianceOnMcpsIndication+0x238>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 8007e94:	6884      	ldr	r4, [r0, #8]
 8007e96:	7823      	ldrb	r3, [r4, #0]
 8007e98:	2b7f      	cmp	r3, #127	; 0x7f
 8007e9a:	f200 8093 	bhi.w	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
 8007e9e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007ea2:	0080      	.short	0x0080
 8007ea4:	00a600a1 	.word	0x00a600a1
 8007ea8:	00b400ac 	.word	0x00b400ac
 8007eac:	00c800c1 	.word	0x00c800c1
 8007eb0:	00f200e1 	.word	0x00f200e1
 8007eb4:	0133011f 	.word	0x0133011f
 8007eb8:	00910091 	.word	0x00910091
 8007ebc:	00910091 	.word	0x00910091
 8007ec0:	00910091 	.word	0x00910091
 8007ec4:	00910091 	.word	0x00910091
 8007ec8:	00910091 	.word	0x00910091
 8007ecc:	00910091 	.word	0x00910091
 8007ed0:	00910091 	.word	0x00910091
 8007ed4:	00910091 	.word	0x00910091
 8007ed8:	00910091 	.word	0x00910091
 8007edc:	00910091 	.word	0x00910091
 8007ee0:	01370091 	.word	0x01370091
 8007ee4:	0142013e 	.word	0x0142013e
 8007ee8:	00910091 	.word	0x00910091
 8007eec:	00910091 	.word	0x00910091
 8007ef0:	00910091 	.word	0x00910091
 8007ef4:	00910091 	.word	0x00910091
 8007ef8:	00910091 	.word	0x00910091
 8007efc:	00910091 	.word	0x00910091
 8007f00:	00910091 	.word	0x00910091
 8007f04:	00910091 	.word	0x00910091
 8007f08:	00910091 	.word	0x00910091
 8007f0c:	00910091 	.word	0x00910091
 8007f10:	00910091 	.word	0x00910091
 8007f14:	00910091 	.word	0x00910091
 8007f18:	00910091 	.word	0x00910091
 8007f1c:	00910091 	.word	0x00910091
 8007f20:	00910091 	.word	0x00910091
 8007f24:	00910091 	.word	0x00910091
 8007f28:	00910091 	.word	0x00910091
 8007f2c:	00910091 	.word	0x00910091
 8007f30:	00910091 	.word	0x00910091
 8007f34:	00910091 	.word	0x00910091
 8007f38:	00910091 	.word	0x00910091
 8007f3c:	00910091 	.word	0x00910091
 8007f40:	00910091 	.word	0x00910091
 8007f44:	00910091 	.word	0x00910091
 8007f48:	00910091 	.word	0x00910091
 8007f4c:	00910091 	.word	0x00910091
 8007f50:	00910091 	.word	0x00910091
 8007f54:	00910091 	.word	0x00910091
 8007f58:	00910091 	.word	0x00910091
 8007f5c:	00910091 	.word	0x00910091
 8007f60:	00910091 	.word	0x00910091
 8007f64:	00910091 	.word	0x00910091
 8007f68:	00910091 	.word	0x00910091
 8007f6c:	00910091 	.word	0x00910091
 8007f70:	00910091 	.word	0x00910091
 8007f74:	00910091 	.word	0x00910091
 8007f78:	00910091 	.word	0x00910091
 8007f7c:	00910091 	.word	0x00910091
 8007f80:	00910091 	.word	0x00910091
 8007f84:	00910091 	.word	0x00910091
 8007f88:	00910091 	.word	0x00910091
 8007f8c:	00910091 	.word	0x00910091
 8007f90:	00910091 	.word	0x00910091
 8007f94:	00910091 	.word	0x00910091
 8007f98:	00910091 	.word	0x00910091
 8007f9c:	016e014d 	.word	0x016e014d
 8007fa0:	017c      	.short	0x017c
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8007fa2:	4b3d      	ldr	r3, [pc, #244]	; (8008098 <LmhpComplianceOnMcpsIndication+0x238>)
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	7299      	strb	r1, [r3, #10]
 8007faa:	2000      	movs	r0, #0
 8007fac:	7010      	strb	r0, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8007fae:	68d8      	ldr	r0, [r3, #12]
 8007fb0:	7a9a      	ldrb	r2, [r3, #10]
 8007fb2:	1854      	adds	r4, r2, r1
 8007fb4:	729c      	strb	r4, [r3, #10]
 8007fb6:	2406      	movs	r4, #6
 8007fb8:	5484      	strb	r4, [r0, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8007fba:	68d8      	ldr	r0, [r3, #12]
 8007fbc:	7a9a      	ldrb	r2, [r3, #10]
 8007fbe:	1854      	adds	r4, r2, r1
 8007fc0:	729c      	strb	r4, [r3, #10]
 8007fc2:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 8007fc4:	4b34      	ldr	r3, [pc, #208]	; (8008098 <LmhpComplianceOnMcpsIndication+0x238>)
 8007fc6:	7a9b      	ldrb	r3, [r3, #10]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 8144 	beq.w	8008256 <LmhpComplianceOnMcpsIndication+0x3f6>
        TimerSetValue( &ProcessTimer, 1000 );
 8007fce:	4c33      	ldr	r4, [pc, #204]	; (800809c <LmhpComplianceOnMcpsIndication+0x23c>)
 8007fd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f00a fbb1 	bl	801273c <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f00a fb68 	bl	80126b0 <UTIL_TIMER_Start>
}
 8007fe0:	b014      	add	sp, #80	; 0x50
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}
        ComplianceTestState.IsResetCmdPending = true;
 8007fe4:	4b2c      	ldr	r3, [pc, #176]	; (8008098 <LmhpComplianceOnMcpsIndication+0x238>)
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 8007fec:	e7ea      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8007fee:	4b2c      	ldr	r3, [pc, #176]	; (80080a0 <LmhpComplianceOnMcpsIndication+0x240>)
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	2101      	movs	r1, #1
 8007ff4:	2002      	movs	r0, #2
 8007ff6:	4798      	blx	r3
        break;
 8007ff8:	e7e4      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8007ffa:	7862      	ldrb	r2, [r4, #1]
 8007ffc:	4b26      	ldr	r3, [pc, #152]	; (8008098 <LmhpComplianceOnMcpsIndication+0x238>)
 8007ffe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 8008008:	e7dc      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type            = MIB_ADR;
 800800a:	2304      	movs	r3, #4
 800800c:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8008010:	7863      	ldrb	r3, [r4, #1]
 8008012:	3b00      	subs	r3, #0
 8008014:	bf18      	it	ne
 8008016:	2301      	movne	r3, #1
 8008018:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800801c:	4668      	mov	r0, sp
 800801e:	f002 ff3d 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
        break;
 8008022:	e7cf      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8008024:	7860      	ldrb	r0, [r4, #1]
 8008026:	3800      	subs	r0, #0
 8008028:	bf18      	it	ne
 800802a:	2001      	movne	r0, #1
 800802c:	f003 fba4 	bl	800b778 <LoRaMacTestSetDutyCycleOn>
        break;
 8008030:	e7c8      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8008032:	466d      	mov	r5, sp
 8008034:	4e1b      	ldr	r6, [pc, #108]	; (80080a4 <LmhpComplianceOnMcpsIndication+0x244>)
 8008036:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800803a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800803c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800803e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008042:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8008046:	7863      	ldrb	r3, [r4, #1]
        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8008048:	2b0a      	cmp	r3, #10
 800804a:	d8bb      	bhi.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800804c:	4a16      	ldr	r2, [pc, #88]	; (80080a8 <LmhpComplianceOnMcpsIndication+0x248>)
 800804e:	6812      	ldr	r2, [r2, #0]
 8008050:	6852      	ldr	r2, [r2, #4]
 8008052:	2a00      	cmp	r2, #0
 8008054:	d0b6      	beq.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8008056:	a914      	add	r1, sp, #80	; 0x50
 8008058:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800805c:	f853 0c50 	ldr.w	r0, [r3, #-80]
 8008060:	4790      	blx	r2
        break;
 8008062:	e7af      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8008064:	7862      	ldrb	r2, [r4, #1]
        if( ( frameType == 1 ) || ( frameType == 2 ) )
 8008066:	1e53      	subs	r3, r2, #1
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b01      	cmp	r3, #1
 800806c:	d8aa      	bhi.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800806e:	1e50      	subs	r0, r2, #1
 8008070:	bf18      	it	ne
 8008072:	2001      	movne	r0, #1
 8008074:	4b08      	ldr	r3, [pc, #32]	; (8008098 <LmhpComplianceOnMcpsIndication+0x238>)
 8008076:	7218      	strb	r0, [r3, #8]
            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <LmhpComplianceOnMcpsIndication+0x248>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0a0      	beq.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8008082:	4798      	blx	r3
 8008084:	e79e      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8008086:	4b04      	ldr	r3, [pc, #16]	; (8008098 <LmhpComplianceOnMcpsIndication+0x238>)
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	2101      	movs	r1, #1
 800808c:	7299      	strb	r1, [r3, #10]
 800808e:	2308      	movs	r3, #8
 8008090:	7013      	strb	r3, [r2, #0]
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8008092:	460b      	mov	r3, r1
 8008094:	e01b      	b.n	80080ce <LmhpComplianceOnMcpsIndication+0x26e>
 8008096:	bf00      	nop
 8008098:	20000600 	.word	0x20000600
 800809c:	20000638 	.word	0x20000638
 80080a0:	200000c8 	.word	0x200000c8
 80080a4:	08012c4c 	.word	0x08012c4c
 80080a8:	200005fc 	.word	0x200005fc
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80080ac:	6882      	ldr	r2, [r0, #8]
 80080ae:	f101 0c01 	add.w	ip, r1, #1
 80080b2:	5c52      	ldrb	r2, [r2, r1]
 80080b4:	496c      	ldr	r1, [pc, #432]	; (8008268 <LmhpComplianceOnMcpsIndication+0x408>)
 80080b6:	68cd      	ldr	r5, [r1, #12]
 80080b8:	7a8c      	ldrb	r4, [r1, #10]
 80080ba:	f104 0e01 	add.w	lr, r4, #1
 80080be:	f881 e00a 	strb.w	lr, [r1, #10]
 80080c2:	3201      	adds	r2, #1
 80080c4:	552a      	strb	r2, [r5, r4]
             i++ )
 80080c6:	3301      	adds	r3, #1
 80080c8:	b2db      	uxtb	r3, r3
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80080ca:	fa5f f18c 	uxtb.w	r1, ip
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80080ce:	4a66      	ldr	r2, [pc, #408]	; (8008268 <LmhpComplianceOnMcpsIndication+0x408>)
 80080d0:	7a52      	ldrb	r2, [r2, #9]
 80080d2:	7b04      	ldrb	r4, [r0, #12]
 80080d4:	42a2      	cmp	r2, r4
 80080d6:	bf28      	it	cs
 80080d8:	4622      	movcs	r2, r4
 80080da:	429a      	cmp	r2, r3
 80080dc:	d8e6      	bhi.n	80080ac <LmhpComplianceOnMcpsIndication+0x24c>
 80080de:	e771      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 80080e0:	4b61      	ldr	r3, [pc, #388]	; (8008268 <LmhpComplianceOnMcpsIndication+0x408>)
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	2101      	movs	r1, #1
 80080e6:	7299      	strb	r1, [r3, #10]
 80080e8:	2109      	movs	r1, #9
 80080ea:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 80080ec:	8a18      	ldrh	r0, [r3, #16]
 80080ee:	68d9      	ldr	r1, [r3, #12]
 80080f0:	7a9a      	ldrb	r2, [r3, #10]
 80080f2:	1c54      	adds	r4, r2, #1
 80080f4:	729c      	strb	r4, [r3, #10]
 80080f6:	5488      	strb	r0, [r1, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 80080f8:	8a1a      	ldrh	r2, [r3, #16]
 80080fa:	68d8      	ldr	r0, [r3, #12]
 80080fc:	7a99      	ldrb	r1, [r3, #10]
 80080fe:	1c4c      	adds	r4, r1, #1
 8008100:	729c      	strb	r4, [r3, #10]
 8008102:	0a13      	lsrs	r3, r2, #8
 8008104:	5443      	strb	r3, [r0, r1]
        break;
 8008106:	e75d      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.RxAppCnt = 0;
 8008108:	4b57      	ldr	r3, [pc, #348]	; (8008268 <LmhpComplianceOnMcpsIndication+0x408>)
 800810a:	2200      	movs	r2, #0
 800810c:	821a      	strh	r2, [r3, #16]
        break;
 800810e:	e759      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        mlmeReq.Type = MLME_LINK_CHECK;
 8008110:	2304      	movs	r3, #4
 8008112:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMlmeRequest( &mlmeReq );
 8008116:	4668      	mov	r0, sp
 8008118:	f003 f946 	bl	800b3a8 <LoRaMacMlmeRequest>
        break;
 800811c:	e752      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnDeviceTimeRequest( );
 800811e:	4b53      	ldr	r3, [pc, #332]	; (800826c <LmhpComplianceOnMcpsIndication+0x40c>)
 8008120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008122:	4798      	blx	r3
        break;
 8008124:	e74e      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8008126:	7860      	ldrb	r0, [r4, #1]
 8008128:	4b4f      	ldr	r3, [pc, #316]	; (8008268 <LmhpComplianceOnMcpsIndication+0x408>)
 800812a:	7558      	strb	r0, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800812c:	4b50      	ldr	r3, [pc, #320]	; (8008270 <LmhpComplianceOnMcpsIndication+0x410>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	f43f af46 	beq.w	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8008138:	4798      	blx	r3
 800813a:	e743      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        if( mcpsIndication->BufferSize == 7 )
 800813c:	7b03      	ldrb	r3, [r0, #12]
 800813e:	2b07      	cmp	r3, #7
 8008140:	f47f af40 	bne.w	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
            mlmeReq.Type = MLME_TXCW;
 8008144:	2305      	movs	r3, #5
 8008146:	f88d 3000 	strb.w	r3, [sp]
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800814a:	7863      	ldrb	r3, [r4, #1]
 800814c:	78a2      	ldrb	r2, [r4, #2]
 800814e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            mlmeReq.Req.TxCw.Timeout =
 8008152:	f8ad 3004 	strh.w	r3, [sp, #4]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8008156:	78e3      	ldrb	r3, [r4, #3]
 8008158:	7922      	ldrb	r2, [r4, #4]
 800815a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800815e:	7962      	ldrb	r2, [r4, #5]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8008160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8008164:	2264      	movs	r2, #100	; 0x64
 8008166:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800816a:	9302      	str	r3, [sp, #8]
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800816c:	6883      	ldr	r3, [r0, #8]
 800816e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8008172:	f88d 300c 	strb.w	r3, [sp, #12]
            LoRaMacMlmeRequest( &mlmeReq );
 8008176:	4668      	mov	r0, sp
 8008178:	f003 f916 	bl	800b3a8 <LoRaMacMlmeRequest>
        break;
 800817c:	e722      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800817e:	2339      	movs	r3, #57	; 0x39
 8008180:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        mibReq.Param.IsCertPortOn = false;
 8008184:	2300      	movs	r3, #0
 8008186:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        LoRaMacMibSetRequestConfirm( &mibReq );
 800818a:	a80b      	add	r0, sp, #44	; 0x2c
 800818c:	f002 fe86 	bl	800ae9c <LoRaMacMibSetRequestConfirm>
        ComplianceTestState.IsResetCmdPending = true;
 8008190:	4b35      	ldr	r3, [pc, #212]	; (8008268 <LmhpComplianceOnMcpsIndication+0x408>)
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 8008198:	e714      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_LORAWAN_VERSION;
 800819a:	232a      	movs	r3, #42	; 0x2a
 800819c:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMibGetRequestConfirm( &mibReq );
 80081a0:	4668      	mov	r0, sp
 80081a2:	f002 fd2d 	bl	800ac00 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 80081a6:	9901      	ldr	r1, [sp, #4]
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 80081a8:	9a02      	ldr	r2, [sp, #8]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 80081aa:	4b2f      	ldr	r3, [pc, #188]	; (8008268 <LmhpComplianceOnMcpsIndication+0x408>)
 80081ac:	68dc      	ldr	r4, [r3, #12]
 80081ae:	7a98      	ldrb	r0, [r3, #10]
 80081b0:	1c45      	adds	r5, r0, #1
 80081b2:	729d      	strb	r5, [r3, #10]
 80081b4:	257f      	movs	r5, #127	; 0x7f
 80081b6:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 80081b8:	482d      	ldr	r0, [pc, #180]	; (8008270 <LmhpComplianceOnMcpsIndication+0x410>)
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	68dd      	ldr	r5, [r3, #12]
 80081be:	7a9c      	ldrb	r4, [r3, #10]
 80081c0:	1c66      	adds	r6, r4, #1
 80081c2:	729e      	strb	r6, [r3, #10]
 80081c4:	78c6      	ldrb	r6, [r0, #3]
 80081c6:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 80081c8:	68dd      	ldr	r5, [r3, #12]
 80081ca:	7a9c      	ldrb	r4, [r3, #10]
 80081cc:	1c66      	adds	r6, r4, #1
 80081ce:	729e      	strb	r6, [r3, #10]
 80081d0:	7886      	ldrb	r6, [r0, #2]
 80081d2:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 80081d4:	68dd      	ldr	r5, [r3, #12]
 80081d6:	7a9c      	ldrb	r4, [r3, #10]
 80081d8:	1c66      	adds	r6, r4, #1
 80081da:	729e      	strb	r6, [r3, #10]
 80081dc:	7846      	ldrb	r6, [r0, #1]
 80081de:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 80081e0:	68dd      	ldr	r5, [r3, #12]
 80081e2:	7a9c      	ldrb	r4, [r3, #10]
 80081e4:	1c66      	adds	r6, r4, #1
 80081e6:	729e      	strb	r6, [r3, #10]
 80081e8:	7800      	ldrb	r0, [r0, #0]
 80081ea:	5528      	strb	r0, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 80081ec:	68dc      	ldr	r4, [r3, #12]
 80081ee:	7a98      	ldrb	r0, [r3, #10]
 80081f0:	1c45      	adds	r5, r0, #1
 80081f2:	729d      	strb	r5, [r3, #10]
 80081f4:	f3c1 6507 	ubfx	r5, r1, #24, #8
 80081f8:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 80081fa:	68dc      	ldr	r4, [r3, #12]
 80081fc:	7a98      	ldrb	r0, [r3, #10]
 80081fe:	1c45      	adds	r5, r0, #1
 8008200:	729d      	strb	r5, [r3, #10]
 8008202:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8008206:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8008208:	68dc      	ldr	r4, [r3, #12]
 800820a:	7a98      	ldrb	r0, [r3, #10]
 800820c:	1c45      	adds	r5, r0, #1
 800820e:	729d      	strb	r5, [r3, #10]
 8008210:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8008214:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8008216:	68dc      	ldr	r4, [r3, #12]
 8008218:	7a98      	ldrb	r0, [r3, #10]
 800821a:	1c45      	adds	r5, r0, #1
 800821c:	729d      	strb	r5, [r3, #10]
 800821e:	5421      	strb	r1, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8008220:	68d8      	ldr	r0, [r3, #12]
 8008222:	7a99      	ldrb	r1, [r3, #10]
 8008224:	1c4c      	adds	r4, r1, #1
 8008226:	729c      	strb	r4, [r3, #10]
 8008228:	f3c2 6407 	ubfx	r4, r2, #24, #8
 800822c:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800822e:	68d8      	ldr	r0, [r3, #12]
 8008230:	7a99      	ldrb	r1, [r3, #10]
 8008232:	1c4c      	adds	r4, r1, #1
 8008234:	729c      	strb	r4, [r3, #10]
 8008236:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800823a:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800823c:	68d8      	ldr	r0, [r3, #12]
 800823e:	7a99      	ldrb	r1, [r3, #10]
 8008240:	1c4c      	adds	r4, r1, #1
 8008242:	729c      	strb	r4, [r3, #10]
 8008244:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8008248:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800824a:	68d8      	ldr	r0, [r3, #12]
 800824c:	7a99      	ldrb	r1, [r3, #10]
 800824e:	1c4c      	adds	r4, r1, #1
 8008250:	729c      	strb	r4, [r3, #10]
 8008252:	5442      	strb	r2, [r0, r1]
        break;
 8008254:	e6b6      	b.n	8007fc4 <LmhpComplianceOnMcpsIndication+0x164>
        TimerStop(&ProcessTimer);
 8008256:	4807      	ldr	r0, [pc, #28]	; (8008274 <LmhpComplianceOnMcpsIndication+0x414>)
 8008258:	f00a f9d0 	bl	80125fc <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800825c:	4b02      	ldr	r3, [pc, #8]	; (8008268 <LmhpComplianceOnMcpsIndication+0x408>)
 800825e:	2200      	movs	r2, #0
 8008260:	705a      	strb	r2, [r3, #1]
 8008262:	e6bd      	b.n	8007fe0 <LmhpComplianceOnMcpsIndication+0x180>
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	20000600 	.word	0x20000600
 800826c:	200000c8 	.word	0x200000c8
 8008270:	200005fc 	.word	0x200005fc
 8008274:	20000638 	.word	0x20000638

08008278 <LmhpComplianceProcess>:
{
 8008278:	b530      	push	{r4, r5, lr}
 800827a:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 800827c:	4b28      	ldr	r3, [pc, #160]	; (8008320 <LmhpComplianceProcess+0xa8>)
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	b993      	cbnz	r3, 80082a8 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8008282:	4b27      	ldr	r3, [pc, #156]	; (8008320 <LmhpComplianceProcess+0xa8>)
 8008284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008288:	2b00      	cmp	r3, #0
 800828a:	d13f      	bne.n	800830c <LmhpComplianceProcess+0x94>
    if( ComplianceTestState.IsResetCmdPending == true )
 800828c:	4b24      	ldr	r3, [pc, #144]	; (8008320 <LmhpComplianceProcess+0xa8>)
 800828e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008292:	b13b      	cbz	r3, 80082a4 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 8008294:	4b22      	ldr	r3, [pc, #136]	; (8008320 <LmhpComplianceProcess+0xa8>)
 8008296:	2200      	movs	r2, #0
 8008298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if (CompliancePackage.OnSystemReset != NULL)
 800829c:	4b21      	ldr	r3, [pc, #132]	; (8008324 <LmhpComplianceProcess+0xac>)
 800829e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a0:	b103      	cbz	r3, 80082a4 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 80082a2:	4798      	blx	r3
}
 80082a4:	b003      	add	sp, #12
 80082a6:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 80082a8:	f00a f968 	bl	801257c <UTIL_TIMER_GetCurrentTime>
 80082ac:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 80082ae:	4b1c      	ldr	r3, [pc, #112]	; (8008320 <LmhpComplianceProcess+0xa8>)
 80082b0:	685d      	ldr	r5, [r3, #4]
 80082b2:	f7ff f991 	bl	80075d8 <LmHandlerGetDutyCycleWaitTime>
 80082b6:	4405      	add	r5, r0
 80082b8:	42a5      	cmp	r5, r4
 80082ba:	d2e7      	bcs.n	800828c <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 80082bc:	4b18      	ldr	r3, [pc, #96]	; (8008320 <LmhpComplianceProcess+0xa8>)
 80082be:	7a9b      	ldrb	r3, [r3, #10]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0e3      	beq.n	800828c <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData = {
 80082c4:	22e0      	movs	r2, #224	; 0xe0
 80082c6:	f88d 2000 	strb.w	r2, [sp]
 80082ca:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 80082ce:	4b14      	ldr	r3, [pc, #80]	; (8008320 <LmhpComplianceProcess+0xa8>)
 80082d0:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData = {
 80082d2:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 80082d4:	2201      	movs	r2, #1
 80082d6:	7a19      	ldrb	r1, [r3, #8]
 80082d8:	4668      	mov	r0, sp
 80082da:	f7ff f995 	bl	8007608 <LmHandlerSend>
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 80082de:	f110 0f02 	cmn.w	r0, #2
 80082e2:	d009      	beq.n	80082f8 <LmhpComplianceProcess+0x80>
 80082e4:	f110 0f06 	cmn.w	r0, #6
 80082e8:	d006      	beq.n	80082f8 <LmhpComplianceProcess+0x80>
                    ComplianceTestState.IsTxPending = false;
 80082ea:	4b0d      	ldr	r3, [pc, #52]	; (8008320 <LmhpComplianceProcess+0xa8>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 80082f0:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 80082f2:	4b0b      	ldr	r3, [pc, #44]	; (8008320 <LmhpComplianceProcess+0xa8>)
 80082f4:	605c      	str	r4, [r3, #4]
 80082f6:	e7c9      	b.n	800828c <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1000 );
 80082f8:	4d0b      	ldr	r5, [pc, #44]	; (8008328 <LmhpComplianceProcess+0xb0>)
 80082fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80082fe:	4628      	mov	r0, r5
 8008300:	f00a fa1c 	bl	801273c <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 8008304:	4628      	mov	r0, r5
 8008306:	f00a f9d3 	bl	80126b0 <UTIL_TIMER_Start>
 800830a:	e7f2      	b.n	80082f2 <LmhpComplianceProcess+0x7a>
            ComplianceTestState.IsClassReqCmdPending = false;
 800830c:	4b04      	ldr	r3, [pc, #16]	; (8008320 <LmhpComplianceProcess+0xa8>)
 800830e:	2200      	movs	r2, #0
 8008310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8008314:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 8008318:	f7ff fa46 	bl	80077a8 <LmHandlerRequestClass>
 800831c:	e7b6      	b.n	800828c <LmhpComplianceProcess+0x14>
 800831e:	bf00      	nop
 8008320:	20000600 	.word	0x20000600
 8008324:	200000c8 	.word	0x200000c8
 8008328:	20000638 	.word	0x20000638

0800832c <LmhpComplianceInit>:
{
 800832c:	b530      	push	{r4, r5, lr}
 800832e:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8008330:	b188      	cbz	r0, 8008356 <LmhpComplianceInit+0x2a>
 8008332:	4603      	mov	r3, r0
 8008334:	b179      	cbz	r1, 8008356 <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 8008336:	4813      	ldr	r0, [pc, #76]	; (8008384 <LmhpComplianceInit+0x58>)
 8008338:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800833a:	4b13      	ldr	r3, [pc, #76]	; (8008388 <LmhpComplianceInit+0x5c>)
 800833c:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800833e:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8008340:	2201      	movs	r2, #1
 8008342:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8008344:	2200      	movs	r2, #0
 8008346:	9200      	str	r2, [sp, #0]
 8008348:	4b10      	ldr	r3, [pc, #64]	; (800838c <LmhpComplianceInit+0x60>)
 800834a:	f04f 31ff 	mov.w	r1, #4294967295
 800834e:	4810      	ldr	r0, [pc, #64]	; (8008390 <LmhpComplianceInit+0x64>)
 8008350:	f00a f8f6 	bl	8012540 <UTIL_TIMER_Create>
 8008354:	e004      	b.n	8008360 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 8008356:	2300      	movs	r3, #0
 8008358:	4a0a      	ldr	r2, [pc, #40]	; (8008384 <LmhpComplianceInit+0x58>)
 800835a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800835c:	4a0a      	ldr	r2, [pc, #40]	; (8008388 <LmhpComplianceInit+0x5c>)
 800835e:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8008360:	4c09      	ldr	r4, [pc, #36]	; (8008388 <LmhpComplianceInit+0x5c>)
 8008362:	2500      	movs	r5, #0
 8008364:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8008366:	2220      	movs	r2, #32
 8008368:	4629      	mov	r1, r5
 800836a:	f104 0014 	add.w	r0, r4, #20
 800836e:	f007 ff60 	bl	8010232 <memset1>
    ComplianceTestState.IsTxPending = false;
 8008372:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8008374:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8008376:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800837a:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800837e:	b003      	add	sp, #12
 8008380:	bd30      	pop	{r4, r5, pc}
 8008382:	bf00      	nop
 8008384:	200005fc 	.word	0x200005fc
 8008388:	20000600 	.word	0x20000600
 800838c:	08007e49 	.word	0x08007e49
 8008390:	20000638 	.word	0x20000638

08008394 <LmhpCompliancePackageFactory>:
}
 8008394:	4800      	ldr	r0, [pc, #0]	; (8008398 <LmhpCompliancePackageFactory+0x4>)
 8008396:	4770      	bx	lr
 8008398:	200000c8 	.word	0x200000c8

0800839c <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 800839c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800839e:	4a06      	ldr	r2, [pc, #24]	; (80083b8 <OnRadioRxError+0x1c>)
 80083a0:	7813      	ldrb	r3, [r2, #0]
 80083a2:	f043 0304 	orr.w	r3, r3, #4
 80083a6:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80083a8:	4b04      	ldr	r3, [pc, #16]	; (80083bc <OnRadioRxError+0x20>)
 80083aa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80083ae:	b113      	cbz	r3, 80083b6 <OnRadioRxError+0x1a>
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	b103      	cbz	r3, 80083b6 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80083b4:	4798      	blx	r3
    }
}
 80083b6:	bd08      	pop	{r3, pc}
 80083b8:	20000650 	.word	0x20000650
 80083bc:	20000654 	.word	0x20000654

080083c0 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80083c0:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <UpdateRxSlotIdleState+0x20>)
 80083c2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	d004      	beq.n	80083d4 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80083ca:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <UpdateRxSlotIdleState+0x24>)
 80083cc:	2206      	movs	r2, #6
 80083ce:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 80083d2:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 80083d4:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <UpdateRxSlotIdleState+0x24>)
 80083d6:	2202      	movs	r2, #2
 80083d8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	20008000 	.word	0x20008000
 80083e4:	20000654 	.word	0x20000654

080083e8 <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 80083e8:	4b01      	ldr	r3, [pc, #4]	; (80083f0 <LoRaMacEnableRequests+0x8>)
 80083ea:	f883 0496 	strb.w	r0, [r3, #1174]	; 0x496
}
 80083ee:	4770      	bx	lr
 80083f0:	20000654 	.word	0x20000654

080083f4 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 80083f4:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80083f6:	4b15      	ldr	r3, [pc, #84]	; (800844c <LoRaMacHandleIndicationEvents+0x58>)
 80083f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80083fc:	f013 0f08 	tst.w	r3, #8
 8008400:	d00e      	beq.n	8008420 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8008402:	4812      	ldr	r0, [pc, #72]	; (800844c <LoRaMacHandleIndicationEvents+0x58>)
 8008404:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 8008408:	f36f 03c3 	bfc	r3, #3, #1
 800840c:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8008410:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 800841a:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 800841e:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008420:	4b0a      	ldr	r3, [pc, #40]	; (800844c <LoRaMacHandleIndicationEvents+0x58>)
 8008422:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8008426:	f013 0f02 	tst.w	r3, #2
 800842a:	d00e      	beq.n	800844a <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800842c:	4807      	ldr	r0, [pc, #28]	; (800844c <LoRaMacHandleIndicationEvents+0x58>)
 800842e:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 8008432:	f36f 0341 	bfc	r3, #1, #1
 8008436:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800843a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 8008444:	f200 4024 	addw	r0, r0, #1060	; 0x424
 8008448:	4798      	blx	r3
    }
}
 800844a:	bd08      	pop	{r3, pc}
 800844c:	20000654 	.word	0x20000654

08008450 <CheckForMinimumAbpDatarate>:
}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8008450:	b110      	cbz	r0, 8008458 <CheckForMinimumAbpDatarate+0x8>
 8008452:	2901      	cmp	r1, #1
 8008454:	d001      	beq.n	800845a <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 8008456:	2000      	movs	r0, #0
}
 8008458:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800845a:	2a00      	cmp	r2, #0
 800845c:	d0fc      	beq.n	8008458 <CheckForMinimumAbpDatarate+0x8>
    return false;
 800845e:	2000      	movs	r0, #0
 8008460:	4770      	bx	lr
	...

08008464 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008464:	4b07      	ldr	r3, [pc, #28]	; (8008484 <LoRaMacCheckForRxAbort+0x20>)
 8008466:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800846a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800846e:	d008      	beq.n	8008482 <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8008470:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008474:	4a03      	ldr	r2, [pc, #12]	; (8008484 <LoRaMacCheckForRxAbort+0x20>)
 8008476:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800847a:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800847e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8008482:	4770      	bx	lr
 8008484:	20000654 	.word	0x20000654

08008488 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8008488:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <CalculateBackOff+0x1c>)
 800848a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848c:	b94b      	cbnz	r3, 80084a2 <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800848e:	4a05      	ldr	r2, [pc, #20]	; (80084a4 <CalculateBackOff+0x1c>)
 8008490:	f8b2 310c 	ldrh.w	r3, [r2, #268]	; 0x10c
 8008494:	4904      	ldr	r1, [pc, #16]	; (80084a8 <CalculateBackOff+0x20>)
 8008496:	f8d1 1420 	ldr.w	r1, [r1, #1056]	; 0x420
 800849a:	3b01      	subs	r3, #1
 800849c:	fb01 f303 	mul.w	r3, r1, r3
 80084a0:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 80084a2:	4770      	bx	lr
 80084a4:	20008000 	.word	0x20008000
 80084a8:	20000654 	.word	0x20000654

080084ac <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80084ac:	b508      	push	{r3, lr}
 80084ae:	4684      	mov	ip, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80084b4:	4b06      	ldr	r3, [pc, #24]	; (80084d0 <SetTxContinuousWave+0x24>)
 80084b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b8:	4662      	mov	r2, ip
 80084ba:	b249      	sxtb	r1, r1
 80084bc:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80084be:	4a05      	ldr	r2, [pc, #20]	; (80084d4 <SetTxContinuousWave+0x28>)
 80084c0:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 80084c4:	f043 0302 	orr.w	r3, r3, #2
 80084c8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 80084cc:	2000      	movs	r0, #0
 80084ce:	bd08      	pop	{r3, pc}
 80084d0:	080139bc 	.word	0x080139bc
 80084d4:	20000654 	.word	0x20000654

080084d8 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80084d8:	4602      	mov	r2, r0
 80084da:	b1f8      	cbz	r0, 800851c <DetermineFrameType+0x44>
 80084dc:	b301      	cbz	r1, 8008520 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80084de:	7b03      	ldrb	r3, [r0, #12]
 80084e0:	f013 030f 	ands.w	r3, r3, #15
 80084e4:	d005      	beq.n	80084f2 <DetermineFrameType+0x1a>
 80084e6:	f890 0020 	ldrb.w	r0, [r0, #32]
 80084ea:	b110      	cbz	r0, 80084f2 <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 80084ec:	2000      	movs	r0, #0
 80084ee:	7008      	strb	r0, [r1, #0]
 80084f0:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80084f2:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 80084f6:	b910      	cbnz	r0, 80084fe <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 80084f8:	2301      	movs	r3, #1
 80084fa:	700b      	strb	r3, [r1, #0]
 80084fc:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80084fe:	b92b      	cbnz	r3, 800850c <DetermineFrameType+0x34>
 8008500:	f892 0020 	ldrb.w	r0, [r2, #32]
 8008504:	b910      	cbnz	r0, 800850c <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8008506:	2302      	movs	r3, #2
 8008508:	700b      	strb	r3, [r1, #0]
 800850a:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800850c:	b953      	cbnz	r3, 8008524 <DetermineFrameType+0x4c>
 800850e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008512:	b14a      	cbz	r2, 8008528 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8008514:	2203      	movs	r2, #3
 8008516:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8008518:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800851a:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800851c:	2003      	movs	r0, #3
 800851e:	4770      	bx	lr
 8008520:	2003      	movs	r0, #3
 8008522:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8008524:	2018      	movs	r0, #24
 8008526:	4770      	bx	lr
 8008528:	2018      	movs	r0, #24
}
 800852a:	4770      	bx	lr

0800852c <CheckRetrans>:
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 800852c:	4288      	cmp	r0, r1
 800852e:	d201      	bcs.n	8008534 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 8008530:	2000      	movs	r0, #0
 8008532:	4770      	bx	lr
        return true;
 8008534:	2001      	movs	r0, #1
}
 8008536:	4770      	bx	lr

08008538 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8008538:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800853a:	4b0b      	ldr	r3, [pc, #44]	; (8008568 <CheckRetransUnconfirmedUplink+0x30>)
 800853c:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8008540:	4b0a      	ldr	r3, [pc, #40]	; (800856c <CheckRetransUnconfirmedUplink+0x34>)
 8008542:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 8008546:	f7ff fff1 	bl	800852c <CheckRetrans>
 800854a:	b950      	cbnz	r0, 8008562 <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800854c:	4b07      	ldr	r3, [pc, #28]	; (800856c <CheckRetransUnconfirmedUplink+0x34>)
 800854e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8008552:	f013 0f02 	tst.w	r3, #2
 8008556:	d004      	beq.n	8008562 <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008558:	4b04      	ldr	r3, [pc, #16]	; (800856c <CheckRetransUnconfirmedUplink+0x34>)
 800855a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800855e:	2b01      	cmp	r3, #1
 8008560:	d900      	bls.n	8008564 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 8008562:	bd08      	pop	{r3, pc}
            return true;
 8008564:	2001      	movs	r0, #1
 8008566:	e7fc      	b.n	8008562 <CheckRetransUnconfirmedUplink+0x2a>
 8008568:	20008000 	.word	0x20008000
 800856c:	20000654 	.word	0x20000654

08008570 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8008570:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8008572:	4b09      	ldr	r3, [pc, #36]	; (8008598 <CheckRetransConfirmedUplink+0x28>)
 8008574:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8008578:	4b08      	ldr	r3, [pc, #32]	; (800859c <CheckRetransConfirmedUplink+0x2c>)
 800857a:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800857e:	f7ff ffd5 	bl	800852c <CheckRetrans>
 8008582:	b940      	cbnz	r0, 8008596 <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008584:	4b05      	ldr	r3, [pc, #20]	; (800859c <CheckRetransConfirmedUplink+0x2c>)
 8008586:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800858a:	f013 0f02 	tst.w	r3, #2
 800858e:	d002      	beq.n	8008596 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008590:	4b02      	ldr	r3, [pc, #8]	; (800859c <CheckRetransConfirmedUplink+0x2c>)
 8008592:	f893 0448 	ldrb.w	r0, [r3, #1096]	; 0x448
        {
            return true;
        }
    }
    return false;
}
 8008596:	bd08      	pop	{r3, pc}
 8008598:	20008000 	.word	0x20008000
 800859c:	20000654 	.word	0x20000654

080085a0 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 80085a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80085a4:	d000      	beq.n	80085a8 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 80085a6:	3001      	adds	r0, #1
    }
    return counter;
}
 80085a8:	4770      	bx	lr
	...

080085ac <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80085ac:	b510      	push	{r4, lr}
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80085ae:	4b12      	ldr	r3, [pc, #72]	; (80085f8 <StopRetransmission+0x4c>)
 80085b0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80085b4:	f013 0f02 	tst.w	r3, #2
 80085b8:	d004      	beq.n	80085c4 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80085ba:	4b0f      	ldr	r3, [pc, #60]	; (80085f8 <StopRetransmission+0x4c>)
 80085bc:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d908      	bls.n	80085d6 <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80085c4:	4b0d      	ldr	r3, [pc, #52]	; (80085fc <StopRetransmission+0x50>)
 80085c6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80085ca:	b123      	cbz	r3, 80085d6 <StopRetransmission+0x2a>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 80085cc:	4c0b      	ldr	r4, [pc, #44]	; (80085fc <StopRetransmission+0x50>)
 80085ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80085d0:	f7ff ffe6 	bl	80085a0 <IncreaseAdrAckCounter>
 80085d4:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 80085d6:	4b08      	ldr	r3, [pc, #32]	; (80085f8 <StopRetransmission+0x4c>)
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 80085de:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80085e2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80085e6:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80085ea:	f022 0202 	bic.w	r2, r2, #2
 80085ee:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 80085f2:	2001      	movs	r0, #1
 80085f4:	bd10      	pop	{r4, pc}
 80085f6:	bf00      	nop
 80085f8:	20000654 	.word	0x20000654
 80085fc:	20008000 	.word	0x20008000

08008600 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8008600:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008602:	4b04      	ldr	r3, [pc, #16]	; (8008614 <CallNvmDataChangeCallback+0x14>)
 8008604:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008608:	b113      	cbz	r3, 8008610 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800860a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800860c:	b103      	cbz	r3, 8008610 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800860e:	4798      	blx	r3
    }
}
 8008610:	bd08      	pop	{r3, pc}
 8008612:	bf00      	nop
 8008614:	20000654 	.word	0x20000654

08008618 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8008618:	4b04      	ldr	r3, [pc, #16]	; (800862c <IsRequestPending+0x14>)
 800861a:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
 800861e:	f010 0005 	ands.w	r0, r0, #5
 8008622:	d100      	bne.n	8008626 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 8008624:	4770      	bx	lr
        return 1;
 8008626:	2001      	movs	r0, #1
 8008628:	e7fc      	b.n	8008624 <IsRequestPending+0xc>
 800862a:	bf00      	nop
 800862c:	20000654 	.word	0x20000654

08008630 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8008630:	b500      	push	{lr}
 8008632:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008634:	4b0d      	ldr	r3, [pc, #52]	; (800866c <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8008636:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800863a:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800863e:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008642:	220d      	movs	r2, #13
 8008644:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008648:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800864c:	b113      	cbz	r3, 8008654 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800864e:	230e      	movs	r3, #14
 8008650:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008654:	a902      	add	r1, sp, #8
 8008656:	4b05      	ldr	r3, [pc, #20]	; (800866c <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8008658:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800865c:	f005 fbc2 	bl	800dde4 <RegionGetPhyParam>
 8008660:	9001      	str	r0, [sp, #4]
}
 8008662:	b2c0      	uxtb	r0, r0
 8008664:	b005      	add	sp, #20
 8008666:	f85d fb04 	ldr.w	pc, [sp], #4
 800866a:	bf00      	nop
 800866c:	20008000 	.word	0x20008000

08008670 <ValidatePayloadLength>:
{
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4605      	mov	r5, r0
 8008674:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8008676:	4608      	mov	r0, r1
 8008678:	f7ff ffda 	bl	8008630 <GetMaxAppPayloadWithoutFOptsLength>
 800867c:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 800867e:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8008680:	4293      	cmp	r3, r2
 8008682:	d303      	bcc.n	800868c <ValidatePayloadLength+0x1c>
 8008684:	2aff      	cmp	r2, #255	; 0xff
 8008686:	d903      	bls.n	8008690 <ValidatePayloadLength+0x20>
    return false;
 8008688:	2000      	movs	r0, #0
 800868a:	e000      	b.n	800868e <ValidatePayloadLength+0x1e>
 800868c:	2000      	movs	r0, #0
}
 800868e:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8008690:	2001      	movs	r0, #1
 8008692:	e7fc      	b.n	800868e <ValidatePayloadLength+0x1e>

08008694 <ProcessRadioTxDone>:
{
 8008694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008696:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008698:	4b35      	ldr	r3, [pc, #212]	; (8008770 <ProcessRadioTxDone+0xdc>)
 800869a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d002      	beq.n	80086a8 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 80086a2:	4b34      	ldr	r3, [pc, #208]	; (8008774 <ProcessRadioTxDone+0xe0>)
 80086a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a6:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80086a8:	4c33      	ldr	r4, [pc, #204]	; (8008778 <ProcessRadioTxDone+0xe4>)
 80086aa:	f504 7560 	add.w	r5, r4, #896	; 0x380
 80086ae:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 80086b2:	4628      	mov	r0, r5
 80086b4:	f00a f842 	bl	801273c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80086b8:	4628      	mov	r0, r5
 80086ba:	f009 fff9 	bl	80126b0 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80086be:	f504 7566 	add.w	r5, r4, #920	; 0x398
 80086c2:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 80086c6:	4628      	mov	r0, r5
 80086c8:	f00a f838 	bl	801273c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80086cc:	4628      	mov	r0, r5
 80086ce:	f009 ffef 	bl	80126b0 <UTIL_TIMER_Start>
    if( MacCtx.NodeAckRequested == true )
 80086d2:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d134      	bne.n	8008744 <ProcessRadioTxDone+0xb0>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80086da:	4b27      	ldr	r3, [pc, #156]	; (8008778 <ProcessRadioTxDone+0xe4>)
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80086e2:	4b26      	ldr	r3, [pc, #152]	; (800877c <ProcessRadioTxDone+0xe8>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4c22      	ldr	r4, [pc, #136]	; (8008770 <ProcessRadioTxDone+0xdc>)
 80086e8:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 80086ea:	4f23      	ldr	r7, [pc, #140]	; (8008778 <ProcessRadioTxDone+0xe4>)
 80086ec:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 80086f0:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80086f4:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80086f6:	ae0c      	add	r6, sp, #48	; 0x30
 80086f8:	4630      	mov	r0, r6
 80086fa:	f009 feb3 	bl	8012464 <SysTimeGetMcuTime>
 80086fe:	ad02      	add	r5, sp, #8
 8008700:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800870a:	e896 0006 	ldmia.w	r6, {r1, r2}
 800870e:	4628      	mov	r0, r5
 8008710:	f009 fe45 	bl	801239e <SysTimeSub>
 8008714:	ab07      	add	r3, sp, #28
 8008716:	e895 0003 	ldmia.w	r5, {r0, r1}
 800871a:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800871e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8008722:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8008724:	2301      	movs	r3, #1
 8008726:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800872a:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800872e:	b90b      	cbnz	r3, 8008734 <ProcessRadioTxDone+0xa0>
        txDone.Joined  = false;
 8008730:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8008734:	a904      	add	r1, sp, #16
 8008736:	4b0e      	ldr	r3, [pc, #56]	; (8008770 <ProcessRadioTxDone+0xdc>)
 8008738:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800873c:	f005 fb63 	bl	800de06 <RegionSetBandTxDone>
}
 8008740:	b00f      	add	sp, #60	; 0x3c
 8008742:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8008744:	2315      	movs	r3, #21
 8008746:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800874a:	a90a      	add	r1, sp, #40	; 0x28
 800874c:	4b08      	ldr	r3, [pc, #32]	; (8008770 <ProcessRadioTxDone+0xdc>)
 800874e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008752:	f005 fb47 	bl	800dde4 <RegionGetPhyParam>
 8008756:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008758:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800875c:	f204 4404 	addw	r4, r4, #1028	; 0x404
 8008760:	4401      	add	r1, r0
 8008762:	4620      	mov	r0, r4
 8008764:	f009 ffea 	bl	801273c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8008768:	4620      	mov	r0, r4
 800876a:	f009 ffa1 	bl	80126b0 <UTIL_TIMER_Start>
 800876e:	e7b8      	b.n	80086e2 <ProcessRadioTxDone+0x4e>
 8008770:	20008000 	.word	0x20008000
 8008774:	080139bc 	.word	0x080139bc
 8008778:	20000654 	.word	0x20000654
 800877c:	20000c14 	.word	0x20000c14

08008780 <OnRetransmitTimeoutTimerEvent>:
{
 8008780:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8008782:	4c09      	ldr	r4, [pc, #36]	; (80087a8 <OnRetransmitTimeoutTimerEvent+0x28>)
 8008784:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8008788:	f009 ff38 	bl	80125fc <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800878c:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8008790:	b113      	cbz	r3, 8008798 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 8008792:	2201      	movs	r2, #1
 8008794:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008798:	4b03      	ldr	r3, [pc, #12]	; (80087a8 <OnRetransmitTimeoutTimerEvent+0x28>)
 800879a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800879e:	b113      	cbz	r3, 80087a6 <OnRetransmitTimeoutTimerEvent+0x26>
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	b103      	cbz	r3, 80087a6 <OnRetransmitTimeoutTimerEvent+0x26>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80087a4:	4798      	blx	r3
}
 80087a6:	bd10      	pop	{r4, pc}
 80087a8:	20000654 	.word	0x20000654

080087ac <PrepareRxDoneAbort>:
{
 80087ac:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80087ae:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <PrepareRxDoneAbort+0x3c>)
 80087b0:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80087b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80087b8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 80087bc:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 80087c0:	b973      	cbnz	r3, 80087e0 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80087c2:	4b09      	ldr	r3, [pc, #36]	; (80087e8 <PrepareRxDoneAbort+0x3c>)
 80087c4:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 80087c8:	f042 0202 	orr.w	r2, r2, #2
 80087cc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 80087d0:	b2d2      	uxtb	r2, r2
 80087d2:	f042 0220 	orr.w	r2, r2, #32
 80087d6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 80087da:	f7ff fdf1 	bl	80083c0 <UpdateRxSlotIdleState>
}
 80087de:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 80087e0:	2000      	movs	r0, #0
 80087e2:	f7ff ffcd 	bl	8008780 <OnRetransmitTimeoutTimerEvent>
 80087e6:	e7ec      	b.n	80087c2 <PrepareRxDoneAbort+0x16>
 80087e8:	20000654 	.word	0x20000654

080087ec <LoRaMacCheckForBeaconAcquisition>:
{
 80087ec:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80087ee:	200b      	movs	r0, #11
 80087f0:	f004 fd90 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 80087f4:	b188      	cbz	r0, 800881a <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80087f6:	4b0b      	ldr	r3, [pc, #44]	; (8008824 <LoRaMacCheckForBeaconAcquisition+0x38>)
 80087f8:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80087fc:	f010 0f01 	tst.w	r0, #1
 8008800:	d10d      	bne.n	800881e <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008802:	f010 0004 	ands.w	r0, r0, #4
 8008806:	d009      	beq.n	800881c <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008808:	461a      	mov	r2, r3
 800880a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800880e:	f023 0302 	bic.w	r3, r3, #2
 8008812:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8008816:	2001      	movs	r0, #1
 8008818:	e000      	b.n	800881c <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800881a:	2000      	movs	r0, #0
}
 800881c:	bd08      	pop	{r3, pc}
    return 0x00;
 800881e:	2000      	movs	r0, #0
 8008820:	e7fc      	b.n	800881c <LoRaMacCheckForBeaconAcquisition+0x30>
 8008822:	bf00      	nop
 8008824:	20000654 	.word	0x20000654

08008828 <GetFCntDown>:
{
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	9c04      	ldr	r4, [sp, #16]
 800882c:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800882e:	b1f2      	cbz	r2, 800886e <GetFCntDown+0x46>
 8008830:	4694      	mov	ip, r2
 8008832:	b1f4      	cbz	r4, 8008872 <GetFCntDown+0x4a>
 8008834:	b1fd      	cbz	r5, 8008876 <GetFCntDown+0x4e>
    switch( addrID )
 8008836:	b188      	cbz	r0, 800885c <GetFCntDown+0x34>
 8008838:	2801      	cmp	r0, #1
 800883a:	d11e      	bne.n	800887a <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 800883c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008840:	2b01      	cmp	r3, #1
 8008842:	d002      	beq.n	800884a <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 8008844:	2303      	movs	r3, #3
 8008846:	7023      	strb	r3, [r4, #0]
 8008848:	e00a      	b.n	8008860 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800884a:	b121      	cbz	r1, 8008856 <GetFCntDown+0x2e>
 800884c:	2903      	cmp	r1, #3
 800884e:	d002      	beq.n	8008856 <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8008850:	2301      	movs	r3, #1
 8008852:	7023      	strb	r3, [r4, #0]
 8008854:	e004      	b.n	8008860 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 8008856:	2302      	movs	r3, #2
 8008858:	7023      	strb	r3, [r4, #0]
 800885a:	e001      	b.n	8008860 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 800885c:	2304      	movs	r3, #4
 800885e:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8008860:	462a      	mov	r2, r5
 8008862:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 8008866:	7820      	ldrb	r0, [r4, #0]
 8008868:	f004 ff76 	bl	800d758 <LoRaMacCryptoGetFCntDown>
}
 800886c:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800886e:	2009      	movs	r0, #9
 8008870:	e7fc      	b.n	800886c <GetFCntDown+0x44>
 8008872:	2009      	movs	r0, #9
 8008874:	e7fa      	b.n	800886c <GetFCntDown+0x44>
 8008876:	2009      	movs	r0, #9
 8008878:	e7f8      	b.n	800886c <GetFCntDown+0x44>
    switch( addrID )
 800887a:	2005      	movs	r0, #5
 800887c:	e7f6      	b.n	800886c <GetFCntDown+0x44>

0800887e <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800887e:	2801      	cmp	r0, #1
 8008880:	d900      	bls.n	8008884 <RemoveMacCommands+0x6>
 8008882:	4770      	bx	lr
{
 8008884:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 8008886:	2a01      	cmp	r2, #1
 8008888:	d105      	bne.n	8008896 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800888a:	f011 0f20 	tst.w	r1, #32
 800888e:	d004      	beq.n	800889a <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8008890:	f004 fbdc 	bl	800d04c <LoRaMacCommandsRemoveStickyAnsCmds>
 8008894:	e001      	b.n	800889a <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8008896:	f004 fbd9 	bl	800d04c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800889a:	bd08      	pop	{r3, pc}

0800889c <ProcessMacCommands>:
{
 800889c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a0:	b08f      	sub	sp, #60	; 0x3c
 80088a2:	4698      	mov	r8, r3
    uint8_t status = 0;
 80088a4:	2300      	movs	r3, #0
 80088a6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80088aa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 80088ae:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	f200 82d9 	bhi.w	8008e6a <ProcessMacCommands+0x5ce>
 80088b8:	4605      	mov	r5, r0
 80088ba:	460c      	mov	r4, r1
 80088bc:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 80088be:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 80088c2:	42bc      	cmp	r4, r7
 80088c4:	f080 82d1 	bcs.w	8008e6a <ProcessMacCommands+0x5ce>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80088c8:	5d28      	ldrb	r0, [r5, r4]
 80088ca:	f004 fc27 	bl	800d11c <LoRaMacCommandsGetCmdSize>
 80088ce:	4420      	add	r0, r4
 80088d0:	42b8      	cmp	r0, r7
 80088d2:	f300 82ca 	bgt.w	8008e6a <ProcessMacCommands+0x5ce>
        switch( payload[macIndex++] )
 80088d6:	1c66      	adds	r6, r4, #1
 80088d8:	b2f6      	uxtb	r6, r6
 80088da:	5d2b      	ldrb	r3, [r5, r4]
 80088dc:	3b02      	subs	r3, #2
 80088de:	2b11      	cmp	r3, #17
 80088e0:	f200 82c3 	bhi.w	8008e6a <ProcessMacCommands+0x5ce>
 80088e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80088e8:	00280012 	.word	0x00280012
 80088ec:	00c000ad 	.word	0x00c000ad
 80088f0:	011e0106 	.word	0x011e0106
 80088f4:	01740157 	.word	0x01740157
 80088f8:	02c101bf 	.word	0x02c101bf
 80088fc:	01ef02c1 	.word	0x01ef02c1
 8008900:	02c102c1 	.word	0x02c102c1
 8008904:	02680251 	.word	0x02680251
 8008908:	02a10287 	.word	0x02a10287
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800890c:	2004      	movs	r0, #4
 800890e:	f004 fd01 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 8008912:	b908      	cbnz	r0, 8008918 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 8008914:	4634      	mov	r4, r6
 8008916:	e7d4      	b.n	80088c2 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8008918:	2104      	movs	r1, #4
 800891a:	2000      	movs	r0, #0
 800891c:	f004 fcae 	bl	800d27c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8008920:	1ca3      	adds	r3, r4, #2
 8008922:	b2db      	uxtb	r3, r3
 8008924:	5da9      	ldrb	r1, [r5, r6]
 8008926:	4aa7      	ldr	r2, [pc, #668]	; (8008bc4 <ProcessMacCommands+0x328>)
 8008928:	f882 1460 	strb.w	r1, [r2, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800892c:	3403      	adds	r4, #3
 800892e:	b2e4      	uxtb	r4, r4
 8008930:	5ceb      	ldrb	r3, [r5, r3]
 8008932:	f882 3461 	strb.w	r3, [r2, #1121]	; 0x461
 8008936:	e7c4      	b.n	80088c2 <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 8008938:	2300      	movs	r3, #0
 800893a:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800893e:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 8008942:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 8008946:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800894a:	f1b9 0f00 	cmp.w	r9, #0
 800894e:	d036      	beq.n	80089be <ProcessMacCommands+0x122>
                    macIndex += 4;
 8008950:	3405      	adds	r4, #5
 8008952:	b2e4      	uxtb	r4, r4
 8008954:	e7b5      	b.n	80088c2 <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 8008956:	2305      	movs	r3, #5
 8008958:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800895c:	e050      	b.n	8008a00 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800895e:	4b9a      	ldr	r3, [pc, #616]	; (8008bc8 <ProcessMacCommands+0x32c>)
 8008960:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8008964:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 8008968:	4293      	cmp	r3, r2
 800896a:	da03      	bge.n	8008974 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800896c:	4b96      	ldr	r3, [pc, #600]	; (8008bc8 <ProcessMacCommands+0x32c>)
 800896e:	2101      	movs	r1, #1
 8008970:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8008974:	4b94      	ldr	r3, [pc, #592]	; (8008bc8 <ProcessMacCommands+0x32c>)
 8008976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800897a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800897e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8008982:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8008986:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800898a:	e04d      	b.n	8008a28 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800898c:	2201      	movs	r2, #1
 800898e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 8008992:	2003      	movs	r0, #3
 8008994:	f004 fafa 	bl	800cf8c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8008998:	3401      	adds	r4, #1
 800899a:	b2e4      	uxtb	r4, r4
 800899c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80089a0:	498a      	ldr	r1, [pc, #552]	; (8008bcc <ProcessMacCommands+0x330>)
 80089a2:	fba1 2103 	umull	r2, r1, r1, r3
 80089a6:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 80089aa:	d3ef      	bcc.n	800898c <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 80089ac:	441e      	add	r6, r3
 80089ae:	b2f6      	uxtb	r6, r6
 80089b0:	1e74      	subs	r4, r6, #1
 80089b2:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 80089b4:	42a7      	cmp	r7, r4
 80089b6:	d93a      	bls.n	8008a2e <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80089b8:	5d2b      	ldrb	r3, [r5, r4]
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d136      	bne.n	8008a2c <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80089be:	1e73      	subs	r3, r6, #1
 80089c0:	442b      	add	r3, r5
 80089c2:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80089c4:	4b80      	ldr	r3, [pc, #512]	; (8008bc8 <ProcessMacCommands+0x32c>)
 80089c6:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80089ca:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80089ce:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
 80089d2:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80089d6:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 80089da:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80089de:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 80089e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80089e6:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 80089ea:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80089ee:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80089f2:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80089f4:	2a00      	cmp	r2, #0
 80089f6:	d0ae      	beq.n	8008956 <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80089f8:	1bbb      	subs	r3, r7, r6
 80089fa:	3301      	adds	r3, #1
 80089fc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8008a00:	ab05      	add	r3, sp, #20
 8008a02:	9301      	str	r3, [sp, #4]
 8008a04:	ab03      	add	r3, sp, #12
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	f10d 030b 	add.w	r3, sp, #11
 8008a0c:	f10d 020a 	add.w	r2, sp, #10
 8008a10:	a907      	add	r1, sp, #28
 8008a12:	486d      	ldr	r0, [pc, #436]	; (8008bc8 <ProcessMacCommands+0x32c>)
 8008a14:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8008a18:	f005 fa44 	bl	800dea4 <RegionLinkAdrReq>
 8008a1c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 8008a20:	f000 0007 	and.w	r0, r0, #7
 8008a24:	2807      	cmp	r0, #7
 8008a26:	d09a      	beq.n	800895e <ProcessMacCommands+0xc2>
{
 8008a28:	2400      	movs	r4, #0
 8008a2a:	e7b7      	b.n	800899c <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8008a2c:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 8008a2e:	42bc      	cmp	r4, r7
 8008a30:	d204      	bcs.n	8008a3c <ProcessMacCommands+0x1a0>
                        macIndex--;
 8008a32:	3c01      	subs	r4, #1
 8008a34:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 8008a36:	f04f 0901 	mov.w	r9, #1
 8008a3a:	e742      	b.n	80088c2 <ProcessMacCommands+0x26>
 8008a3c:	f04f 0901 	mov.w	r9, #1
                break;
 8008a40:	e73f      	b.n	80088c2 <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008a42:	3402      	adds	r4, #2
 8008a44:	b2e4      	uxtb	r4, r4
 8008a46:	5dab      	ldrb	r3, [r5, r6]
 8008a48:	f003 030f 	and.w	r3, r3, #15
 8008a4c:	495e      	ldr	r1, [pc, #376]	; (8008bc8 <ProcessMacCommands+0x32c>)
 8008a4e:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8008a52:	2201      	movs	r2, #1
 8008a54:	fa02 f303 	lsl.w	r3, r2, r3
 8008a58:	f8a1 310c 	strh.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	a90b      	add	r1, sp, #44	; 0x2c
 8008a60:	2004      	movs	r0, #4
 8008a62:	f004 fa93 	bl	800cf8c <LoRaMacCommandsAddCmd>
                break;
 8008a66:	e72c      	b.n	80088c2 <ProcessMacCommands+0x26>
                status = 0x07;
 8008a68:	2307      	movs	r3, #7
 8008a6a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8008a6e:	5dab      	ldrb	r3, [r5, r6]
 8008a70:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008a74:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8008a78:	57ab      	ldrsb	r3, [r5, r6]
 8008a7a:	f003 030f 	and.w	r3, r3, #15
 8008a7e:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 8008a82:	1ca3      	adds	r3, r4, #2
 8008a84:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008a86:	1ce1      	adds	r1, r4, #3
 8008a88:	b2c9      	uxtb	r1, r1
 8008a8a:	5ceb      	ldrb	r3, [r5, r3]
 8008a8c:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008a8e:	1d22      	adds	r2, r4, #4
 8008a90:	b2d2      	uxtb	r2, r2
 8008a92:	5c69      	ldrb	r1, [r5, r1]
 8008a94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008a98:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008a9a:	3405      	adds	r4, #5
 8008a9c:	b2e4      	uxtb	r4, r4
 8008a9e:	5caa      	ldrb	r2, [r5, r2]
 8008aa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aa4:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 8008aa6:	2264      	movs	r2, #100	; 0x64
 8008aa8:	fb02 f303 	mul.w	r3, r2, r3
 8008aac:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8008aae:	a907      	add	r1, sp, #28
 8008ab0:	4b45      	ldr	r3, [pc, #276]	; (8008bc8 <ProcessMacCommands+0x32c>)
 8008ab2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008ab6:	f005 fa07 	bl	800dec8 <RegionRxParamSetupReq>
 8008aba:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8008abe:	f000 0307 	and.w	r3, r0, #7
 8008ac2:	2b07      	cmp	r3, #7
 8008ac4:	d007      	beq.n	8008ad6 <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 8008ac6:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8008aca:	2201      	movs	r2, #1
 8008acc:	a90b      	add	r1, sp, #44	; 0x2c
 8008ace:	2005      	movs	r0, #5
 8008ad0:	f004 fa5c 	bl	800cf8c <LoRaMacCommandsAddCmd>
                break;
 8008ad4:	e6f5      	b.n	80088c2 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8008ad6:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8008ada:	4b3b      	ldr	r3, [pc, #236]	; (8008bc8 <ProcessMacCommands+0x32c>)
 8008adc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008ae0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8008ae4:	9a08      	ldr	r2, [sp, #32]
 8008ae6:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8008ae8:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8008aea:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8008aee:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8008af2:	e7e8      	b.n	8008ac6 <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8008af4:	4b33      	ldr	r3, [pc, #204]	; (8008bc4 <ProcessMacCommands+0x328>)
 8008af6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008afa:	b17b      	cbz	r3, 8008b1c <ProcessMacCommands+0x280>
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	b17b      	cbz	r3, 8008b20 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008b00:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8008b02:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8008b06:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 8008b0a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8008b0e:	2202      	movs	r2, #2
 8008b10:	a90b      	add	r1, sp, #44	; 0x2c
 8008b12:	2006      	movs	r0, #6
 8008b14:	f004 fa3a 	bl	800cf8c <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8008b18:	4634      	mov	r4, r6
                break;
 8008b1a:	e6d2      	b.n	80088c2 <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008b1c:	20ff      	movs	r0, #255	; 0xff
 8008b1e:	e7f0      	b.n	8008b02 <ProcessMacCommands+0x266>
 8008b20:	20ff      	movs	r0, #255	; 0xff
 8008b22:	e7ee      	b.n	8008b02 <ProcessMacCommands+0x266>
                status = 0x03;
 8008b24:	2303      	movs	r3, #3
 8008b26:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8008b2a:	1ca3      	adds	r3, r4, #2
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	57aa      	ldrsb	r2, [r5, r6]
 8008b30:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 8008b34:	aa07      	add	r2, sp, #28
 8008b36:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008b38:	1ce2      	adds	r2, r4, #3
 8008b3a:	b2d2      	uxtb	r2, r2
 8008b3c:	5ceb      	ldrb	r3, [r5, r3]
 8008b3e:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008b40:	1d21      	adds	r1, r4, #4
 8008b42:	b2c9      	uxtb	r1, r1
 8008b44:	5caa      	ldrb	r2, [r5, r2]
 8008b46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008b4a:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008b4c:	1d62      	adds	r2, r4, #5
 8008b4e:	b2d2      	uxtb	r2, r2
 8008b50:	5c69      	ldrb	r1, [r5, r1]
 8008b52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b56:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 8008b58:	2164      	movs	r1, #100	; 0x64
 8008b5a:	fb01 f303 	mul.w	r3, r1, r3
 8008b5e:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8008b60:	2300      	movs	r3, #0
 8008b62:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 8008b64:	3406      	adds	r4, #6
 8008b66:	b2e4      	uxtb	r4, r4
 8008b68:	56ab      	ldrsb	r3, [r5, r2]
 8008b6a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8008b6e:	a905      	add	r1, sp, #20
 8008b70:	4b15      	ldr	r3, [pc, #84]	; (8008bc8 <ProcessMacCommands+0x32c>)
 8008b72:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008b76:	f005 f9b0 	bl	800deda <RegionNewChannelReq>
 8008b7a:	b2c3      	uxtb	r3, r0
 8008b7c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8008b80:	2800      	cmp	r0, #0
 8008b82:	f6ff ae9e 	blt.w	80088c2 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 8008b86:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	a90b      	add	r1, sp, #44	; 0x2c
 8008b8e:	2007      	movs	r0, #7
 8008b90:	f004 f9fc 	bl	800cf8c <LoRaMacCommandsAddCmd>
                break;
 8008b94:	e695      	b.n	80088c2 <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008b96:	3402      	adds	r4, #2
 8008b98:	b2e4      	uxtb	r4, r4
 8008b9a:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 8008b9c:	f013 030f 	ands.w	r3, r3, #15
 8008ba0:	d100      	bne.n	8008ba4 <ProcessMacCommands+0x308>
                    delay++;
 8008ba2:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8008ba4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ba8:	fb02 f303 	mul.w	r3, r2, r3
 8008bac:	4a06      	ldr	r2, [pc, #24]	; (8008bc8 <ProcessMacCommands+0x32c>)
 8008bae:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008bb0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008bb4:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	a90b      	add	r1, sp, #44	; 0x2c
 8008bba:	2008      	movs	r0, #8
 8008bbc:	f004 f9e6 	bl	800cf8c <LoRaMacCommandsAddCmd>
                break;
 8008bc0:	e67f      	b.n	80088c2 <ProcessMacCommands+0x26>
 8008bc2:	bf00      	nop
 8008bc4:	20000654 	.word	0x20000654
 8008bc8:	20008000 	.word	0x20008000
 8008bcc:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 8008bd0:	3402      	adds	r4, #2
 8008bd2:	b2e4      	uxtb	r4, r4
 8008bd4:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8008bdc:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008be0:	f013 0f20 	tst.w	r3, #32
 8008be4:	d002      	beq.n	8008bec <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8008be6:	2201      	movs	r2, #1
 8008be8:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008bec:	f013 0f10 	tst.w	r3, #16
 8008bf0:	d002      	beq.n	8008bf8 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008bf8:	f003 030f 	and.w	r3, r3, #15
 8008bfc:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008c00:	a903      	add	r1, sp, #12
 8008c02:	4b9b      	ldr	r3, [pc, #620]	; (8008e70 <ProcessMacCommands+0x5d4>)
 8008c04:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008c08:	f005 f970 	bl	800deec <RegionTxParamSetupReq>
 8008c0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008c10:	f43f ae57 	beq.w	80088c2 <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8008c14:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8008c18:	4e95      	ldr	r6, [pc, #596]	; (8008e70 <ProcessMacCommands+0x5d4>)
 8008c1a:	f886 a074 	strb.w	sl, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8008c1e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8008c22:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8008c26:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008c2a:	4a92      	ldr	r2, [pc, #584]	; (8008e74 <ProcessMacCommands+0x5d8>)
 8008c2c:	5cd0      	ldrb	r0, [r2, r3]
 8008c2e:	f7f7 fe1d 	bl	800086c <__aeabi_ui2f>
 8008c32:	67b0      	str	r0, [r6, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8008c34:	2302      	movs	r3, #2
 8008c36:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008c3a:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008c3e:	a907      	add	r1, sp, #28
 8008c40:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 8008c44:	f005 f8ce 	bl	800dde4 <RegionGetPhyParam>
 8008c48:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008c4a:	b240      	sxtb	r0, r0
 8008c4c:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8008c50:	4298      	cmp	r0, r3
 8008c52:	bfb8      	it	lt
 8008c54:	4618      	movlt	r0, r3
 8008c56:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	a90b      	add	r1, sp, #44	; 0x2c
 8008c5e:	2009      	movs	r0, #9
 8008c60:	f004 f994 	bl	800cf8c <LoRaMacCommandsAddCmd>
                break;
 8008c64:	e62d      	b.n	80088c2 <ProcessMacCommands+0x26>
                status = 0x03;
 8008c66:	2303      	movs	r3, #3
 8008c68:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8008c6c:	1ca3      	adds	r3, r4, #2
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	5daa      	ldrb	r2, [r5, r6]
 8008c72:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008c76:	1ce1      	adds	r1, r4, #3
 8008c78:	b2c9      	uxtb	r1, r1
 8008c7a:	5ceb      	ldrb	r3, [r5, r3]
 8008c7c:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008c7e:	1d22      	adds	r2, r4, #4
 8008c80:	b2d2      	uxtb	r2, r2
 8008c82:	5c69      	ldrb	r1, [r5, r1]
 8008c84:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008c88:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008c8a:	3405      	adds	r4, #5
 8008c8c:	b2e4      	uxtb	r4, r4
 8008c8e:	5caa      	ldrb	r2, [r5, r2]
 8008c90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c94:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 8008c96:	2264      	movs	r2, #100	; 0x64
 8008c98:	fb02 f303 	mul.w	r3, r2, r3
 8008c9c:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8008c9e:	a907      	add	r1, sp, #28
 8008ca0:	4b73      	ldr	r3, [pc, #460]	; (8008e70 <ProcessMacCommands+0x5d4>)
 8008ca2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008ca6:	f005 f92a 	bl	800defe <RegionDlChannelReq>
 8008caa:	b2c3      	uxtb	r3, r0
 8008cac:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	f6ff ae06 	blt.w	80088c2 <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 8008cb6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008cba:	2201      	movs	r2, #1
 8008cbc:	a90b      	add	r1, sp, #44	; 0x2c
 8008cbe:	200a      	movs	r0, #10
 8008cc0:	f004 f964 	bl	800cf8c <LoRaMacCommandsAddCmd>
                break;
 8008cc4:	e5fd      	b.n	80088c2 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8008cc6:	2009      	movs	r0, #9
 8008cc8:	f004 fb24 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 8008ccc:	b928      	cbnz	r0, 8008cda <ProcessMacCommands+0x43e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008cce:	4b6a      	ldr	r3, [pc, #424]	; (8008e78 <ProcessMacCommands+0x5dc>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
        switch( payload[macIndex++] )
 8008cd6:	4634      	mov	r4, r6
 8008cd8:	e5f3      	b.n	80088c2 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8008cda:	2109      	movs	r1, #9
 8008cdc:	2000      	movs	r0, #0
 8008cde:	f004 facd 	bl	800d27c <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8008ce2:	a803      	add	r0, sp, #12
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	9303      	str	r3, [sp, #12]
 8008ce8:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 8008cea:	f10d 0a14 	add.w	sl, sp, #20
 8008cee:	9305      	str	r3, [sp, #20]
 8008cf0:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 8008cf2:	f10d 0b1c 	add.w	fp, sp, #28
 8008cf6:	9307      	str	r3, [sp, #28]
 8008cf8:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008cfa:	1ca1      	adds	r1, r4, #2
 8008cfc:	b2c9      	uxtb	r1, r1
 8008cfe:	5dab      	ldrb	r3, [r5, r6]
 8008d00:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8008d02:	1ce2      	adds	r2, r4, #3
 8008d04:	b2d2      	uxtb	r2, r2
 8008d06:	5c69      	ldrb	r1, [r5, r1]
 8008d08:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008d0c:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008d0e:	1d21      	adds	r1, r4, #4
 8008d10:	b2c9      	uxtb	r1, r1
 8008d12:	5caa      	ldrb	r2, [r5, r2]
 8008d14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d18:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008d1a:	1d62      	adds	r2, r4, #5
 8008d1c:	b2d2      	uxtb	r2, r2
 8008d1e:	5c69      	ldrb	r1, [r5, r1]
 8008d20:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008d24:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008d26:	3406      	adds	r4, #6
 8008d28:	b2e4      	uxtb	r4, r4
 8008d2a:	5caa      	ldrb	r2, [r5, r2]
 8008d2c:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008d30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008d34:	fb01 f202 	mul.w	r2, r1, r2
 8008d38:	0a12      	lsrs	r2, r2, #8
 8008d3a:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8008d3e:	c803      	ldmia	r0, {r0, r1}
 8008d40:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8008d44:	4a4d      	ldr	r2, [pc, #308]	; (8008e7c <ProcessMacCommands+0x5e0>)
 8008d46:	441a      	add	r2, r3
 8008d48:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8008d4a:	4658      	mov	r0, fp
 8008d4c:	f009 fb68 	bl	8012420 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008d50:	4e49      	ldr	r6, [pc, #292]	; (8008e78 <ProcessMacCommands+0x5dc>)
 8008d52:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 8008d5c:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8008d60:	a80c      	add	r0, sp, #48	; 0x30
 8008d62:	f009 fb1c 	bl	801239e <SysTimeSub>
 8008d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d6c:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8008d70:	4650      	mov	r0, sl
 8008d72:	f009 faf5 	bl	8012360 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8008d76:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8008d7a:	f009 fb2f 	bl	80123dc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8008d7e:	f003 fd3d 	bl	800c7fc <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008d82:	2301      	movs	r3, #1
 8008d84:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 8008d88:	e59b      	b.n	80088c2 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8008d8a:	200c      	movs	r0, #12
 8008d8c:	f004 fac2 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 8008d90:	b908      	cbnz	r0, 8008d96 <ProcessMacCommands+0x4fa>
        switch( payload[macIndex++] )
 8008d92:	4634      	mov	r4, r6
 8008d94:	e595      	b.n	80088c2 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8008d96:	210c      	movs	r1, #12
 8008d98:	2000      	movs	r0, #0
 8008d9a:	f004 fa6f 	bl	800d27c <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008d9e:	4b36      	ldr	r3, [pc, #216]	; (8008e78 <ProcessMacCommands+0x5dc>)
 8008da0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8008da4:	3b04      	subs	r3, #4
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d801      	bhi.n	8008db0 <ProcessMacCommands+0x514>
        switch( payload[macIndex++] )
 8008dac:	4634      	mov	r4, r6
 8008dae:	e588      	b.n	80088c2 <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 8008db0:	f003 fc84 	bl	800c6bc <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8008db4:	4634      	mov	r4, r6
 8008db6:	e584      	b.n	80088c2 <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 8008db8:	1ca2      	adds	r2, r4, #2
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008dbe:	1ce1      	adds	r1, r4, #3
 8008dc0:	b2c9      	uxtb	r1, r1
 8008dc2:	5caa      	ldrb	r2, [r5, r2]
 8008dc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008dc8:	1d22      	adds	r2, r4, #4
 8008dca:	b2d2      	uxtb	r2, r2
 8008dcc:	5c69      	ldrb	r1, [r5, r1]
 8008dce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8008dd2:	3405      	adds	r4, #5
 8008dd4:	b2e4      	uxtb	r4, r4
 8008dd6:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008dd8:	2164      	movs	r1, #100	; 0x64
 8008dda:	fb03 f101 	mul.w	r1, r3, r1
 8008dde:	f000 000f 	and.w	r0, r0, #15
 8008de2:	f003 fc7f 	bl	800c6e4 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008de6:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8008dea:	2201      	movs	r2, #1
 8008dec:	a90b      	add	r1, sp, #44	; 0x2c
 8008dee:	2011      	movs	r0, #17
 8008df0:	f004 f8cc 	bl	800cf8c <LoRaMacCommandsAddCmd>
                break;
 8008df4:	e565      	b.n	80088c2 <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8008df6:	200d      	movs	r0, #13
 8008df8:	f004 fa8c 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 8008dfc:	b908      	cbnz	r0, 8008e02 <ProcessMacCommands+0x566>
        switch( payload[macIndex++] )
 8008dfe:	4634      	mov	r4, r6
 8008e00:	e55f      	b.n	80088c2 <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8008e02:	210d      	movs	r1, #13
 8008e04:	2000      	movs	r0, #0
 8008e06:	f004 fa39 	bl	800d27c <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008e0a:	1ca2      	adds	r2, r4, #2
 8008e0c:	b2d2      	uxtb	r2, r2
 8008e0e:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008e10:	1ce3      	adds	r3, r4, #3
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8008e16:	3404      	adds	r4, #4
 8008e18:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008e1a:	4a19      	ldr	r2, [pc, #100]	; (8008e80 <ProcessMacCommands+0x5e4>)
 8008e1c:	6812      	ldr	r2, [r2, #0]
 8008e1e:	5ce9      	ldrb	r1, [r5, r3]
 8008e20:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8008e24:	f003 fca8 	bl	800c778 <LoRaMacClassBBeaconTimingAns>
 8008e28:	e54b      	b.n	80088c2 <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 8008e2a:	1ca1      	adds	r1, r4, #2
 8008e2c:	b2c9      	uxtb	r1, r1
 8008e2e:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008e30:	1ce2      	adds	r2, r4, #3
 8008e32:	b2d2      	uxtb	r2, r2
 8008e34:	5c68      	ldrb	r0, [r5, r1]
 8008e36:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008e3a:	3404      	adds	r4, #4
 8008e3c:	b2e4      	uxtb	r4, r4
 8008e3e:	5ca8      	ldrb	r0, [r5, r2]
 8008e40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8008e44:	2064      	movs	r0, #100	; 0x64
 8008e46:	fb03 f000 	mul.w	r0, r3, r0
 8008e4a:	f003 fd37 	bl	800c8bc <LoRaMacClassBBeaconFreqReq>
 8008e4e:	b140      	cbz	r0, 8008e62 <ProcessMacCommands+0x5c6>
                        macCmdPayload[0] = 1;
 8008e50:	2301      	movs	r3, #1
 8008e52:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8008e56:	2201      	movs	r2, #1
 8008e58:	a90b      	add	r1, sp, #44	; 0x2c
 8008e5a:	2013      	movs	r0, #19
 8008e5c:	f004 f896 	bl	800cf8c <LoRaMacCommandsAddCmd>
                break;
 8008e60:	e52f      	b.n	80088c2 <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8008e68:	e7f5      	b.n	8008e56 <ProcessMacCommands+0x5ba>
}
 8008e6a:	b00f      	add	sp, #60	; 0x3c
 8008e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e70:	20008000 	.word	0x20008000
 8008e74:	08013358 	.word	0x08013358
 8008e78:	20000654 	.word	0x20000654
 8008e7c:	12d53d80 	.word	0x12d53d80
 8008e80:	20000c04 	.word	0x20000c04

08008e84 <ProcessRadioRxDone>:
{
 8008e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e88:	b0a1      	sub	sp, #132	; 0x84
    uint8_t *payload = RxDoneParams.Payload;
 8008e8a:	4b96      	ldr	r3, [pc, #600]	; (80090e4 <ProcessRadioRxDone+0x260>)
 8008e8c:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8008e8e:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8008e90:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8008e94:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	9303      	str	r3, [sp, #12]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008e9c:	4a92      	ldr	r2, [pc, #584]	; (80090e8 <ProcessRadioRxDone+0x264>)
 8008e9e:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8008ea2:	4a92      	ldr	r2, [pc, #584]	; (80090ec <ProcessRadioRxDone+0x268>)
 8008ea4:	7811      	ldrb	r1, [r2, #0]
 8008ea6:	f363 0100 	bfi	r1, r3, #0, #1
 8008eaa:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 8008eac:	4c90      	ldr	r4, [pc, #576]	; (80090f0 <ProcessRadioRxDone+0x26c>)
 8008eae:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 8008eb2:	f8a4 9490 	strh.w	r9, [r4, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 8008eb6:	f884 7492 	strb.w	r7, [r4, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8008eba:	f894 2494 	ldrb.w	r2, [r4, #1172]	; 0x494
 8008ebe:	f884 2493 	strb.w	r2, [r4, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 8008ec2:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 8008ec6:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 8008eca:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 8008ece:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 8008ed2:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 8008ed6:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 8008eda:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008ede:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008ee2:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 8008ee6:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008eea:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8008eee:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 8008ef2:	4b80      	ldr	r3, [pc, #512]	; (80090f4 <ProcessRadioRxDone+0x270>)
 8008ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef6:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8008ef8:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008efc:	b1c3      	cbz	r3, 8008f30 <ProcessRadioRxDone+0xac>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008efe:	4629      	mov	r1, r5
 8008f00:	4630      	mov	r0, r6
 8008f02:	f003 fa19 	bl	800c338 <LoRaMacClassBRxBeacon>
 8008f06:	b9c0      	cbnz	r0, 8008f3a <ProcessRadioRxDone+0xb6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008f08:	4b77      	ldr	r3, [pc, #476]	; (80090e8 <ProcessRadioRxDone+0x264>)
 8008f0a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d019      	beq.n	8008f46 <ProcessRadioRxDone+0xc2>
    macHdr.Value = payload[pktHeaderLen++];
 8008f12:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8008f14:	0963      	lsrs	r3, r4, #5
 8008f16:	3b01      	subs	r3, #1
 8008f18:	2b06      	cmp	r3, #6
 8008f1a:	f200 82d4 	bhi.w	80094c6 <ProcessRadioRxDone+0x642>
 8008f1e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008f22:	002f      	.short	0x002f
 8008f24:	00b502d2 	.word	0x00b502d2
 8008f28:	00b102d2 	.word	0x00b102d2
 8008f2c:	02a202d2 	.word	0x02a202d2
        TimerStop( &MacCtx.RxWindowTimer2 );
 8008f30:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8008f34:	f009 fb62 	bl	80125fc <UTIL_TIMER_Stop>
 8008f38:	e7e1      	b.n	8008efe <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008f3a:	4b6d      	ldr	r3, [pc, #436]	; (80090f0 <ProcessRadioRxDone+0x26c>)
 8008f3c:	f8a3 9482 	strh.w	r9, [r3, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008f40:	f883 7484 	strb.w	r7, [r3, #1156]	; 0x484
        return;
 8008f44:	e2bc      	b.n	80094c0 <ProcessRadioRxDone+0x63c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008f46:	f003 fb05 	bl	800c554 <LoRaMacClassBIsPingExpected>
 8008f4a:	b150      	cbz	r0, 8008f62 <ProcessRadioRxDone+0xde>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	f003 f9e7 	bl	800c320 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008f52:	2000      	movs	r0, #0
 8008f54:	f002 fd78 	bl	800ba48 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008f58:	4b65      	ldr	r3, [pc, #404]	; (80090f0 <ProcessRadioRxDone+0x26c>)
 8008f5a:	2204      	movs	r2, #4
 8008f5c:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 8008f60:	e7d7      	b.n	8008f12 <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008f62:	f003 fb03 	bl	800c56c <LoRaMacClassBIsMulticastExpected>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d0d3      	beq.n	8008f12 <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	f003 f9de 	bl	800c32c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008f70:	2000      	movs	r0, #0
 8008f72:	f002 fd79 	bl	800ba68 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008f76:	4b5e      	ldr	r3, [pc, #376]	; (80090f0 <ProcessRadioRxDone+0x26c>)
 8008f78:	2205      	movs	r2, #5
 8008f7a:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 8008f7e:	e7c8      	b.n	8008f12 <ProcessRadioRxDone+0x8e>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8008f80:	2d10      	cmp	r5, #16
 8008f82:	d962      	bls.n	800904a <ProcessRadioRxDone+0x1c6>
            macMsgJoinAccept.Buffer = payload;
 8008f84:	9604      	str	r6, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 8008f86:	b2ed      	uxtb	r5, r5
 8008f88:	f88d 5014 	strb.w	r5, [sp, #20]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008f8c:	4b56      	ldr	r3, [pc, #344]	; (80090e8 <ProcessRadioRxDone+0x264>)
 8008f8e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d160      	bne.n	8009058 <ProcessRadioRxDone+0x1d4>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8008f96:	f007 f903 	bl	80101a0 <SecureElementGetJoinEui>
 8008f9a:	4601      	mov	r1, r0
 8008f9c:	aa04      	add	r2, sp, #16
 8008f9e:	20ff      	movs	r0, #255	; 0xff
 8008fa0:	f004 fd2e 	bl	800da00 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d163      	bne.n	8009070 <ProcessRadioRxDone+0x1ec>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008fa8:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8008fac:	4b4e      	ldr	r3, [pc, #312]	; (80090e8 <ProcessRadioRxDone+0x264>)
 8008fae:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008fb2:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8008fb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008fba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008fbe:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8008fc2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008fc6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008fca:	9a07      	ldr	r2, [sp, #28]
 8008fcc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008fd0:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8008fd4:	f3c2 1102 	ubfx	r1, r2, #4, #3
 8008fd8:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008fdc:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008fe0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008fe4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8008fe8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8008fec:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8008fee:	b90a      	cbnz	r2, 8008ff4 <ProcessRadioRxDone+0x170>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008ff4:	4c3c      	ldr	r4, [pc, #240]	; (80090e8 <ProcessRadioRxDone+0x264>)
 8008ff6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ffc:	fb02 f303 	mul.w	r3, r2, r3
 8009000:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009002:	4413      	add	r3, r2
 8009004:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800900c:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8009010:	931e      	str	r3, [sp, #120]	; 0x78
                applyCFList.Size = size - 17;
 8009012:	3d11      	subs	r5, #17
 8009014:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
                applyCFList.JoinChannel = MacCtx.Channel;
 8009018:	4b35      	ldr	r3, [pc, #212]	; (80090f0 <ProcessRadioRxDone+0x26c>)
 800901a:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800901e:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8009022:	a91d      	add	r1, sp, #116	; 0x74
 8009024:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009028:	f004 ff08 	bl	800de3c <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800902c:	2302      	movs	r3, #2
 800902e:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009032:	2001      	movs	r0, #1
 8009034:	f004 f96e 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 8009038:	b9a8      	cbnz	r0, 8009066 <ProcessRadioRxDone+0x1e2>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800903a:	4a2d      	ldr	r2, [pc, #180]	; (80090f0 <ProcessRadioRxDone+0x26c>)
 800903c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8009040:	f043 0308 	orr.w	r3, r3, #8
 8009044:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 8009048:	e227      	b.n	800949a <ProcessRadioRxDone+0x616>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800904a:	4b29      	ldr	r3, [pc, #164]	; (80090f0 <ProcessRadioRxDone+0x26c>)
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8009052:	f7ff fbab 	bl	80087ac <PrepareRxDoneAbort>
                return;
 8009056:	e233      	b.n	80094c0 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009058:	4b25      	ldr	r3, [pc, #148]	; (80090f0 <ProcessRadioRxDone+0x26c>)
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8009060:	f7ff fba4 	bl	80087ac <PrepareRxDoneAbort>
                return;
 8009064:	e22c      	b.n	80094c0 <ProcessRadioRxDone+0x63c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8009066:	2101      	movs	r1, #1
 8009068:	2000      	movs	r0, #0
 800906a:	f004 f907 	bl	800d27c <LoRaMacConfirmQueueSetStatus>
 800906e:	e7e4      	b.n	800903a <ProcessRadioRxDone+0x1b6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009070:	2001      	movs	r0, #1
 8009072:	f004 f94f 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 8009076:	2800      	cmp	r0, #0
 8009078:	d0df      	beq.n	800903a <ProcessRadioRxDone+0x1b6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800907a:	2101      	movs	r1, #1
 800907c:	2007      	movs	r0, #7
 800907e:	f004 f8fd 	bl	800d27c <LoRaMacConfirmQueueSetStatus>
 8009082:	e7da      	b.n	800903a <ProcessRadioRxDone+0x1b6>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009084:	4b1a      	ldr	r3, [pc, #104]	; (80090f0 <ProcessRadioRxDone+0x26c>)
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800908c:	4b16      	ldr	r3, [pc, #88]	; (80090e8 <ProcessRadioRxDone+0x264>)
 800908e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009092:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8009096:	4a16      	ldr	r2, [pc, #88]	; (80090f0 <ProcessRadioRxDone+0x26c>)
 8009098:	f992 2428 	ldrsb.w	r2, [r2, #1064]	; 0x428
 800909c:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80090a0:	220d      	movs	r2, #13
 80090a2:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80090a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090aa:	b113      	cbz	r3, 80090b2 <ProcessRadioRxDone+0x22e>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80090ac:	230e      	movs	r3, #14
 80090ae:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80090b2:	a91b      	add	r1, sp, #108	; 0x6c
 80090b4:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <ProcessRadioRxDone+0x264>)
 80090b6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80090ba:	f004 fe93 	bl	800dde4 <RegionGetPhyParam>
 80090be:	901a      	str	r0, [sp, #104]	; 0x68
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80090c0:	f1a5 030d 	sub.w	r3, r5, #13
 80090c4:	b21b      	sxth	r3, r3
 80090c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80090ca:	b200      	sxth	r0, r0
 80090cc:	4283      	cmp	r3, r0
 80090ce:	dc01      	bgt.n	80090d4 <ProcessRadioRxDone+0x250>
 80090d0:	2d0b      	cmp	r5, #11
 80090d2:	d811      	bhi.n	80090f8 <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80090d4:	4b06      	ldr	r3, [pc, #24]	; (80090f0 <ProcessRadioRxDone+0x26c>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 80090dc:	f7ff fb66 	bl	80087ac <PrepareRxDoneAbort>
                return;
 80090e0:	e1ee      	b.n	80094c0 <ProcessRadioRxDone+0x63c>
 80090e2:	bf00      	nop
 80090e4:	20000c04 	.word	0x20000c04
 80090e8:	20008000 	.word	0x20008000
 80090ec:	20000650 	.word	0x20000650
 80090f0:	20000654 	.word	0x20000654
 80090f4:	080139bc 	.word	0x080139bc
            macMsgData.Buffer = payload;
 80090f8:	960e      	str	r6, [sp, #56]	; 0x38
            macMsgData.BufSize = size;
 80090fa:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 80090fe:	4bba      	ldr	r3, [pc, #744]	; (80093e8 <ProcessRadioRxDone+0x564>)
 8009100:	9317      	str	r3, [sp, #92]	; 0x5c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009102:	23ff      	movs	r3, #255	; 0xff
 8009104:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009108:	a80e      	add	r0, sp, #56	; 0x38
 800910a:	f004 fd3f 	bl	800db8c <LoRaMacParserData>
 800910e:	2800      	cmp	r0, #0
 8009110:	d142      	bne.n	8009198 <ProcessRadioRxDone+0x314>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009112:	4bb6      	ldr	r3, [pc, #728]	; (80093ec <ProcessRadioRxDone+0x568>)
 8009114:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009118:	2b01      	cmp	r3, #1
 800911a:	d044      	beq.n	80091a6 <ProcessRadioRxDone+0x322>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800911c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800911e:	4bb4      	ldr	r3, [pc, #720]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 8009120:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8009124:	f10d 010a 	add.w	r1, sp, #10
 8009128:	a80e      	add	r0, sp, #56	; 0x38
 800912a:	f7ff f9d5 	bl	80084d8 <DetermineFrameType>
 800912e:	4605      	mov	r5, r0
 8009130:	2800      	cmp	r0, #0
 8009132:	d163      	bne.n	80091fc <ProcessRadioRxDone+0x378>
            downLinkCounter = 0;
 8009134:	2300      	movs	r3, #0
 8009136:	9303      	str	r3, [sp, #12]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d065      	beq.n	800920a <ProcessRadioRxDone+0x386>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800913e:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009140:	2d01      	cmp	r5, #1
 8009142:	d10a      	bne.n	800915a <ProcessRadioRxDone+0x2d6>
 8009144:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8009148:	2b03      	cmp	r3, #3
 800914a:	f040 808a 	bne.w	8009262 <ProcessRadioRxDone+0x3de>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800914e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8009152:	f013 0f60 	tst.w	r3, #96	; 0x60
 8009156:	f040 8084 	bne.w	8009262 <ProcessRadioRxDone+0x3de>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800915a:	ab03      	add	r3, sp, #12
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	f10d 030b 	add.w	r3, sp, #11
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	4ba1      	ldr	r3, [pc, #644]	; (80093ec <ProcessRadioRxDone+0x568>)
 8009166:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800916a:	aa0e      	add	r2, sp, #56	; 0x38
 800916c:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8009170:	4630      	mov	r0, r6
 8009172:	f7ff fb59 	bl	8008828 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009176:	2800      	cmp	r0, #0
 8009178:	d07f      	beq.n	800927a <ProcessRadioRxDone+0x3f6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800917a:	2807      	cmp	r0, #7
 800917c:	d078      	beq.n	8009270 <ProcessRadioRxDone+0x3ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800917e:	4b9c      	ldr	r3, [pc, #624]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 8009180:	2201      	movs	r2, #1
 8009182:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009186:	9a03      	ldr	r2, [sp, #12]
 8009188:	4b99      	ldr	r3, [pc, #612]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 800918a:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800918e:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
                PrepareRxDoneAbort( );
 8009192:	f7ff fb0b 	bl	80087ac <PrepareRxDoneAbort>
                return;
 8009196:	e193      	b.n	80094c0 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009198:	4b95      	ldr	r3, [pc, #596]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 80091a0:	f7ff fb04 	bl	80087ac <PrepareRxDoneAbort>
                return;
 80091a4:	e18c      	b.n	80094c0 <ProcessRadioRxDone+0x63c>
                if( LoRaMacClassBIsPingExpected( ) == true )
 80091a6:	f003 f9d5 	bl	800c554 <LoRaMacClassBIsPingExpected>
 80091aa:	b188      	cbz	r0, 80091d0 <ProcessRadioRxDone+0x34c>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80091ac:	2000      	movs	r0, #0
 80091ae:	f003 f8b7 	bl	800c320 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 80091b2:	2000      	movs	r0, #0
 80091b4:	f002 fc48 	bl	800ba48 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80091b8:	4b8d      	ldr	r3, [pc, #564]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 80091ba:	2204      	movs	r2, #4
 80091bc:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80091c0:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 80091c4:	f3c1 1100 	ubfx	r1, r1, #4, #1
 80091c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80091ca:	f003 fe09 	bl	800cde0 <LoRaMacClassBSetFPendingBit>
 80091ce:	e7a5      	b.n	800911c <ProcessRadioRxDone+0x298>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80091d0:	f003 f9cc 	bl	800c56c <LoRaMacClassBIsMulticastExpected>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d0a1      	beq.n	800911c <ProcessRadioRxDone+0x298>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80091d8:	2000      	movs	r0, #0
 80091da:	f003 f8a7 	bl	800c32c <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80091de:	2000      	movs	r0, #0
 80091e0:	f002 fc42 	bl	800ba68 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80091e4:	4b82      	ldr	r3, [pc, #520]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 80091e6:	2205      	movs	r2, #5
 80091e8:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80091ec:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 80091f0:	f3c1 1100 	ubfx	r1, r1, #4, #1
 80091f4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80091f6:	f003 fdf3 	bl	800cde0 <LoRaMacClassBSetFPendingBit>
 80091fa:	e78f      	b.n	800911c <ProcessRadioRxDone+0x298>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80091fc:	4b7c      	ldr	r3, [pc, #496]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8009204:	f7ff fad2 	bl	80087ac <PrepareRxDoneAbort>
                return;
 8009208:	e15a      	b.n	80094c0 <ProcessRadioRxDone+0x63c>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800920a:	4618      	mov	r0, r3
 800920c:	4a77      	ldr	r2, [pc, #476]	; (80093ec <ProcessRadioRxDone+0x568>)
 800920e:	212c      	movs	r1, #44	; 0x2c
 8009210:	fb01 2203 	mla	r2, r1, r3, r2
 8009214:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 8009218:	9910      	ldr	r1, [sp, #64]	; 0x40
 800921a:	428a      	cmp	r2, r1
 800921c:	d002      	beq.n	8009224 <ProcessRadioRxDone+0x3a0>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800921e:	3301      	adds	r3, #1
 8009220:	b2db      	uxtb	r3, r3
 8009222:	e78a      	b.n	800913a <ProcessRadioRxDone+0x2b6>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8009224:	4971      	ldr	r1, [pc, #452]	; (80093ec <ProcessRadioRxDone+0x568>)
 8009226:	262c      	movs	r6, #44	; 0x2c
 8009228:	fb06 1103 	mla	r1, r6, r3, r1
 800922c:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009230:	2900      	cmp	r1, #0
 8009232:	d0f4      	beq.n	800921e <ProcessRadioRxDone+0x39a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8009234:	4b6d      	ldr	r3, [pc, #436]	; (80093ec <ProcessRadioRxDone+0x568>)
 8009236:	fb06 3000 	mla	r0, r6, r0, r3
 800923a:	f890 60db 	ldrb.w	r6, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800923e:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 8009242:	6809      	ldr	r1, [r1, #0]
 8009244:	9103      	str	r1, [sp, #12]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009246:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800924a:	2b02      	cmp	r3, #2
 800924c:	d002      	beq.n	8009254 <ProcessRadioRxDone+0x3d0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800924e:	4690      	mov	r8, r2
                    multicast = 1;
 8009250:	2501      	movs	r5, #1
 8009252:	e775      	b.n	8009140 <ProcessRadioRxDone+0x2bc>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009254:	4b66      	ldr	r3, [pc, #408]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 8009256:	2103      	movs	r1, #3
 8009258:	f883 1493 	strb.w	r1, [r3, #1171]	; 0x493
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800925c:	4690      	mov	r8, r2
                    multicast = 1;
 800925e:	2501      	movs	r5, #1
 8009260:	e76e      	b.n	8009140 <ProcessRadioRxDone+0x2bc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009262:	4b63      	ldr	r3, [pc, #396]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 8009264:	2201      	movs	r2, #1
 8009266:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800926a:	f7ff fa9f 	bl	80087ac <PrepareRxDoneAbort>
                return;
 800926e:	e127      	b.n	80094c0 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8009270:	4b5f      	ldr	r3, [pc, #380]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 8009272:	2208      	movs	r2, #8
 8009274:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 8009278:	e785      	b.n	8009186 <ProcessRadioRxDone+0x302>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800927a:	ab0e      	add	r3, sp, #56	; 0x38
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	9b03      	ldr	r3, [sp, #12]
 8009280:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8009284:	4641      	mov	r1, r8
 8009286:	4630      	mov	r0, r6
 8009288:	f004 fb0e 	bl	800d8a8 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800928c:	2800      	cmp	r0, #0
 800928e:	d13d      	bne.n	800930c <ProcessRadioRxDone+0x488>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009290:	4b57      	ldr	r3, [pc, #348]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 8009292:	2100      	movs	r1, #0
 8009294:	f883 1425 	strb.w	r1, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 8009298:	f883 5426 	strb.w	r5, [r3, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800929c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80092a0:	f3c2 1000 	ubfx	r0, r2, #4, #1
 80092a4:	f883 0429 	strb.w	r0, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 80092a8:	f8c3 142c 	str.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 80092ac:	f883 1430 	strb.w	r1, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80092b0:	9803      	ldr	r0, [sp, #12]
 80092b2:	f8c3 0434 	str.w	r0, [r3, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80092b6:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80092ba:	f3c2 1240 	ubfx	r2, r2, #5, #1
 80092be:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80092c2:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80092c6:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80092ca:	f893 0493 	ldrb.w	r0, [r3, #1171]	; 0x493
 80092ce:	2801      	cmp	r0, #1
 80092d0:	d92a      	bls.n	8009328 <ProcessRadioRxDone+0x4a4>
            if( multicast == 1 )
 80092d2:	2d01      	cmp	r5, #1
 80092d4:	d02e      	beq.n	8009334 <ProcessRadioRxDone+0x4b0>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80092d6:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 80092da:	2ca0      	cmp	r4, #160	; 0xa0
 80092dc:	d02f      	beq.n	800933e <ProcessRadioRxDone+0x4ba>
                    Nvm.MacGroup1.SrvAckRequested = false;
 80092de:	2300      	movs	r3, #0
 80092e0:	4a42      	ldr	r2, [pc, #264]	; (80093ec <ProcessRadioRxDone+0x568>)
 80092e2:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80092e6:	4a42      	ldr	r2, [pc, #264]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 80092e8:	f882 3424 	strb.w	r3, [r2, #1060]	; 0x424
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80092ec:	4b40      	ldr	r3, [pc, #256]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 80092ee:	f893 2444 	ldrb.w	r2, [r3, #1092]	; 0x444
 80092f2:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 80092f6:	f7ff fac2 	bl	800887e <RemoveMacCommands>
            switch( fType )
 80092fa:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80092fe:	2b03      	cmp	r3, #3
 8009300:	f200 809a 	bhi.w	8009438 <ProcessRadioRxDone+0x5b4>
 8009304:	e8df f003 	tbb	[pc, r3]
 8009308:	88785d36 	.word	0x88785d36
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800930c:	2802      	cmp	r0, #2
 800930e:	d006      	beq.n	800931e <ProcessRadioRxDone+0x49a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8009310:	4b37      	ldr	r3, [pc, #220]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 8009312:	220b      	movs	r2, #11
 8009314:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8009318:	f7ff fa48 	bl	80087ac <PrepareRxDoneAbort>
                return;
 800931c:	e0d0      	b.n	80094c0 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800931e:	4b34      	ldr	r3, [pc, #208]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 8009320:	220a      	movs	r2, #10
 8009322:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 8009326:	e7f7      	b.n	8009318 <ProcessRadioRxDone+0x494>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8009328:	4b30      	ldr	r3, [pc, #192]	; (80093ec <ProcessRadioRxDone+0x568>)
 800932a:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800932c:	2201      	movs	r2, #1
 800932e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8009332:	e7ce      	b.n	80092d2 <ProcessRadioRxDone+0x44e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8009334:	4b2e      	ldr	r3, [pc, #184]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 8009336:	2202      	movs	r2, #2
 8009338:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800933c:	e7d6      	b.n	80092ec <ProcessRadioRxDone+0x468>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800933e:	4b2b      	ldr	r3, [pc, #172]	; (80093ec <ProcessRadioRxDone+0x568>)
 8009340:	2201      	movs	r2, #1
 8009342:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8009346:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800934a:	b913      	cbnz	r3, 8009352 <ProcessRadioRxDone+0x4ce>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800934c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800934e:	4b27      	ldr	r3, [pc, #156]	; (80093ec <ProcessRadioRxDone+0x568>)
 8009350:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009352:	4b27      	ldr	r3, [pc, #156]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800935a:	4290      	cmp	r0, r2
 800935c:	d9c6      	bls.n	80092ec <ProcessRadioRxDone+0x468>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800935e:	4b23      	ldr	r3, [pc, #140]	; (80093ec <ProcessRadioRxDone+0x568>)
 8009360:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8009364:	4b22      	ldr	r3, [pc, #136]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 8009366:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800936a:	4a22      	ldr	r2, [pc, #136]	; (80093f4 <ProcessRadioRxDone+0x570>)
 800936c:	6812      	ldr	r2, [r2, #0]
 800936e:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 8009372:	e7bb      	b.n	80092ec <ProcessRadioRxDone+0x468>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009374:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8009378:	4c1d      	ldr	r4, [pc, #116]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 800937a:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	463b      	mov	r3, r7
 8009382:	f002 020f 	and.w	r2, r2, #15
 8009386:	2100      	movs	r1, #0
 8009388:	a812      	add	r0, sp, #72	; 0x48
 800938a:	f7ff fa87 	bl	800889c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800938e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8009392:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009396:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009398:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800939c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80093a0:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 80093a4:	2301      	movs	r3, #1
 80093a6:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 80093aa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80093ae:	2be0      	cmp	r3, #224	; 0xe0
 80093b0:	d049      	beq.n	8009446 <ProcessRadioRxDone+0x5c2>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80093b2:	4a0f      	ldr	r2, [pc, #60]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 80093b4:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80093b8:	f043 0302 	orr.w	r3, r3, #2
 80093bc:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 80093c0:	e06b      	b.n	800949a <ProcessRadioRxDone+0x616>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80093c2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80093c6:	4c0a      	ldr	r4, [pc, #40]	; (80093f0 <ProcessRadioRxDone+0x56c>)
 80093c8:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	463b      	mov	r3, r7
 80093d0:	f002 020f 	and.w	r2, r2, #15
 80093d4:	2100      	movs	r1, #0
 80093d6:	a812      	add	r0, sp, #72	; 0x48
 80093d8:	f7ff fa60 	bl	800889c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80093dc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80093e0:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 80093e4:	e7e1      	b.n	80093aa <ProcessRadioRxDone+0x526>
 80093e6:	bf00      	nop
 80093e8:	2000088c 	.word	0x2000088c
 80093ec:	20008000 	.word	0x20008000
 80093f0:	20000654 	.word	0x20000654
 80093f4:	20000c04 	.word	0x20000c04
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80093f8:	4c3d      	ldr	r4, [pc, #244]	; (80094f0 <ProcessRadioRxDone+0x66c>)
 80093fa:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	463b      	mov	r3, r7
 8009402:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 8009406:	2100      	movs	r1, #0
 8009408:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800940a:	f7ff fa47 	bl	800889c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800940e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8009412:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 8009416:	e7c8      	b.n	80093aa <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009418:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800941c:	4b34      	ldr	r3, [pc, #208]	; (80094f0 <ProcessRadioRxDone+0x66c>)
 800941e:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009422:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009424:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009428:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800942c:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 8009430:	2201      	movs	r2, #1
 8009432:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 8009436:	e7b8      	b.n	80093aa <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009438:	4b2d      	ldr	r3, [pc, #180]	; (80094f0 <ProcessRadioRxDone+0x66c>)
 800943a:	2201      	movs	r2, #1
 800943c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 8009440:	f7ff f9b4 	bl	80087ac <PrepareRxDoneAbort>
                    break;
 8009444:	e7b1      	b.n	80093aa <ProcessRadioRxDone+0x526>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8009446:	4a2b      	ldr	r2, [pc, #172]	; (80094f4 <ProcessRadioRxDone+0x670>)
 8009448:	f892 210b 	ldrb.w	r2, [r2, #267]	; 0x10b
 800944c:	2a00      	cmp	r2, #0
 800944e:	d1b0      	bne.n	80093b2 <ProcessRadioRxDone+0x52e>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8009450:	4a27      	ldr	r2, [pc, #156]	; (80094f0 <ProcessRadioRxDone+0x66c>)
 8009452:	f882 3427 	strb.w	r3, [r2, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 8009456:	2300      	movs	r3, #0
 8009458:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800945c:	f882 3430 	strb.w	r3, [r2, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 8009460:	f882 3431 	strb.w	r3, [r2, #1073]	; 0x431
 8009464:	e7a5      	b.n	80093b2 <ProcessRadioRxDone+0x52e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8009466:	1e6a      	subs	r2, r5, #1
 8009468:	4c21      	ldr	r4, [pc, #132]	; (80094f0 <ProcessRadioRxDone+0x66c>)
 800946a:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800946e:	b292      	uxth	r2, r2
 8009470:	1c71      	adds	r1, r6, #1
 8009472:	4638      	mov	r0, r7
 8009474:	f006 fec5 	bl	8010202 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8009478:	2303      	movs	r3, #3
 800947a:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8009484:	f8c4 742c 	str.w	r7, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8009488:	3d01      	subs	r5, #1
 800948a:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800948e:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 8009492:	f043 0302 	orr.w	r3, r3, #2
 8009496:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800949a:	4b15      	ldr	r3, [pc, #84]	; (80094f0 <ProcessRadioRxDone+0x66c>)
 800949c:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d917      	bls.n	80094d4 <ProcessRadioRxDone+0x650>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 80094a4:	4b12      	ldr	r3, [pc, #72]	; (80094f0 <ProcessRadioRxDone+0x66c>)
 80094a6:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d006      	beq.n	80094bc <ProcessRadioRxDone+0x638>
        MacCtx.MacFlags.Bits.MacDone = 1;
 80094ae:	4a10      	ldr	r2, [pc, #64]	; (80094f0 <ProcessRadioRxDone+0x66c>)
 80094b0:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80094b4:	f043 0320 	orr.w	r3, r3, #32
 80094b8:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 80094bc:	f7fe ff80 	bl	80083c0 <UpdateRxSlotIdleState>
}
 80094c0:	b021      	add	sp, #132	; 0x84
 80094c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80094c6:	4b0a      	ldr	r3, [pc, #40]	; (80094f0 <ProcessRadioRxDone+0x66c>)
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 80094ce:	f7ff f96d 	bl	80087ac <PrepareRxDoneAbort>
            break;
 80094d2:	e7e2      	b.n	800949a <ProcessRadioRxDone+0x616>
        if( MacCtx.NodeAckRequested == true )
 80094d4:	4b06      	ldr	r3, [pc, #24]	; (80094f0 <ProcessRadioRxDone+0x66c>)
 80094d6:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d0e2      	beq.n	80094a4 <ProcessRadioRxDone+0x620>
            if( MacCtx.McpsConfirm.AckReceived == true )
 80094de:	4b04      	ldr	r3, [pc, #16]	; (80094f0 <ProcessRadioRxDone+0x66c>)
 80094e0:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d0dd      	beq.n	80094a4 <ProcessRadioRxDone+0x620>
                OnRetransmitTimeoutTimerEvent( NULL );
 80094e8:	2000      	movs	r0, #0
 80094ea:	f7ff f949 	bl	8008780 <OnRetransmitTimeoutTimerEvent>
 80094ee:	e7d9      	b.n	80094a4 <ProcessRadioRxDone+0x620>
 80094f0:	20000654 	.word	0x20000654
 80094f4:	20008000 	.word	0x20008000

080094f8 <ProcessRadioTxTimeout>:
{
 80094f8:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80094fa:	4b0f      	ldr	r3, [pc, #60]	; (8009538 <ProcessRadioTxTimeout+0x40>)
 80094fc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009500:	2b02      	cmp	r3, #2
 8009502:	d002      	beq.n	800950a <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8009504:	4b0d      	ldr	r3, [pc, #52]	; (800953c <ProcessRadioTxTimeout+0x44>)
 8009506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009508:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800950a:	f7fe ff59 	bl	80083c0 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800950e:	4c0c      	ldr	r4, [pc, #48]	; (8009540 <ProcessRadioTxTimeout+0x48>)
 8009510:	2002      	movs	r0, #2
 8009512:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8009516:	f003 fedf 	bl	800d2d8 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800951a:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800951e:	b113      	cbz	r3, 8009526 <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 8009520:	2201      	movs	r2, #1
 8009522:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    MacCtx.MacFlags.Bits.MacDone = 1;
 8009526:	4a06      	ldr	r2, [pc, #24]	; (8009540 <ProcessRadioTxTimeout+0x48>)
 8009528:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800952c:	f043 0320 	orr.w	r3, r3, #32
 8009530:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 8009534:	bd10      	pop	{r4, pc}
 8009536:	bf00      	nop
 8009538:	20008000 	.word	0x20008000
 800953c:	080139bc 	.word	0x080139bc
 8009540:	20000654 	.word	0x20000654

08009544 <CheckForClassBCollision>:
{
 8009544:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009546:	f002 fff3 	bl	800c530 <LoRaMacClassBIsBeaconExpected>
 800954a:	b978      	cbnz	r0, 800956c <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800954c:	4b09      	ldr	r3, [pc, #36]	; (8009574 <CheckForClassBCollision+0x30>)
 800954e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009552:	2b01      	cmp	r3, #1
 8009554:	d001      	beq.n	800955a <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8009556:	2000      	movs	r0, #0
}
 8009558:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800955a:	f002 fffb 	bl	800c554 <LoRaMacClassBIsPingExpected>
 800955e:	b938      	cbnz	r0, 8009570 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009560:	f003 f804 	bl	800c56c <LoRaMacClassBIsMulticastExpected>
 8009564:	2800      	cmp	r0, #0
 8009566:	d0f7      	beq.n	8009558 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009568:	200f      	movs	r0, #15
 800956a:	e7f5      	b.n	8009558 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800956c:	200e      	movs	r0, #14
 800956e:	e7f3      	b.n	8009558 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8009570:	200f      	movs	r0, #15
 8009572:	e7f1      	b.n	8009558 <CheckForClassBCollision+0x14>
 8009574:	20008000 	.word	0x20008000

08009578 <HandleRadioRxErrorTimeout>:
{
 8009578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957a:	4605      	mov	r5, r0
 800957c:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800957e:	4b34      	ldr	r3, [pc, #208]	; (8009650 <HandleRadioRxErrorTimeout+0xd8>)
 8009580:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009584:	2b02      	cmp	r3, #2
 8009586:	d002      	beq.n	800958e <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8009588:	4b32      	ldr	r3, [pc, #200]	; (8009654 <HandleRadioRxErrorTimeout+0xdc>)
 800958a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958c:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800958e:	f002 ffcf 	bl	800c530 <LoRaMacClassBIsBeaconExpected>
 8009592:	4606      	mov	r6, r0
 8009594:	bb50      	cbnz	r0, 80095ec <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009596:	4b2e      	ldr	r3, [pc, #184]	; (8009650 <HandleRadioRxErrorTimeout+0xd8>)
 8009598:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800959c:	2b01      	cmp	r3, #1
 800959e:	d02c      	beq.n	80095fa <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 80095a0:	2e00      	cmp	r6, #0
 80095a2:	d152      	bne.n	800964a <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80095a4:	4b2c      	ldr	r3, [pc, #176]	; (8009658 <HandleRadioRxErrorTimeout+0xe0>)
 80095a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d13c      	bne.n	8009628 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 80095ae:	4b2a      	ldr	r3, [pc, #168]	; (8009658 <HandleRadioRxErrorTimeout+0xe0>)
 80095b0:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 80095b4:	b113      	cbz	r3, 80095bc <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 80095b6:	4b28      	ldr	r3, [pc, #160]	; (8009658 <HandleRadioRxErrorTimeout+0xe0>)
 80095b8:	f883 5445 	strb.w	r5, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 80095bc:	4628      	mov	r0, r5
 80095be:	f003 fe8b 	bl	800d2d8 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 80095c2:	4b23      	ldr	r3, [pc, #140]	; (8009650 <HandleRadioRxErrorTimeout+0xd8>)
 80095c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80095c6:	f008 ffe3 	bl	8012590 <UTIL_TIMER_GetElapsedTime>
 80095ca:	4b23      	ldr	r3, [pc, #140]	; (8009658 <HandleRadioRxErrorTimeout+0xe0>)
 80095cc:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80095d0:	4298      	cmp	r0, r3
 80095d2:	d33a      	bcc.n	800964a <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 80095d4:	4c20      	ldr	r4, [pc, #128]	; (8009658 <HandleRadioRxErrorTimeout+0xe0>)
 80095d6:	f504 7066 	add.w	r0, r4, #920	; 0x398
 80095da:	f009 f80f 	bl	80125fc <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80095de:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 80095e2:	f043 0320 	orr.w	r3, r3, #32
 80095e6:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
 80095ea:	e02e      	b.n	800964a <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80095ec:	2002      	movs	r0, #2
 80095ee:	f002 ffd5 	bl	800c59c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80095f2:	2000      	movs	r0, #0
 80095f4:	f002 fb08 	bl	800bc08 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80095f8:	e7cd      	b.n	8009596 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80095fa:	f002 ffab 	bl	800c554 <LoRaMacClassBIsPingExpected>
 80095fe:	4607      	mov	r7, r0
 8009600:	b950      	cbnz	r0, 8009618 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009602:	f002 ffb3 	bl	800c56c <LoRaMacClassBIsMulticastExpected>
 8009606:	2800      	cmp	r0, #0
 8009608:	d0ca      	beq.n	80095a0 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800960a:	2000      	movs	r0, #0
 800960c:	f002 fe8e 	bl	800c32c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009610:	2000      	movs	r0, #0
 8009612:	f002 fa29 	bl	800ba68 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 8009616:	e018      	b.n	800964a <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009618:	2000      	movs	r0, #0
 800961a:	f002 fe81 	bl	800c320 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800961e:	2000      	movs	r0, #0
 8009620:	f002 fa12 	bl	800ba48 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8009624:	463e      	mov	r6, r7
 8009626:	e7ec      	b.n	8009602 <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 8009628:	4b0b      	ldr	r3, [pc, #44]	; (8009658 <HandleRadioRxErrorTimeout+0xe0>)
 800962a:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800962e:	b113      	cbz	r3, 8009636 <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8009630:	4b09      	ldr	r3, [pc, #36]	; (8009658 <HandleRadioRxErrorTimeout+0xe0>)
 8009632:	f883 4445 	strb.w	r4, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8009636:	4620      	mov	r0, r4
 8009638:	f003 fe4e 	bl	800d2d8 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800963c:	4a06      	ldr	r2, [pc, #24]	; (8009658 <HandleRadioRxErrorTimeout+0xe0>)
 800963e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8009642:	f043 0320 	orr.w	r3, r3, #32
 8009646:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800964a:	f7fe feb9 	bl	80083c0 <UpdateRxSlotIdleState>
}
 800964e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009650:	20008000 	.word	0x20008000
 8009654:	080139bc 	.word	0x080139bc
 8009658:	20000654 	.word	0x20000654

0800965c <ProcessRadioRxError>:
{
 800965c:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800965e:	2106      	movs	r1, #6
 8009660:	2005      	movs	r0, #5
 8009662:	f7ff ff89 	bl	8009578 <HandleRadioRxErrorTimeout>
}
 8009666:	bd08      	pop	{r3, pc}

08009668 <ProcessRadioRxTimeout>:
{
 8009668:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800966a:	2104      	movs	r1, #4
 800966c:	2003      	movs	r0, #3
 800966e:	f7ff ff83 	bl	8009578 <HandleRadioRxErrorTimeout>
}
 8009672:	bd08      	pop	{r3, pc}

08009674 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009674:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009678:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800967a:	4a14      	ldr	r2, [pc, #80]	; (80096cc <LoRaMacHandleIrqEvents+0x58>)
 800967c:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800967e:	2000      	movs	r0, #0
 8009680:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009682:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8009686:	b303      	cbz	r3, 80096ca <LoRaMacHandleIrqEvents+0x56>
{
 8009688:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800968a:	b2dc      	uxtb	r4, r3
 800968c:	f013 0f20 	tst.w	r3, #32
 8009690:	d10c      	bne.n	80096ac <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 8009692:	f014 0f10 	tst.w	r4, #16
 8009696:	d10c      	bne.n	80096b2 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8009698:	f014 0f08 	tst.w	r4, #8
 800969c:	d10c      	bne.n	80096b8 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800969e:	f014 0f04 	tst.w	r4, #4
 80096a2:	d10c      	bne.n	80096be <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 80096a4:	f014 0f02 	tst.w	r4, #2
 80096a8:	d10c      	bne.n	80096c4 <LoRaMacHandleIrqEvents+0x50>
}
 80096aa:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 80096ac:	f7fe fff2 	bl	8008694 <ProcessRadioTxDone>
 80096b0:	e7ef      	b.n	8009692 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 80096b2:	f7ff fbe7 	bl	8008e84 <ProcessRadioRxDone>
 80096b6:	e7ef      	b.n	8009698 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 80096b8:	f7ff ff1e 	bl	80094f8 <ProcessRadioTxTimeout>
 80096bc:	e7ef      	b.n	800969e <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 80096be:	f7ff ffcd 	bl	800965c <ProcessRadioRxError>
 80096c2:	e7ef      	b.n	80096a4 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 80096c4:	f7ff ffd0 	bl	8009668 <ProcessRadioRxTimeout>
}
 80096c8:	e7ef      	b.n	80096aa <LoRaMacHandleIrqEvents+0x36>
 80096ca:	4770      	bx	lr
 80096cc:	20000650 	.word	0x20000650

080096d0 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 80096d0:	b909      	cbnz	r1, 80096d6 <LoRaMacHandleResponseTimeout+0x6>
    return false;
 80096d2:	2000      	movs	r0, #0
}
 80096d4:	4770      	bx	lr
{
 80096d6:	b510      	push	{r4, lr}
 80096d8:	4604      	mov	r4, r0
 80096da:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 80096dc:	f008 ff58 	bl	8012590 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 80096e0:	42a0      	cmp	r0, r4
 80096e2:	d801      	bhi.n	80096e8 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 80096e4:	2000      	movs	r0, #0
}
 80096e6:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 80096e8:	4b02      	ldr	r3, [pc, #8]	; (80096f4 <LoRaMacHandleResponseTimeout+0x24>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 80096f0:	2001      	movs	r0, #1
 80096f2:	e7f8      	b.n	80096e6 <LoRaMacHandleResponseTimeout+0x16>
 80096f4:	20008000 	.word	0x20008000

080096f8 <LoRaMacHandleMlmeRequest>:
{
 80096f8:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80096fa:	4b14      	ldr	r3, [pc, #80]	; (800974c <LoRaMacHandleMlmeRequest+0x54>)
 80096fc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009700:	f013 0f04 	tst.w	r3, #4
 8009704:	d100      	bne.n	8009708 <LoRaMacHandleMlmeRequest+0x10>
}
 8009706:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009708:	2001      	movs	r0, #1
 800970a:	f003 fe03 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 800970e:	b178      	cbz	r0, 8009730 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009710:	2001      	movs	r0, #1
 8009712:	f003 fdc9 	bl	800d2a8 <LoRaMacConfirmQueueGetStatus>
 8009716:	b918      	cbnz	r0, 8009720 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8009718:	4b0c      	ldr	r3, [pc, #48]	; (800974c <LoRaMacHandleMlmeRequest+0x54>)
 800971a:	2200      	movs	r2, #0
 800971c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009720:	4a0a      	ldr	r2, [pc, #40]	; (800974c <LoRaMacHandleMlmeRequest+0x54>)
 8009722:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009726:	f023 0302 	bic.w	r3, r3, #2
 800972a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800972e:	e7ea      	b.n	8009706 <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8009730:	2005      	movs	r0, #5
 8009732:	f003 fdef 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 8009736:	2800      	cmp	r0, #0
 8009738:	d0e5      	beq.n	8009706 <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800973a:	4a04      	ldr	r2, [pc, #16]	; (800974c <LoRaMacHandleMlmeRequest+0x54>)
 800973c:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009740:	f023 0302 	bic.w	r3, r3, #2
 8009744:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8009748:	e7dd      	b.n	8009706 <LoRaMacHandleMlmeRequest+0xe>
 800974a:	bf00      	nop
 800974c:	20000654 	.word	0x20000654

08009750 <SerializeTxFrame>:
{
 8009750:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 8009752:	4b0f      	ldr	r3, [pc, #60]	; (8009790 <SerializeTxFrame+0x40>)
 8009754:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009758:	b11b      	cbz	r3, 8009762 <SerializeTxFrame+0x12>
 800975a:	2b04      	cmp	r3, #4
 800975c:	d00a      	beq.n	8009774 <SerializeTxFrame+0x24>
 800975e:	2003      	movs	r0, #3
}
 8009760:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009762:	480c      	ldr	r0, [pc, #48]	; (8009794 <SerializeTxFrame+0x44>)
 8009764:	f004 fa71 	bl	800dc4a <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8009768:	b968      	cbnz	r0, 8009786 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800976a:	4b09      	ldr	r3, [pc, #36]	; (8009790 <SerializeTxFrame+0x40>)
 800976c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009770:	801a      	strh	r2, [r3, #0]
            break;
 8009772:	e7f5      	b.n	8009760 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8009774:	4807      	ldr	r0, [pc, #28]	; (8009794 <SerializeTxFrame+0x44>)
 8009776:	f004 fa9e 	bl	800dcb6 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800977a:	b930      	cbnz	r0, 800978a <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800977c:	4b04      	ldr	r3, [pc, #16]	; (8009790 <SerializeTxFrame+0x40>)
 800977e:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009782:	801a      	strh	r2, [r3, #0]
            break;
 8009784:	e7ec      	b.n	8009760 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009786:	2011      	movs	r0, #17
 8009788:	e7ea      	b.n	8009760 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800978a:	2011      	movs	r0, #17
 800978c:	e7e8      	b.n	8009760 <SerializeTxFrame+0x10>
 800978e:	bf00      	nop
 8009790:	20000654 	.word	0x20000654
 8009794:	2000075c 	.word	0x2000075c

08009798 <ComputeRxWindowParameters>:
{
 8009798:	b570      	push	{r4, r5, r6, lr}
 800979a:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800979c:	4c1d      	ldr	r4, [pc, #116]	; (8009814 <ComputeRxWindowParameters+0x7c>)
 800979e:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80097a2:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 80097a6:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 80097aa:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 80097ae:	4630      	mov	r0, r6
 80097b0:	f004 fbc6 	bl	800df40 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80097b4:	4d18      	ldr	r5, [pc, #96]	; (8009818 <ComputeRxWindowParameters+0x80>)
 80097b6:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80097be:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80097c2:	b241      	sxtb	r1, r0
 80097c4:	4630      	mov	r0, r6
 80097c6:	f004 fb4a 	bl	800de5e <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80097ca:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80097d2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80097d6:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 80097da:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80097de:	f004 fb3e 	bl	800de5e <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80097e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80097e4:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 80097e8:	440b      	add	r3, r1
 80097ea:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80097ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80097f0:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 80097f4:	4413      	add	r3, r2
 80097f6:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80097fa:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 80097fe:	b93b      	cbnz	r3, 8009810 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009800:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009802:	4419      	add	r1, r3
 8009804:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009808:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800980a:	440a      	add	r2, r1
 800980c:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 8009810:	b002      	add	sp, #8
 8009812:	bd70      	pop	{r4, r5, r6, pc}
 8009814:	20008000 	.word	0x20008000
 8009818:	20000654 	.word	0x20000654

0800981c <VerifyTxFrame>:
{
 800981c:	b510      	push	{r4, lr}
 800981e:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8009820:	2300      	movs	r3, #0
 8009822:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8009824:	4b0d      	ldr	r3, [pc, #52]	; (800985c <VerifyTxFrame+0x40>)
 8009826:	f893 411c 	ldrb.w	r4, [r3, #284]	; 0x11c
 800982a:	b914      	cbnz	r4, 8009832 <VerifyTxFrame+0x16>
}
 800982c:	4620      	mov	r0, r4
 800982e:	b002      	add	sp, #8
 8009830:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009832:	a801      	add	r0, sp, #4
 8009834:	f003 fc1e 	bl	800d074 <LoRaMacCommandsGetSizeSerializedCmds>
 8009838:	4604      	mov	r4, r0
 800983a:	b968      	cbnz	r0, 8009858 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800983c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009840:	4b06      	ldr	r3, [pc, #24]	; (800985c <VerifyTxFrame+0x40>)
 8009842:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8009846:	4b06      	ldr	r3, [pc, #24]	; (8009860 <VerifyTxFrame+0x44>)
 8009848:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800984c:	f7fe ff10 	bl	8008670 <ValidatePayloadLength>
 8009850:	2800      	cmp	r0, #0
 8009852:	d1eb      	bne.n	800982c <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8009854:	2408      	movs	r4, #8
 8009856:	e7e9      	b.n	800982c <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009858:	2413      	movs	r4, #19
 800985a:	e7e7      	b.n	800982c <VerifyTxFrame+0x10>
 800985c:	20008000 	.word	0x20008000
 8009860:	20000654 	.word	0x20000654

08009864 <SecureFrame>:
{
 8009864:	b530      	push	{r4, r5, lr}
 8009866:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 8009868:	2300      	movs	r3, #0
 800986a:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800986c:	4b18      	ldr	r3, [pc, #96]	; (80098d0 <SecureFrame+0x6c>)
 800986e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009872:	b133      	cbz	r3, 8009882 <SecureFrame+0x1e>
 8009874:	4605      	mov	r5, r0
 8009876:	460c      	mov	r4, r1
 8009878:	2b04      	cmp	r3, #4
 800987a:	d00b      	beq.n	8009894 <SecureFrame+0x30>
 800987c:	2003      	movs	r0, #3
}
 800987e:	b003      	add	sp, #12
 8009880:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009882:	4814      	ldr	r0, [pc, #80]	; (80098d4 <SecureFrame+0x70>)
 8009884:	f003 ffa6 	bl	800d7d4 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009888:	b9d8      	cbnz	r0, 80098c2 <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800988a:	4b11      	ldr	r3, [pc, #68]	; (80098d0 <SecureFrame+0x6c>)
 800988c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009890:	801a      	strh	r2, [r3, #0]
            break;
 8009892:	e7f4      	b.n	800987e <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009894:	a801      	add	r0, sp, #4
 8009896:	f003 ff53 	bl	800d740 <LoRaMacCryptoGetFCntUp>
 800989a:	b9a0      	cbnz	r0, 80098c6 <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800989c:	4b0c      	ldr	r3, [pc, #48]	; (80098d0 <SecureFrame+0x6c>)
 800989e:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80098a2:	b113      	cbz	r3, 80098aa <SecureFrame+0x46>
                fCntUp -= 1;
 80098a4:	9b01      	ldr	r3, [sp, #4]
 80098a6:	3b01      	subs	r3, #1
 80098a8:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80098aa:	4b0a      	ldr	r3, [pc, #40]	; (80098d4 <SecureFrame+0x70>)
 80098ac:	4622      	mov	r2, r4
 80098ae:	4629      	mov	r1, r5
 80098b0:	9801      	ldr	r0, [sp, #4]
 80098b2:	f003 ffb5 	bl	800d820 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80098b6:	b940      	cbnz	r0, 80098ca <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80098b8:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <SecureFrame+0x6c>)
 80098ba:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80098be:	801a      	strh	r2, [r3, #0]
            break;
 80098c0:	e7dd      	b.n	800987e <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80098c2:	2011      	movs	r0, #17
 80098c4:	e7db      	b.n	800987e <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80098c6:	2012      	movs	r0, #18
 80098c8:	e7d9      	b.n	800987e <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80098ca:	2011      	movs	r0, #17
 80098cc:	e7d7      	b.n	800987e <SecureFrame+0x1a>
 80098ce:	bf00      	nop
 80098d0:	20000654 	.word	0x20000654
 80098d4:	2000075c 	.word	0x2000075c

080098d8 <SendFrameOnChannel>:
{
 80098d8:	b570      	push	{r4, r5, r6, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	4606      	mov	r6, r0
    int8_t txPower = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 80098e4:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80098e8:	4d35      	ldr	r5, [pc, #212]	; (80099c0 <SendFrameOnChannel+0xe8>)
 80098ea:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 80098ee:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80098f2:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 80098f6:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80098fa:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80098fc:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80098fe:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8009900:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8009902:	4c30      	ldr	r4, [pc, #192]	; (80099c4 <SendFrameOnChannel+0xec>)
 8009904:	8823      	ldrh	r3, [r4, #0]
 8009906:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800990a:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 800990e:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009912:	f504 6384 	add.w	r3, r4, #1056	; 0x420
 8009916:	f10d 0207 	add.w	r2, sp, #7
 800991a:	a902      	add	r1, sp, #8
 800991c:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 8009920:	f004 fab4 	bl	800de8c <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800992a:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800992e:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8009932:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009936:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 800993a:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800993e:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
 8009942:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009946:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800994a:	f002 fe55 	bl	800c5f8 <LoRaMacClassBIsBeaconModeActive>
 800994e:	bb60      	cbnz	r0, 80099aa <SendFrameOnChannel+0xd2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009950:	4b1b      	ldr	r3, [pc, #108]	; (80099c0 <SendFrameOnChannel+0xe8>)
 8009952:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8009956:	2b01      	cmp	r3, #1
 8009958:	d02f      	beq.n	80099ba <SendFrameOnChannel+0xe2>
    LoRaMacClassBHaltBeaconing( );
 800995a:	f003 f817 	bl	800c98c <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800995e:	4b18      	ldr	r3, [pc, #96]	; (80099c0 <SendFrameOnChannel+0xe8>)
 8009960:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8009964:	4b17      	ldr	r3, [pc, #92]	; (80099c4 <SendFrameOnChannel+0xec>)
 8009966:	f893 141f 	ldrb.w	r1, [r3, #1055]	; 0x41f
 800996a:	b2c0      	uxtb	r0, r0
 800996c:	f7ff ff7a 	bl	8009864 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 8009970:	4604      	mov	r4, r0
 8009972:	b9b8      	cbnz	r0, 80099a4 <SendFrameOnChannel+0xcc>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009974:	4813      	ldr	r0, [pc, #76]	; (80099c4 <SendFrameOnChannel+0xec>)
 8009976:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800997a:	f043 0302 	orr.w	r3, r3, #2
 800997e:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 8009982:	f890 341c 	ldrb.w	r3, [r0, #1052]	; 0x41c
 8009986:	3301      	adds	r3, #1
 8009988:	b2db      	uxtb	r3, r3
 800998a:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800998e:	f880 3449 	strb.w	r3, [r0, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8009998:	4b0b      	ldr	r3, [pc, #44]	; (80099c8 <SendFrameOnChannel+0xf0>)
 800999a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999c:	f830 1b02 	ldrh.w	r1, [r0], #2
 80099a0:	b2c9      	uxtb	r1, r1
 80099a2:	4798      	blx	r3
}
 80099a4:	4620      	mov	r0, r4
 80099a6:	b006      	add	sp, #24
 80099a8:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80099aa:	f8d4 0420 	ldr.w	r0, [r4, #1056]	; 0x420
 80099ae:	f002 ffa9 	bl	800c904 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d0cc      	beq.n	8009950 <SendFrameOnChannel+0x78>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80099b6:	2410      	movs	r4, #16
 80099b8:	e7f4      	b.n	80099a4 <SendFrameOnChannel+0xcc>
        LoRaMacClassBStopRxSlots( );
 80099ba:	f002 ffc9 	bl	800c950 <LoRaMacClassBStopRxSlots>
 80099be:	e7cc      	b.n	800995a <SendFrameOnChannel+0x82>
 80099c0:	20008000 	.word	0x20008000
 80099c4:	20000654 	.word	0x20000654
 80099c8:	080139bc 	.word	0x080139bc

080099cc <ScheduleTx>:
{
 80099cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d0:	b08c      	sub	sp, #48	; 0x30
 80099d2:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 80099d4:	f7ff fdb6 	bl	8009544 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 80099d8:	4604      	mov	r4, r0
 80099da:	b118      	cbz	r0, 80099e4 <ScheduleTx+0x18>
}
 80099dc:	4620      	mov	r0, r4
 80099de:	b00c      	add	sp, #48	; 0x30
 80099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 80099e4:	f7fe fd50 	bl	8008488 <CalculateBackOff>
    status = SerializeTxFrame( );
 80099e8:	f7ff feb2 	bl	8009750 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 80099ec:	4604      	mov	r4, r0
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d1f4      	bne.n	80099dc <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80099f2:	4e36      	ldr	r6, [pc, #216]	; (8009acc <ScheduleTx+0x100>)
 80099f4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80099f6:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80099f8:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 80099fc:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8009a00:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 8009a04:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009a08:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	f008 fd29 	bl	8012464 <SysTimeGetMcuTime>
 8009a12:	af02      	add	r7, sp, #8
 8009a14:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 8009a1e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8009a22:	4638      	mov	r0, r7
 8009a24:	f008 fcbb 	bl	801239e <SysTimeSub>
 8009a28:	ab07      	add	r3, sp, #28
 8009a2a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009a2e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8009a32:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009a34:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 8009a36:	2300      	movs	r3, #0
 8009a38:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8009a42:	4b23      	ldr	r3, [pc, #140]	; (8009ad0 <ScheduleTx+0x104>)
 8009a44:	881b      	ldrh	r3, [r3, #0]
 8009a46:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009a4a:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8009a4e:	b92b      	cbnz	r3, 8009a5c <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 8009a50:	2301      	movs	r3, #1
 8009a52:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 8009a56:	2300      	movs	r3, #0
 8009a58:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8009a5c:	4a1c      	ldr	r2, [pc, #112]	; (8009ad0 <ScheduleTx+0x104>)
 8009a5e:	481b      	ldr	r0, [pc, #108]	; (8009acc <ScheduleTx+0x100>)
 8009a60:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	f502 6393 	add.w	r3, r2, #1176	; 0x498
 8009a6a:	f202 421f 	addw	r2, r2, #1055	; 0x41f
 8009a6e:	a904      	add	r1, sp, #16
 8009a70:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8009a74:	f004 fa57 	bl	800df26 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 8009a78:	b1b0      	cbz	r0, 8009aa8 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8009a7a:	280b      	cmp	r0, #11
 8009a7c:	d122      	bne.n	8009ac4 <ScheduleTx+0xf8>
 8009a7e:	b31d      	cbz	r5, 8009ac8 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8009a80:	4b13      	ldr	r3, [pc, #76]	; (8009ad0 <ScheduleTx+0x104>)
 8009a82:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 8009a86:	2900      	cmp	r1, #0
 8009a88:	d0a8      	beq.n	80099dc <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8009a8a:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8009a8e:	f042 0220 	orr.w	r2, r2, #32
 8009a92:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8009a96:	f503 755a 	add.w	r5, r3, #872	; 0x368
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	f008 fe4e 	bl	801273c <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f008 fe05 	bl	80126b0 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 8009aa6:	e799      	b.n	80099dc <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 8009aa8:	f7ff fe76 	bl	8009798 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 8009aac:	f7ff feb6 	bl	800981c <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d192      	bne.n	80099dc <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 8009ab6:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <ScheduleTx+0x104>)
 8009ab8:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 8009abc:	f7ff ff0c 	bl	80098d8 <SendFrameOnChannel>
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	e78b      	b.n	80099dc <ScheduleTx+0x10>
            return status;
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	e789      	b.n	80099dc <ScheduleTx+0x10>
 8009ac8:	4604      	mov	r4, r0
 8009aca:	e787      	b.n	80099dc <ScheduleTx+0x10>
 8009acc:	20008000 	.word	0x20008000
 8009ad0:	20000654 	.word	0x20000654

08009ad4 <OnTxDelayedTimerEvent>:
{
 8009ad4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8009ad6:	4c16      	ldr	r4, [pc, #88]	; (8009b30 <OnTxDelayedTimerEvent+0x5c>)
 8009ad8:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009adc:	f008 fd8e 	bl	80125fc <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009ae0:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009ae4:	f023 0320 	bic.w	r3, r3, #32
 8009ae8:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8009aec:	f8d4 149c 	ldr.w	r1, [r4, #1180]	; 0x49c
 8009af0:	4b10      	ldr	r3, [pc, #64]	; (8009b34 <OnTxDelayedTimerEvent+0x60>)
 8009af2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8009af6:	f7ff fdeb 	bl	80096d0 <LoRaMacHandleResponseTimeout>
 8009afa:	b100      	cbz	r0, 8009afe <OnTxDelayedTimerEvent+0x2a>
}
 8009afc:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 8009afe:	2001      	movs	r0, #1
 8009b00:	f7ff ff64 	bl	80099cc <ScheduleTx>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d0f9      	beq.n	8009afc <OnTxDelayedTimerEvent+0x28>
 8009b08:	280b      	cmp	r0, #11
 8009b0a:	d0f7      	beq.n	8009afc <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009b0c:	4b09      	ldr	r3, [pc, #36]	; (8009b34 <OnTxDelayedTimerEvent+0x60>)
 8009b0e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8009b12:	f884 2446 	strb.w	r2, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8009b16:	f894 241c 	ldrb.w	r2, [r4, #1052]	; 0x41c
 8009b1a:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009b1e:	2009      	movs	r0, #9
 8009b20:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8009b24:	f003 fbd8 	bl	800d2d8 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009b28:	f7fe fd40 	bl	80085ac <StopRetransmission>
            break;
 8009b2c:	e7e6      	b.n	8009afc <OnTxDelayedTimerEvent+0x28>
 8009b2e:	bf00      	nop
 8009b30:	20000654 	.word	0x20000654
 8009b34:	20008000 	.word	0x20008000

08009b38 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009b38:	4b1c      	ldr	r3, [pc, #112]	; (8009bac <LoRaMacHandleMcpsRequest+0x74>)
 8009b3a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009b3e:	f013 0f01 	tst.w	r3, #1
 8009b42:	d032      	beq.n	8009baa <LoRaMacHandleMcpsRequest+0x72>
{
 8009b44:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8009b46:	4b19      	ldr	r3, [pc, #100]	; (8009bac <LoRaMacHandleMcpsRequest+0x74>)
 8009b48:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8009b4c:	b12b      	cbz	r3, 8009b5a <LoRaMacHandleMcpsRequest+0x22>
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	d003      	beq.n	8009b5a <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d006      	beq.n	8009b64 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 8009b56:	2000      	movs	r0, #0
 8009b58:	e002      	b.n	8009b60 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8009b5a:	f7fe fced 	bl	8008538 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 8009b5e:	b940      	cbnz	r0, 8009b72 <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 8009b60:	b1b8      	cbz	r0, 8009b92 <LoRaMacHandleMcpsRequest+0x5a>
}
 8009b62:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 8009b64:	4b11      	ldr	r3, [pc, #68]	; (8009bac <LoRaMacHandleMcpsRequest+0x74>)
 8009b66:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 8009b6a:	b183      	cbz	r3, 8009b8e <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 8009b6c:	f7fe fd00 	bl	8008570 <CheckRetransConfirmedUplink>
 8009b70:	e7f5      	b.n	8009b5e <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 8009b72:	4c0e      	ldr	r4, [pc, #56]	; (8009bac <LoRaMacHandleMcpsRequest+0x74>)
 8009b74:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009b78:	f008 fd40 	bl	80125fc <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009b7c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 8009b80:	f023 0320 	bic.w	r3, r3, #32
 8009b84:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 8009b88:	f7fe fd10 	bl	80085ac <StopRetransmission>
 8009b8c:	e7e9      	b.n	8009b62 <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 8009b8e:	2001      	movs	r0, #1
 8009b90:	e7e6      	b.n	8009b60 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8009b92:	4b06      	ldr	r3, [pc, #24]	; (8009bac <LoRaMacHandleMcpsRequest+0x74>)
 8009b94:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8009b98:	f36f 1245 	bfc	r2, #5, #1
 8009b9c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 8009ba0:	f883 041d 	strb.w	r0, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 8009ba4:	f7ff ff96 	bl	8009ad4 <OnTxDelayedTimerEvent>
}
 8009ba8:	e7db      	b.n	8009b62 <LoRaMacHandleMcpsRequest+0x2a>
 8009baa:	4770      	bx	lr
 8009bac:	20000654 	.word	0x20000654

08009bb0 <LoRaMacHandleRequestEvents>:
{
 8009bb0:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009bb2:	4b22      	ldr	r3, [pc, #136]	; (8009c3c <LoRaMacHandleRequestEvents+0x8c>)
 8009bb4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009bb8:	bb7b      	cbnz	r3, 8009c1a <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009bba:	4b20      	ldr	r3, [pc, #128]	; (8009c3c <LoRaMacHandleRequestEvents+0x8c>)
 8009bbc:	f893 4495 	ldrb.w	r4, [r3, #1173]	; 0x495
 8009bc0:	f014 0501 	ands.w	r5, r4, #1
 8009bc4:	d005      	beq.n	8009bd2 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8009bc6:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8009bca:	f36f 0200 	bfc	r2, #0, #1
 8009bce:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009bd2:	4b1a      	ldr	r3, [pc, #104]	; (8009c3c <LoRaMacHandleRequestEvents+0x8c>)
 8009bd4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009bd8:	f013 0f04 	tst.w	r3, #4
 8009bdc:	d006      	beq.n	8009bec <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009bde:	4b17      	ldr	r3, [pc, #92]	; (8009c3c <LoRaMacHandleRequestEvents+0x8c>)
 8009be0:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8009be4:	f36f 0282 	bfc	r2, #2, #1
 8009be8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009bec:	2001      	movs	r0, #1
 8009bee:	f7fe fbfb 	bl	80083e8 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 8009bf2:	b135      	cbz	r5, 8009c02 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8009bf4:	4811      	ldr	r0, [pc, #68]	; (8009c3c <LoRaMacHandleRequestEvents+0x8c>)
 8009bf6:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f200 4044 	addw	r0, r0, #1092	; 0x444
 8009c00:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8009c02:	f014 0f04 	tst.w	r4, #4
 8009c06:	d109      	bne.n	8009c1c <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 8009c08:	f002 fd14 	bl	800c634 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009c0c:	4b0b      	ldr	r3, [pc, #44]	; (8009c3c <LoRaMacHandleRequestEvents+0x8c>)
 8009c0e:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8009c12:	f36f 1245 	bfc	r2, #5, #1
 8009c16:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
}
 8009c1a:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009c1c:	4808      	ldr	r0, [pc, #32]	; (8009c40 <LoRaMacHandleRequestEvents+0x90>)
 8009c1e:	f003 fb85 	bl	800d32c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8009c22:	f003 fbb5 	bl	800d390 <LoRaMacConfirmQueueGetCnt>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	d0ee      	beq.n	8009c08 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009c2a:	4a04      	ldr	r2, [pc, #16]	; (8009c3c <LoRaMacHandleRequestEvents+0x8c>)
 8009c2c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8009c30:	f043 0304 	orr.w	r3, r3, #4
 8009c34:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 8009c38:	e7e6      	b.n	8009c08 <LoRaMacHandleRequestEvents+0x58>
 8009c3a:	bf00      	nop
 8009c3c:	20000654 	.word	0x20000654
 8009c40:	20000aac 	.word	0x20000aac

08009c44 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 8009c44:	4b07      	ldr	r3, [pc, #28]	; (8009c64 <LoRaMacHandleScheduleUplinkEvent+0x20>)
 8009c46:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009c4a:	b103      	cbz	r3, 8009c4e <LoRaMacHandleScheduleUplinkEvent+0xa>
 8009c4c:	4770      	bx	lr
{
 8009c4e:	b500      	push	{lr}
 8009c50:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 8009c52:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8009c56:	f10d 0007 	add.w	r0, sp, #7
 8009c5a:	f003 fa49 	bl	800d0f0 <LoRaMacCommandsStickyCmdsPending>
}
 8009c5e:	b003      	add	sp, #12
 8009c60:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c64:	20000654 	.word	0x20000654

08009c68 <OpenContinuousRxCWindow>:
{
 8009c68:	b570      	push	{r4, r5, r6, lr}
 8009c6a:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8009c6c:	4c16      	ldr	r4, [pc, #88]	; (8009cc8 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009c6e:	4d17      	ldr	r5, [pc, #92]	; (8009ccc <OpenContinuousRxCWindow+0x64>)
 8009c70:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 8009c74:	9600      	str	r6, [sp, #0]
 8009c76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009c78:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8009c7c:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 8009c80:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009c84:	f004 f8eb 	bl	800de5e <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009c88:	2302      	movs	r3, #2
 8009c8a:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009c8e:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009c92:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009c96:	2301      	movs	r3, #1
 8009c98:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009c9c:	f505 6285 	add.w	r2, r5, #1064	; 0x428
 8009ca0:	4631      	mov	r1, r6
 8009ca2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009ca6:	f004 f8e6 	bl	800de76 <RegionRxConfig>
 8009caa:	b158      	cbz	r0, 8009cc4 <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8009cac:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 8009cb0:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8009cb4:	4b06      	ldr	r3, [pc, #24]	; (8009cd0 <OpenContinuousRxCWindow+0x68>)
 8009cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb8:	2000      	movs	r0, #0
 8009cba:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8009cbc:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 8009cc0:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 8009cc4:	b002      	add	sp, #8
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	20008000 	.word	0x20008000
 8009ccc:	20000654 	.word	0x20000654
 8009cd0:	080139bc 	.word	0x080139bc

08009cd4 <RxWindowSetup>:
{
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8009cd8:	f008 fc90 	bl	80125fc <UTIL_TIMER_Stop>
    Radio.Standby( );
 8009cdc:	4b0c      	ldr	r3, [pc, #48]	; (8009d10 <RxWindowSetup+0x3c>)
 8009cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce0:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009ce2:	4a0c      	ldr	r2, [pc, #48]	; (8009d14 <RxWindowSetup+0x40>)
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <RxWindowSetup+0x44>)
 8009ce8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009cec:	f004 f8c3 	bl	800de76 <RegionRxConfig>
 8009cf0:	b160      	cbz	r0, 8009d0c <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8009cf2:	4d0a      	ldr	r5, [pc, #40]	; (8009d1c <RxWindowSetup+0x48>)
 8009cf4:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 8009cf8:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8009cfc:	4b04      	ldr	r3, [pc, #16]	; (8009d10 <RxWindowSetup+0x3c>)
 8009cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d00:	4a05      	ldr	r2, [pc, #20]	; (8009d18 <RxWindowSetup+0x44>)
 8009d02:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8009d04:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8009d06:	7ce3      	ldrb	r3, [r4, #19]
 8009d08:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 8009d0c:	bd38      	pop	{r3, r4, r5, pc}
 8009d0e:	bf00      	nop
 8009d10:	080139bc 	.word	0x080139bc
 8009d14:	20000a7c 	.word	0x20000a7c
 8009d18:	20008000 	.word	0x20008000
 8009d1c:	20000654 	.word	0x20000654

08009d20 <OnRxWindow2TimerEvent>:
{
 8009d20:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009d22:	4b13      	ldr	r3, [pc, #76]	; (8009d70 <OnRxWindow2TimerEvent+0x50>)
 8009d24:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8009d28:	b903      	cbnz	r3, 8009d2c <OnRxWindow2TimerEvent+0xc>
}
 8009d2a:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009d2c:	4810      	ldr	r0, [pc, #64]	; (8009d70 <OnRxWindow2TimerEvent+0x50>)
 8009d2e:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 8009d32:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009d36:	4b0f      	ldr	r3, [pc, #60]	; (8009d74 <OnRxWindow2TimerEvent+0x54>)
 8009d38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009d3a:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009d3e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009d42:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009d46:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8009d4a:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009d54:	2201      	movs	r2, #1
 8009d56:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009d5a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009d5e:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009d62:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 8009d66:	f500 7066 	add.w	r0, r0, #920	; 0x398
 8009d6a:	f7ff ffb3 	bl	8009cd4 <RxWindowSetup>
 8009d6e:	e7dc      	b.n	8009d2a <OnRxWindow2TimerEvent+0xa>
 8009d70:	20000654 	.word	0x20000654
 8009d74:	20008000 	.word	0x20008000

08009d78 <OnRxWindow1TimerEvent>:
{
 8009d78:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8009d7a:	4811      	ldr	r0, [pc, #68]	; (8009dc0 <OnRxWindow1TimerEvent+0x48>)
 8009d7c:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 8009d80:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8009d84:	4b0f      	ldr	r3, [pc, #60]	; (8009dc4 <OnRxWindow1TimerEvent+0x4c>)
 8009d86:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 8009d8a:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009d8e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8009d92:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009d96:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8009d9a:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8009da4:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009da8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009dac:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009db0:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 8009db4:	f500 7060 	add.w	r0, r0, #896	; 0x380
 8009db8:	f7ff ff8c 	bl	8009cd4 <RxWindowSetup>
}
 8009dbc:	bd08      	pop	{r3, pc}
 8009dbe:	bf00      	nop
 8009dc0:	20000654 	.word	0x20000654
 8009dc4:	20008000 	.word	0x20008000

08009dc8 <LoRaMacHandleNvm>:
{
 8009dc8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 8009dca:	4b30      	ldr	r3, [pc, #192]	; (8009e8c <LoRaMacHandleNvm+0xc4>)
 8009dcc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009dd0:	b103      	cbz	r3, 8009dd4 <LoRaMacHandleNvm+0xc>
}
 8009dd2:	bd38      	pop	{r3, r4, r5, pc}
 8009dd4:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8009dd6:	2124      	movs	r1, #36	; 0x24
 8009dd8:	f006 fa34 	bl	8010244 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8009ddc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dde:	4283      	cmp	r3, r0
 8009de0:	d052      	beq.n	8009e88 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 8009de2:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8009de4:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8009de6:	2114      	movs	r1, #20
 8009de8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009dec:	f006 fa2a 	bl	8010244 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8009df0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009df2:	4283      	cmp	r3, r0
 8009df4:	d002      	beq.n	8009dfc <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 8009df6:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009df8:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009dfc:	21e0      	movs	r1, #224	; 0xe0
 8009dfe:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8009e02:	f006 fa1f 	bl	8010244 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8009e06:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009e0a:	4283      	cmp	r3, r0
 8009e0c:	d003      	beq.n	8009e16 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 8009e0e:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8009e12:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8009e16:	21bc      	movs	r1, #188	; 0xbc
 8009e18:	f504 7092 	add.w	r0, r4, #292	; 0x124
 8009e1c:	f006 fa12 	bl	8010244 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8009e20:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8009e24:	4283      	cmp	r3, r0
 8009e26:	d003      	beq.n	8009e30 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 8009e28:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009e2c:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009e30:	2100      	movs	r1, #0
 8009e32:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 8009e36:	f006 fa05 	bl	8010244 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8009e3a:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
 8009e3e:	4283      	cmp	r3, r0
 8009e40:	d003      	beq.n	8009e4a <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 8009e42:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8009e46:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8009e4a:	f44f 715e 	mov.w	r1, #888	; 0x378
 8009e4e:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
 8009e52:	f006 f9f7 	bl	8010244 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8009e56:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
 8009e5a:	4283      	cmp	r3, r0
 8009e5c:	d003      	beq.n	8009e66 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 8009e5e:	f8c4 0560 	str.w	r0, [r4, #1376]	; 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8009e62:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8009e66:	2114      	movs	r1, #20
 8009e68:	f204 5064 	addw	r0, r4, #1380	; 0x564
 8009e6c:	f006 f9ea 	bl	8010244 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8009e70:	f8d4 3578 	ldr.w	r3, [r4, #1400]	; 0x578
 8009e74:	4283      	cmp	r3, r0
 8009e76:	d003      	beq.n	8009e80 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 8009e78:	f8c4 0578 	str.w	r0, [r4, #1400]	; 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8009e7c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 8009e80:	4628      	mov	r0, r5
 8009e82:	f7fe fbbd 	bl	8008600 <CallNvmDataChangeCallback>
 8009e86:	e7a4      	b.n	8009dd2 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8009e88:	2500      	movs	r5, #0
 8009e8a:	e7ac      	b.n	8009de6 <LoRaMacHandleNvm+0x1e>
 8009e8c:	20000654 	.word	0x20000654

08009e90 <RestoreNvmData>:
{
 8009e90:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8009e92:	4b34      	ldr	r3, [pc, #208]	; (8009f64 <RestoreNvmData+0xd4>)
 8009e94:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d001      	beq.n	8009ea0 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 8009e9c:	2001      	movs	r0, #1
}
 8009e9e:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8009ea0:	4c31      	ldr	r4, [pc, #196]	; (8009f68 <RestoreNvmData+0xd8>)
 8009ea2:	2124      	movs	r1, #36	; 0x24
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f006 f9cd 	bl	8010244 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 8009eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eac:	4283      	cmp	r3, r0
 8009eae:	d001      	beq.n	8009eb4 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009eb0:	2017      	movs	r0, #23
 8009eb2:	e7f4      	b.n	8009e9e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8009eb4:	2114      	movs	r1, #20
 8009eb6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009eba:	f006 f9c3 	bl	8010244 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8009ebe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009ec0:	4283      	cmp	r3, r0
 8009ec2:	d001      	beq.n	8009ec8 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009ec4:	2017      	movs	r0, #23
 8009ec6:	e7ea      	b.n	8009e9e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8009ec8:	21e0      	movs	r1, #224	; 0xe0
 8009eca:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8009ece:	f006 f9b9 	bl	8010244 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8009ed2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009ed6:	4283      	cmp	r3, r0
 8009ed8:	d001      	beq.n	8009ede <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009eda:	2017      	movs	r0, #23
 8009edc:	e7df      	b.n	8009e9e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8009ede:	21bc      	movs	r1, #188	; 0xbc
 8009ee0:	f504 7092 	add.w	r0, r4, #292	; 0x124
 8009ee4:	f006 f9ae 	bl	8010244 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 8009ee8:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8009eec:	4283      	cmp	r3, r0
 8009eee:	d001      	beq.n	8009ef4 <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009ef0:	2017      	movs	r0, #23
 8009ef2:	e7d4      	b.n	8009e9e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 8009efa:	f006 f9a3 	bl	8010244 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8009efe:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
 8009f02:	4283      	cmp	r3, r0
 8009f04:	d001      	beq.n	8009f0a <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009f06:	2017      	movs	r0, #23
 8009f08:	e7c9      	b.n	8009e9e <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8009f0a:	2114      	movs	r1, #20
 8009f0c:	f204 5064 	addw	r0, r4, #1380	; 0x564
 8009f10:	f006 f998 	bl	8010244 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 8009f14:	f8d4 3578 	ldr.w	r3, [r4, #1400]	; 0x578
 8009f18:	4283      	cmp	r3, r0
 8009f1a:	d001      	beq.n	8009f20 <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009f1c:	2017      	movs	r0, #23
 8009f1e:	e7be      	b.n	8009e9e <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8009f20:	4625      	mov	r5, r4
 8009f22:	4c12      	ldr	r4, [pc, #72]	; (8009f6c <RestoreNvmData+0xdc>)
 8009f24:	f240 527c 	movw	r2, #1404	; 0x57c
 8009f28:	4629      	mov	r1, r5
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f006 f969 	bl	8010202 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8009f30:	f240 527c 	movw	r2, #1404	; 0x57c
 8009f34:	2100      	movs	r1, #0
 8009f36:	4628      	mov	r0, r5
 8009f38:	f006 f97b 	bl	8010232 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009f3c:	4b09      	ldr	r3, [pc, #36]	; (8009f64 <RestoreNvmData+0xd4>)
 8009f3e:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8009f42:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009f46:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009f48:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009f4c:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 8009f50:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    return LORAMAC_STATUS_OK;
 8009f60:	2000      	movs	r0, #0
 8009f62:	e79c      	b.n	8009e9e <RestoreNvmData+0xe>
 8009f64:	20000654 	.word	0x20000654
 8009f68:	2000857c 	.word	0x2000857c
 8009f6c:	20008000 	.word	0x20008000

08009f70 <OnRadioRxTimeout>:
{
 8009f70:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8009f72:	4a09      	ldr	r2, [pc, #36]	; (8009f98 <OnRadioRxTimeout+0x28>)
 8009f74:	7813      	ldrb	r3, [r2, #0]
 8009f76:	f043 0302 	orr.w	r3, r3, #2
 8009f7a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009f7c:	4b07      	ldr	r3, [pc, #28]	; (8009f9c <OnRadioRxTimeout+0x2c>)
 8009f7e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009f82:	b113      	cbz	r3, 8009f8a <OnRadioRxTimeout+0x1a>
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	b103      	cbz	r3, 8009f8a <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009f88:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8009f8a:	4b05      	ldr	r3, [pc, #20]	; (8009fa0 <OnRadioRxTimeout+0x30>)
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	2100      	movs	r1, #0
 8009f90:	2002      	movs	r0, #2
 8009f92:	f007 ffdf 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 8009f96:	bd08      	pop	{r3, pc}
 8009f98:	20000650 	.word	0x20000650
 8009f9c:	20000654 	.word	0x20000654
 8009fa0:	08013318 	.word	0x08013318

08009fa4 <OnRadioTxTimeout>:
{
 8009fa4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8009fa6:	4a09      	ldr	r2, [pc, #36]	; (8009fcc <OnRadioTxTimeout+0x28>)
 8009fa8:	7813      	ldrb	r3, [r2, #0]
 8009faa:	f043 0308 	orr.w	r3, r3, #8
 8009fae:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009fb0:	4b07      	ldr	r3, [pc, #28]	; (8009fd0 <OnRadioTxTimeout+0x2c>)
 8009fb2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009fb6:	b113      	cbz	r3, 8009fbe <OnRadioTxTimeout+0x1a>
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	b103      	cbz	r3, 8009fbe <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009fbc:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8009fbe:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <OnRadioTxTimeout+0x30>)
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	2002      	movs	r0, #2
 8009fc6:	f007 ffc5 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 8009fca:	bd08      	pop	{r3, pc}
 8009fcc:	20000650 	.word	0x20000650
 8009fd0:	20000654 	.word	0x20000654
 8009fd4:	08013328 	.word	0x08013328

08009fd8 <OnRadioRxDone>:
{
 8009fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fdc:	4680      	mov	r8, r0
 8009fde:	460f      	mov	r7, r1
 8009fe0:	4616      	mov	r6, r2
 8009fe2:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8009fe4:	f008 faca 	bl	801257c <UTIL_TIMER_GetCurrentTime>
 8009fe8:	4c0f      	ldr	r4, [pc, #60]	; (800a028 <OnRadioRxDone+0x50>)
 8009fea:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8009fec:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8009ff0:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 8009ff2:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8009ff4:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8009ff6:	4b0d      	ldr	r3, [pc, #52]	; (800a02c <OnRadioRxDone+0x54>)
 8009ff8:	781a      	ldrb	r2, [r3, #0]
 8009ffa:	f042 0210 	orr.w	r2, r2, #16
 8009ffe:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800a000:	b2d2      	uxtb	r2, r2
 800a002:	f042 0201 	orr.w	r2, r2, #1
 800a006:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a008:	4b09      	ldr	r3, [pc, #36]	; (800a030 <OnRadioRxDone+0x58>)
 800a00a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800a00e:	b113      	cbz	r3, 800a016 <OnRadioRxDone+0x3e>
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	b103      	cbz	r3, 800a016 <OnRadioRxDone+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a014:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800a016:	4b07      	ldr	r3, [pc, #28]	; (800a034 <OnRadioRxDone+0x5c>)
 800a018:	2201      	movs	r2, #1
 800a01a:	2100      	movs	r1, #0
 800a01c:	2002      	movs	r0, #2
 800a01e:	f007 ff99 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 800a022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a026:	bf00      	nop
 800a028:	20000c04 	.word	0x20000c04
 800a02c:	20000650 	.word	0x20000650
 800a030:	20000654 	.word	0x20000654
 800a034:	08013338 	.word	0x08013338

0800a038 <OnRadioTxDone>:
{
 800a038:	b530      	push	{r4, r5, lr}
 800a03a:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800a03c:	f008 fa9e 	bl	801257c <UTIL_TIMER_GetCurrentTime>
 800a040:	4b0f      	ldr	r3, [pc, #60]	; (800a080 <OnRadioTxDone+0x48>)
 800a042:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800a044:	4d0f      	ldr	r5, [pc, #60]	; (800a084 <OnRadioTxDone+0x4c>)
 800a046:	466c      	mov	r4, sp
 800a048:	4620      	mov	r0, r4
 800a04a:	f008 f9e9 	bl	8012420 <SysTimeGet>
 800a04e:	f505 734e 	add.w	r3, r5, #824	; 0x338
 800a052:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a056:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800a05a:	4a0b      	ldr	r2, [pc, #44]	; (800a088 <OnRadioTxDone+0x50>)
 800a05c:	7813      	ldrb	r3, [r2, #0]
 800a05e:	f043 0320 	orr.w	r3, r3, #32
 800a062:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800a064:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800a068:	b113      	cbz	r3, 800a070 <OnRadioTxDone+0x38>
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	b103      	cbz	r3, 800a070 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800a06e:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800a070:	4b06      	ldr	r3, [pc, #24]	; (800a08c <OnRadioTxDone+0x54>)
 800a072:	2201      	movs	r2, #1
 800a074:	2100      	movs	r1, #0
 800a076:	2002      	movs	r0, #2
 800a078:	f007 ff6c 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 800a07c:	b003      	add	sp, #12
 800a07e:	bd30      	pop	{r4, r5, pc}
 800a080:	20000c14 	.word	0x20000c14
 800a084:	20000654 	.word	0x20000654
 800a088:	20000650 	.word	0x20000650
 800a08c:	08013348 	.word	0x08013348

0800a090 <ResetMacParameters>:
{
 800a090:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a092:	b091      	sub	sp, #68	; 0x44
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800a094:	4c53      	ldr	r4, [pc, #332]	; (800a1e4 <ResetMacParameters+0x154>)
 800a096:	2600      	movs	r6, #0
 800a098:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
    Nvm.MacGroup1.AdrAckCounter = 0;
 800a09c:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800a09e:	4d52      	ldr	r5, [pc, #328]	; (800a1e8 <ResetMacParameters+0x158>)
 800a0a0:	f885 641c 	strb.w	r6, [r5, #1052]	; 0x41c
    MacCtx.RetransmitTimeoutRetry = false;
 800a0a4:	f885 641d 	strb.w	r6, [r5, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 800a0a8:	f8c5 649c 	str.w	r6, [r5, #1180]	; 0x49c
    Nvm.MacGroup2.MaxDCycle = 0;
 800a0ac:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800a0b0:	2701      	movs	r7, #1
 800a0b2:	f8a4 710c 	strh.w	r7, [r4, #268]	; 0x10c
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a0b6:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 800a0ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a0be:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 800a0c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800a0c6:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800a0ca:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a0ce:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800a0d2:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 800a0d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a0da:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a0de:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800a0e2:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 800a0e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a0ea:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800a0ee:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800a0f2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800a0f6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800a0fa:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800a0fe:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800a102:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800a104:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800a108:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 800a10a:	f885 641e 	strb.w	r6, [r5, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 800a10e:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800a112:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 800a116:	f884 610a 	strb.w	r6, [r4, #266]	; 0x10a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800a11a:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a11e:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800a122:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a124:	f504 73f4 	add.w	r3, r4, #488	; 0x1e8
 800a128:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800a12a:	4b30      	ldr	r3, [pc, #192]	; (800a1ec <ResetMacParameters+0x15c>)
 800a12c:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a12e:	a901      	add	r1, sp, #4
 800a130:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a134:	f003 fe6f 	bl	800de16 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800a138:	f885 641f 	strb.w	r6, [r5, #1055]	; 0x41f
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800a13c:	f885 63d0 	strb.w	r6, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800a140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a142:	f8c5 33d4 	str.w	r3, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a146:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800a14a:	f885 33e0 	strb.w	r3, [r5, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800a14e:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800a152:	f885 33e1 	strb.w	r3, [r5, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800a156:	f885 63e2 	strb.w	r6, [r5, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800a15a:	f885 73e3 	strb.w	r7, [r5, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a15e:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800a162:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800a166:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 800a16a:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
 800a16e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a174:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800a178:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800a17c:	f885 73fa 	strb.w	r7, [r5, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a180:	2302      	movs	r3, #2
 800a182:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800a186:	960e      	str	r6, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800a188:	960f      	str	r6, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800a18a:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800a18e:	b11b      	cbz	r3, 800a198 <ResetMacParameters+0x108>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800a190:	685a      	ldr	r2, [r3, #4]
 800a192:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800a198:	4b13      	ldr	r3, [pc, #76]	; (800a1e8 <ResetMacParameters+0x158>)
 800a19a:	f203 426c 	addw	r2, r3, #1132	; 0x46c
 800a19e:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800a1a0:	f203 4224 	addw	r2, r3, #1060	; 0x424
 800a1a4:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800a1a6:	f503 628b 	add.w	r2, r3, #1112	; 0x458
 800a1aa:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800a1ac:	f203 4395 	addw	r3, r3, #1173	; 0x495
 800a1b0:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800a1b2:	4a0c      	ldr	r2, [pc, #48]	; (800a1e4 <ResetMacParameters+0x154>)
 800a1b4:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 800a1b8:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800a1ba:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800a1be:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800a1c0:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800a1c4:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800a1c6:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 800a1ca:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800a1cc:	f502 738e 	add.w	r3, r2, #284	; 0x11c
 800a1d0:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800a1d2:	f202 5264 	addw	r2, r2, #1380	; 0x564
 800a1d6:	a90e      	add	r1, sp, #56	; 0x38
 800a1d8:	a805      	add	r0, sp, #20
 800a1da:	f002 f859 	bl	800c290 <LoRaMacClassBInit>
}
 800a1de:	b011      	add	sp, #68	; 0x44
 800a1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20008000 	.word	0x20008000
 800a1e8:	20000654 	.word	0x20000654
 800a1ec:	20000b74 	.word	0x20000b74

0800a1f0 <SwitchClass>:
{
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800a1f4:	4b3e      	ldr	r3, [pc, #248]	; (800a2f0 <SwitchClass+0x100>)
 800a1f6:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 800a1fa:	2d01      	cmp	r5, #1
 800a1fc:	d065      	beq.n	800a2ca <SwitchClass+0xda>
 800a1fe:	2d02      	cmp	r5, #2
 800a200:	d06b      	beq.n	800a2da <SwitchClass+0xea>
 800a202:	b10d      	cbz	r5, 800a208 <SwitchClass+0x18>
 800a204:	2003      	movs	r0, #3
}
 800a206:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800a208:	b930      	cbnz	r0, 800a218 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a20a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a20e:	3364      	adds	r3, #100	; 0x64
 800a210:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a214:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 800a218:	2c01      	cmp	r4, #1
 800a21a:	d022      	beq.n	800a262 <SwitchClass+0x72>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a21c:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 800a21e:	2c02      	cmp	r4, #2
 800a220:	d1f1      	bne.n	800a206 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a222:	4b33      	ldr	r3, [pc, #204]	; (800a2f0 <SwitchClass+0x100>)
 800a224:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800a228:	4e32      	ldr	r6, [pc, #200]	; (800a2f4 <SwitchClass+0x104>)
 800a22a:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800a22e:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800a232:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a238:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800a23c:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a240:	2302      	movs	r3, #2
 800a242:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a246:	2300      	movs	r3, #0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	dd13      	ble.n	800a274 <SwitchClass+0x84>
                MacCtx.NodeAckRequested = false;
 800a24c:	4b29      	ldr	r3, [pc, #164]	; (800a2f4 <SwitchClass+0x104>)
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                Radio.Sleep( );
 800a254:	4b28      	ldr	r3, [pc, #160]	; (800a2f8 <SwitchClass+0x108>)
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800a25a:	f7ff fd05 	bl	8009c68 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800a25e:	4628      	mov	r0, r5
 800a260:	e7d1      	b.n	800a206 <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800a262:	4620      	mov	r0, r4
 800a264:	f002 fbbe 	bl	800c9e4 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800a268:	2800      	cmp	r0, #0
 800a26a:	d1d8      	bne.n	800a21e <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800a26c:	4b20      	ldr	r3, [pc, #128]	; (800a2f0 <SwitchClass+0x100>)
 800a26e:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800a272:	e7d4      	b.n	800a21e <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800a274:	4618      	mov	r0, r3
 800a276:	4a1e      	ldr	r2, [pc, #120]	; (800a2f0 <SwitchClass+0x100>)
 800a278:	212c      	movs	r1, #44	; 0x2c
 800a27a:	fb01 2203 	mla	r2, r1, r3, r2
 800a27e:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 800a282:	b912      	cbnz	r2, 800a28a <SwitchClass+0x9a>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800a284:	3301      	adds	r3, #1
 800a286:	b25b      	sxtb	r3, r3
 800a288:	e7de      	b.n	800a248 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800a28a:	4a19      	ldr	r2, [pc, #100]	; (800a2f0 <SwitchClass+0x100>)
 800a28c:	fb01 2000 	mla	r0, r1, r0, r2
 800a290:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 800a294:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800a296:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 800a29a:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800a29e:	4b15      	ldr	r3, [pc, #84]	; (800a2f4 <SwitchClass+0x104>)
 800a2a0:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 800a2a4:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800a2a8:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800a2ac:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 800a2b0:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800a2b4:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800a2b8:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a2bc:	2203      	movs	r2, #3
 800a2be:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800a2c8:	e7c0      	b.n	800a24c <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800a2ca:	f002 fb8b 	bl	800c9e4 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d199      	bne.n	800a206 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a2d2:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <SwitchClass+0x100>)
 800a2d4:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800a2d8:	e795      	b.n	800a206 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800a2da:	b938      	cbnz	r0, 800a2ec <SwitchClass+0xfc>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800a2dc:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <SwitchClass+0x100>)
 800a2de:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 800a2e2:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <SwitchClass+0x108>)
 800a2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e6:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	e78c      	b.n	800a206 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a2ec:	2003      	movs	r0, #3
 800a2ee:	e78a      	b.n	800a206 <SwitchClass+0x16>
 800a2f0:	20008000 	.word	0x20008000
 800a2f4:	20000654 	.word	0x20000654
 800a2f8:	080139bc 	.word	0x080139bc

0800a2fc <SendReJoinReq>:
{
 800a2fc:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800a2fe:	28ff      	cmp	r0, #255	; 0xff
 800a300:	d003      	beq.n	800a30a <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800a302:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800a304:	f7ff fb62 	bl	80099cc <ScheduleTx>
}
 800a308:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800a30a:	2000      	movs	r0, #0
 800a30c:	f7ff ff70 	bl	800a1f0 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800a310:	4d0e      	ldr	r5, [pc, #56]	; (800a34c <SendReJoinReq+0x50>)
 800a312:	2400      	movs	r4, #0
 800a314:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800a318:	1cab      	adds	r3, r5, #2
 800a31a:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a31e:	23ff      	movs	r3, #255	; 0xff
 800a320:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800a324:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800a328:	f005 ff3a 	bl	80101a0 <SecureElementGetJoinEui>
 800a32c:	4601      	mov	r1, r0
 800a32e:	2208      	movs	r2, #8
 800a330:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800a334:	f005 ff65 	bl	8010202 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800a338:	f005 ff1c 	bl	8010174 <SecureElementGetDevEui>
 800a33c:	4601      	mov	r1, r0
 800a33e:	2208      	movs	r2, #8
 800a340:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800a344:	f005 ff5d 	bl	8010202 <memcpy1>
            allowDelayedTx = false;
 800a348:	4620      	mov	r0, r4
            break;
 800a34a:	e7db      	b.n	800a304 <SendReJoinReq+0x8>
 800a34c:	20000654 	.word	0x20000654

0800a350 <PrepareFrame>:
{
 800a350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a354:	b083      	sub	sp, #12
 800a356:	4605      	mov	r5, r0
 800a358:	460e      	mov	r6, r1
 800a35a:	4617      	mov	r7, r2
 800a35c:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800a360:	4959      	ldr	r1, [pc, #356]	; (800a4c8 <PrepareFrame+0x178>)
 800a362:	2200      	movs	r2, #0
 800a364:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800a366:	f881 241e 	strb.w	r2, [r1, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 800a36a:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800a36c:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800a36e:	4698      	mov	r8, r3
 800a370:	b1cb      	cbz	r3, 800a3a6 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800a372:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800a4c8 <PrepareFrame+0x178>
 800a376:	4622      	mov	r2, r4
 800a378:	4641      	mov	r1, r8
 800a37a:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800a37e:	f005 ff40 	bl	8010202 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800a382:	b2e0      	uxtb	r0, r4
 800a384:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800a388:	782b      	ldrb	r3, [r5, #0]
 800a38a:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800a38e:	782b      	ldrb	r3, [r5, #0]
 800a390:	095b      	lsrs	r3, r3, #5
 800a392:	2b04      	cmp	r3, #4
 800a394:	d009      	beq.n	800a3aa <PrepareFrame+0x5a>
 800a396:	2b07      	cmp	r3, #7
 800a398:	d079      	beq.n	800a48e <PrepareFrame+0x13e>
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d009      	beq.n	800a3b2 <PrepareFrame+0x62>
 800a39e:	2002      	movs	r0, #2
}
 800a3a0:	b003      	add	sp, #12
 800a3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800a3a6:	4614      	mov	r4, r2
 800a3a8:	e7e3      	b.n	800a372 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800a3aa:	4b47      	ldr	r3, [pc, #284]	; (800a4c8 <PrepareFrame+0x178>)
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800a3b2:	4b45      	ldr	r3, [pc, #276]	; (800a4c8 <PrepareFrame+0x178>)
 800a3b4:	2204      	movs	r2, #4
 800a3b6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800a3ba:	1c9a      	adds	r2, r3, #2
 800a3bc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a3c0:	22ff      	movs	r2, #255	; 0xff
 800a3c2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800a3c6:	782a      	ldrb	r2, [r5, #0]
 800a3c8:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800a3cc:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800a3d0:	4a3e      	ldr	r2, [pc, #248]	; (800a4cc <PrepareFrame+0x17c>)
 800a3d2:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800a3d6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a3da:	7832      	ldrb	r2, [r6, #0]
 800a3dc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800a3e0:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800a3e4:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800a3e8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a3ec:	a801      	add	r0, sp, #4
 800a3ee:	f003 f9a7 	bl	800d740 <LoRaMacCryptoGetFCntUp>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d15c      	bne.n	800a4b0 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800a3f6:	9a01      	ldr	r2, [sp, #4]
 800a3f8:	4b33      	ldr	r3, [pc, #204]	; (800a4c8 <PrepareFrame+0x178>)
 800a3fa:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800a3fe:	2100      	movs	r1, #0
 800a400:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
            MacCtx.McpsConfirm.AckReceived = false;
 800a404:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800a408:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a40c:	4668      	mov	r0, sp
 800a40e:	f002 fe31 	bl	800d074 <LoRaMacCommandsGetSizeSerializedCmds>
 800a412:	2800      	cmp	r0, #0
 800a414:	d14e      	bne.n	800a4b4 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800a416:	9b00      	ldr	r3, [sp, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d0c1      	beq.n	800a3a0 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800a41c:	4b2b      	ldr	r3, [pc, #172]	; (800a4cc <PrepareFrame+0x17c>)
 800a41e:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800a422:	f7fe f905 	bl	8008630 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a426:	4b28      	ldr	r3, [pc, #160]	; (800a4c8 <PrepareFrame+0x178>)
 800a428:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800a42c:	b113      	cbz	r3, 800a434 <PrepareFrame+0xe4>
 800a42e:	9a00      	ldr	r2, [sp, #0]
 800a430:	2a0f      	cmp	r2, #15
 800a432:	d915      	bls.n	800a460 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a434:	b113      	cbz	r3, 800a43c <PrepareFrame+0xec>
 800a436:	9b00      	ldr	r3, [sp, #0]
 800a438:	2b0f      	cmp	r3, #15
 800a43a:	d821      	bhi.n	800a480 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a43c:	4a24      	ldr	r2, [pc, #144]	; (800a4d0 <PrepareFrame+0x180>)
 800a43e:	4669      	mov	r1, sp
 800a440:	f002 fe24 	bl	800d08c <LoRaMacCommandsSerializeCmds>
 800a444:	2800      	cmp	r0, #0
 800a446:	d13b      	bne.n	800a4c0 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800a448:	4b1f      	ldr	r3, [pc, #124]	; (800a4c8 <PrepareFrame+0x178>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800a450:	f503 6294 	add.w	r2, r3, #1184	; 0x4a0
 800a454:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a458:	9a00      	ldr	r2, [sp, #0]
 800a45a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800a45e:	e79f      	b.n	800a3a0 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800a460:	4a1c      	ldr	r2, [pc, #112]	; (800a4d4 <PrepareFrame+0x184>)
 800a462:	4669      	mov	r1, sp
 800a464:	200f      	movs	r0, #15
 800a466:	f002 fe11 	bl	800d08c <LoRaMacCommandsSerializeCmds>
 800a46a:	bb28      	cbnz	r0, 800a4b8 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800a46c:	7833      	ldrb	r3, [r6, #0]
 800a46e:	9a00      	ldr	r2, [sp, #0]
 800a470:	f362 0303 	bfi	r3, r2, #0, #4
 800a474:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a476:	b2da      	uxtb	r2, r3
 800a478:	4b13      	ldr	r3, [pc, #76]	; (800a4c8 <PrepareFrame+0x178>)
 800a47a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800a47e:	e78f      	b.n	800a3a0 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a480:	4a13      	ldr	r2, [pc, #76]	; (800a4d0 <PrepareFrame+0x180>)
 800a482:	4669      	mov	r1, sp
 800a484:	f002 fe02 	bl	800d08c <LoRaMacCommandsSerializeCmds>
 800a488:	b1c0      	cbz	r0, 800a4bc <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a48a:	2013      	movs	r0, #19
 800a48c:	e788      	b.n	800a3a0 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800a48e:	f1b8 0f00 	cmp.w	r8, #0
 800a492:	d017      	beq.n	800a4c4 <PrepareFrame+0x174>
 800a494:	2800      	cmp	r0, #0
 800a496:	d083      	beq.n	800a3a0 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800a498:	4c0b      	ldr	r4, [pc, #44]	; (800a4c8 <PrepareFrame+0x178>)
 800a49a:	b282      	uxth	r2, r0
 800a49c:	4641      	mov	r1, r8
 800a49e:	1ce0      	adds	r0, r4, #3
 800a4a0:	f005 feaf 	bl	8010202 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800a4a4:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	e777      	b.n	800a3a0 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a4b0:	2012      	movs	r0, #18
 800a4b2:	e775      	b.n	800a3a0 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a4b4:	2013      	movs	r0, #19
 800a4b6:	e773      	b.n	800a3a0 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a4b8:	2013      	movs	r0, #19
 800a4ba:	e771      	b.n	800a3a0 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800a4bc:	200a      	movs	r0, #10
 800a4be:	e76f      	b.n	800a3a0 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a4c0:	2013      	movs	r0, #19
 800a4c2:	e76d      	b.n	800a3a0 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	e76b      	b.n	800a3a0 <PrepareFrame+0x50>
 800a4c8:	20000654 	.word	0x20000654
 800a4cc:	20008000 	.word	0x20008000
 800a4d0:	20000af4 	.word	0x20000af4
 800a4d4:	2000076c 	.word	0x2000076c

0800a4d8 <Send>:
{
 800a4d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4dc:	b08a      	sub	sp, #40	; 0x28
 800a4de:	4617      	mov	r7, r2
 800a4e0:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a4e2:	4c45      	ldr	r4, [pc, #276]	; (800a5f8 <Send+0x120>)
 800a4e4:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800a4e8:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a4ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a4ee:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a4f0:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d07c      	beq.n	800a5f2 <Send+0x11a>
 800a4f8:	4605      	mov	r5, r0
 800a4fa:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800a4fc:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 800a500:	b90b      	cbnz	r3, 800a506 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a502:	2100      	movs	r1, #0
 800a504:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800a50c:	483a      	ldr	r0, [pc, #232]	; (800a5f8 <Send+0x120>)
 800a50e:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 800a512:	f361 13c7 	bfi	r3, r1, #7, #1
 800a516:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a51a:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d054      	beq.n	800a5cc <Send+0xf4>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800a522:	4b35      	ldr	r3, [pc, #212]	; (800a5f8 <Send+0x120>)
 800a524:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a528:	b12b      	cbz	r3, 800a536 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800a52a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a52e:	f043 0320 	orr.w	r3, r3, #32
 800a532:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800a536:	2301      	movs	r3, #1
 800a538:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800a53c:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a540:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a542:	4b2e      	ldr	r3, [pc, #184]	; (800a5fc <Send+0x124>)
 800a544:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 800a548:	f8ad 2014 	strh.w	r2, [sp, #20]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800a54c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800a550:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a554:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a558:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a55c:	4926      	ldr	r1, [pc, #152]	; (800a5f8 <Send+0x120>)
 800a55e:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 800a562:	f88d 301a 	strb.w	r3, [sp, #26]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a566:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 800a56a:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a56e:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800a572:	f88d 301c 	strb.w	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800a576:	ab08      	add	r3, sp, #32
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	f101 0360 	add.w	r3, r1, #96	; 0x60
 800a57e:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800a582:	3139      	adds	r1, #57	; 0x39
 800a584:	a803      	add	r0, sp, #12
 800a586:	f001 f92d 	bl	800b7e4 <LoRaMacAdrCalcNext>
 800a58a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a58e:	f360 1386 	bfi	r3, r0, #6, #1
 800a592:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800a596:	f8cd 8000 	str.w	r8, [sp]
 800a59a:	463b      	mov	r3, r7
 800a59c:	4632      	mov	r2, r6
 800a59e:	a909      	add	r1, sp, #36	; 0x24
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f7ff fed5 	bl	800a350 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	b108      	cbz	r0, 800a5ae <Send+0xd6>
 800a5aa:	280a      	cmp	r0, #10
 800a5ac:	d104      	bne.n	800a5b8 <Send+0xe0>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800a5ae:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800a5b2:	f7ff fa0b 	bl	80099cc <ScheduleTx>
 800a5b6:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800a5b8:	b17c      	cbz	r4, 800a5da <Send+0x102>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800a5ba:	4b0f      	ldr	r3, [pc, #60]	; (800a5f8 <Send+0x120>)
 800a5bc:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800a5c0:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	b00a      	add	sp, #40	; 0x28
 800a5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800a5cc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a5d0:	f043 0310 	orr.w	r3, r3, #16
 800a5d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800a5d8:	e7a3      	b.n	800a522 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800a5da:	4b07      	ldr	r3, [pc, #28]	; (800a5f8 <Send+0x120>)
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800a5e2:	9a08      	ldr	r2, [sp, #32]
 800a5e4:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800a5e6:	f002 fd19 	bl	800d01c <LoRaMacCommandsRemoveNoneStickyCmds>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d0ea      	beq.n	800a5c4 <Send+0xec>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a5ee:	2413      	movs	r4, #19
 800a5f0:	e7e8      	b.n	800a5c4 <Send+0xec>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800a5f2:	2407      	movs	r4, #7
 800a5f4:	e7e6      	b.n	800a5c4 <Send+0xec>
 800a5f6:	bf00      	nop
 800a5f8:	20008000 	.word	0x20008000
 800a5fc:	20000654 	.word	0x20000654

0800a600 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800a600:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <LoRaMacIsBusy+0x2c>)
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	f013 0f01 	tst.w	r3, #1
 800a608:	d10a      	bne.n	800a620 <LoRaMacIsBusy+0x20>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a60a:	4b09      	ldr	r3, [pc, #36]	; (800a630 <LoRaMacIsBusy+0x30>)
 800a60c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a610:	b943      	cbnz	r3, 800a624 <LoRaMacIsBusy+0x24>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800a612:	4b07      	ldr	r3, [pc, #28]	; (800a630 <LoRaMacIsBusy+0x30>)
 800a614:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d005      	beq.n	800a628 <LoRaMacIsBusy+0x28>
    return true;
 800a61c:	2001      	movs	r0, #1
 800a61e:	4770      	bx	lr
        return true;
 800a620:	2001      	movs	r0, #1
 800a622:	4770      	bx	lr
    return true;
 800a624:	2001      	movs	r0, #1
 800a626:	4770      	bx	lr
        return false;
 800a628:	2000      	movs	r0, #0
}
 800a62a:	4770      	bx	lr
 800a62c:	20000650 	.word	0x20000650
 800a630:	20000654 	.word	0x20000654

0800a634 <LoRaMacProcess>:
{
 800a634:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800a636:	f7ff f81d 	bl	8009674 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800a63a:	f002 fbf1 	bl	800ce20 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a63e:	4b20      	ldr	r3, [pc, #128]	; (800a6c0 <LoRaMacProcess+0x8c>)
 800a640:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800a644:	f013 0f20 	tst.w	r3, #32
 800a648:	d10d      	bne.n	800a666 <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800a64a:	f7fd fed3 	bl	80083f4 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a64e:	4b1c      	ldr	r3, [pc, #112]	; (800a6c0 <LoRaMacProcess+0x8c>)
 800a650:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800a654:	2b02      	cmp	r3, #2
 800a656:	d024      	beq.n	800a6a2 <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800a658:	4b19      	ldr	r3, [pc, #100]	; (800a6c0 <LoRaMacProcess+0x8c>)
 800a65a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800a65e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a662:	d121      	bne.n	800a6a8 <LoRaMacProcess+0x74>
}
 800a664:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800a666:	2000      	movs	r0, #0
 800a668:	f7fd febe 	bl	80083e8 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800a66c:	f7fd fefa 	bl	8008464 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800a670:	f7fd ffd2 	bl	8008618 <IsRequestPending>
 800a674:	b110      	cbz	r0, 800a67c <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800a676:	f7fe f8b9 	bl	80087ec <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800a67a:	b918      	cbnz	r0, 800a684 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800a67c:	f7ff f83c 	bl	80096f8 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800a680:	f7ff fa5a 	bl	8009b38 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800a684:	f7ff fa94 	bl	8009bb0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800a688:	f7ff fadc 	bl	8009c44 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a68c:	2001      	movs	r0, #1
 800a68e:	f7fd feab 	bl	80083e8 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800a692:	4a0b      	ldr	r2, [pc, #44]	; (800a6c0 <LoRaMacProcess+0x8c>)
 800a694:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a69c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800a6a0:	e7d3      	b.n	800a64a <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800a6a2:	f7ff fae1 	bl	8009c68 <OpenContinuousRxCWindow>
 800a6a6:	e7d7      	b.n	800a658 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800a6a8:	4b05      	ldr	r3, [pc, #20]	; (800a6c0 <LoRaMacProcess+0x8c>)
 800a6aa:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800a6ae:	f36f 1286 	bfc	r2, #6, #1
 800a6b2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 800a6b6:	4803      	ldr	r0, [pc, #12]	; (800a6c4 <LoRaMacProcess+0x90>)
 800a6b8:	f7ff fb86 	bl	8009dc8 <LoRaMacHandleNvm>
}
 800a6bc:	e7d2      	b.n	800a664 <LoRaMacProcess+0x30>
 800a6be:	bf00      	nop
 800a6c0:	20000654 	.word	0x20000654
 800a6c4:	20008000 	.word	0x20008000

0800a6c8 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6cc:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f000 81a4 	beq.w	800aa1c <LoRaMacInitialization+0x354>
 800a6d4:	460f      	mov	r7, r1
 800a6d6:	4691      	mov	r9, r2
 800a6d8:	4680      	mov	r8, r0
 800a6da:	2900      	cmp	r1, #0
 800a6dc:	f000 81a0 	beq.w	800aa20 <LoRaMacInitialization+0x358>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a6e0:	6803      	ldr	r3, [r0, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f000 819e 	beq.w	800aa24 <LoRaMacInitialization+0x35c>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a6e8:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f000 819c 	beq.w	800aa28 <LoRaMacInitialization+0x360>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a6f0:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f000 819a 	beq.w	800aa2c <LoRaMacInitialization+0x364>
        ( primitives->MacMlmeIndication == NULL ) )
 800a6f8:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 8198 	beq.w	800aa30 <LoRaMacInitialization+0x368>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a700:	4610      	mov	r0, r2
 800a702:	f003 fb69 	bl	800ddd8 <RegionIsActive>
 800a706:	2800      	cmp	r0, #0
 800a708:	f000 8194 	beq.w	800aa34 <LoRaMacInitialization+0x36c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800a70c:	4640      	mov	r0, r8
 800a70e:	f002 fd67 	bl	800d1e0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800a712:	4ccc      	ldr	r4, [pc, #816]	; (800aa44 <LoRaMacInitialization+0x37c>)
 800a714:	f240 527c 	movw	r2, #1404	; 0x57c
 800a718:	2100      	movs	r1, #0
 800a71a:	4620      	mov	r0, r4
 800a71c:	f005 fd89 	bl	8010232 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a720:	4dc9      	ldr	r5, [pc, #804]	; (800aa48 <LoRaMacInitialization+0x380>)
 800a722:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800a726:	2100      	movs	r1, #0
 800a728:	4628      	mov	r0, r5
 800a72a:	f005 fd82 	bl	8010232 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800a72e:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a732:	2600      	movs	r6, #0
 800a734:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800a738:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800a73c:	4bc3      	ldr	r3, [pc, #780]	; (800aa4c <LoRaMacInitialization+0x384>)
 800a73e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a742:	f88d 6020 	strb.w	r6, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a746:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800a74a:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a74c:	f504 73f4 	add.w	r3, r4, #488	; 0x1e8
 800a750:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800a752:	4bbf      	ldr	r3, [pc, #764]	; (800aa50 <LoRaMacInitialization+0x388>)
 800a754:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a756:	a905      	add	r1, sp, #20
 800a758:	4648      	mov	r0, r9
 800a75a:	f003 fb5c 	bl	800de16 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a75e:	230f      	movs	r3, #15
 800a760:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a764:	a90a      	add	r1, sp, #40	; 0x28
 800a766:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a76a:	f003 fb3b 	bl	800dde4 <RegionGetPhyParam>
 800a76e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800a770:	1b80      	subs	r0, r0, r6
 800a772:	bf18      	it	ne
 800a774:	2001      	movne	r0, #1
 800a776:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a77a:	f04f 0a0a 	mov.w	sl, #10
 800a77e:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a782:	a90a      	add	r1, sp, #40	; 0x28
 800a784:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a788:	f003 fb2c 	bl	800dde4 <RegionGetPhyParam>
 800a78c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800a78e:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a792:	f04f 0906 	mov.w	r9, #6
 800a796:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a79a:	a90a      	add	r1, sp, #40	; 0x28
 800a79c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a7a0:	f003 fb20 	bl	800dde4 <RegionGetPhyParam>
 800a7a4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800a7a6:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a7aa:	2310      	movs	r3, #16
 800a7ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7b0:	a90a      	add	r1, sp, #40	; 0x28
 800a7b2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a7b6:	f003 fb15 	bl	800dde4 <RegionGetPhyParam>
 800a7ba:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a7bc:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a7c0:	2311      	movs	r3, #17
 800a7c2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7c6:	a90a      	add	r1, sp, #40	; 0x28
 800a7c8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a7cc:	f003 fb0a 	bl	800dde4 <RegionGetPhyParam>
 800a7d0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a7d2:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a7d6:	2312      	movs	r3, #18
 800a7d8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7dc:	a90a      	add	r1, sp, #40	; 0x28
 800a7de:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a7e2:	f003 faff 	bl	800dde4 <RegionGetPhyParam>
 800a7e6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a7e8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a7ec:	2313      	movs	r3, #19
 800a7ee:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7f2:	a90a      	add	r1, sp, #40	; 0x28
 800a7f4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a7f8:	f003 faf4 	bl	800dde4 <RegionGetPhyParam>
 800a7fc:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a7fe:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a802:	2314      	movs	r3, #20
 800a804:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a808:	a90a      	add	r1, sp, #40	; 0x28
 800a80a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a80e:	f003 fae9 	bl	800dde4 <RegionGetPhyParam>
 800a812:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a814:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a818:	2316      	movs	r3, #22
 800a81a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a81e:	a90a      	add	r1, sp, #40	; 0x28
 800a820:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a824:	f003 fade 	bl	800dde4 <RegionGetPhyParam>
 800a828:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a82a:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a82e:	2317      	movs	r3, #23
 800a830:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a834:	a90a      	add	r1, sp, #40	; 0x28
 800a836:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a83a:	f003 fad3 	bl	800dde4 <RegionGetPhyParam>
 800a83e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a840:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a844:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a848:	2318      	movs	r3, #24
 800a84a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a84e:	a90a      	add	r1, sp, #40	; 0x28
 800a850:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a854:	f003 fac6 	bl	800dde4 <RegionGetPhyParam>
 800a858:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a85a:	b2c0      	uxtb	r0, r0
 800a85c:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a860:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a864:	231d      	movs	r3, #29
 800a866:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a86a:	a90a      	add	r1, sp, #40	; 0x28
 800a86c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a870:	f003 fab8 	bl	800dde4 <RegionGetPhyParam>
 800a874:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a876:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a87a:	231e      	movs	r3, #30
 800a87c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a880:	a90a      	add	r1, sp, #40	; 0x28
 800a882:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a886:	f003 faad 	bl	800dde4 <RegionGetPhyParam>
 800a88a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a88c:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a890:	231f      	movs	r3, #31
 800a892:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a896:	a90a      	add	r1, sp, #40	; 0x28
 800a898:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a89c:	f003 faa2 	bl	800dde4 <RegionGetPhyParam>
 800a8a0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a8a8:	2320      	movs	r3, #32
 800a8aa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a8ae:	a90a      	add	r1, sp, #40	; 0x28
 800a8b0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a8b4:	f003 fa96 	bl	800dde4 <RegionGetPhyParam>
 800a8b8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8bc:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a8c0:	230b      	movs	r3, #11
 800a8c2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a8c6:	a90a      	add	r1, sp, #40	; 0x28
 800a8c8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a8cc:	f003 fa8a 	bl	800dde4 <RegionGetPhyParam>
 800a8d0:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800a8d2:	f8a5 0400 	strh.w	r0, [r5, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a8d6:	230c      	movs	r3, #12
 800a8d8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a8dc:	a90a      	add	r1, sp, #40	; 0x28
 800a8de:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a8e2:	f003 fa7f 	bl	800dde4 <RegionGetPhyParam>
 800a8e6:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800a8e8:	f8a5 0402 	strh.w	r0, [r5, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a8ec:	f04f 0b01 	mov.w	fp, #1
 800a8f0:	f884 b0a4 	strb.w	fp, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a8f4:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800a8f8:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800a8fc:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800a900:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a904:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a908:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a90a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a90e:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800a910:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a914:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800a916:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a91a:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800a91c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800a920:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800a922:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800a926:	f884 b10b 	strb.w	fp, [r4, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800a92a:	f8c5 7348 	str.w	r7, [r5, #840]	; 0x348
    ResetMacParameters( );
 800a92e:	f7ff fbaf 	bl	800a090 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800a932:	f884 b105 	strb.w	fp, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 800a936:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800a93a:	f885 6495 	strb.w	r6, [r5, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 800a93e:	f8c5 b340 	str.w	fp, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800a942:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a944:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a946:	9600      	str	r6, [sp, #0]
 800a948:	4b42      	ldr	r3, [pc, #264]	; (800aa54 <LoRaMacInitialization+0x38c>)
 800a94a:	4632      	mov	r2, r6
 800a94c:	f04f 31ff 	mov.w	r1, #4294967295
 800a950:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800a954:	f007 fdf4 	bl	8012540 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a958:	9600      	str	r6, [sp, #0]
 800a95a:	4b3f      	ldr	r3, [pc, #252]	; (800aa58 <LoRaMacInitialization+0x390>)
 800a95c:	4632      	mov	r2, r6
 800a95e:	f04f 31ff 	mov.w	r1, #4294967295
 800a962:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800a966:	f007 fdeb 	bl	8012540 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a96a:	9600      	str	r6, [sp, #0]
 800a96c:	4b3b      	ldr	r3, [pc, #236]	; (800aa5c <LoRaMacInitialization+0x394>)
 800a96e:	4632      	mov	r2, r6
 800a970:	f04f 31ff 	mov.w	r1, #4294967295
 800a974:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800a978:	f007 fde2 	bl	8012540 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800a97c:	9600      	str	r6, [sp, #0]
 800a97e:	4b38      	ldr	r3, [pc, #224]	; (800aa60 <LoRaMacInitialization+0x398>)
 800a980:	4632      	mov	r2, r6
 800a982:	f04f 31ff 	mov.w	r1, #4294967295
 800a986:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800a98a:	f007 fdd9 	bl	8012540 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a98e:	f10d 0808 	add.w	r8, sp, #8
 800a992:	4640      	mov	r0, r8
 800a994:	f007 fd66 	bl	8012464 <SysTimeGetMcuTime>
 800a998:	f504 7388 	add.w	r3, r4, #272	; 0x110
 800a99c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a9a0:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800a9a4:	4b2f      	ldr	r3, [pc, #188]	; (800aa64 <LoRaMacInitialization+0x39c>)
 800a9a6:	601e      	str	r6, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a9a8:	4b2f      	ldr	r3, [pc, #188]	; (800aa68 <LoRaMacInitialization+0x3a0>)
 800a9aa:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a9ae:	4b2f      	ldr	r3, [pc, #188]	; (800aa6c <LoRaMacInitialization+0x3a4>)
 800a9b0:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a9b4:	4b2e      	ldr	r3, [pc, #184]	; (800aa70 <LoRaMacInitialization+0x3a8>)
 800a9b6:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a9ba:	4b2e      	ldr	r3, [pc, #184]	; (800aa74 <LoRaMacInitialization+0x3ac>)
 800a9bc:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a9c0:	4b2d      	ldr	r3, [pc, #180]	; (800aa78 <LoRaMacInitialization+0x3b0>)
 800a9c2:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800a9c6:	4b2d      	ldr	r3, [pc, #180]	; (800aa7c <LoRaMacInitialization+0x3b4>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800a9ce:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800a9d0:	68b9      	ldr	r1, [r7, #8]
 800a9d2:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800a9d6:	f005 f96f 	bl	800fcb8 <SecureElementInit>
 800a9da:	bb80      	cbnz	r0, 800aa3e <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a9dc:	4620      	mov	r0, r4
 800a9de:	f002 fe8f 	bl	800d700 <LoRaMacCryptoInit>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d14c      	bne.n	800aa80 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a9e6:	f002 fac1 	bl	800cf6c <LoRaMacCommandsInit>
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d14a      	bne.n	800aa84 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a9ee:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800a9f2:	f002 fed7 	bl	800d7a4 <LoRaMacCryptoSetMulticastReference>
 800a9f6:	4604      	mov	r4, r0
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d145      	bne.n	800aa88 <LoRaMacInitialization+0x3c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800a9fc:	4d1f      	ldr	r5, [pc, #124]	; (800aa7c <LoRaMacInitialization+0x3b4>)
 800a9fe:	696b      	ldr	r3, [r5, #20]
 800aa00:	4798      	blx	r3
 800aa02:	f005 fbeb 	bl	80101dc <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800aa06:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800aa08:	4a0e      	ldr	r2, [pc, #56]	; (800aa44 <LoRaMacInitialization+0x37c>)
 800aa0a:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 800aa0e:	4798      	blx	r3
    Radio.Sleep( );
 800aa10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800aa12:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800aa14:	4658      	mov	r0, fp
 800aa16:	f7fd fce7 	bl	80083e8 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800aa1a:	e00c      	b.n	800aa36 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aa1c:	2403      	movs	r4, #3
 800aa1e:	e00a      	b.n	800aa36 <LoRaMacInitialization+0x36e>
 800aa20:	2403      	movs	r4, #3
 800aa22:	e008      	b.n	800aa36 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800aa24:	2403      	movs	r4, #3
 800aa26:	e006      	b.n	800aa36 <LoRaMacInitialization+0x36e>
 800aa28:	2403      	movs	r4, #3
 800aa2a:	e004      	b.n	800aa36 <LoRaMacInitialization+0x36e>
 800aa2c:	2403      	movs	r4, #3
 800aa2e:	e002      	b.n	800aa36 <LoRaMacInitialization+0x36e>
 800aa30:	2403      	movs	r4, #3
 800aa32:	e000      	b.n	800aa36 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800aa34:	2409      	movs	r4, #9
}
 800aa36:	4620      	mov	r0, r4
 800aa38:	b00d      	add	sp, #52	; 0x34
 800aa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa3e:	2411      	movs	r4, #17
 800aa40:	e7f9      	b.n	800aa36 <LoRaMacInitialization+0x36e>
 800aa42:	bf00      	nop
 800aa44:	20008000 	.word	0x20008000
 800aa48:	20000654 	.word	0x20000654
 800aa4c:	01000400 	.word	0x01000400
 800aa50:	20000b74 	.word	0x20000b74
 800aa54:	08009ad5 	.word	0x08009ad5
 800aa58:	08009d79 	.word	0x08009d79
 800aa5c:	08009d21 	.word	0x08009d21
 800aa60:	08008781 	.word	0x08008781
 800aa64:	20000650 	.word	0x20000650
 800aa68:	0800a039 	.word	0x0800a039
 800aa6c:	08009fd9 	.word	0x08009fd9
 800aa70:	0800839d 	.word	0x0800839d
 800aa74:	08009fa5 	.word	0x08009fa5
 800aa78:	08009f71 	.word	0x08009f71
 800aa7c:	080139bc 	.word	0x080139bc
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa80:	2411      	movs	r4, #17
 800aa82:	e7d8      	b.n	800aa36 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aa84:	2413      	movs	r4, #19
 800aa86:	e7d6      	b.n	800aa36 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa88:	2411      	movs	r4, #17
 800aa8a:	e7d4      	b.n	800aa36 <LoRaMacInitialization+0x36e>

0800aa8c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	4b02      	ldr	r3, [pc, #8]	; (800aa98 <LoRaMacStart+0xc>)
 800aa90:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	20000654 	.word	0x20000654

0800aa9c <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800aa9c:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800aa9e:	f7ff fdaf 	bl	800a600 <LoRaMacIsBusy>
 800aaa2:	b130      	cbz	r0, 800aab2 <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800aaa4:	4b06      	ldr	r3, [pc, #24]	; (800aac0 <LoRaMacStop+0x24>)
 800aaa6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d006      	beq.n	800aabc <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800aaae:	2001      	movs	r0, #1
}
 800aab0:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 800aab2:	4b03      	ldr	r3, [pc, #12]	; (800aac0 <LoRaMacStop+0x24>)
 800aab4:	2201      	movs	r2, #1
 800aab6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800aaba:	e7f9      	b.n	800aab0 <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 800aabc:	2000      	movs	r0, #0
 800aabe:	e7f7      	b.n	800aab0 <LoRaMacStop+0x14>
 800aac0:	20000654 	.word	0x20000654

0800aac4 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800aac4:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800aac6:	4c14      	ldr	r4, [pc, #80]	; (800ab18 <LoRaMacHalt+0x54>)
 800aac8:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800aacc:	f007 fd96 	bl	80125fc <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800aad0:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800aad4:	f007 fd92 	bl	80125fc <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800aad8:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800aadc:	f007 fd8e 	bl	80125fc <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800aae0:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800aae4:	f007 fd8a 	bl	80125fc <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800aae8:	f001 ff50 	bl	800c98c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800aaec:	4b0b      	ldr	r3, [pc, #44]	; (800ab1c <LoRaMacHalt+0x58>)
 800aaee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf0:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800aaf2:	2500      	movs	r5, #0
 800aaf4:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800aaf8:	4e09      	ldr	r6, [pc, #36]	; (800ab20 <LoRaMacHalt+0x5c>)
 800aafa:	4630      	mov	r0, r6
 800aafc:	f7ff f964 	bl	8009dc8 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800ab00:	f240 527c 	movw	r2, #1404	; 0x57c
 800ab04:	4631      	mov	r1, r6
 800ab06:	4807      	ldr	r0, [pc, #28]	; (800ab24 <LoRaMacHalt+0x60>)
 800ab08:	f005 fb7b 	bl	8010202 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800ab12:	4628      	mov	r0, r5
 800ab14:	bd70      	pop	{r4, r5, r6, pc}
 800ab16:	bf00      	nop
 800ab18:	20000654 	.word	0x20000654
 800ab1c:	080139bc 	.word	0x080139bc
 800ab20:	20008000 	.word	0x20008000
 800ab24:	2000857c 	.word	0x2000857c

0800ab28 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800ab28:	b530      	push	{r4, r5, lr}
 800ab2a:	b08b      	sub	sp, #44	; 0x2c
 800ab2c:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ab2e:	4b32      	ldr	r3, [pc, #200]	; (800abf8 <LoRaMacQueryTxPossible+0xd0>)
 800ab30:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ab32:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800ab34:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800ab38:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800ab3c:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800ab40:	f88d 300e 	strb.w	r3, [sp, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800ab44:	4b2d      	ldr	r3, [pc, #180]	; (800abfc <LoRaMacQueryTxPossible+0xd4>)
 800ab46:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800ab4a:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800ab52:	2900      	cmp	r1, #0
 800ab54:	d049      	beq.n	800abea <LoRaMacQueryTxPossible+0xc2>
 800ab56:	460d      	mov	r5, r1

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800ab58:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800ab5c:	4b26      	ldr	r3, [pc, #152]	; (800abf8 <LoRaMacQueryTxPossible+0xd0>)
 800ab5e:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800ab62:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ab66:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800ab68:	4924      	ldr	r1, [pc, #144]	; (800abfc <LoRaMacQueryTxPossible+0xd4>)
 800ab6a:	f8b1 0400 	ldrh.w	r0, [r1, #1024]	; 0x400
 800ab6e:	f8ad 001c 	strh.w	r0, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800ab72:	f8b1 1402 	ldrh.w	r1, [r1, #1026]	; 0x402
 800ab76:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ab7a:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800ab7e:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ab82:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800ab86:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800ab8a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ab8e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ab92:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800ab96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab9a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800ab9e:	ab04      	add	r3, sp, #16
 800aba0:	9300      	str	r3, [sp, #0]
 800aba2:	f10d 030d 	add.w	r3, sp, #13
 800aba6:	f10d 020e 	add.w	r2, sp, #14
 800abaa:	f10d 010f 	add.w	r1, sp, #15
 800abae:	a805      	add	r0, sp, #20
 800abb0:	f000 fe18 	bl	800b7e4 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800abb4:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800abb8:	f7fd fd3a 	bl	8008630 <GetMaxAppPayloadWithoutFOptsLength>
 800abbc:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800abbe:	a802      	add	r0, sp, #8
 800abc0:	f002 fa58 	bl	800d074 <LoRaMacCommandsGetSizeSerializedCmds>
 800abc4:	b998      	cbnz	r0, 800abee <LoRaMacQueryTxPossible+0xc6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800abc6:	9b02      	ldr	r3, [sp, #8]
 800abc8:	2b0f      	cmp	r3, #15
 800abca:	d80a      	bhi.n	800abe2 <LoRaMacQueryTxPossible+0xba>
 800abcc:	786a      	ldrb	r2, [r5, #1]
 800abce:	4293      	cmp	r3, r2
 800abd0:	d807      	bhi.n	800abe2 <LoRaMacQueryTxPossible+0xba>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800abd6:	9b02      	ldr	r3, [sp, #8]
 800abd8:	441c      	add	r4, r3
 800abda:	42a2      	cmp	r2, r4
 800abdc:	d309      	bcc.n	800abf2 <LoRaMacQueryTxPossible+0xca>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800abde:	b00b      	add	sp, #44	; 0x2c
 800abe0:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800abe2:	2300      	movs	r3, #0
 800abe4:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800abe6:	2008      	movs	r0, #8
 800abe8:	e7f9      	b.n	800abde <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800abea:	2003      	movs	r0, #3
 800abec:	e7f7      	b.n	800abde <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800abee:	2013      	movs	r0, #19
 800abf0:	e7f5      	b.n	800abde <LoRaMacQueryTxPossible+0xb6>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800abf2:	2008      	movs	r0, #8
 800abf4:	e7f3      	b.n	800abde <LoRaMacQueryTxPossible+0xb6>
 800abf6:	bf00      	nop
 800abf8:	20008000 	.word	0x20008000
 800abfc:	20000654 	.word	0x20000654

0800ac00 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800ac00:	2800      	cmp	r0, #0
 800ac02:	f000 813d 	beq.w	800ae80 <LoRaMacMibGetRequestConfirm+0x280>
{
 800ac06:	b510      	push	{r4, lr}
 800ac08:	b084      	sub	sp, #16
 800ac0a:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800ac0c:	7800      	ldrb	r0, [r0, #0]
 800ac0e:	2839      	cmp	r0, #57	; 0x39
 800ac10:	f200 8132 	bhi.w	800ae78 <LoRaMacMibGetRequestConfirm+0x278>
 800ac14:	e8df f010 	tbh	[pc, r0, lsl #1]
 800ac18:	0040003a 	.word	0x0040003a
 800ac1c:	004b0046 	.word	0x004b0046
 800ac20:	00560050 	.word	0x00560050
 800ac24:	0130005c 	.word	0x0130005c
 800ac28:	01300130 	.word	0x01300130
 800ac2c:	01300130 	.word	0x01300130
 800ac30:	01300130 	.word	0x01300130
 800ac34:	00620130 	.word	0x00620130
 800ac38:	006e0068 	.word	0x006e0068
 800ac3c:	0083007b 	.word	0x0083007b
 800ac40:	0093008b 	.word	0x0093008b
 800ac44:	009b00a8 	.word	0x009b00a8
 800ac48:	00bb00b5 	.word	0x00bb00b5
 800ac4c:	00c500c0 	.word	0x00c500c0
 800ac50:	00cf00ca 	.word	0x00cf00ca
 800ac54:	00e500d4 	.word	0x00e500d4
 800ac58:	00f700eb 	.word	0x00f700eb
 800ac5c:	00fd00f1 	.word	0x00fd00f1
 800ac60:	01080102 	.word	0x01080102
 800ac64:	010d0115 	.word	0x010d0115
 800ac68:	01300111 	.word	0x01300111
 800ac6c:	0130011b 	.word	0x0130011b
 800ac70:	01300130 	.word	0x01300130
 800ac74:	01300130 	.word	0x01300130
 800ac78:	01300130 	.word	0x01300130
 800ac7c:	01300130 	.word	0x01300130
 800ac80:	01300130 	.word	0x01300130
 800ac84:	01300130 	.word	0x01300130
 800ac88:	012a0124 	.word	0x012a0124
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800ac8c:	4b7d      	ldr	r3, [pc, #500]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ac8e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ac92:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800ac94:	b004      	add	sp, #16
 800ac96:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ac98:	4b7a      	ldr	r3, [pc, #488]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ac9a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800ac9e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aca0:	2000      	movs	r0, #0
            break;
 800aca2:	e7f7      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800aca4:	f005 fa66 	bl	8010174 <SecureElementGetDevEui>
 800aca8:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acaa:	2000      	movs	r0, #0
            break;
 800acac:	e7f2      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800acae:	f005 fa77 	bl	80101a0 <SecureElementGetJoinEui>
 800acb2:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acb4:	2000      	movs	r0, #0
            break;
 800acb6:	e7ed      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800acb8:	4b72      	ldr	r3, [pc, #456]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800acba:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800acbe:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acc0:	2000      	movs	r0, #0
            break;
 800acc2:	e7e7      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800acc4:	4b6f      	ldr	r3, [pc, #444]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800acc6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800acca:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800accc:	2000      	movs	r0, #0
            break;
 800acce:	e7e1      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800acd0:	4b6c      	ldr	r3, [pc, #432]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800acd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800acd6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acd8:	2000      	movs	r0, #0
            break;
 800acda:	e7db      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800acdc:	4b69      	ldr	r3, [pc, #420]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800acde:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800ace2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ace4:	2000      	movs	r0, #0
            break;
 800ace6:	e7d5      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800ace8:	4b66      	ldr	r3, [pc, #408]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800acea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800acee:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acf0:	2000      	movs	r0, #0
            break;
 800acf2:	e7cf      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS;
 800acf4:	231c      	movs	r3, #28
 800acf6:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800acfa:	a902      	add	r1, sp, #8
 800acfc:	4b61      	ldr	r3, [pc, #388]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800acfe:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ad02:	f003 f86f 	bl	800dde4 <RegionGetPhyParam>
 800ad06:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800ad08:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad0a:	2000      	movs	r0, #0
            break;
 800ad0c:	e7c2      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800ad0e:	3404      	adds	r4, #4
 800ad10:	4b5d      	ldr	r3, [pc, #372]	; (800ae88 <LoRaMacMibGetRequestConfirm+0x288>)
 800ad12:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad16:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad1a:	2000      	movs	r0, #0
            break;
 800ad1c:	e7ba      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800ad1e:	3404      	adds	r4, #4
 800ad20:	4b5a      	ldr	r3, [pc, #360]	; (800ae8c <LoRaMacMibGetRequestConfirm+0x28c>)
 800ad22:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad26:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad2a:	2000      	movs	r0, #0
            break;
 800ad2c:	e7b2      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800ad2e:	3404      	adds	r4, #4
 800ad30:	4b57      	ldr	r3, [pc, #348]	; (800ae90 <LoRaMacMibGetRequestConfirm+0x290>)
 800ad32:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad36:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad3a:	2000      	movs	r0, #0
            break;
 800ad3c:	e7aa      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800ad3e:	3404      	adds	r4, #4
 800ad40:	4b54      	ldr	r3, [pc, #336]	; (800ae94 <LoRaMacMibGetRequestConfirm+0x294>)
 800ad42:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ad46:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad4a:	2000      	movs	r0, #0
            break;
 800ad4c:	e7a2      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800ad4e:	231a      	movs	r3, #26
 800ad50:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ad54:	a902      	add	r1, sp, #8
 800ad56:	4b4b      	ldr	r3, [pc, #300]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ad58:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ad5c:	f003 f842 	bl	800dde4 <RegionGetPhyParam>
 800ad60:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800ad62:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad64:	2000      	movs	r0, #0
            break;
 800ad66:	e795      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800ad68:	2319      	movs	r3, #25
 800ad6a:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ad6e:	a902      	add	r1, sp, #8
 800ad70:	4b44      	ldr	r3, [pc, #272]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ad72:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ad76:	f003 f835 	bl	800dde4 <RegionGetPhyParam>
 800ad7a:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800ad7c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad7e:	2000      	movs	r0, #0
            break;
 800ad80:	e788      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ad82:	4b40      	ldr	r3, [pc, #256]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ad84:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ad88:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad8a:	2000      	movs	r0, #0
            break;
 800ad8c:	e782      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800ad8e:	4b3d      	ldr	r3, [pc, #244]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ad90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad92:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad94:	2000      	movs	r0, #0
            break;
 800ad96:	e77d      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800ad98:	4b3a      	ldr	r3, [pc, #232]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ad9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad9c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad9e:	2000      	movs	r0, #0
            break;
 800ada0:	e778      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800ada2:	4b38      	ldr	r3, [pc, #224]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ada4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ada8:	2000      	movs	r0, #0
            break;
 800adaa:	e773      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800adac:	4b35      	ldr	r3, [pc, #212]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800adae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adb0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adb2:	2000      	movs	r0, #0
            break;
 800adb4:	e76e      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800adb6:	4b33      	ldr	r3, [pc, #204]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800adb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adba:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adbc:	2000      	movs	r0, #0
            break;
 800adbe:	e769      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_MIN_TX_DR;
 800adc0:	2302      	movs	r3, #2
 800adc2:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800adc6:	4b2f      	ldr	r3, [pc, #188]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800adc8:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800adcc:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800add0:	a902      	add	r1, sp, #8
 800add2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800add6:	f003 f805 	bl	800dde4 <RegionGetPhyParam>
 800adda:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800addc:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adde:	2000      	movs	r0, #0
            break;
 800ade0:	e758      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800ade2:	4b28      	ldr	r3, [pc, #160]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ade4:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800ade8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adea:	2000      	movs	r0, #0
            break;
 800adec:	e752      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800adee:	4b25      	ldr	r3, [pc, #148]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800adf0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800adf4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800adf6:	2000      	movs	r0, #0
            break;
 800adf8:	e74c      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800adfa:	4b22      	ldr	r3, [pc, #136]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800adfc:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800ae00:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae02:	2000      	movs	r0, #0
            break;
 800ae04:	e746      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ae06:	4b1f      	ldr	r3, [pc, #124]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ae08:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ae0c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae0e:	2000      	movs	r0, #0
            break;
 800ae10:	e740      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800ae12:	4b1c      	ldr	r3, [pc, #112]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ae14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae16:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae18:	2000      	movs	r0, #0
            break;
 800ae1a:	e73b      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800ae1c:	4b19      	ldr	r3, [pc, #100]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ae1e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ae22:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae24:	2000      	movs	r0, #0
            break;
 800ae26:	e735      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800ae28:	4b16      	ldr	r3, [pc, #88]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ae2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae2c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae2e:	2000      	movs	r0, #0
            break;
 800ae30:	e730      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Contexts = &Nvm;
 800ae32:	4b14      	ldr	r3, [pc, #80]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ae34:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae36:	2000      	movs	r0, #0
            break;
 800ae38:	e72c      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.BackupContexts = &NvmBackup;
 800ae3a:	4b17      	ldr	r3, [pc, #92]	; (800ae98 <LoRaMacMibGetRequestConfirm+0x298>)
 800ae3c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae3e:	2000      	movs	r0, #0
            break;
 800ae40:	e728      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800ae42:	4b10      	ldr	r3, [pc, #64]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ae44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ae48:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae4a:	2000      	movs	r0, #0
            break;
 800ae4c:	e722      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800ae4e:	4b0d      	ldr	r3, [pc, #52]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ae50:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ae54:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800ae56:	f003 f889 	bl	800df6c <RegionGetVersion>
 800ae5a:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae5c:	2000      	movs	r0, #0
            break;
 800ae5e:	e719      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800ae60:	4b08      	ldr	r3, [pc, #32]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ae62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae66:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae68:	2000      	movs	r0, #0
            break;
 800ae6a:	e713      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800ae6c:	4b05      	ldr	r3, [pc, #20]	; (800ae84 <LoRaMacMibGetRequestConfirm+0x284>)
 800ae6e:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800ae72:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ae74:	2000      	movs	r0, #0
            break;
 800ae76:	e70d      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800ae78:	4620      	mov	r0, r4
 800ae7a:	f001 fbf9 	bl	800c670 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800ae7e:	e709      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0x94>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ae80:	2003      	movs	r0, #3
}
 800ae82:	4770      	bx	lr
 800ae84:	20008000 	.word	0x20008000
 800ae88:	20008064 	.word	0x20008064
 800ae8c:	200080a8 	.word	0x200080a8
 800ae90:	2000806c 	.word	0x2000806c
 800ae94:	200080b0 	.word	0x200080b0
 800ae98:	2000857c 	.word	0x2000857c

0800ae9c <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	f000 8254 	beq.w	800b34a <LoRaMacMibSetRequestConfirm+0x4ae>
{
 800aea2:	b530      	push	{r4, r5, lr}
 800aea4:	b085      	sub	sp, #20
 800aea6:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800aea8:	4ba3      	ldr	r3, [pc, #652]	; (800b138 <LoRaMacMibSetRequestConfirm+0x29c>)
 800aeaa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800aeae:	f013 0f02 	tst.w	r3, #2
 800aeb2:	f040 824c 	bne.w	800b34e <LoRaMacMibSetRequestConfirm+0x4b2>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800aeb6:	7805      	ldrb	r5, [r0, #0]
 800aeb8:	2d39      	cmp	r5, #57	; 0x39
 800aeba:	f200 8243 	bhi.w	800b344 <LoRaMacMibSetRequestConfirm+0x4a8>
 800aebe:	e8df f015 	tbh	[pc, r5, lsl #1]
 800aec2:	003a      	.short	0x003a
 800aec4:	00500047 	.word	0x00500047
 800aec8:	005e0057 	.word	0x005e0057
 800aecc:	006a0064 	.word	0x006a0064
 800aed0:	007b0070 	.word	0x007b0070
 800aed4:	00910086 	.word	0x00910086
 800aed8:	00a7009c 	.word	0x00a7009c
 800aedc:	00bd00b2 	.word	0x00bd00b2
 800aee0:	00d400c9 	.word	0x00d400c9
 800aee4:	00da0241 	.word	0x00da0241
 800aee8:	011a0100 	.word	0x011a0100
 800aeec:	017d0153 	.word	0x017d0153
 800aef0:	018d016d 	.word	0x018d016d
 800aef4:	019d0198 	.word	0x019d0198
 800aef8:	01a701a2 	.word	0x01a701a2
 800aefc:	024101ac 	.word	0x024101ac
 800af00:	01c601b1 	.word	0x01c601b1
 800af04:	01df01f3 	.word	0x01df01f3
 800af08:	020e0207 	.word	0x020e0207
 800af0c:	021b0216 	.word	0x021b0216
 800af10:	02410221 	.word	0x02410221
 800af14:	02410224 	.word	0x02410224
 800af18:	02410241 	.word	0x02410241
 800af1c:	02410241 	.word	0x02410241
 800af20:	02410241 	.word	0x02410241
 800af24:	02410241 	.word	0x02410241
 800af28:	02410241 	.word	0x02410241
 800af2c:	02410241 	.word	0x02410241
 800af30:	02350241 	.word	0x02350241
 800af34:	023b      	.short	0x023b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800af36:	7900      	ldrb	r0, [r0, #4]
 800af38:	f7ff f95a 	bl	800a1f0 <SwitchClass>
            break;
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 800af3c:	b930      	cbnz	r0, 800af4c <LoRaMacMibSetRequestConfirm+0xb0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800af3e:	4a7e      	ldr	r2, [pc, #504]	; (800b138 <LoRaMacMibSetRequestConfirm+0x29c>)
 800af40:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800af44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af48:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800af4c:	b005      	add	sp, #20
 800af4e:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800af50:	7903      	ldrb	r3, [r0, #4]
 800af52:	2b02      	cmp	r3, #2
 800af54:	f000 81fd 	beq.w	800b352 <LoRaMacMibSetRequestConfirm+0x4b6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800af58:	4a78      	ldr	r2, [pc, #480]	; (800b13c <LoRaMacMibSetRequestConfirm+0x2a0>)
 800af5a:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af5e:	2000      	movs	r0, #0
 800af60:	e7ed      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800af62:	6840      	ldr	r0, [r0, #4]
 800af64:	f005 f8f8 	bl	8010158 <SecureElementSetDevEui>
 800af68:	2800      	cmp	r0, #0
 800af6a:	d0e8      	beq.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800af6c:	2003      	movs	r0, #3
 800af6e:	e7ed      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800af70:	6840      	ldr	r0, [r0, #4]
 800af72:	f005 f905 	bl	8010180 <SecureElementSetJoinEui>
 800af76:	2800      	cmp	r0, #0
 800af78:	d0e1      	beq.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800af7a:	4628      	mov	r0, r5
 800af7c:	e7e6      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800af7e:	7902      	ldrb	r2, [r0, #4]
 800af80:	4b6e      	ldr	r3, [pc, #440]	; (800b13c <LoRaMacMibSetRequestConfirm+0x2a0>)
 800af82:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af86:	2000      	movs	r0, #0
 800af88:	e7d9      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800af8a:	6842      	ldr	r2, [r0, #4]
 800af8c:	4b6b      	ldr	r3, [pc, #428]	; (800b13c <LoRaMacMibSetRequestConfirm+0x2a0>)
 800af8e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af92:	2000      	movs	r0, #0
 800af94:	e7d3      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800af96:	6842      	ldr	r2, [r0, #4]
 800af98:	4b68      	ldr	r3, [pc, #416]	; (800b13c <LoRaMacMibSetRequestConfirm+0x2a0>)
 800af9a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800af9e:	2000      	movs	r0, #0
 800afa0:	e7cd      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            if( mibSet->Param.AppKey != NULL )
 800afa2:	6841      	ldr	r1, [r0, #4]
 800afa4:	2900      	cmp	r1, #0
 800afa6:	f000 81d6 	beq.w	800b356 <LoRaMacMibSetRequestConfirm+0x4ba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800afaa:	2000      	movs	r0, #0
 800afac:	f002 fd0c 	bl	800d9c8 <LoRaMacCryptoSetKey>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d0c4      	beq.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800afb4:	2011      	movs	r0, #17
 800afb6:	e7c9      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkKey != NULL )
 800afb8:	6841      	ldr	r1, [r0, #4]
 800afba:	2900      	cmp	r1, #0
 800afbc:	f000 81cd 	beq.w	800b35a <LoRaMacMibSetRequestConfirm+0x4be>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800afc0:	2001      	movs	r0, #1
 800afc2:	f002 fd01 	bl	800d9c8 <LoRaMacCryptoSetKey>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d0b9      	beq.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800afca:	2011      	movs	r0, #17
 800afcc:	e7be      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkSKey != NULL )
 800afce:	6841      	ldr	r1, [r0, #4]
 800afd0:	2900      	cmp	r1, #0
 800afd2:	f000 81c4 	beq.w	800b35e <LoRaMacMibSetRequestConfirm+0x4c2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800afd6:	2002      	movs	r0, #2
 800afd8:	f002 fcf6 	bl	800d9c8 <LoRaMacCryptoSetKey>
 800afdc:	2800      	cmp	r0, #0
 800afde:	d0ae      	beq.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800afe0:	2011      	movs	r0, #17
 800afe2:	e7b3      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AppSKey != NULL )
 800afe4:	6841      	ldr	r1, [r0, #4]
 800afe6:	2900      	cmp	r1, #0
 800afe8:	f000 81bb 	beq.w	800b362 <LoRaMacMibSetRequestConfirm+0x4c6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800afec:	2003      	movs	r0, #3
 800afee:	f002 fceb 	bl	800d9c8 <LoRaMacCryptoSetKey>
 800aff2:	2800      	cmp	r0, #0
 800aff4:	d0a3      	beq.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aff6:	2011      	movs	r0, #17
 800aff8:	e7a8      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKEKey != NULL )
 800affa:	6841      	ldr	r1, [r0, #4]
 800affc:	2900      	cmp	r1, #0
 800affe:	f000 81b2 	beq.w	800b366 <LoRaMacMibSetRequestConfirm+0x4ca>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800b002:	207f      	movs	r0, #127	; 0x7f
 800b004:	f002 fce0 	bl	800d9c8 <LoRaMacCryptoSetKey>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d098      	beq.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b00c:	2011      	movs	r0, #17
 800b00e:	e79d      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKey0 != NULL )
 800b010:	6841      	ldr	r1, [r0, #4]
 800b012:	2900      	cmp	r1, #0
 800b014:	f000 81a9 	beq.w	800b36a <LoRaMacMibSetRequestConfirm+0x4ce>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800b018:	2080      	movs	r0, #128	; 0x80
 800b01a:	f002 fcd5 	bl	800d9c8 <LoRaMacCryptoSetKey>
 800b01e:	2800      	cmp	r0, #0
 800b020:	d08d      	beq.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b022:	2011      	movs	r0, #17
 800b024:	e792      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800b026:	6841      	ldr	r1, [r0, #4]
 800b028:	2900      	cmp	r1, #0
 800b02a:	f000 81a0 	beq.w	800b36e <LoRaMacMibSetRequestConfirm+0x4d2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800b02e:	2081      	movs	r0, #129	; 0x81
 800b030:	f002 fcca 	bl	800d9c8 <LoRaMacCryptoSetKey>
 800b034:	2800      	cmp	r0, #0
 800b036:	d082      	beq.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b038:	2011      	movs	r0, #17
 800b03a:	e787      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800b03c:	6841      	ldr	r1, [r0, #4]
 800b03e:	2900      	cmp	r1, #0
 800b040:	f000 8197 	beq.w	800b372 <LoRaMacMibSetRequestConfirm+0x4d6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800b044:	2082      	movs	r0, #130	; 0x82
 800b046:	f002 fcbf 	bl	800d9c8 <LoRaMacCryptoSetKey>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	f43f af77 	beq.w	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b050:	2011      	movs	r0, #17
 800b052:	e77b      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800b054:	7900      	ldrb	r0, [r0, #4]
 800b056:	4b39      	ldr	r3, [pc, #228]	; (800b13c <LoRaMacMibSetRequestConfirm+0x2a0>)
 800b058:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800b05c:	4c38      	ldr	r4, [pc, #224]	; (800b140 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800b05e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b060:	4798      	blx	r3
            Radio.Sleep( );
 800b062:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b064:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b066:	2000      	movs	r0, #0
 800b068:	e769      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800b06a:	7902      	ldrb	r2, [r0, #4]
 800b06c:	4b33      	ldr	r3, [pc, #204]	; (800b13c <LoRaMacMibSetRequestConfirm+0x2a0>)
 800b06e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b072:	2000      	movs	r0, #0
 800b074:	e763      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b076:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b07a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b07e:	4b2f      	ldr	r3, [pc, #188]	; (800b13c <LoRaMacMibSetRequestConfirm+0x2a0>)
 800b080:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b084:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800b088:	2207      	movs	r2, #7
 800b08a:	a901      	add	r1, sp, #4
 800b08c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b090:	f002 fec9 	bl	800de26 <RegionVerify>
 800b094:	b908      	cbnz	r0, 800b09a <LoRaMacMibSetRequestConfirm+0x1fe>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b096:	2003      	movs	r0, #3
 800b098:	e750      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800b09a:	6863      	ldr	r3, [r4, #4]
 800b09c:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800b09e:	2200      	movs	r2, #0
 800b0a0:	a901      	add	r1, sp, #4
 800b0a2:	4b26      	ldr	r3, [pc, #152]	; (800b13c <LoRaMacMibSetRequestConfirm+0x2a0>)
 800b0a4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b0a8:	f002 febd 	bl	800de26 <RegionVerify>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	f000 8162 	beq.w	800b376 <LoRaMacMibSetRequestConfirm+0x4da>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800b0b2:	4b24      	ldr	r3, [pc, #144]	; (800b144 <LoRaMacMibSetRequestConfirm+0x2a8>)
 800b0b4:	3404      	adds	r4, #4
 800b0b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b0ba:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0be:	2000      	movs	r0, #0
 800b0c0:	e73c      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b0c2:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b0c6:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b0ca:	4b1c      	ldr	r3, [pc, #112]	; (800b13c <LoRaMacMibSetRequestConfirm+0x2a0>)
 800b0cc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b0d0:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b0d4:	2207      	movs	r2, #7
 800b0d6:	a901      	add	r1, sp, #4
 800b0d8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b0dc:	f002 fea3 	bl	800de26 <RegionVerify>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	f000 814a 	beq.w	800b37a <LoRaMacMibSetRequestConfirm+0x4de>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800b0e6:	4b18      	ldr	r3, [pc, #96]	; (800b148 <LoRaMacMibSetRequestConfirm+0x2ac>)
 800b0e8:	3404      	adds	r4, #4
 800b0ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b0ee:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b0f2:	2000      	movs	r0, #0
 800b0f4:	e722      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b0f6:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b0fa:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b0fe:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <LoRaMacMibSetRequestConfirm+0x2a0>)
 800b100:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b104:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b108:	2207      	movs	r2, #7
 800b10a:	a901      	add	r1, sp, #4
 800b10c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b110:	f002 fe89 	bl	800de26 <RegionVerify>
 800b114:	2800      	cmp	r0, #0
 800b116:	f000 8132 	beq.w	800b37e <LoRaMacMibSetRequestConfirm+0x4e2>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800b11a:	4b08      	ldr	r3, [pc, #32]	; (800b13c <LoRaMacMibSetRequestConfirm+0x2a0>)
 800b11c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800b120:	3404      	adds	r4, #4
 800b122:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b126:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b12a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d00c      	beq.n	800b14c <LoRaMacMibSetRequestConfirm+0x2b0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b132:	2000      	movs	r0, #0
 800b134:	e702      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
 800b136:	bf00      	nop
 800b138:	20000654 	.word	0x20000654
 800b13c:	20008000 	.word	0x20008000
 800b140:	080139bc 	.word	0x080139bc
 800b144:	20008064 	.word	0x20008064
 800b148:	200080a8 	.word	0x200080a8
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b14c:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800b150:	f893 011c 	ldrb.w	r0, [r3, #284]	; 0x11c
 800b154:	2800      	cmp	r0, #0
 800b156:	f43f aef1 	beq.w	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
                    Radio.Sleep( );
 800b15a:	4b90      	ldr	r3, [pc, #576]	; (800b39c <LoRaMacMibSetRequestConfirm+0x500>)
 800b15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15e:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800b160:	f7fe fd82 	bl	8009c68 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b164:	2000      	movs	r0, #0
 800b166:	e6e9      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b168:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b16c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b170:	4b8b      	ldr	r3, [pc, #556]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b172:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800b176:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800b17a:	2207      	movs	r2, #7
 800b17c:	a901      	add	r1, sp, #4
 800b17e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b182:	f002 fe50 	bl	800de26 <RegionVerify>
 800b186:	2800      	cmp	r0, #0
 800b188:	f000 80fb 	beq.w	800b382 <LoRaMacMibSetRequestConfirm+0x4e6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800b18c:	4b85      	ldr	r3, [pc, #532]	; (800b3a4 <LoRaMacMibSetRequestConfirm+0x508>)
 800b18e:	3404      	adds	r4, #4
 800b190:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b194:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b198:	2000      	movs	r0, #0
 800b19a:	e6cf      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800b19c:	6843      	ldr	r3, [r0, #4]
 800b19e:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800b1a6:	a902      	add	r1, sp, #8
 800b1a8:	4b7d      	ldr	r3, [pc, #500]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b1aa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b1ae:	f002 fe4d 	bl	800de4c <RegionChanMaskSet>
 800b1b2:	b108      	cbz	r0, 800b1b8 <LoRaMacMibSetRequestConfirm+0x31c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	e6c1      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1b8:	2003      	movs	r0, #3
 800b1ba:	e6c7      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800b1bc:	6843      	ldr	r3, [r0, #4]
 800b1be:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800b1c6:	a902      	add	r1, sp, #8
 800b1c8:	4b75      	ldr	r3, [pc, #468]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b1ca:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b1ce:	f002 fe3d 	bl	800de4c <RegionChanMaskSet>
 800b1d2:	b108      	cbz	r0, 800b1d8 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	e6b1      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b1d8:	2003      	movs	r0, #3
 800b1da:	e6b7      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800b1dc:	7902      	ldrb	r2, [r0, #4]
 800b1de:	1e53      	subs	r3, r2, #1
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	2b0e      	cmp	r3, #14
 800b1e4:	f200 80cf 	bhi.w	800b386 <LoRaMacMibSetRequestConfirm+0x4ea>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800b1e8:	4b6d      	ldr	r3, [pc, #436]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b1ea:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b1ee:	2000      	movs	r0, #0
 800b1f0:	e6a4      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800b1f2:	6842      	ldr	r2, [r0, #4]
 800b1f4:	4b6a      	ldr	r3, [pc, #424]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b1f6:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	e6a0      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800b1fc:	6842      	ldr	r2, [r0, #4]
 800b1fe:	4b68      	ldr	r3, [pc, #416]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b200:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b202:	2000      	movs	r0, #0
 800b204:	e69b      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800b206:	6842      	ldr	r2, [r0, #4]
 800b208:	4b65      	ldr	r3, [pc, #404]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b20a:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b20c:	2000      	movs	r0, #0
 800b20e:	e696      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800b210:	6842      	ldr	r2, [r0, #4]
 800b212:	4b63      	ldr	r3, [pc, #396]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b214:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b216:	2000      	movs	r0, #0
 800b218:	e691      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800b21a:	6842      	ldr	r2, [r0, #4]
 800b21c:	4b60      	ldr	r3, [pc, #384]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b21e:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b220:	2000      	movs	r0, #0
 800b222:	e68c      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800b224:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b228:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800b22c:	2206      	movs	r2, #6
 800b22e:	a901      	add	r1, sp, #4
 800b230:	4b5b      	ldr	r3, [pc, #364]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b232:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b236:	f002 fdf6 	bl	800de26 <RegionVerify>
 800b23a:	2800      	cmp	r0, #0
 800b23c:	f000 80a5 	beq.w	800b38a <LoRaMacMibSetRequestConfirm+0x4ee>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800b240:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b244:	4b56      	ldr	r3, [pc, #344]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b246:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b24a:	2000      	movs	r0, #0
 800b24c:	e676      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800b24e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b252:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b256:	4b52      	ldr	r3, [pc, #328]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b258:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800b25c:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b260:	2205      	movs	r2, #5
 800b262:	a901      	add	r1, sp, #4
 800b264:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b268:	f002 fddd 	bl	800de26 <RegionVerify>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	f000 808e 	beq.w	800b38e <LoRaMacMibSetRequestConfirm+0x4f2>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b272:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b276:	4b4a      	ldr	r3, [pc, #296]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b27c:	2000      	movs	r0, #0
 800b27e:	e65d      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800b280:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b284:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800b288:	220a      	movs	r2, #10
 800b28a:	a901      	add	r1, sp, #4
 800b28c:	4b44      	ldr	r3, [pc, #272]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b28e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b292:	f002 fdc8 	bl	800de26 <RegionVerify>
 800b296:	2800      	cmp	r0, #0
 800b298:	d07b      	beq.n	800b392 <LoRaMacMibSetRequestConfirm+0x4f6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800b29a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b29e:	4b40      	ldr	r3, [pc, #256]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b2a0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	e649      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800b2a8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b2ac:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800b2b0:	2209      	movs	r2, #9
 800b2b2:	a901      	add	r1, sp, #4
 800b2b4:	4b3a      	ldr	r3, [pc, #232]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b2b6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b2ba:	f002 fdb4 	bl	800de26 <RegionVerify>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	d069      	beq.n	800b396 <LoRaMacMibSetRequestConfirm+0x4fa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800b2c2:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800b2c6:	4b36      	ldr	r3, [pc, #216]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b2c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2cc:	2000      	movs	r0, #0
 800b2ce:	e635      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800b2d0:	6842      	ldr	r2, [r0, #4]
 800b2d2:	4b33      	ldr	r3, [pc, #204]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b2d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800b2d8:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2da:	2000      	movs	r0, #0
 800b2dc:	e62f      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800b2de:	7902      	ldrb	r2, [r0, #4]
 800b2e0:	4b2f      	ldr	r3, [pc, #188]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b2e2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800b2e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	e627      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800b2ee:	6842      	ldr	r2, [r0, #4]
 800b2f0:	4b2b      	ldr	r3, [pc, #172]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b2f2:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	e622      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800b2f8:	6842      	ldr	r2, [r0, #4]
 800b2fa:	4b29      	ldr	r3, [pc, #164]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b2fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b300:	2000      	movs	r0, #0
 800b302:	e61c      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            status = RestoreNvmData( );
 800b304:	f7fe fdc4 	bl	8009e90 <RestoreNvmData>
            break;
 800b308:	e618      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800b30a:	7983      	ldrb	r3, [r0, #6]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d901      	bls.n	800b314 <LoRaMacMibSetRequestConfirm+0x478>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b310:	2003      	movs	r0, #3
 800b312:	e61b      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800b314:	6842      	ldr	r2, [r0, #4]
 800b316:	4b22      	ldr	r3, [pc, #136]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b318:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b31c:	6840      	ldr	r0, [r0, #4]
 800b31e:	f002 fa07 	bl	800d730 <LoRaMacCryptoSetLrWanVersion>
 800b322:	2800      	cmp	r0, #0
 800b324:	f43f ae0a 	beq.w	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b328:	2011      	movs	r0, #17
 800b32a:	e60f      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800b32c:	6842      	ldr	r2, [r0, #4]
 800b32e:	4b1c      	ldr	r3, [pc, #112]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b334:	2000      	movs	r0, #0
 800b336:	e602      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800b338:	7902      	ldrb	r2, [r0, #4]
 800b33a:	4b19      	ldr	r3, [pc, #100]	; (800b3a0 <LoRaMacMibSetRequestConfirm+0x504>)
 800b33c:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b340:	2000      	movs	r0, #0
 800b342:	e5fc      	b.n	800af3e <LoRaMacMibSetRequestConfirm+0xa2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800b344:	f001 f9ac 	bl	800c6a0 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800b348:	e5f8      	b.n	800af3c <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b34a:	2003      	movs	r0, #3
}
 800b34c:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800b34e:	2001      	movs	r0, #1
 800b350:	e5fc      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b352:	2003      	movs	r0, #3
 800b354:	e5fa      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b356:	2003      	movs	r0, #3
 800b358:	e5f8      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b35a:	2003      	movs	r0, #3
 800b35c:	e5f6      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b35e:	2003      	movs	r0, #3
 800b360:	e5f4      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b362:	2003      	movs	r0, #3
 800b364:	e5f2      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b366:	2003      	movs	r0, #3
 800b368:	e5f0      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b36a:	2003      	movs	r0, #3
 800b36c:	e5ee      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b36e:	2003      	movs	r0, #3
 800b370:	e5ec      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b372:	2003      	movs	r0, #3
 800b374:	e5ea      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b376:	2003      	movs	r0, #3
 800b378:	e5e8      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b37a:	2003      	movs	r0, #3
 800b37c:	e5e6      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b37e:	2003      	movs	r0, #3
 800b380:	e5e4      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b382:	2003      	movs	r0, #3
 800b384:	e5e2      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b386:	2003      	movs	r0, #3
 800b388:	e5e0      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b38a:	2003      	movs	r0, #3
 800b38c:	e5de      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b38e:	2003      	movs	r0, #3
 800b390:	e5dc      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b392:	2003      	movs	r0, #3
 800b394:	e5da      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b396:	2003      	movs	r0, #3
 800b398:	e5d8      	b.n	800af4c <LoRaMacMibSetRequestConfirm+0xb0>
 800b39a:	bf00      	nop
 800b39c:	080139bc 	.word	0x080139bc
 800b3a0:	20008000 	.word	0x20008000
 800b3a4:	200080b0 	.word	0x200080b0

0800b3a8 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800b3a8:	b570      	push	{r4, r5, r6, lr}
 800b3aa:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	f000 80ea 	beq.w	800b58c <LoRaMacMlmeRequest+0x1e4>
 800b3b8:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800b3ba:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800b3bc:	f7ff f920 	bl	800a600 <LoRaMacIsBusy>
 800b3c0:	b118      	cbz	r0, 800b3ca <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800b3c2:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	b006      	add	sp, #24
 800b3c8:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800b3ca:	f001 ffe7 	bl	800d39c <LoRaMacConfirmQueueIsFull>
 800b3ce:	b108      	cbz	r0, 800b3d4 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800b3d0:	2401      	movs	r4, #1
 800b3d2:	e7f7      	b.n	800b3c4 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b3d4:	f001 ffdc 	bl	800d390 <LoRaMacConfirmQueueGetCnt>
 800b3d8:	b308      	cbz	r0, 800b41e <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b3da:	4b6d      	ldr	r3, [pc, #436]	; (800b590 <LoRaMacMlmeRequest+0x1e8>)
 800b3dc:	2101      	movs	r1, #1
 800b3de:	f883 1459 	strb.w	r1, [r3, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b3e2:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800b3e6:	f042 0204 	orr.w	r2, r2, #4
 800b3ea:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 800b3ee:	782b      	ldrb	r3, [r5, #0]
 800b3f0:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b3f4:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800b3fe:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800b402:	461c      	mov	r4, r3
 800b404:	3b01      	subs	r3, #1
 800b406:	2b0c      	cmp	r3, #12
 800b408:	f200 80a6 	bhi.w	800b558 <LoRaMacMlmeRequest+0x1b0>
 800b40c:	e8df f003 	tbb	[pc, r3]
 800b410:	5aa4a40d 	.word	0x5aa4a40d
 800b414:	a4a4a464 	.word	0xa4a4a464
 800b418:	7695a46d 	.word	0x7695a46d
 800b41c:	8c          	.byte	0x8c
 800b41d:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800b41e:	2214      	movs	r2, #20
 800b420:	2100      	movs	r1, #0
 800b422:	485c      	ldr	r0, [pc, #368]	; (800b594 <LoRaMacMlmeRequest+0x1ec>)
 800b424:	f004 ff05 	bl	8010232 <memset1>
 800b428:	e7d7      	b.n	800b3da <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800b42a:	4b59      	ldr	r3, [pc, #356]	; (800b590 <LoRaMacMlmeRequest+0x1e8>)
 800b42c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b430:	f013 0f20 	tst.w	r3, #32
 800b434:	d1c6      	bne.n	800b3c4 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800b436:	792b      	ldrb	r3, [r5, #4]
 800b438:	2b02      	cmp	r3, #2
 800b43a:	d003      	beq.n	800b444 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d021      	beq.n	800b484 <LoRaMacMlmeRequest+0xdc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b440:	2402      	movs	r4, #2
 800b442:	e08a      	b.n	800b55a <LoRaMacMlmeRequest+0x1b2>
                ResetMacParameters( );
 800b444:	f7fe fe24 	bl	800a090 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b448:	4c53      	ldr	r4, [pc, #332]	; (800b598 <LoRaMacMlmeRequest+0x1f0>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800b450:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b454:	f002 fd5c 	bl	800df10 <RegionAlternateDr>
 800b458:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b45c:	2307      	movs	r3, #7
 800b45e:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800b462:	20ff      	movs	r0, #255	; 0xff
 800b464:	f7fe ff4a 	bl	800a2fc <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800b468:	4604      	mov	r4, r0
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d075      	beq.n	800b55a <LoRaMacMlmeRequest+0x1b2>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800b46e:	4e4a      	ldr	r6, [pc, #296]	; (800b598 <LoRaMacMlmeRequest+0x1f0>)
 800b470:	2201      	movs	r2, #1
 800b472:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800b476:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800b47a:	f002 fd49 	bl	800df10 <RegionAlternateDr>
 800b47e:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800b482:	e06a      	b.n	800b55a <LoRaMacMlmeRequest+0x1b2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800b484:	4e44      	ldr	r6, [pc, #272]	; (800b598 <LoRaMacMlmeRequest+0x1f0>)
 800b486:	2400      	movs	r4, #0
 800b488:	f886 4109 	strb.w	r4, [r6, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b48c:	2302      	movs	r3, #2
 800b48e:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b492:	4669      	mov	r1, sp
 800b494:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800b498:	f002 fcbd 	bl	800de16 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800b49c:	792b      	ldrb	r3, [r5, #4]
 800b49e:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b4a2:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	f88d 3016 	strb.w	r3, [sp, #22]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800b4ac:	4e38      	ldr	r6, [pc, #224]	; (800b590 <LoRaMacMlmeRequest+0x1e8>)
 800b4ae:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800b4b2:	691b      	ldr	r3, [r3, #16]
 800b4b4:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b4b6:	f896 3495 	ldrb.w	r3, [r6, #1173]	; 0x495
 800b4ba:	f043 0320 	orr.w	r3, r3, #32
 800b4be:	f886 3495 	strb.w	r3, [r6, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 800b4c2:	e04a      	b.n	800b55a <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	a904      	add	r1, sp, #16
 800b4c8:	2002      	movs	r0, #2
 800b4ca:	f001 fd5f 	bl	800cf8c <LoRaMacCommandsAddCmd>
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d042      	beq.n	800b55a <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b4d4:	2413      	movs	r4, #19
 800b4d6:	e040      	b.n	800b55a <LoRaMacMlmeRequest+0x1b2>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800b4d8:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800b4dc:	b2d2      	uxtb	r2, r2
 800b4de:	68a9      	ldr	r1, [r5, #8]
 800b4e0:	88a8      	ldrh	r0, [r5, #4]
 800b4e2:	f7fc ffe3 	bl	80084ac <SetTxContinuousWave>
 800b4e6:	4604      	mov	r4, r0
            break;
 800b4e8:	e037      	b.n	800b55a <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	a904      	add	r1, sp, #16
 800b4ee:	200d      	movs	r0, #13
 800b4f0:	f001 fd4c 	bl	800cf8c <LoRaMacCommandsAddCmd>
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	b380      	cbz	r0, 800b55a <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b4f8:	2413      	movs	r4, #19
 800b4fa:	e02e      	b.n	800b55a <LoRaMacMlmeRequest+0x1b2>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800b4fc:	4b26      	ldr	r3, [pc, #152]	; (800b598 <LoRaMacMlmeRequest+0x1f0>)
 800b4fe:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b502:	b10b      	cbz	r3, 800b508 <LoRaMacMlmeRequest+0x160>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b504:	2402      	movs	r4, #2
 800b506:	e028      	b.n	800b55a <LoRaMacMlmeRequest+0x1b2>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800b508:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800b50a:	f004 0007 	and.w	r0, r4, #7
 800b50e:	f001 f885 	bl	800c61c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800b512:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b516:	2201      	movs	r2, #1
 800b518:	a904      	add	r1, sp, #16
 800b51a:	2010      	movs	r0, #16
 800b51c:	f001 fd36 	bl	800cf8c <LoRaMacCommandsAddCmd>
 800b520:	4604      	mov	r4, r0
 800b522:	b1d0      	cbz	r0, 800b55a <LoRaMacMlmeRequest+0x1b2>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b524:	2413      	movs	r4, #19
 800b526:	e018      	b.n	800b55a <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b528:	2200      	movs	r2, #0
 800b52a:	a904      	add	r1, sp, #16
 800b52c:	2012      	movs	r0, #18
 800b52e:	f001 fd2d 	bl	800cf8c <LoRaMacCommandsAddCmd>
 800b532:	4604      	mov	r4, r0
 800b534:	b188      	cbz	r0, 800b55a <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b536:	2413      	movs	r4, #19
 800b538:	e00f      	b.n	800b55a <LoRaMacMlmeRequest+0x1b2>
            queueElement.RestrictCommonReadyToHandle = true;
 800b53a:	2301      	movs	r3, #1
 800b53c:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800b540:	f001 f84c 	bl	800c5dc <LoRaMacClassBIsAcquisitionInProgress>
 800b544:	b108      	cbz	r0, 800b54a <LoRaMacMlmeRequest+0x1a2>
                status = LORAMAC_STATUS_BUSY;
 800b546:	2401      	movs	r4, #1
 800b548:	e007      	b.n	800b55a <LoRaMacMlmeRequest+0x1b2>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800b54a:	f001 f827 	bl	800c59c <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800b54e:	2000      	movs	r0, #0
 800b550:	f000 fb5a 	bl	800bc08 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800b554:	2400      	movs	r4, #0
 800b556:	e000      	b.n	800b55a <LoRaMacMlmeRequest+0x1b2>
    switch( mlmeRequest->Type )
 800b558:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b55a:	4b0d      	ldr	r3, [pc, #52]	; (800b590 <LoRaMacMlmeRequest+0x1e8>)
 800b55c:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800b560:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800b562:	b17c      	cbz	r4, 800b584 <LoRaMacMlmeRequest+0x1dc>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b564:	f001 ff14 	bl	800d390 <LoRaMacConfirmQueueGetCnt>
 800b568:	2800      	cmp	r0, #0
 800b56a:	f47f af2b 	bne.w	800b3c4 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800b56e:	4b08      	ldr	r3, [pc, #32]	; (800b590 <LoRaMacMlmeRequest+0x1e8>)
 800b570:	2100      	movs	r1, #0
 800b572:	f883 141e 	strb.w	r1, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b576:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800b57a:	f361 0282 	bfi	r2, r1, #2, #1
 800b57e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800b582:	e71f      	b.n	800b3c4 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800b584:	a805      	add	r0, sp, #20
 800b586:	f001 fe3f 	bl	800d208 <LoRaMacConfirmQueueAdd>
 800b58a:	e71b      	b.n	800b3c4 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b58c:	2403      	movs	r4, #3
 800b58e:	e719      	b.n	800b3c4 <LoRaMacMlmeRequest+0x1c>
 800b590:	20000654 	.word	0x20000654
 800b594:	20000aac 	.word	0x20000aac
 800b598:	20008000 	.word	0x20008000

0800b59c <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800b59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a0:	b091      	sub	sp, #68	; 0x44
 800b5a2:	9103      	str	r1, [sp, #12]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	f000 80de 	beq.w	800b766 <LoRaMacMcpsRequest+0x1ca>
 800b5aa:	f04f 0a00 	mov.w	sl, #0
 800b5ae:	4605      	mov	r5, r0
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800b5b0:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800b5b4:	f7ff f824 	bl	800a600 <LoRaMacIsBusy>
 800b5b8:	4680      	mov	r8, r0
 800b5ba:	b118      	cbz	r0, 800b5c4 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800b5bc:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800b5be:	b011      	add	sp, #68	; 0x44
 800b5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800b5c4:	ac06      	add	r4, sp, #24
 800b5c6:	462e      	mov	r6, r5
 800b5c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b5ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5cc:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800b5d0:	4651      	mov	r1, sl
 800b5d2:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b5d6:	4c66      	ldr	r4, [pc, #408]	; (800b770 <LoRaMacMcpsRequest+0x1d4>)
 800b5d8:	2214      	movs	r2, #20
 800b5da:	f204 4044 	addw	r0, r4, #1092	; 0x444
 800b5de:	f004 fe28 	bl	8010232 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800b5e8:	4b62      	ldr	r3, [pc, #392]	; (800b774 <LoRaMacMcpsRequest+0x1d8>)
 800b5ea:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d065      	beq.n	800b6be <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800b5f2:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800b5f6:	2f01      	cmp	r7, #1
 800b5f8:	f000 8086 	beq.w	800b708 <LoRaMacMcpsRequest+0x16c>
 800b5fc:	2f03      	cmp	r7, #3
 800b5fe:	f000 8096 	beq.w	800b72e <LoRaMacMcpsRequest+0x192>
 800b602:	2f00      	cmp	r7, #0
 800b604:	d06d      	beq.n	800b6e2 <LoRaMacMcpsRequest+0x146>
 800b606:	f04f 0b00 	mov.w	fp, #0
 800b60a:	f8cd b014 	str.w	fp, [sp, #20]
 800b60e:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b612:	2302      	movs	r3, #2
 800b614:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b618:	4e56      	ldr	r6, [pc, #344]	; (800b774 <LoRaMacMcpsRequest+0x1d8>)
 800b61a:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 800b61e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b622:	a90e      	add	r1, sp, #56	; 0x38
 800b624:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800b628:	f002 fbdc 	bl	800dde4 <RegionGetPhyParam>
 800b62c:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b62e:	b244      	sxtb	r4, r0
 800b630:	45a3      	cmp	fp, r4
 800b632:	bfb8      	it	lt
 800b634:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800b636:	f896 9106 	ldrb.w	r9, [r6, #262]	; 0x106
 800b63a:	f896 2109 	ldrb.w	r2, [r6, #265]	; 0x109
 800b63e:	f896 111c 	ldrb.w	r1, [r6, #284]	; 0x11c
 800b642:	4648      	mov	r0, r9
 800b644:	f7fc ff04 	bl	8008450 <CheckForMinimumAbpDatarate>
 800b648:	4603      	mov	r3, r0
 800b64a:	b900      	cbnz	r0, 800b64e <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b64c:	465c      	mov	r4, fp
    if( readyToSend == true )
 800b64e:	f1b8 0f00 	cmp.w	r8, #0
 800b652:	f000 8082 	beq.w	800b75a <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800b656:	f1b9 0f00 	cmp.w	r9, #0
 800b65a:	d000      	beq.n	800b65e <LoRaMacMcpsRequest+0xc2>
 800b65c:	b19b      	cbz	r3, 800b686 <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800b65e:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b662:	4b44      	ldr	r3, [pc, #272]	; (800b774 <LoRaMacMcpsRequest+0x1d8>)
 800b664:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800b668:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b66c:	2205      	movs	r2, #5
 800b66e:	a90b      	add	r1, sp, #44	; 0x2c
 800b670:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b674:	f002 fbd7 	bl	800de26 <RegionVerify>
 800b678:	2800      	cmp	r0, #0
 800b67a:	d076      	beq.n	800b76a <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b67c:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800b680:	4b3c      	ldr	r3, [pc, #240]	; (800b774 <LoRaMacMcpsRequest+0x1d8>)
 800b682:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800b686:	4b3a      	ldr	r3, [pc, #232]	; (800b770 <LoRaMacMcpsRequest+0x1d4>)
 800b688:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 800b68c:	4b39      	ldr	r3, [pc, #228]	; (800b774 <LoRaMacMcpsRequest+0x1d8>)
 800b68e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800b692:	f7fe f81d 	bl	80096d0 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800b696:	9b03      	ldr	r3, [sp, #12]
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	4653      	mov	r3, sl
 800b69c:	9a05      	ldr	r2, [sp, #20]
 800b69e:	9904      	ldr	r1, [sp, #16]
 800b6a0:	a80c      	add	r0, sp, #48	; 0x30
 800b6a2:	f7fe ff19 	bl	800a4d8 <Send>
        if( status == LORAMAC_STATUS_OK )
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d152      	bne.n	800b750 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800b6aa:	4b31      	ldr	r3, [pc, #196]	; (800b770 <LoRaMacMcpsRequest+0x1d4>)
 800b6ac:	f883 7444 	strb.w	r7, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b6b0:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800b6b4:	f042 0201 	orr.w	r2, r2, #1
 800b6b8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800b6bc:	e04e      	b.n	800b75c <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800b6be:	4b2d      	ldr	r3, [pc, #180]	; (800b774 <LoRaMacMcpsRequest+0x1d8>)
 800b6c0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d194      	bne.n	800b5f2 <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b6c8:	4b2a      	ldr	r3, [pc, #168]	; (800b774 <LoRaMacMcpsRequest+0x1d8>)
 800b6ca:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d18f      	bne.n	800b5f2 <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800b6d2:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d18b      	bne.n	800b5f2 <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	f88d 3018 	strb.w	r3, [sp, #24]
 800b6e0:	e787      	b.n	800b5f2 <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b6e2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	f362 1347 	bfi	r3, r2, #5, #3
 800b6ec:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800b6f0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b6f4:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800b6f6:	9b08      	ldr	r3, [sp, #32]
 800b6f8:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800b6fa:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800b6fe:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800b702:	f04f 0801 	mov.w	r8, #1
            break;
 800b706:	e784      	b.n	800b612 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b708:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b70c:	2204      	movs	r2, #4
 800b70e:	f362 1347 	bfi	r3, r2, #5, #3
 800b712:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800b716:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b71a:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800b71c:	9b08      	ldr	r3, [sp, #32]
 800b71e:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800b720:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800b724:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800b728:	f04f 0801 	mov.w	r8, #1
            break;
 800b72c:	e771      	b.n	800b612 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b72e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b732:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800b736:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800b73a:	9b07      	ldr	r3, [sp, #28]
 800b73c:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800b73e:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800b742:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800b746:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800b74a:	2300      	movs	r3, #0
 800b74c:	9304      	str	r3, [sp, #16]
            break;
 800b74e:	e760      	b.n	800b612 <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800b750:	4b07      	ldr	r3, [pc, #28]	; (800b770 <LoRaMacMcpsRequest+0x1d4>)
 800b752:	2200      	movs	r2, #0
 800b754:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800b758:	e000      	b.n	800b75c <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b75a:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b75c:	4b04      	ldr	r3, [pc, #16]	; (800b770 <LoRaMacMcpsRequest+0x1d4>)
 800b75e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800b762:	612b      	str	r3, [r5, #16]
    return status;
 800b764:	e72b      	b.n	800b5be <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b766:	2003      	movs	r0, #3
 800b768:	e729      	b.n	800b5be <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800b76a:	2003      	movs	r0, #3
 800b76c:	e727      	b.n	800b5be <LoRaMacMcpsRequest+0x22>
 800b76e:	bf00      	nop
 800b770:	20000654 	.word	0x20000654
 800b774:	20008000 	.word	0x20008000

0800b778 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b778:	b510      	push	{r4, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800b77e:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b782:	220f      	movs	r2, #15
 800b784:	a901      	add	r1, sp, #4
 800b786:	4b05      	ldr	r3, [pc, #20]	; (800b79c <LoRaMacTestSetDutyCycleOn+0x24>)
 800b788:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b78c:	f002 fb4b 	bl	800de26 <RegionVerify>
 800b790:	b110      	cbz	r0, 800b798 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800b792:	4b02      	ldr	r3, [pc, #8]	; (800b79c <LoRaMacTestSetDutyCycleOn+0x24>)
 800b794:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800b798:	b002      	add	sp, #8
 800b79a:	bd10      	pop	{r4, pc}
 800b79c:	20008000 	.word	0x20008000

0800b7a0 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800b7a0:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800b7a2:	f7ff f97b 	bl	800aa9c <LoRaMacStop>
 800b7a6:	b110      	cbz	r0, 800b7ae <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800b7a8:	2401      	movs	r4, #1
    }
}
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	bd38      	pop	{r3, r4, r5, pc}
 800b7ae:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800b7b0:	4d0a      	ldr	r5, [pc, #40]	; (800b7dc <LoRaMacDeInitialization+0x3c>)
 800b7b2:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800b7b6:	f006 ff21 	bl	80125fc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800b7ba:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800b7be:	f006 ff1d 	bl	80125fc <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800b7c2:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800b7c6:	f006 ff19 	bl	80125fc <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800b7ca:	f001 f8df 	bl	800c98c <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800b7ce:	f7fe fc5f 	bl	800a090 <ResetMacParameters>
        Radio.Sleep( );
 800b7d2:	4b03      	ldr	r3, [pc, #12]	; (800b7e0 <LoRaMacDeInitialization+0x40>)
 800b7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d6:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800b7d8:	e7e7      	b.n	800b7aa <LoRaMacDeInitialization+0xa>
 800b7da:	bf00      	nop
 800b7dc:	20000654 	.word	0x20000654
 800b7e0:	080139bc 	.word	0x080139bc

0800b7e4 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800b7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e8:	b08b      	sub	sp, #44	; 0x2c
 800b7ea:	460f      	mov	r7, r1
 800b7ec:	4616      	mov	r6, r2
 800b7ee:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800b7f0:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800b7f4:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800b7f8:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800b7fc:	6842      	ldr	r2, [r0, #4]
 800b7fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b800:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800b802:	f890 8001 	ldrb.w	r8, [r0, #1]
 800b806:	f1b8 0f00 	cmp.w	r8, #0
 800b80a:	d109      	bne.n	800b820 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800b80c:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800b810:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800b814:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800b818:	4640      	mov	r0, r8
 800b81a:	b00b      	add	sp, #44	; 0x2c
 800b81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b820:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b822:	2302      	movs	r3, #2
 800b824:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b828:	7bc3      	ldrb	r3, [r0, #15]
 800b82a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b82e:	a908      	add	r1, sp, #32
 800b830:	7c00      	ldrb	r0, [r0, #16]
 800b832:	f002 fad7 	bl	800dde4 <RegionGetPhyParam>
 800b836:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800b838:	b243      	sxtb	r3, r0
 800b83a:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800b83c:	454b      	cmp	r3, r9
 800b83e:	bfb8      	it	lt
 800b840:	464b      	movlt	r3, r9
 800b842:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800b844:	6862      	ldr	r2, [r4, #4]
 800b846:	8923      	ldrh	r3, [r4, #8]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d201      	bcs.n	800b850 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800b84c:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b850:	8961      	ldrh	r1, [r4, #10]
 800b852:	440b      	add	r3, r1
 800b854:	429a      	cmp	r2, r3
 800b856:	d224      	bcs.n	800b8a2 <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800b858:	6863      	ldr	r3, [r4, #4]
 800b85a:	8921      	ldrh	r1, [r4, #8]
 800b85c:	8962      	ldrh	r2, [r4, #10]
 800b85e:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800b862:	4283      	cmp	r3, r0
 800b864:	d332      	bcc.n	800b8cc <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800b866:	1a5b      	subs	r3, r3, r1
 800b868:	fbb3 f1f2 	udiv	r1, r3, r2
 800b86c:	fb02 3311 	mls	r3, r2, r1, r3
 800b870:	bb7b      	cbnz	r3, 800b8d2 <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800b872:	9b01      	ldr	r3, [sp, #4]
 800b874:	4599      	cmp	r9, r3
 800b876:	dc03      	bgt.n	800b880 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800b878:	7823      	ldrb	r3, [r4, #0]
 800b87a:	b9eb      	cbnz	r3, 800b8b8 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800b87c:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b880:	2321      	movs	r3, #33	; 0x21
 800b882:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800b886:	9b00      	ldr	r3, [sp, #0]
 800b888:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b88c:	7be3      	ldrb	r3, [r4, #15]
 800b88e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b892:	a908      	add	r1, sp, #32
 800b894:	7c20      	ldrb	r0, [r4, #16]
 800b896:	f002 faa5 	bl	800dde4 <RegionGetPhyParam>
 800b89a:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800b89c:	fa4f f980 	sxtb.w	r9, r0
 800b8a0:	e7b4      	b.n	800b80c <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800b8a2:	230a      	movs	r3, #10
 800b8a4:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b8a8:	a908      	add	r1, sp, #32
 800b8aa:	7c20      	ldrb	r0, [r4, #16]
 800b8ac:	f002 fa9a 	bl	800dde4 <RegionGetPhyParam>
 800b8b0:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800b8b2:	fa4f fa80 	sxtb.w	sl, r0
 800b8b6:	e7cf      	b.n	800b858 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800b8be:	a903      	add	r1, sp, #12
 800b8c0:	7c20      	ldrb	r0, [r4, #16]
 800b8c2:	f002 faa8 	bl	800de16 <RegionInitDefaults>
                    nbTrans = 1;
 800b8c6:	f04f 0b01 	mov.w	fp, #1
 800b8ca:	e7d9      	b.n	800b880 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800b8cc:	f8dd 9000 	ldr.w	r9, [sp]
 800b8d0:	e79c      	b.n	800b80c <LoRaMacAdrCalcNext+0x28>
 800b8d2:	f8dd 9000 	ldr.w	r9, [sp]
 800b8d6:	e799      	b.n	800b80c <LoRaMacAdrCalcNext+0x28>

0800b8d8 <BeaconCrc>:
static uint16_t BeaconCrc( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint16_t crc = 0x0000;

    if( buffer == NULL )
 800b8d8:	b300      	cbz	r0, 800b91c <BeaconCrc+0x44>
{
 800b8da:	b500      	push	{lr}
 800b8dc:	4686      	mov	lr, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800b8de:	f04f 0c00 	mov.w	ip, #0
    uint16_t crc = 0x0000;
 800b8e2:	4660      	mov	r0, ip
 800b8e4:	e012      	b.n	800b90c <BeaconCrc+0x34>
    {
        crc ^= ( uint16_t ) buffer[i] << 8;
        for( uint16_t j = 0; j < 8; ++j )
        {
            crc = ( crc & 0x8000 ) ? ( crc << 1 ) ^ polynom : ( crc << 1 );
 800b8e6:	f241 0221 	movw	r2, #4129	; 0x1021
 800b8ea:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
 800b8ee:	b280      	uxth	r0, r0
        for( uint16_t j = 0; j < 8; ++j )
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	2b07      	cmp	r3, #7
 800b8f6:	d805      	bhi.n	800b904 <BeaconCrc+0x2c>
            crc = ( crc & 0x8000 ) ? ( crc << 1 ) ^ polynom : ( crc << 1 );
 800b8f8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800b8fc:	d1f3      	bne.n	800b8e6 <BeaconCrc+0xe>
 800b8fe:	0040      	lsls	r0, r0, #1
 800b900:	b280      	uxth	r0, r0
 800b902:	e7f5      	b.n	800b8f0 <BeaconCrc+0x18>
    for( uint16_t i = 0; i < length; ++i )
 800b904:	f10c 0c01 	add.w	ip, ip, #1
 800b908:	fa1f fc8c 	uxth.w	ip, ip
 800b90c:	458c      	cmp	ip, r1
 800b90e:	d207      	bcs.n	800b920 <BeaconCrc+0x48>
        crc ^= ( uint16_t ) buffer[i] << 8;
 800b910:	f81e 300c 	ldrb.w	r3, [lr, ip]
 800b914:	ea80 2003 	eor.w	r0, r0, r3, lsl #8
        for( uint16_t j = 0; j < 8; ++j )
 800b918:	2300      	movs	r3, #0
 800b91a:	e7eb      	b.n	800b8f4 <BeaconCrc+0x1c>
        return 0;
 800b91c:	2000      	movs	r0, #0
        }
    }

    return crc;
}
 800b91e:	4770      	bx	lr
 800b920:	f85d fb04 	ldr.w	pc, [sp], #4

0800b924 <GetTemperature>:

static void GetTemperature( LoRaMacClassBCallback_t *callbacks, BeaconContext_t *beaconCtx )
{
    // Measure temperature, if available
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 800b924:	b130      	cbz	r0, 800b934 <GetTemperature+0x10>
{
 800b926:	b510      	push	{r4, lr}
 800b928:	460c      	mov	r4, r1
    if( ( callbacks != NULL ) && ( callbacks->GetTemperatureLevel != NULL ) )
 800b92a:	6803      	ldr	r3, [r0, #0]
 800b92c:	b10b      	cbz	r3, 800b932 <GetTemperature+0xe>
    {
        beaconCtx->Temperature = callbacks->GetTemperatureLevel( );
 800b92e:	4798      	blx	r3
 800b930:	8060      	strh	r0, [r4, #2]
    }
}
 800b932:	bd10      	pop	{r4, pc}
 800b934:	4770      	bx	lr
	...

0800b938 <EnlargeWindowTimeout>:
}

static void EnlargeWindowTimeout( void )
{
    // Update beacon movement
    Ctx.BeaconCtx.BeaconWindowMovement *= CLASSB_WINDOW_MOVE_EXPANSION_FACTOR;
 800b938:	4a0f      	ldr	r2, [pc, #60]	; (800b978 <EnlargeWindowTimeout+0x40>)
 800b93a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b93c:	005b      	lsls	r3, r3, #1
 800b93e:	6313      	str	r3, [r2, #48]	; 0x30
    if( Ctx.BeaconCtx.BeaconWindowMovement > CLASSB_WINDOW_MOVE_EXPANSION_MAX )
 800b940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b944:	d903      	bls.n	800b94e <EnlargeWindowTimeout+0x16>
    {
        Ctx.BeaconCtx.BeaconWindowMovement = CLASSB_WINDOW_MOVE_EXPANSION_MAX;
 800b946:	4613      	mov	r3, r2
 800b948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b94c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    // Update symbol timeout
    Ctx.BeaconCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 800b94e:	4a0a      	ldr	r2, [pc, #40]	; (800b978 <EnlargeWindowTimeout+0x40>)
 800b950:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	b29b      	uxth	r3, r3
 800b956:	8593      	strh	r3, [r2, #44]	; 0x2c
    if( Ctx.BeaconCtx.SymbolTimeout > CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX )
 800b958:	2bff      	cmp	r3, #255	; 0xff
 800b95a:	d902      	bls.n	800b962 <EnlargeWindowTimeout+0x2a>
    {
        Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_EXPANSION_MAX;
 800b95c:	4613      	mov	r3, r2
 800b95e:	22ff      	movs	r2, #255	; 0xff
 800b960:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
    Ctx.PingSlotCtx.SymbolTimeout *= CLASSB_BEACON_SYMBOL_TO_EXPANSION_FACTOR;
 800b962:	4a05      	ldr	r2, [pc, #20]	; (800b978 <EnlargeWindowTimeout+0x40>)
 800b964:	88d3      	ldrh	r3, [r2, #6]
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	b29b      	uxth	r3, r3
 800b96a:	80d3      	strh	r3, [r2, #6]
    if( Ctx.PingSlotCtx.SymbolTimeout > CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX )
 800b96c:	2b1e      	cmp	r3, #30
 800b96e:	d902      	bls.n	800b976 <EnlargeWindowTimeout+0x3e>
    {
        Ctx.PingSlotCtx.SymbolTimeout = CLASSB_PING_SLOT_SYMBOL_TO_EXPANSION_MAX;
 800b970:	4613      	mov	r3, r2
 800b972:	221e      	movs	r2, #30
 800b974:	80da      	strh	r2, [r3, #6]
    }
}
 800b976:	4770      	bx	lr
 800b978:	20000c1c 	.word	0x20000c1c

0800b97c <ResetWindowTimeout>:

static void ResetWindowTimeout( void )
{
    Ctx.BeaconCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800b97c:	4b03      	ldr	r3, [pc, #12]	; (800b98c <ResetWindowTimeout+0x10>)
 800b97e:	2208      	movs	r2, #8
 800b980:	859a      	strh	r2, [r3, #44]	; 0x2c
    Ctx.PingSlotCtx.SymbolTimeout = CLASSB_BEACON_SYMBOL_TO_DEFAULT;
 800b982:	80da      	strh	r2, [r3, #6]
    Ctx.BeaconCtx.BeaconWindowMovement  = CLASSB_WINDOW_MOVE_DEFAULT;
 800b984:	2202      	movs	r2, #2
 800b986:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	20000c1c 	.word	0x20000c1c

0800b990 <CalcDelayForNextBeacon>:
static TimerTime_t CalcDelayForNextBeacon( TimerTime_t currentTime, TimerTime_t lastBeaconRx )
{
    TimerTime_t nextBeaconRxTime = 0;

    // Calculate the point in time of the next beacon
    nextBeaconRxTime = ( ( currentTime - lastBeaconRx ) % CLASSB_BEACON_INTERVAL );
 800b990:	1a41      	subs	r1, r0, r1
 800b992:	4805      	ldr	r0, [pc, #20]	; (800b9a8 <CalcDelayForNextBeacon+0x18>)
 800b994:	fba0 3001 	umull	r3, r0, r0, r1
 800b998:	0b40      	lsrs	r0, r0, #13
 800b99a:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 800b99e:	fb03 1010 	mls	r0, r3, r0, r1
    return ( CLASSB_BEACON_INTERVAL - nextBeaconRxTime );
}
 800b9a2:	1a18      	subs	r0, r3, r0
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	10624dd3 	.word	0x10624dd3

0800b9ac <IndicateBeaconStatus>:

static void IndicateBeaconStatus( LoRaMacEventInfoStatus_t status )
{
    if( Ctx.BeaconCtx.Ctrl.ResumeBeaconing == 0 )
 800b9ac:	4b0f      	ldr	r3, [pc, #60]	; (800b9ec <IndicateBeaconStatus+0x40>)
 800b9ae:	7b1b      	ldrb	r3, [r3, #12]
 800b9b0:	f013 0f20 	tst.w	r3, #32
 800b9b4:	d113      	bne.n	800b9de <IndicateBeaconStatus+0x32>
    {
        Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON;
 800b9b6:	4b0d      	ldr	r3, [pc, #52]	; (800b9ec <IndicateBeaconStatus+0x40>)
 800b9b8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b9bc:	210a      	movs	r1, #10
 800b9be:	7011      	strb	r1, [r2, #0]
        Ctx.LoRaMacClassBParams.MlmeIndication->Status = status;
 800b9c0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b9c4:	7050      	strb	r0, [r2, #1]
        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 800b9c6:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 800b9ca:	780a      	ldrb	r2, [r1, #0]
 800b9cc:	f042 0208 	orr.w	r2, r2, #8
 800b9d0:	700a      	strb	r2, [r1, #0]

        Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 800b9d2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800b9d6:	7813      	ldrb	r3, [r2, #0]
 800b9d8:	f043 0320 	orr.w	r3, r3, #32
 800b9dc:	7013      	strb	r3, [r2, #0]
    }
    Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 0;
 800b9de:	4b03      	ldr	r3, [pc, #12]	; (800b9ec <IndicateBeaconStatus+0x40>)
 800b9e0:	7b1a      	ldrb	r2, [r3, #12]
 800b9e2:	f36f 1245 	bfc	r2, #5, #1
 800b9e6:	731a      	strb	r2, [r3, #12]
}
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	20000c1c 	.word	0x20000c1c

0800b9f0 <ApplyGuardTime>:

static TimerTime_t ApplyGuardTime( TimerTime_t beaconEventTime )
{
    TimerTime_t timeGuard = beaconEventTime;

    if( timeGuard > CLASSB_BEACON_GUARD )
 800b9f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800b9f4:	4298      	cmp	r0, r3
 800b9f6:	d901      	bls.n	800b9fc <ApplyGuardTime+0xc>
    {
        timeGuard -= CLASSB_BEACON_GUARD;
 800b9f8:	f6a0 30b8 	subw	r0, r0, #3000	; 0xbb8
    }
    return timeGuard;
}
 800b9fc:	4770      	bx	lr

0800b9fe <CalcPingNb>:
    return ApplyGuardTime( beaconEventTime );
}

static uint8_t CalcPingNb( uint16_t periodicity )
{
    return 128 / ( 1 << periodicity );
 800b9fe:	2380      	movs	r3, #128	; 0x80
 800ba00:	fa43 f000 	asr.w	r0, r3, r0
}
 800ba04:	b2c0      	uxtb	r0, r0
 800ba06:	4770      	bx	lr

0800ba08 <CalcPingPeriod>:

static uint16_t CalcPingPeriod( uint8_t pingNb )
{
    return CLASSB_BEACON_WINDOW_SLOTS / pingNb;
}
 800ba08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba0c:	fb93 f0f0 	sdiv	r0, r3, r0
 800ba10:	4770      	bx	lr

0800ba12 <CheckSlotPriority>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckSlotPriority( uint32_t currentAddress, uint8_t currentFPendingSet, uint8_t currentIsMulticast,
                               uint32_t address, uint8_t fPendingSet, uint8_t isMulticast )
{
 800ba12:	b500      	push	{lr}
 800ba14:	f89d c004 	ldrb.w	ip, [sp, #4]
 800ba18:	f89d e008 	ldrb.w	lr, [sp, #8]
    if( currentFPendingSet != fPendingSet )
 800ba1c:	4561      	cmp	r1, ip
 800ba1e:	d003      	beq.n	800ba28 <CheckSlotPriority+0x16>
    {
        if( currentFPendingSet < fPendingSet )
 800ba20:	d20b      	bcs.n	800ba3a <CheckSlotPriority+0x28>
        {
            // New slot sequence has priority. It does not matter
            // which type it is
            return true;
 800ba22:	2001      	movs	r0, #1
                return true;
            }
        }
    }
    return false;
}
 800ba24:	f85d fb04 	ldr.w	pc, [sp], #4
        if( currentIsMulticast != isMulticast )
 800ba28:	4572      	cmp	r2, lr
 800ba2a:	d002      	beq.n	800ba32 <CheckSlotPriority+0x20>
            if( currentIsMulticast < isMulticast )
 800ba2c:	d207      	bcs.n	800ba3e <CheckSlotPriority+0x2c>
                return true;
 800ba2e:	2001      	movs	r0, #1
 800ba30:	e7f8      	b.n	800ba24 <CheckSlotPriority+0x12>
            if( currentAddress < address )
 800ba32:	4298      	cmp	r0, r3
 800ba34:	d305      	bcc.n	800ba42 <CheckSlotPriority+0x30>
    return false;
 800ba36:	2000      	movs	r0, #0
 800ba38:	e7f4      	b.n	800ba24 <CheckSlotPriority+0x12>
        return false;
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	e7f2      	b.n	800ba24 <CheckSlotPriority+0x12>
            return false;
 800ba3e:	2000      	movs	r0, #0
 800ba40:	e7f0      	b.n	800ba24 <CheckSlotPriority+0x12>
                return true;
 800ba42:	2001      	movs	r0, #1
 800ba44:	e7ee      	b.n	800ba24 <CheckSlotPriority+0x12>
	...

0800ba48 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800ba48:	b508      	push	{r3, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;
 800ba4a:	4a05      	ldr	r2, [pc, #20]	; (800ba60 <LoRaMacClassBPingSlotTimerEvent+0x18>)
 800ba4c:	7813      	ldrb	r3, [r2, #0]
 800ba4e:	f043 0302 	orr.w	r3, r3, #2
 800ba52:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800ba54:	4b03      	ldr	r3, [pc, #12]	; (800ba64 <LoRaMacClassBPingSlotTimerEvent+0x1c>)
 800ba56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba5a:	b103      	cbz	r3, 800ba5e <LoRaMacClassBPingSlotTimerEvent+0x16>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 800ba5c:	4798      	blx	r3
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ba5e:	bd08      	pop	{r3, pc}
 800ba60:	20000cdc 	.word	0x20000cdc
 800ba64:	20000c1c 	.word	0x20000c1c

0800ba68 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800ba68:	b508      	push	{r3, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;
 800ba6a:	4a05      	ldr	r2, [pc, #20]	; (800ba80 <LoRaMacClassBMulticastSlotTimerEvent+0x18>)
 800ba6c:	7813      	ldrb	r3, [r2, #0]
 800ba6e:	f043 0304 	orr.w	r3, r3, #4
 800ba72:	7013      	strb	r3, [r2, #0]

    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800ba74:	4b03      	ldr	r3, [pc, #12]	; (800ba84 <LoRaMacClassBMulticastSlotTimerEvent+0x1c>)
 800ba76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ba7a:	b103      	cbz	r3, 800ba7e <LoRaMacClassBMulticastSlotTimerEvent+0x16>
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 800ba7c:	4798      	blx	r3
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ba7e:	bd08      	pop	{r3, pc}
 800ba80:	20000cdc 	.word	0x20000cdc
 800ba84:	20000c1c 	.word	0x20000c1c

0800ba88 <InitClassB>:
{
 800ba88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba8a:	b085      	sub	sp, #20
    LoRaMacClassBEvents.Value = 0;
 800ba8c:	2500      	movs	r5, #0
 800ba8e:	4b18      	ldr	r3, [pc, #96]	; (800baf0 <InitClassB+0x68>)
 800ba90:	601d      	str	r5, [r3, #0]
    memset1( ( uint8_t* ) ClassBNvm, 0, sizeof( LoRaMacClassBNvmData_t ) );
 800ba92:	4e18      	ldr	r6, [pc, #96]	; (800baf4 <InitClassB+0x6c>)
 800ba94:	2218      	movs	r2, #24
 800ba96:	4629      	mov	r1, r5
 800ba98:	6830      	ldr	r0, [r6, #0]
 800ba9a:	f004 fbca 	bl	8010232 <memset1>
    memset1( ( uint8_t* ) &Ctx.PingSlotCtx, 0, sizeof( PingSlotContext_t ) );
 800ba9e:	4c16      	ldr	r4, [pc, #88]	; (800baf8 <InitClassB+0x70>)
 800baa0:	220c      	movs	r2, #12
 800baa2:	4629      	mov	r1, r5
 800baa4:	4620      	mov	r0, r4
 800baa6:	f004 fbc4 	bl	8010232 <memset1>
    memset1( ( uint8_t* ) &Ctx.BeaconCtx, 0, sizeof( BeaconContext_t ) );
 800baaa:	f104 070c 	add.w	r7, r4, #12
 800baae:	223c      	movs	r2, #60	; 0x3c
 800bab0:	4629      	mov	r1, r5
 800bab2:	4638      	mov	r0, r7
 800bab4:	f004 fbbd 	bl	8010232 <memset1>
    Ctx.BeaconCtx.Temperature = 25.0;
 800bab8:	2319      	movs	r3, #25
 800baba:	81e3      	strh	r3, [r4, #14]
    GetTemperature( &Ctx.LoRaMacClassBCallbacks, &Ctx.BeaconCtx );
 800babc:	4639      	mov	r1, r7
 800babe:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800bac2:	f7ff ff2f 	bl	800b924 <GetTemperature>
    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_DR;
 800bac6:	2335      	movs	r3, #53	; 0x35
 800bac8:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800bacc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800bad0:	a902      	add	r1, sp, #8
 800bad2:	7818      	ldrb	r0, [r3, #0]
 800bad4:	f002 f986 	bl	800dde4 <RegionGetPhyParam>
 800bad8:	9001      	str	r0, [sp, #4]
    ClassBNvm->PingSlotCtx.Datarate = ( int8_t )( phyParam.Value );
 800bada:	6833      	ldr	r3, [r6, #0]
 800badc:	7218      	strb	r0, [r3, #8]
    ClassBNvm->PingSlotCtx.FPendingSet = 0;
 800bade:	725d      	strb	r5, [r3, #9]
    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800bae0:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
    Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bae4:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bae8:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
}
 800baec:	b005      	add	sp, #20
 800baee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baf0:	20000cdc 	.word	0x20000cdc
 800baf4:	20000c18 	.word	0x20000c18
 800baf8:	20000c1c 	.word	0x20000c1c

0800bafc <InitClassBDefaults>:
{
 800bafc:	b510      	push	{r4, lr}
 800bafe:	b086      	sub	sp, #24
    LoRaMacClassBBeaconNvmData_t beaconCtx = ClassBNvm->BeaconCtx;
 800bb00:	4c14      	ldr	r4, [pc, #80]	; (800bb54 <InitClassBDefaults+0x58>)
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	f103 020c 	add.w	r2, r3, #12
 800bb08:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb0c:	aa06      	add	r2, sp, #24
 800bb0e:	e902 0003 	stmdb	r2, {r0, r1}
    LoRaMacClassBPingSlotNvmData_t pingSlotCtx = ClassBNvm->PingSlotCtx;
 800bb12:	f10d 0c04 	add.w	ip, sp, #4
 800bb16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb1a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    InitClassB( );
 800bb1e:	f7ff ffb3 	bl	800ba88 <InitClassB>
    ClassBNvm->BeaconCtx.Frequency = beaconCtx.Frequency;
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	9a05      	ldr	r2, [sp, #20]
 800bb26:	611a      	str	r2, [r3, #16]
    ClassBNvm->BeaconCtx.Ctrl.CustomFreq = beaconCtx.Ctrl.CustomFreq;
 800bb28:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800bb2c:	7b1a      	ldrb	r2, [r3, #12]
 800bb2e:	f361 0200 	bfi	r2, r1, #0, #1
 800bb32:	731a      	strb	r2, [r3, #12]
    ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = pingSlotCtx.Ctrl.CustomFreq;
 800bb34:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bb38:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800bb3c:	7819      	ldrb	r1, [r3, #0]
 800bb3e:	f362 0141 	bfi	r1, r2, #1, #1
 800bb42:	7019      	strb	r1, [r3, #0]
    ClassBNvm->PingSlotCtx.Frequency = pingSlotCtx.Frequency;
 800bb44:	9a02      	ldr	r2, [sp, #8]
 800bb46:	605a      	str	r2, [r3, #4]
    ClassBNvm->PingSlotCtx.Datarate = pingSlotCtx.Datarate;
 800bb48:	f99d 200c 	ldrsb.w	r2, [sp, #12]
 800bb4c:	721a      	strb	r2, [r3, #8]
}
 800bb4e:	b006      	add	sp, #24
 800bb50:	bd10      	pop	{r4, pc}
 800bb52:	bf00      	nop
 800bb54:	20000c18 	.word	0x20000c18

0800bb58 <CalcDownlinkFrequency>:
{
 800bb58:	b500      	push	{lr}
 800bb5a:	b085      	sub	sp, #20
    getPhy.Attribute = PHY_PING_SLOT_CHANNEL_FREQ;
 800bb5c:	2334      	movs	r3, #52	; 0x34
 800bb5e:	f88d 3008 	strb.w	r3, [sp, #8]
    if( isBeacon == true )
 800bb62:	b111      	cbz	r1, 800bb6a <CalcDownlinkFrequency+0x12>
        getPhy.Attribute = PHY_BEACON_CHANNEL_FREQ;
 800bb64:	232f      	movs	r3, #47	; 0x2f
 800bb66:	f88d 3008 	strb.w	r3, [sp, #8]
    getPhy.Channel = channel;
 800bb6a:	f88d 000c 	strb.w	r0, [sp, #12]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800bb6e:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <CalcDownlinkFrequency+0x2c>)
 800bb70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb74:	a902      	add	r1, sp, #8
 800bb76:	7818      	ldrb	r0, [r3, #0]
 800bb78:	f002 f934 	bl	800dde4 <RegionGetPhyParam>
 800bb7c:	9001      	str	r0, [sp, #4]
}
 800bb7e:	b005      	add	sp, #20
 800bb80:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb84:	20000c1c 	.word	0x20000c1c

0800bb88 <CalcDownlinkChannelAndFrequency>:
{
 800bb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb8c:	b084      	sub	sp, #16
 800bb8e:	4680      	mov	r8, r0
 800bb90:	460d      	mov	r5, r1
 800bb92:	4616      	mov	r6, r2
    getPhy.Attribute = PHY_PING_SLOT_NB_CHANNELS;
 800bb94:	2236      	movs	r2, #54	; 0x36
 800bb96:	f88d 2008 	strb.w	r2, [sp, #8]
    if( isBeacon == true )
 800bb9a:	461f      	mov	r7, r3
 800bb9c:	b113      	cbz	r3, 800bba4 <CalcDownlinkChannelAndFrequency+0x1c>
        getPhy.Attribute = PHY_BEACON_NB_CHANNELS;
 800bb9e:	2332      	movs	r3, #50	; 0x32
 800bba0:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800bba4:	4b16      	ldr	r3, [pc, #88]	; (800bc00 <CalcDownlinkChannelAndFrequency+0x78>)
 800bba6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bbaa:	a902      	add	r1, sp, #8
 800bbac:	7818      	ldrb	r0, [r3, #0]
 800bbae:	f002 f919 	bl	800dde4 <RegionGetPhyParam>
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	9001      	str	r0, [sp, #4]
    nbChannels = ( uint8_t ) phyParam.Value;
 800bbb6:	b2c3      	uxtb	r3, r0
    if( nbChannels > 1 )
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d807      	bhi.n	800bbcc <CalcDownlinkChannelAndFrequency+0x44>
    uint32_t channel = 0;
 800bbbc:	2000      	movs	r0, #0
    return CalcDownlinkFrequency( channel, isBeacon );
 800bbbe:	4639      	mov	r1, r7
 800bbc0:	b2c0      	uxtb	r0, r0
 800bbc2:	f7ff ffc9 	bl	800bb58 <CalcDownlinkFrequency>
}
 800bbc6:	b004      	add	sp, #16
 800bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        getPhy.Attribute = PHY_BEACON_CHANNEL_OFFSET;
 800bbcc:	2333      	movs	r3, #51	; 0x33
 800bbce:	f88d 3008 	strb.w	r3, [sp, #8]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800bbd2:	4b0b      	ldr	r3, [pc, #44]	; (800bc00 <CalcDownlinkChannelAndFrequency+0x78>)
 800bbd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bbd8:	a902      	add	r1, sp, #8
 800bbda:	7818      	ldrb	r0, [r3, #0]
 800bbdc:	f002 f902 	bl	800dde4 <RegionGetPhyParam>
 800bbe0:	9001      	str	r0, [sp, #4]
        channel = devAddr + ( beaconTime / ( beaconInterval / 1000 ) );
 800bbe2:	4a08      	ldr	r2, [pc, #32]	; (800bc04 <CalcDownlinkChannelAndFrequency+0x7c>)
 800bbe4:	fba2 3606 	umull	r3, r6, r2, r6
 800bbe8:	09b6      	lsrs	r6, r6, #6
 800bbea:	fbb5 f5f6 	udiv	r5, r5, r6
 800bbee:	4445      	add	r5, r8
        channel = channel % nbChannels;
 800bbf0:	b2e4      	uxtb	r4, r4
 800bbf2:	fbb5 f3f4 	udiv	r3, r5, r4
 800bbf6:	fb04 5413 	mls	r4, r4, r3, r5
        channel += offset;
 800bbfa:	fa54 f080 	uxtab	r0, r4, r0
 800bbfe:	e7de      	b.n	800bbbe <CalcDownlinkChannelAndFrequency+0x36>
 800bc00:	20000c1c 	.word	0x20000c1c
 800bc04:	10624dd3 	.word	0x10624dd3

0800bc08 <LoRaMacClassBBeaconTimerEvent>:
{
 800bc08:	b510      	push	{r4, lr}
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
 800bc0a:	f006 fcb7 	bl	801257c <UTIL_TIMER_GetCurrentTime>
 800bc0e:	4c08      	ldr	r4, [pc, #32]	; (800bc30 <LoRaMacClassBBeaconTimerEvent+0x28>)
 800bc10:	63e0      	str	r0, [r4, #60]	; 0x3c
    TimerStop( &Ctx.BeaconTimer );
 800bc12:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800bc16:	f006 fcf1 	bl	80125fc <UTIL_TIMER_Stop>
    LoRaMacClassBEvents.Events.Beacon = 1;
 800bc1a:	4a06      	ldr	r2, [pc, #24]	; (800bc34 <LoRaMacClassBBeaconTimerEvent+0x2c>)
 800bc1c:	7813      	ldrb	r3, [r2, #0]
 800bc1e:	f043 0301 	orr.w	r3, r3, #1
 800bc22:	7013      	strb	r3, [r2, #0]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
 800bc24:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800bc28:	b103      	cbz	r3, 800bc2c <LoRaMacClassBBeaconTimerEvent+0x24>
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
 800bc2a:	4798      	blx	r3
}
 800bc2c:	bd10      	pop	{r4, pc}
 800bc2e:	bf00      	nop
 800bc30:	20000c1c 	.word	0x20000c1c
 800bc34:	20000cdc 	.word	0x20000cdc

0800bc38 <CalculateBeaconRxWindowConfig>:
    rxConfig->WindowTimeout = currentSymbolTimeout;
 800bc38:	6081      	str	r1, [r0, #8]
    rxConfig->WindowOffset = 0;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	60c3      	str	r3, [r0, #12]
    if( ( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 800bc3e:	4b13      	ldr	r3, [pc, #76]	; (800bc8c <CalculateBeaconRxWindowConfig+0x54>)
 800bc40:	7b1b      	ldrb	r3, [r3, #12]
 800bc42:	f013 0f12 	tst.w	r3, #18
 800bc46:	d100      	bne.n	800bc4a <CalculateBeaconRxWindowConfig+0x12>
 800bc48:	4770      	bx	lr
{
 800bc4a:	b530      	push	{r4, r5, lr}
 800bc4c:	b087      	sub	sp, #28
 800bc4e:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 800bc50:	2331      	movs	r3, #49	; 0x31
 800bc52:	f88d 3010 	strb.w	r3, [sp, #16]
        phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800bc56:	4d0d      	ldr	r5, [pc, #52]	; (800bc8c <CalculateBeaconRxWindowConfig+0x54>)
 800bc58:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800bc5c:	a904      	add	r1, sp, #16
 800bc5e:	7818      	ldrb	r0, [r3, #0]
 800bc60:	f002 f8c0 	bl	800dde4 <RegionGetPhyParam>
 800bc64:	4601      	mov	r1, r0
 800bc66:	9003      	str	r0, [sp, #12]
        maxRxError = MAX( Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError,
 800bc68:	f9b5 c044 	ldrsh.w	ip, [r5, #68]	; 0x44
 800bc6c:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
 800bc70:	6813      	ldr	r3, [r2, #0]
        RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800bc72:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 800bc76:	7912      	ldrb	r2, [r2, #4]
 800bc78:	7800      	ldrb	r0, [r0, #0]
 800bc7a:	9400      	str	r4, [sp, #0]
 800bc7c:	4563      	cmp	r3, ip
 800bc7e:	bf38      	it	cc
 800bc80:	4663      	movcc	r3, ip
 800bc82:	b249      	sxtb	r1, r1
 800bc84:	f002 f8eb 	bl	800de5e <RegionComputeRxWindowParameters>
}
 800bc88:	b007      	add	sp, #28
 800bc8a:	bd30      	pop	{r4, r5, pc}
 800bc8c:	20000c1c 	.word	0x20000c1c

0800bc90 <TimerTempCompensation>:
{
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4604      	mov	r4, r0
  interim = (float)temperature - (t - tDev);
 800bc94:	4608      	mov	r0, r1
 800bc96:	f7f4 fded 	bl	8000874 <__aeabi_i2f>
 800bc9a:	4914      	ldr	r1, [pc, #80]	; (800bcec <TimerTempCompensation+0x5c>)
 800bc9c:	f7f4 fd34 	bl	8000708 <__aeabi_fsub>
 800bca0:	4601      	mov	r1, r0
  ppm *=  interim * interim;
 800bca2:	f7f4 fe3b 	bl	800091c <__aeabi_fmul>
 800bca6:	4912      	ldr	r1, [pc, #72]	; (800bcf0 <TimerTempCompensation+0x60>)
 800bca8:	f7f4 fe38 	bl	800091c <__aeabi_fmul>
 800bcac:	4605      	mov	r5, r0
  interim = ((float) period * ppm) / 1000000.0f;
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f7f4 fddc 	bl	800086c <__aeabi_ui2f>
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	f7f4 fe30 	bl	800091c <__aeabi_fmul>
 800bcbc:	490d      	ldr	r1, [pc, #52]	; (800bcf4 <TimerTempCompensation+0x64>)
 800bcbe:	f7f4 fee1 	bl	8000a84 <__aeabi_fdiv>
 800bcc2:	4601      	mov	r1, r0
  interim += period;
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	f7f4 fd21 	bl	800070c <__addsf3>
  interim = floor(interim);
 800bcca:	f7f4 fbc1 	bl	8000450 <__aeabi_f2d>
 800bcce:	f006 ff23 	bl	8012b18 <floor>
 800bcd2:	f7f4 fcc5 	bl	8000660 <__aeabi_d2f>
 800bcd6:	4605      	mov	r5, r0
  if (interim < 0.0f)
 800bcd8:	2100      	movs	r1, #0
 800bcda:	f7f4 ffbd 	bl	8000c58 <__aeabi_fcmplt>
 800bcde:	b900      	cbnz	r0, 800bce2 <TimerTempCompensation+0x52>
  interim = floor(interim);
 800bce0:	462c      	mov	r4, r5
  return ( TimerTime_t ) interim;
 800bce2:	4620      	mov	r0, r4
 800bce4:	f7f5 f806 	bl	8000cf4 <__aeabi_f2uiz>
}
 800bce8:	bd38      	pop	{r3, r4, r5, pc}
 800bcea:	bf00      	nop
 800bcec:	41a00000 	.word	0x41a00000
 800bcf0:	bd1db22d 	.word	0xbd1db22d
 800bcf4:	49742400 	.word	0x49742400

0800bcf8 <CalcNextSlotTime>:
{
 800bcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfc:	4604      	mov	r4, r0
 800bcfe:	460d      	mov	r5, r1
 800bd00:	4617      	mov	r7, r2
 800bd02:	4698      	mov	r8, r3
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800bd04:	f006 fc3a 	bl	801257c <UTIL_TIMER_GetCurrentTime>
 800bd08:	4606      	mov	r6, r0
    slotTime = ( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) % CLASSB_BEACON_INTERVAL );
 800bd0a:	4b24      	ldr	r3, [pc, #144]	; (800bd9c <CalcNextSlotTime+0xa4>)
 800bd0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bd10:	f006 fbbe 	bl	8012490 <SysTimeToMs>
 800bd14:	1a30      	subs	r0, r6, r0
 800bd16:	4b22      	ldr	r3, [pc, #136]	; (800bda0 <CalcNextSlotTime+0xa8>)
 800bd18:	fba3 3c00 	umull	r3, ip, r3, r0
 800bd1c:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
 800bd20:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 800bd24:	fb03 0c1c 	mls	ip, r3, ip, r0
    slotTime = currentTime - slotTime;
 800bd28:	eba6 0c0c 	sub.w	ip, r6, ip
    slotTime += CLASSB_BEACON_RESERVED;
 800bd2c:	f60c 0c48 	addw	ip, ip, #2120	; 0x848
    slotTime += slotOffset * CLASSB_PING_SLOT_WINDOW;
 800bd30:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
 800bd34:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
    if( slotTime < currentTime )
 800bd38:	42a6      	cmp	r6, r4
 800bd3a:	d914      	bls.n	800bd66 <CalcNextSlotTime+0x6e>
        currentPingSlot = ( ( currentTime - slotTime ) /
 800bd3c:	1b33      	subs	r3, r6, r4
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 800bd3e:	ebc5 1205 	rsb	r2, r5, r5, lsl #4
 800bd42:	0052      	lsls	r2, r2, #1
        currentPingSlot = ( ( currentTime - slotTime ) /
 800bd44:	fbb3 f3f2 	udiv	r3, r3, r2
                          ( pingPeriod * CLASSB_PING_SLOT_WINDOW ) ) + 1;
 800bd48:	b2db      	uxtb	r3, r3
        currentPingSlot = ( ( currentTime - slotTime ) /
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	b2db      	uxtb	r3, r3
        slotTime += ( ( TimerTime_t )( currentPingSlot * pingPeriod ) *
 800bd4e:	fb03 f505 	mul.w	r5, r3, r5
 800bd52:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 800bd56:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    if( currentPingSlot < pingNb )
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	42bb      	cmp	r3, r7
 800bd5e:	d304      	bcc.n	800bd6a <CalcNextSlotTime+0x72>
    return false;
 800bd60:	2000      	movs	r0, #0
}
 800bd62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8_t currentPingSlot = 0;
 800bd66:	2300      	movs	r3, #0
 800bd68:	e7f7      	b.n	800bd5a <CalcNextSlotTime+0x62>
        if( slotTime <= ( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - CLASSB_BEACON_GUARD - CLASSB_PING_SLOT_WINDOW ) )
 800bd6a:	4b0e      	ldr	r3, [pc, #56]	; (800bda4 <CalcNextSlotTime+0xac>)
 800bd6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bd70:	f006 fb8e 	bl	8012490 <SysTimeToMs>
 800bd74:	f6a0 30d6 	subw	r0, r0, #3030	; 0xbd6
 800bd78:	42a0      	cmp	r0, r4
 800bd7a:	d201      	bcs.n	800bd80 <CalcNextSlotTime+0x88>
    return false;
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	e7f0      	b.n	800bd62 <CalcNextSlotTime+0x6a>
            slotTime -= currentTime;
 800bd80:	1ba4      	subs	r4, r4, r6
            slotTime -= Radio.GetWakeupTime( );
 800bd82:	4b09      	ldr	r3, [pc, #36]	; (800bda8 <CalcNextSlotTime+0xb0>)
 800bd84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd86:	4798      	blx	r3
            slotTime = TimerTempCompensation( slotTime, Ctx.BeaconCtx.Temperature );
 800bd88:	4b08      	ldr	r3, [pc, #32]	; (800bdac <CalcNextSlotTime+0xb4>)
 800bd8a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800bd8e:	1a20      	subs	r0, r4, r0
 800bd90:	f7ff ff7e 	bl	800bc90 <TimerTempCompensation>
            *timeOffset = slotTime;
 800bd94:	f8c8 0000 	str.w	r0, [r8]
            return true;
 800bd98:	2001      	movs	r0, #1
 800bd9a:	e7e2      	b.n	800bd62 <CalcNextSlotTime+0x6a>
 800bd9c:	20000c34 	.word	0x20000c34
 800bda0:	10624dd3 	.word	0x10624dd3
 800bda4:	20000c3c 	.word	0x20000c3c
 800bda8:	080139bc 	.word	0x080139bc
 800bdac:	20000c1c 	.word	0x20000c1c

0800bdb0 <RxBeaconSetup>:
{
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	b084      	sub	sp, #16
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	4616      	mov	r6, r2
    if( activateDefaultChannel == true )
 800bdb8:	b349      	cbz	r1, 800be0e <RxBeaconSetup+0x5e>
        frequency = CalcDownlinkFrequency( 0, true );
 800bdba:	2101      	movs	r1, #1
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	f7ff fecb 	bl	800bb58 <CalcDownlinkFrequency>
 800bdc2:	4604      	mov	r4, r0
    if( ClassBNvm->BeaconCtx.Ctrl.CustomFreq == 1 )
 800bdc4:	4b1d      	ldr	r3, [pc, #116]	; (800be3c <RxBeaconSetup+0x8c>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	7b1a      	ldrb	r2, [r3, #12]
 800bdca:	f012 0f01 	tst.w	r2, #1
 800bdce:	d000      	beq.n	800bdd2 <RxBeaconSetup+0x22>
        frequency = ClassBNvm->BeaconCtx.Frequency;
 800bdd0:	691c      	ldr	r4, [r3, #16]
    if( Ctx.BeaconCtx.Ctrl.BeaconChannelSet == 1 )
 800bdd2:	4b1b      	ldr	r3, [pc, #108]	; (800be40 <RxBeaconSetup+0x90>)
 800bdd4:	7b1b      	ldrb	r3, [r3, #12]
 800bdd6:	f013 0f08 	tst.w	r3, #8
 800bdda:	d123      	bne.n	800be24 <RxBeaconSetup+0x74>
    rxBeaconSetup.SymbolTimeout = symbolTimeout;
 800bddc:	f8ad 6004 	strh.w	r6, [sp, #4]
    rxBeaconSetup.RxTime = rxTime;
 800bde0:	9502      	str	r5, [sp, #8]
    rxBeaconSetup.Frequency = frequency;
 800bde2:	9403      	str	r4, [sp, #12]
    RegionRxBeaconSetup( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &rxBeaconSetup, &Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800bde4:	4d16      	ldr	r5, [pc, #88]	; (800be40 <RxBeaconSetup+0x90>)
 800bde6:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800bdea:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 800bdee:	3204      	adds	r2, #4
 800bdf0:	a901      	add	r1, sp, #4
 800bdf2:	7818      	ldrb	r0, [r3, #0]
 800bdf4:	f002 f8b0 	bl	800df58 <RegionRxBeaconSetup>
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Frequency = frequency;
 800bdf8:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800bdfc:	611c      	str	r4, [r3, #16]
    Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Datarate = Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate;
 800bdfe:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
 800be02:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800be06:	7912      	ldrb	r2, [r2, #4]
 800be08:	751a      	strb	r2, [r3, #20]
}
 800be0a:	b004      	add	sp, #16
 800be0c:	bd70      	pop	{r4, r5, r6, pc}
        frequency = CalcDownlinkChannelAndFrequency( 0, Ctx.BeaconCtx.BeaconTime.Seconds + ( CLASSB_BEACON_INTERVAL / 1000 ),
 800be0e:	4b0c      	ldr	r3, [pc, #48]	; (800be40 <RxBeaconSetup+0x90>)
 800be10:	6919      	ldr	r1, [r3, #16]
 800be12:	2301      	movs	r3, #1
 800be14:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 800be18:	3180      	adds	r1, #128	; 0x80
 800be1a:	2000      	movs	r0, #0
 800be1c:	f7ff feb4 	bl	800bb88 <CalcDownlinkChannelAndFrequency>
 800be20:	4604      	mov	r4, r0
 800be22:	e7cf      	b.n	800bdc4 <RxBeaconSetup+0x14>
        Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 800be24:	4b06      	ldr	r3, [pc, #24]	; (800be40 <RxBeaconSetup+0x90>)
 800be26:	7b1a      	ldrb	r2, [r3, #12]
 800be28:	f36f 02c3 	bfc	r2, #3, #1
 800be2c:	731a      	strb	r2, [r3, #12]
        frequency = CalcDownlinkFrequency( Ctx.BeaconCtx.BeaconTimingChannel, true );
 800be2e:	2101      	movs	r1, #1
 800be30:	f893 0034 	ldrb.w	r0, [r3, #52]	; 0x34
 800be34:	f7ff fe90 	bl	800bb58 <CalcDownlinkFrequency>
 800be38:	4604      	mov	r4, r0
 800be3a:	e7cf      	b.n	800bddc <RxBeaconSetup+0x2c>
 800be3c:	20000c18 	.word	0x20000c18
 800be40:	20000c1c 	.word	0x20000c1c

0800be44 <ComputePingOffset>:
{
 800be44:	b570      	push	{r4, r5, r6, lr}
 800be46:	b088      	sub	sp, #32
 800be48:	4605      	mov	r5, r0
 800be4a:	4614      	mov	r4, r2
 800be4c:	461e      	mov	r6, r3
    memset1( buffer, 0, 16 );
 800be4e:	2210      	movs	r2, #16
 800be50:	2100      	movs	r1, #0
 800be52:	eb0d 0002 	add.w	r0, sp, r2
 800be56:	f004 f9ec 	bl	8010232 <memset1>
    memset1( cipher, 0, 16 );
 800be5a:	2210      	movs	r2, #16
 800be5c:	2100      	movs	r1, #0
 800be5e:	4668      	mov	r0, sp
 800be60:	f004 f9e7 	bl	8010232 <memset1>
    buffer[0] = ( time ) & 0xFF;
 800be64:	f88d 5010 	strb.w	r5, [sp, #16]
    buffer[1] = ( time >> 8 ) & 0xFF;
 800be68:	0a2b      	lsrs	r3, r5, #8
 800be6a:	f88d 3011 	strb.w	r3, [sp, #17]
    buffer[2] = ( time >> 16 ) & 0xFF;
 800be6e:	0c2b      	lsrs	r3, r5, #16
 800be70:	f88d 3012 	strb.w	r3, [sp, #18]
    buffer[3] = ( time >> 24 ) & 0xFF;
 800be74:	0e2d      	lsrs	r5, r5, #24
 800be76:	f88d 5013 	strb.w	r5, [sp, #19]
    buffer[4] = ( address ) & 0xFF;
 800be7a:	f88d 4014 	strb.w	r4, [sp, #20]
    buffer[5] = ( address >> 8 ) & 0xFF;
 800be7e:	0a23      	lsrs	r3, r4, #8
 800be80:	f88d 3015 	strb.w	r3, [sp, #21]
    buffer[6] = ( address >> 16 ) & 0xFF;
 800be84:	0c23      	lsrs	r3, r4, #16
 800be86:	f88d 3016 	strb.w	r3, [sp, #22]
    buffer[7] = ( address >> 24 ) & 0xFF;
 800be8a:	0e24      	lsrs	r4, r4, #24
 800be8c:	f88d 4017 	strb.w	r4, [sp, #23]
    SecureElementAesEncrypt( buffer, 16, SLOT_RAND_ZERO_KEY, cipher );
 800be90:	466b      	mov	r3, sp
 800be92:	2283      	movs	r2, #131	; 0x83
 800be94:	2110      	movs	r1, #16
 800be96:	eb0d 0001 	add.w	r0, sp, r1
 800be9a:	f004 f87f 	bl	800ff9c <SecureElementAesEncrypt>
    result = ( ( ( uint32_t ) cipher[0] ) + ( ( ( uint32_t ) cipher[1] ) * 256 ) );
 800be9e:	f89d 2000 	ldrb.w	r2, [sp]
 800bea2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bea6:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    *pingOffset = ( uint16_t )( result % pingPeriod );
 800beaa:	fbb2 f3f6 	udiv	r3, r2, r6
 800beae:	fb06 2213 	mls	r2, r6, r3, r2
 800beb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800beb4:	801a      	strh	r2, [r3, #0]
}
 800beb6:	b008      	add	sp, #32
 800beb8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bebc <LoRaMacClassBProcessPingSlot>:
{
 800bebc:	b530      	push	{r4, r5, lr}
 800bebe:	b085      	sub	sp, #20
    TimerTime_t pingSlotTime = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	9303      	str	r3, [sp, #12]
    switch( Ctx.PingSlotState )
 800bec4:	4b6c      	ldr	r3, [pc, #432]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bec6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800beca:	2b01      	cmp	r3, #1
 800becc:	d017      	beq.n	800befe <LoRaMacClassBProcessPingSlot+0x42>
 800bece:	2b02      	cmp	r3, #2
 800bed0:	d050      	beq.n	800bf74 <LoRaMacClassBProcessPingSlot+0xb8>
 800bed2:	b123      	cbz	r3, 800bede <LoRaMacClassBProcessPingSlot+0x22>
            Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800bed4:	4b68      	ldr	r3, [pc, #416]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 800bedc:	e02a      	b.n	800bf34 <LoRaMacClassBProcessPingSlot+0x78>
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 800bede:	4c66      	ldr	r4, [pc, #408]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
                               *Ctx.LoRaMacClassBParams.LoRaMacDevAddr,
 800bee0:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
                               ClassBNvm->PingSlotCtx.PingPeriod,
 800bee4:	4b65      	ldr	r3, [pc, #404]	; (800c07c <LoRaMacClassBProcessPingSlot+0x1c0>)
 800bee6:	681b      	ldr	r3, [r3, #0]
            ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 800bee8:	885b      	ldrh	r3, [r3, #2]
 800beea:	6812      	ldr	r2, [r2, #0]
 800beec:	1d21      	adds	r1, r4, #4
 800beee:	9100      	str	r1, [sp, #0]
 800bef0:	6920      	ldr	r0, [r4, #16]
 800bef2:	2100      	movs	r1, #0
 800bef4:	f7ff ffa6 	bl	800be44 <ComputePingOffset>
            Ctx.PingSlotState = PINGSLOT_STATE_SET_TIMER;
 800bef8:	2301      	movs	r3, #1
 800befa:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
            if( CalcNextSlotTime( Ctx.PingSlotCtx.PingOffset, ClassBNvm->PingSlotCtx.PingPeriod, ClassBNvm->PingSlotCtx.PingNb, &pingSlotTime ) == true )
 800befe:	4b5f      	ldr	r3, [pc, #380]	; (800c07c <LoRaMacClassBProcessPingSlot+0x1c0>)
 800bf00:	6819      	ldr	r1, [r3, #0]
 800bf02:	ab03      	add	r3, sp, #12
 800bf04:	784a      	ldrb	r2, [r1, #1]
 800bf06:	8849      	ldrh	r1, [r1, #2]
 800bf08:	485b      	ldr	r0, [pc, #364]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bf0a:	8880      	ldrh	r0, [r0, #4]
 800bf0c:	f7ff fef4 	bl	800bcf8 <CalcNextSlotTime>
 800bf10:	b180      	cbz	r0, 800bf34 <LoRaMacClassBProcessPingSlot+0x78>
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 800bf12:	4b59      	ldr	r3, [pc, #356]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bf14:	7b1b      	ldrb	r3, [r3, #12]
 800bf16:	f013 0f02 	tst.w	r3, #2
 800bf1a:	d10d      	bne.n	800bf38 <LoRaMacClassBProcessPingSlot+0x7c>
                Ctx.PingSlotState = PINGSLOT_STATE_IDLE;
 800bf1c:	4c56      	ldr	r4, [pc, #344]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bf1e:	2302      	movs	r3, #2
 800bf20:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
                TimerSetValue( &Ctx.PingSlotTimer, pingSlotTime );
 800bf24:	3464      	adds	r4, #100	; 0x64
 800bf26:	9903      	ldr	r1, [sp, #12]
 800bf28:	4620      	mov	r0, r4
 800bf2a:	f006 fc07 	bl	801273c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f006 fbbe 	bl	80126b0 <UTIL_TIMER_Start>
}
 800bf34:	b005      	add	sp, #20
 800bf36:	bd30      	pop	{r4, r5, pc}
                    maxRxError = MAX( Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError ,
 800bf38:	4c4f      	ldr	r4, [pc, #316]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bf3a:	f9b4 c044 	ldrsh.w	ip, [r4, #68]	; 0x44
 800bf3e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800bf42:	6813      	ldr	r3, [r2, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800bf44:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
                                                     ClassBNvm->PingSlotCtx.Datarate,
 800bf48:	494c      	ldr	r1, [pc, #304]	; (800c07c <LoRaMacClassBProcessPingSlot+0x1c0>)
 800bf4a:	6809      	ldr	r1, [r1, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800bf4c:	7912      	ldrb	r2, [r2, #4]
 800bf4e:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800bf52:	7800      	ldrb	r0, [r0, #0]
 800bf54:	4d4a      	ldr	r5, [pc, #296]	; (800c080 <LoRaMacClassBProcessPingSlot+0x1c4>)
 800bf56:	9500      	str	r5, [sp, #0]
 800bf58:	4563      	cmp	r3, ip
 800bf5a:	bf38      	it	cc
 800bf5c:	4663      	movcc	r3, ip
 800bf5e:	f001 ff7e 	bl	800de5e <RegionComputeRxWindowParameters>
                    Ctx.PingSlotCtx.SymbolTimeout = pingSlotRxConfig.WindowTimeout;
 800bf62:	68ab      	ldr	r3, [r5, #8]
 800bf64:	80e3      	strh	r3, [r4, #6]
                    if( ( int32_t )pingSlotTime > pingSlotRxConfig.WindowOffset )
 800bf66:	68ea      	ldr	r2, [r5, #12]
 800bf68:	9b03      	ldr	r3, [sp, #12]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	dad6      	bge.n	800bf1c <LoRaMacClassBProcessPingSlot+0x60>
                        pingSlotTime += pingSlotRxConfig.WindowOffset;
 800bf6e:	4413      	add	r3, r2
 800bf70:	9303      	str	r3, [sp, #12]
 800bf72:	e7d3      	b.n	800bf1c <LoRaMacClassBProcessPingSlot+0x60>
            uint32_t frequency = ClassBNvm->PingSlotCtx.Frequency;
 800bf74:	4b41      	ldr	r3, [pc, #260]	; (800c07c <LoRaMacClassBProcessPingSlot+0x1c0>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	685d      	ldr	r5, [r3, #4]
            if( ClassBNvm->PingSlotCtx.Ctrl.CustomFreq == 0 )
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	f013 0f02 	tst.w	r3, #2
 800bf80:	d048      	beq.n	800c014 <LoRaMacClassBProcessPingSlot+0x158>
            if( Ctx.PingSlotCtx.NextMulticastChannel != NULL )
 800bf82:	4b3d      	ldr	r3, [pc, #244]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bf84:	689a      	ldr	r2, [r3, #8]
 800bf86:	2a00      	cmp	r2, #0
 800bf88:	d050      	beq.n	800c02c <LoRaMacClassBProcessPingSlot+0x170>
                slotHasPriority = CheckSlotPriority( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, ClassBNvm->PingSlotCtx.FPendingSet, 0,
 800bf8a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 800bf8e:	4b3b      	ldr	r3, [pc, #236]	; (800c07c <LoRaMacClassBProcessPingSlot+0x1c0>)
 800bf90:	6819      	ldr	r1, [r3, #0]
 800bf92:	6853      	ldr	r3, [r2, #4]
 800bf94:	7a49      	ldrb	r1, [r1, #9]
 800bf96:	6800      	ldr	r0, [r0, #0]
 800bf98:	2401      	movs	r4, #1
 800bf9a:	9401      	str	r4, [sp, #4]
 800bf9c:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800bfa0:	9200      	str	r2, [sp, #0]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f7ff fd35 	bl	800ba12 <CheckSlotPriority>
            if( ( Ctx.MulticastSlotState != PINGSLOT_STATE_RX ) || ( slotHasPriority == true ) )
 800bfa8:	4b33      	ldr	r3, [pc, #204]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bfaa:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800bfae:	2b03      	cmp	r3, #3
 800bfb0:	d03e      	beq.n	800c030 <LoRaMacClassBProcessPingSlot+0x174>
                if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 800bfb2:	2b03      	cmp	r3, #3
 800bfb4:	d04b      	beq.n	800c04e <LoRaMacClassBProcessPingSlot+0x192>
                Ctx.PingSlotState = PINGSLOT_STATE_RX;
 800bfb6:	4b30      	ldr	r3, [pc, #192]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800bfb8:	2203      	movs	r2, #3
 800bfba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                pingSlotRxConfig.Datarate = ClassBNvm->PingSlotCtx.Datarate;
 800bfbe:	4a2f      	ldr	r2, [pc, #188]	; (800c07c <LoRaMacClassBProcessPingSlot+0x1c0>)
 800bfc0:	6812      	ldr	r2, [r2, #0]
 800bfc2:	f992 2008 	ldrsb.w	r2, [r2, #8]
 800bfc6:	4c2e      	ldr	r4, [pc, #184]	; (800c080 <LoRaMacClassBProcessPingSlot+0x1c4>)
 800bfc8:	7062      	strb	r2, [r4, #1]
                pingSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800bfca:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800bfce:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800bfd2:	7421      	strb	r1, [r4, #16]
                pingSlotRxConfig.RepeaterSupport = Ctx.LoRaMacClassBParams.LoRaMacParams->RepeaterSupport; /* ST_WORKAROUND: keep repeater feature */
 800bfd4:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 800bfd8:	7462      	strb	r2, [r4, #17]
                pingSlotRxConfig.Frequency = frequency;
 800bfda:	6065      	str	r5, [r4, #4]
                pingSlotRxConfig.RxContinuous = false;
 800bfdc:	2200      	movs	r2, #0
 800bfde:	74a2      	strb	r2, [r4, #18]
                pingSlotRxConfig.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800bfe0:	2204      	movs	r2, #4
 800bfe2:	74e2      	strb	r2, [r4, #19]
                pingSlotRxConfig.NetworkActivation = *Ctx.LoRaMacClassBParams.NetworkActivation;
 800bfe4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800bfe8:	7812      	ldrb	r2, [r2, #0]
 800bfea:	7522      	strb	r2, [r4, #20]
                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &pingSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800bfec:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 800bff0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800bff4:	3204      	adds	r2, #4
 800bff6:	4621      	mov	r1, r4
 800bff8:	7800      	ldrb	r0, [r0, #0]
 800bffa:	f001 ff3c 	bl	800de76 <RegionRxConfig>
                if( pingSlotRxConfig.RxContinuous == false )
 800bffe:	7ca3      	ldrb	r3, [r4, #18]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d134      	bne.n	800c06e <LoRaMacClassBProcessPingSlot+0x1b2>
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 800c004:	4b1f      	ldr	r3, [pc, #124]	; (800c084 <LoRaMacClassBProcessPingSlot+0x1c8>)
 800c006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c008:	4a1b      	ldr	r2, [pc, #108]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800c00a:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 800c00e:	6890      	ldr	r0, [r2, #8]
 800c010:	4798      	blx	r3
 800c012:	e78f      	b.n	800bf34 <LoRaMacClassBProcessPingSlot+0x78>
                frequency = CalcDownlinkChannelAndFrequency( *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, Ctx.BeaconCtx.BeaconTime.Seconds,
 800c014:	4918      	ldr	r1, [pc, #96]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800c016:	f8d1 00ac 	ldr.w	r0, [r1, #172]	; 0xac
 800c01a:	2300      	movs	r3, #0
 800c01c:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 800c020:	6909      	ldr	r1, [r1, #16]
 800c022:	6800      	ldr	r0, [r0, #0]
 800c024:	f7ff fdb0 	bl	800bb88 <CalcDownlinkChannelAndFrequency>
 800c028:	4605      	mov	r5, r0
 800c02a:	e7aa      	b.n	800bf82 <LoRaMacClassBProcessPingSlot+0xc6>
    bool slotHasPriority = false;
 800c02c:	2000      	movs	r0, #0
 800c02e:	e7bb      	b.n	800bfa8 <LoRaMacClassBProcessPingSlot+0xec>
            if( ( Ctx.MulticastSlotState != PINGSLOT_STATE_RX ) || ( slotHasPriority == true ) )
 800c030:	2800      	cmp	r0, #0
 800c032:	d1be      	bne.n	800bfb2 <LoRaMacClassBProcessPingSlot+0xf6>
                Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800c034:	4c10      	ldr	r4, [pc, #64]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800c036:	2300      	movs	r3, #0
 800c038:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
                TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800c03c:	3464      	adds	r4, #100	; 0x64
 800c03e:	211e      	movs	r1, #30
 800c040:	4620      	mov	r0, r4
 800c042:	f006 fb7b 	bl	801273c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.PingSlotTimer );
 800c046:	4620      	mov	r0, r4
 800c048:	f006 fb32 	bl	80126b0 <UTIL_TIMER_Start>
 800c04c:	e772      	b.n	800bf34 <LoRaMacClassBProcessPingSlot+0x78>
                    Radio.Standby( );
 800c04e:	4b0d      	ldr	r3, [pc, #52]	; (800c084 <LoRaMacClassBProcessPingSlot+0x1c8>)
 800c050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c052:	4798      	blx	r3
                    Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800c054:	4c08      	ldr	r4, [pc, #32]	; (800c078 <LoRaMacClassBProcessPingSlot+0x1bc>)
 800c056:	2300      	movs	r3, #0
 800c058:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
                    TimerSetValue( &Ctx.MulticastSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800c05c:	347c      	adds	r4, #124	; 0x7c
 800c05e:	211e      	movs	r1, #30
 800c060:	4620      	mov	r0, r4
 800c062:	f006 fb6b 	bl	801273c <UTIL_TIMER_SetPeriod>
                    TimerStart( &Ctx.MulticastSlotTimer );
 800c066:	4620      	mov	r0, r4
 800c068:	f006 fb22 	bl	80126b0 <UTIL_TIMER_Start>
 800c06c:	e7a3      	b.n	800bfb6 <LoRaMacClassBProcessPingSlot+0xfa>
                    Radio.Rx( 0 ); // Continuous mode
 800c06e:	4b05      	ldr	r3, [pc, #20]	; (800c084 <LoRaMacClassBProcessPingSlot+0x1c8>)
 800c070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c072:	2000      	movs	r0, #0
 800c074:	4798      	blx	r3
 800c076:	e75d      	b.n	800bf34 <LoRaMacClassBProcessPingSlot+0x78>
 800c078:	20000c1c 	.word	0x20000c1c
 800c07c:	20000c18 	.word	0x20000c18
 800c080:	20000cf8 	.word	0x20000cf8
 800c084:	080139bc 	.word	0x080139bc

0800c088 <LoRaMacClassBProcessMulticastSlot>:

#if ( LORAMAC_CLASSB_ENABLED == 1 )
static void LoRaMacClassBProcessMulticastSlot( void )
{
 800c088:	b570      	push	{r4, r5, r6, lr}
 800c08a:	b084      	sub	sp, #16
    static RxConfigParams_t multicastSlotRxConfig;
    TimerTime_t multicastSlotTime = 0;
    TimerTime_t slotTime = 0;
 800c08c:	2300      	movs	r3, #0
 800c08e:	9303      	str	r3, [sp, #12]
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 800c090:	4b7b      	ldr	r3, [pc, #492]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c092:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint32_t maxRxError = 0;
    bool slotHasPriority = false;
#endif /* LORAMAC_VERSION */

    if( cur == NULL )
 800c096:	2d00      	cmp	r5, #0
 800c098:	d054      	beq.n	800c144 <LoRaMacClassBProcessMulticastSlot+0xbc>
    {
        return;
    }

    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 800c09a:	f893 404a 	ldrb.w	r4, [r3, #74]	; 0x4a
 800c09e:	2c03      	cmp	r4, #3
 800c0a0:	d050      	beq.n	800c144 <LoRaMacClassBProcessMulticastSlot+0xbc>
    {
        // A multicast slot is already open
        return;
    }

    switch( Ctx.MulticastSlotState )
 800c0a2:	2c01      	cmp	r4, #1
 800c0a4:	d01a      	beq.n	800c0dc <LoRaMacClassBProcessMulticastSlot+0x54>
 800c0a6:	2c02      	cmp	r4, #2
 800c0a8:	d066      	beq.n	800c178 <LoRaMacClassBProcessMulticastSlot+0xf0>
 800c0aa:	b18c      	cbz	r4, 800c0d0 <LoRaMacClassBProcessMulticastSlot+0x48>
#endif /* LORAMAC_VERSION */
            break;
        }
        default:
        {
            Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800c0ac:	4b74      	ldr	r3, [pc, #464]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            break;
 800c0b4:	e046      	b.n	800c144 <LoRaMacClassBProcessMulticastSlot+0xbc>
                ComputePingOffset( Ctx.BeaconCtx.BeaconTime.Seconds,
 800c0b6:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800c0b8:	686a      	ldr	r2, [r5, #4]
 800c0ba:	f105 0128 	add.w	r1, r5, #40	; 0x28
 800c0be:	9100      	str	r1, [sp, #0]
 800c0c0:	496f      	ldr	r1, [pc, #444]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c0c2:	6908      	ldr	r0, [r1, #16]
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	f7ff febd 	bl	800be44 <ComputePingOffset>
                cur++;
 800c0ca:	352c      	adds	r5, #44	; 0x2c
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
 800c0cc:	3401      	adds	r4, #1
 800c0ce:	b2e4      	uxtb	r4, r4
 800c0d0:	2c00      	cmp	r4, #0
 800c0d2:	d0f0      	beq.n	800c0b6 <LoRaMacClassBProcessMulticastSlot+0x2e>
            Ctx.MulticastSlotState = PINGSLOT_STATE_SET_TIMER;
 800c0d4:	4b6a      	ldr	r3, [pc, #424]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
            cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 800c0dc:	4b68      	ldr	r3, [pc, #416]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c0de:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
            Ctx.PingSlotCtx.NextMulticastChannel = NULL;
 800c0e2:	2400      	movs	r4, #0
 800c0e4:	609c      	str	r4, [r3, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c0e6:	4625      	mov	r5, r4
 800c0e8:	e011      	b.n	800c10e <LoRaMacClassBProcessMulticastSlot+0x86>
                if( CalcNextSlotTime( cur->PingOffset, cur->PingPeriod, cur->PingNb, &slotTime ) == true )
 800c0ea:	ab03      	add	r3, sp, #12
 800c0ec:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 800c0f0:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 800c0f2:	8d30      	ldrh	r0, [r6, #40]	; 0x28
 800c0f4:	f7ff fe00 	bl	800bcf8 <CalcNextSlotTime>
 800c0f8:	b130      	cbz	r0, 800c108 <LoRaMacClassBProcessMulticastSlot+0x80>
                    if( ( multicastSlotTime == 0 ) || ( multicastSlotTime > slotTime ) )
 800c0fa:	b114      	cbz	r4, 800c102 <LoRaMacClassBProcessMulticastSlot+0x7a>
 800c0fc:	9b03      	ldr	r3, [sp, #12]
 800c0fe:	42a3      	cmp	r3, r4
 800c100:	d202      	bcs.n	800c108 <LoRaMacClassBProcessMulticastSlot+0x80>
                        multicastSlotTime = slotTime;
 800c102:	9c03      	ldr	r4, [sp, #12]
                        Ctx.PingSlotCtx.NextMulticastChannel = cur;
 800c104:	4b5e      	ldr	r3, [pc, #376]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c106:	609e      	str	r6, [r3, #8]
                cur++;
 800c108:	362c      	adds	r6, #44	; 0x2c
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c10a:	3501      	adds	r5, #1
 800c10c:	b2ed      	uxtb	r5, r5
 800c10e:	2d00      	cmp	r5, #0
 800c110:	d0eb      	beq.n	800c0ea <LoRaMacClassBProcessMulticastSlot+0x62>
            if( Ctx.PingSlotCtx.NextMulticastChannel != NULL )
 800c112:	4b5b      	ldr	r3, [pc, #364]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	b1ab      	cbz	r3, 800c144 <LoRaMacClassBProcessMulticastSlot+0xbc>
                if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 1 )
 800c118:	4b59      	ldr	r3, [pc, #356]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c11a:	7b1b      	ldrb	r3, [r3, #12]
 800c11c:	f013 0f02 	tst.w	r3, #2
 800c120:	d112      	bne.n	800c148 <LoRaMacClassBProcessMulticastSlot+0xc0>
                if( ( int32_t )multicastSlotTime > multicastSlotRxConfig.WindowOffset )
 800c122:	4b58      	ldr	r3, [pc, #352]	; (800c284 <LoRaMacClassBProcessMulticastSlot+0x1fc>)
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	42a3      	cmp	r3, r4
 800c128:	da00      	bge.n	800c12c <LoRaMacClassBProcessMulticastSlot+0xa4>
                    multicastSlotTime += multicastSlotRxConfig.WindowOffset;
 800c12a:	441c      	add	r4, r3
                Ctx.MulticastSlotState = PINGSLOT_STATE_IDLE;
 800c12c:	4d54      	ldr	r5, [pc, #336]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c12e:	2302      	movs	r3, #2
 800c130:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
                TimerSetValue( &Ctx.MulticastSlotTimer, multicastSlotTime );
 800c134:	357c      	adds	r5, #124	; 0x7c
 800c136:	4621      	mov	r1, r4
 800c138:	4628      	mov	r0, r5
 800c13a:	f006 faff 	bl	801273c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 800c13e:	4628      	mov	r0, r5
 800c140:	f006 fab6 	bl	80126b0 <UTIL_TIMER_Start>
        }
    }
}
 800c144:	b004      	add	sp, #16
 800c146:	bd70      	pop	{r4, r5, r6, pc}
                    maxRxError = MAX( Ctx.LoRaMacClassBParams.LoRaMacParams->SystemMaxRxError ,
 800c148:	4d4d      	ldr	r5, [pc, #308]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c14a:	f9b5 c044 	ldrsh.w	ip, [r5, #68]	; 0x44
 800c14e:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
 800c152:	6813      	ldr	r3, [r2, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800c154:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
                                                    ClassBNvm->PingSlotCtx.Datarate,
 800c158:	494b      	ldr	r1, [pc, #300]	; (800c288 <LoRaMacClassBProcessMulticastSlot+0x200>)
 800c15a:	6809      	ldr	r1, [r1, #0]
                    RegionComputeRxWindowParameters( *Ctx.LoRaMacClassBParams.LoRaMacRegion,
 800c15c:	7912      	ldrb	r2, [r2, #4]
 800c15e:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800c162:	7800      	ldrb	r0, [r0, #0]
 800c164:	4e47      	ldr	r6, [pc, #284]	; (800c284 <LoRaMacClassBProcessMulticastSlot+0x1fc>)
 800c166:	9600      	str	r6, [sp, #0]
 800c168:	4563      	cmp	r3, ip
 800c16a:	bf38      	it	cc
 800c16c:	4663      	movcc	r3, ip
 800c16e:	f001 fe76 	bl	800de5e <RegionComputeRxWindowParameters>
                    Ctx.PingSlotCtx.SymbolTimeout = multicastSlotRxConfig.WindowTimeout;
 800c172:	68b3      	ldr	r3, [r6, #8]
 800c174:	80eb      	strh	r3, [r5, #6]
 800c176:	e7d4      	b.n	800c122 <LoRaMacClassBProcessMulticastSlot+0x9a>
            if( Ctx.PingSlotCtx.NextMulticastChannel == NULL )
 800c178:	4b41      	ldr	r3, [pc, #260]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c17a:	6898      	ldr	r0, [r3, #8]
 800c17c:	2800      	cmp	r0, #0
 800c17e:	d044      	beq.n	800c20a <LoRaMacClassBProcessMulticastSlot+0x182>
            frequency = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Frequency;
 800c180:	6985      	ldr	r5, [r0, #24]
            if( frequency == 0 )
 800c182:	2d00      	cmp	r5, #0
 800c184:	d04e      	beq.n	800c224 <LoRaMacClassBProcessMulticastSlot+0x19c>
            slotHasPriority = CheckSlotPriority( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address, Ctx.PingSlotCtx.NextMulticastChannel->FPendingSet, 1,
 800c186:	4c3e      	ldr	r4, [pc, #248]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c188:	68a2      	ldr	r2, [r4, #8]
                                                 *Ctx.LoRaMacClassBParams.LoRaMacDevAddr, ClassBNvm->PingSlotCtx.FPendingSet, 0 );
 800c18a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800c18e:	493e      	ldr	r1, [pc, #248]	; (800c288 <LoRaMacClassBProcessMulticastSlot+0x200>)
 800c190:	680e      	ldr	r6, [r1, #0]
            slotHasPriority = CheckSlotPriority( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address, Ctx.PingSlotCtx.NextMulticastChannel->FPendingSet, 1,
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800c198:	6850      	ldr	r0, [r2, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	9201      	str	r2, [sp, #4]
 800c19e:	7a72      	ldrb	r2, [r6, #9]
 800c1a0:	9200      	str	r2, [sp, #0]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f7ff fc35 	bl	800ba12 <CheckSlotPriority>
            if( ( Ctx.PingSlotState != PINGSLOT_STATE_RX ) || ( slotHasPriority == true ) )
 800c1a8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800c1ac:	2b03      	cmp	r3, #3
 800c1ae:	d043      	beq.n	800c238 <LoRaMacClassBProcessMulticastSlot+0x1b0>
                if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 800c1b0:	2b03      	cmp	r3, #3
 800c1b2:	d050      	beq.n	800c256 <LoRaMacClassBProcessMulticastSlot+0x1ce>
                Ctx.MulticastSlotState = PINGSLOT_STATE_RX;
 800c1b4:	4b32      	ldr	r3, [pc, #200]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c1b6:	2203      	movs	r2, #3
 800c1b8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                multicastSlotRxConfig.Datarate = Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.RxParams.ClassB.Datarate;
 800c1bc:	689a      	ldr	r2, [r3, #8]
 800c1be:	f992 201c 	ldrsb.w	r2, [r2, #28]
 800c1c2:	4c30      	ldr	r4, [pc, #192]	; (800c284 <LoRaMacClassBProcessMulticastSlot+0x1fc>)
 800c1c4:	7062      	strb	r2, [r4, #1]
                multicastSlotRxConfig.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800c1c6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c1ca:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 800c1ce:	7422      	strb	r2, [r4, #16]
                multicastSlotRxConfig.Frequency = frequency;
 800c1d0:	6065      	str	r5, [r4, #4]
                multicastSlotRxConfig.RxContinuous = false;
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	74a2      	strb	r2, [r4, #18]
                multicastSlotRxConfig.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800c1d6:	2205      	movs	r2, #5
 800c1d8:	74e2      	strb	r2, [r4, #19]
                multicastSlotRxConfig.NetworkActivation = *Ctx.LoRaMacClassBParams.NetworkActivation;
 800c1da:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800c1de:	7812      	ldrb	r2, [r2, #0]
 800c1e0:	7522      	strb	r2, [r4, #20]
                RegionRxConfig( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &multicastSlotRxConfig, ( int8_t* )&Ctx.LoRaMacClassBParams.McpsIndication->RxDatarate );
 800c1e2:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 800c1e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800c1ea:	3204      	adds	r2, #4
 800c1ec:	4621      	mov	r1, r4
 800c1ee:	7800      	ldrb	r0, [r0, #0]
 800c1f0:	f001 fe41 	bl	800de76 <RegionRxConfig>
                if( multicastSlotRxConfig.RxContinuous == false )
 800c1f4:	7ca3      	ldrb	r3, [r4, #18]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d13d      	bne.n	800c276 <LoRaMacClassBProcessMulticastSlot+0x1ee>
                    Radio.Rx( Ctx.LoRaMacClassBParams.LoRaMacParams->MaxRxWindow );
 800c1fa:	4b24      	ldr	r3, [pc, #144]	; (800c28c <LoRaMacClassBProcessMulticastSlot+0x204>)
 800c1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1fe:	4a20      	ldr	r2, [pc, #128]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c200:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 800c204:	6890      	ldr	r0, [r2, #8]
 800c206:	4798      	blx	r3
 800c208:	e79c      	b.n	800c144 <LoRaMacClassBProcessMulticastSlot+0xbc>
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800c20a:	461c      	mov	r4, r3
 800c20c:	2300      	movs	r3, #0
 800c20e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
                TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 800c212:	347c      	adds	r4, #124	; 0x7c
 800c214:	2101      	movs	r1, #1
 800c216:	4620      	mov	r0, r4
 800c218:	f006 fa90 	bl	801273c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 800c21c:	4620      	mov	r0, r4
 800c21e:	f006 fa47 	bl	80126b0 <UTIL_TIMER_Start>
                break;
 800c222:	e78f      	b.n	800c144 <LoRaMacClassBProcessMulticastSlot+0xbc>
                frequency = CalcDownlinkChannelAndFrequency( Ctx.PingSlotCtx.NextMulticastChannel->ChannelParams.Address,
 800c224:	2300      	movs	r3, #0
 800c226:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 800c22a:	4915      	ldr	r1, [pc, #84]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c22c:	6909      	ldr	r1, [r1, #16]
 800c22e:	6840      	ldr	r0, [r0, #4]
 800c230:	f7ff fcaa 	bl	800bb88 <CalcDownlinkChannelAndFrequency>
 800c234:	4605      	mov	r5, r0
 800c236:	e7a6      	b.n	800c186 <LoRaMacClassBProcessMulticastSlot+0xfe>
            if( ( Ctx.PingSlotState != PINGSLOT_STATE_RX ) || ( slotHasPriority == true ) )
 800c238:	2800      	cmp	r0, #0
 800c23a:	d1b9      	bne.n	800c1b0 <LoRaMacClassBProcessMulticastSlot+0x128>
                Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800c23c:	4c10      	ldr	r4, [pc, #64]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c23e:	2300      	movs	r3, #0
 800c240:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
                TimerSetValue( &Ctx.MulticastSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800c244:	347c      	adds	r4, #124	; 0x7c
 800c246:	211e      	movs	r1, #30
 800c248:	4620      	mov	r0, r4
 800c24a:	f006 fa77 	bl	801273c <UTIL_TIMER_SetPeriod>
                TimerStart( &Ctx.MulticastSlotTimer );
 800c24e:	4620      	mov	r0, r4
 800c250:	f006 fa2e 	bl	80126b0 <UTIL_TIMER_Start>
 800c254:	e776      	b.n	800c144 <LoRaMacClassBProcessMulticastSlot+0xbc>
                    Radio.Standby( );
 800c256:	4b0d      	ldr	r3, [pc, #52]	; (800c28c <LoRaMacClassBProcessMulticastSlot+0x204>)
 800c258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c25a:	4798      	blx	r3
                    Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800c25c:	4c08      	ldr	r4, [pc, #32]	; (800c280 <LoRaMacClassBProcessMulticastSlot+0x1f8>)
 800c25e:	2300      	movs	r3, #0
 800c260:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
                    TimerSetValue( &Ctx.PingSlotTimer, CLASSB_PING_SLOT_WINDOW );
 800c264:	3464      	adds	r4, #100	; 0x64
 800c266:	211e      	movs	r1, #30
 800c268:	4620      	mov	r0, r4
 800c26a:	f006 fa67 	bl	801273c <UTIL_TIMER_SetPeriod>
                    TimerStart( &Ctx.PingSlotTimer );
 800c26e:	4620      	mov	r0, r4
 800c270:	f006 fa1e 	bl	80126b0 <UTIL_TIMER_Start>
 800c274:	e79e      	b.n	800c1b4 <LoRaMacClassBProcessMulticastSlot+0x12c>
                    Radio.Rx( 0 ); // Continuous mode
 800c276:	4b05      	ldr	r3, [pc, #20]	; (800c28c <LoRaMacClassBProcessMulticastSlot+0x204>)
 800c278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c27a:	2000      	movs	r0, #0
 800c27c:	4798      	blx	r3
 800c27e:	e761      	b.n	800c144 <LoRaMacClassBProcessMulticastSlot+0xbc>
 800c280:	20000c1c 	.word	0x20000c1c
 800c284:	20000ce0 	.word	0x20000ce0
 800c288:	20000c18 	.word	0x20000c18
 800c28c:	080139bc 	.word	0x080139bc

0800c290 <LoRaMacClassBInit>:
    if( nvm == NULL )
 800c290:	2a00      	cmp	r2, #0
 800c292:	d039      	beq.n	800c308 <LoRaMacClassBInit+0x78>
{
 800c294:	b530      	push	{r4, r5, lr}
 800c296:	b083      	sub	sp, #12
 800c298:	4684      	mov	ip, r0
 800c29a:	4613      	mov	r3, r2
    ClassBNvm = nvm;
 800c29c:	4a1b      	ldr	r2, [pc, #108]	; (800c30c <LoRaMacClassBInit+0x7c>)
 800c29e:	6013      	str	r3, [r2, #0]
    Ctx.LoRaMacClassBCallbacks = *callbacks;
 800c2a0:	4d1b      	ldr	r5, [pc, #108]	; (800c310 <LoRaMacClassBInit+0x80>)
 800c2a2:	f105 0394 	add.w	r3, r5, #148	; 0x94
 800c2a6:	c903      	ldmia	r1, {r0, r1}
 800c2a8:	e883 0003 	stmia.w	r3, {r0, r1}
    Ctx.LoRaMacClassBParams = *classBParams;
 800c2ac:	f105 0e9c 	add.w	lr, r5, #156	; 0x9c
 800c2b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c2b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c2b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c2bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c2c0:	f8dc 3000 	ldr.w	r3, [ip]
 800c2c4:	f8ce 3000 	str.w	r3, [lr]
    TimerInit( &Ctx.BeaconTimer, LoRaMacClassBBeaconTimerEvent );
 800c2c8:	2400      	movs	r4, #0
 800c2ca:	9400      	str	r4, [sp, #0]
 800c2cc:	4b11      	ldr	r3, [pc, #68]	; (800c314 <LoRaMacClassBInit+0x84>)
 800c2ce:	4622      	mov	r2, r4
 800c2d0:	f04f 31ff 	mov.w	r1, #4294967295
 800c2d4:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800c2d8:	f006 f932 	bl	8012540 <UTIL_TIMER_Create>
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
 800c2dc:	9400      	str	r4, [sp, #0]
 800c2de:	4b0e      	ldr	r3, [pc, #56]	; (800c318 <LoRaMacClassBInit+0x88>)
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	f04f 31ff 	mov.w	r1, #4294967295
 800c2e6:	f105 0064 	add.w	r0, r5, #100	; 0x64
 800c2ea:	f006 f929 	bl	8012540 <UTIL_TIMER_Create>
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );
 800c2ee:	9400      	str	r4, [sp, #0]
 800c2f0:	4b0a      	ldr	r3, [pc, #40]	; (800c31c <LoRaMacClassBInit+0x8c>)
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	f04f 31ff 	mov.w	r1, #4294967295
 800c2f8:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 800c2fc:	f006 f920 	bl	8012540 <UTIL_TIMER_Create>
    InitClassB( );
 800c300:	f7ff fbc2 	bl	800ba88 <InitClassB>
}
 800c304:	b003      	add	sp, #12
 800c306:	bd30      	pop	{r4, r5, pc}
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	20000c18 	.word	0x20000c18
 800c310:	20000c1c 	.word	0x20000c1c
 800c314:	0800bc09 	.word	0x0800bc09
 800c318:	0800ba49 	.word	0x0800ba49
 800c31c:	0800ba69 	.word	0x0800ba69

0800c320 <LoRaMacClassBSetPingSlotState>:
    Ctx.PingSlotState = pingSlotState;
 800c320:	4b01      	ldr	r3, [pc, #4]	; (800c328 <LoRaMacClassBSetPingSlotState+0x8>)
 800c322:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
}
 800c326:	4770      	bx	lr
 800c328:	20000c1c 	.word	0x20000c1c

0800c32c <LoRaMacClassBSetMulticastSlotState>:
    Ctx.MulticastSlotState = multicastSlotState;
 800c32c:	4b01      	ldr	r3, [pc, #4]	; (800c334 <LoRaMacClassBSetMulticastSlotState+0x8>)
 800c32e:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
}
 800c332:	4770      	bx	lr
 800c334:	20000c1c 	.word	0x20000c1c

0800c338 <LoRaMacClassBRxBeacon>:
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800c338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c33c:	b08d      	sub	sp, #52	; 0x34
 800c33e:	4604      	mov	r4, r0
 800c340:	460d      	mov	r5, r1
    uint16_t crc0 = 0;
    uint16_t crc1 = 0;
    uint16_t beaconCrc0 = 0;
    uint16_t beaconCrc1 = 0;

    getPhy.Attribute = PHY_BEACON_FORMAT;
 800c342:	2330      	movs	r3, #48	; 0x30
 800c344:	f88d 3020 	strb.w	r3, [sp, #32]
    phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c348:	4e74      	ldr	r6, [pc, #464]	; (800c51c <LoRaMacClassBRxBeacon+0x1e4>)
 800c34a:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
 800c34e:	a908      	add	r1, sp, #32
 800c350:	7818      	ldrb	r0, [r3, #0]
 800c352:	f001 fd47 	bl	800dde4 <RegionGetPhyParam>
 800c356:	9007      	str	r0, [sp, #28]

    // Verify if we are in the state where we expect a beacon
    if( ( Ctx.BeaconState == BEACON_STATE_RX ) || ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) )
 800c358:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 800c35c:	2b09      	cmp	r3, #9
 800c35e:	d004      	beq.n	800c36a <LoRaMacClassBRxBeacon+0x32>
 800c360:	7b33      	ldrb	r3, [r6, #12]
 800c362:	f013 0f10 	tst.w	r3, #16
 800c366:	f000 80d6 	beq.w	800c516 <LoRaMacClassBRxBeacon+0x1de>
    {
        if( size == phyParam.BeaconFormat.BeaconSize )
 800c36a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c36e:	42ab      	cmp	r3, r5
 800c370:	d009      	beq.n	800c386 <LoRaMacClassBRxBeacon+0x4e>

                LoRaMacClassBBeaconTimerEvent( NULL );
            }
        }

        if( Ctx.BeaconState == BEACON_STATE_RX )
 800c372:	4b6a      	ldr	r3, [pc, #424]	; (800c51c <LoRaMacClassBRxBeacon+0x1e4>)
 800c374:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c378:	2b09      	cmp	r3, #9
 800c37a:	f000 80c3 	beq.w	800c504 <LoRaMacClassBRxBeacon+0x1cc>
        // If it receives a frame which is
        // 1. not a beacon or
        // 2. a beacon with a crc fail
        // the MAC shall ignore the frame completely. Thus, the function must always return true, even if no
        // valid beacon has been received.
        beaconProcessed = true;
 800c37e:	2001      	movs	r0, #1
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c380:	b00d      	add	sp, #52	; 0x34
 800c382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            beaconCrc0 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4] ) & 0x00FF;
 800c386:	f89d 601d 	ldrb.w	r6, [sp, #29]
 800c38a:	19a3      	adds	r3, r4, r6
 800c38c:	795f      	ldrb	r7, [r3, #5]
            beaconCrc0 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 1] << 8 ) & 0xFF00;
 800c38e:	799b      	ldrb	r3, [r3, #6]
 800c390:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
            crc0 = BeaconCrc( payload, phyParam.BeaconFormat.Rfu1Size + 1 + 4 );
 800c394:	1d71      	adds	r1, r6, #5
 800c396:	4620      	mov	r0, r4
 800c398:	f7ff fa9e 	bl	800b8d8 <BeaconCrc>
            if( crc0 == beaconCrc0 )
 800c39c:	4287      	cmp	r7, r0
 800c39e:	d07b      	beq.n	800c498 <LoRaMacClassBRxBeacon+0x160>
    bool beaconProcessed = false;
 800c3a0:	2700      	movs	r7, #0
            beaconCrc1 = ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size] ) & 0x00FF;
 800c3a2:	f106 030e 	add.w	r3, r6, #14
 800c3a6:	f89d 101e 	ldrb.w	r1, [sp, #30]
 800c3aa:	440b      	add	r3, r1
 800c3ac:	f814 8003 	ldrb.w	r8, [r4, r3]
            beaconCrc1 |= ( ( uint16_t )payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2 + 7 + phyParam.BeaconFormat.Rfu2Size + 1] << 8 ) & 0xFF00;
 800c3b0:	4423      	add	r3, r4
 800c3b2:	785b      	ldrb	r3, [r3, #1]
 800c3b4:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
            crc1 = BeaconCrc( &payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2], 7 + phyParam.BeaconFormat.Rfu2Size );
 800c3b8:	f106 0907 	add.w	r9, r6, #7
 800c3bc:	3107      	adds	r1, #7
 800c3be:	eb04 0009 	add.w	r0, r4, r9
 800c3c2:	f7ff fa89 	bl	800b8d8 <BeaconCrc>
            if( crc1 == beaconCrc1 )
 800c3c6:	4580      	cmp	r8, r0
 800c3c8:	f000 808c 	beq.w	800c4e4 <LoRaMacClassBRxBeacon+0x1ac>
            if( beaconProcessed == true )
 800c3cc:	2f00      	cmp	r7, #0
 800c3ce:	d0d0      	beq.n	800c372 <LoRaMacClassBRxBeacon+0x3a>
                getPhy.Attribute = PHY_BEACON_CHANNEL_DR;
 800c3d0:	2331      	movs	r3, #49	; 0x31
 800c3d2:	f88d 3020 	strb.w	r3, [sp, #32]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c3d6:	4c51      	ldr	r4, [pc, #324]	; (800c51c <LoRaMacClassBRxBeacon+0x1e4>)
 800c3d8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c3dc:	a908      	add	r1, sp, #32
 800c3de:	7818      	ldrb	r0, [r3, #0]
 800c3e0:	f001 fd00 	bl	800dde4 <RegionGetPhyParam>
 800c3e4:	9007      	str	r0, [sp, #28]
                getPhy.Attribute = PHY_SF_FROM_DR;
 800c3e6:	2337      	movs	r3, #55	; 0x37
 800c3e8:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = phyParam.Value;
 800c3ec:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c3f0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c3f4:	a908      	add	r1, sp, #32
 800c3f6:	7818      	ldrb	r0, [r3, #0]
 800c3f8:	f001 fcf4 	bl	800dde4 <RegionGetPhyParam>
 800c3fc:	4607      	mov	r7, r0
 800c3fe:	9007      	str	r0, [sp, #28]
                getPhy.Attribute = PHY_BW_FROM_DR;
 800c400:	2338      	movs	r3, #56	; 0x38
 800c402:	f88d 3020 	strb.w	r3, [sp, #32]
                phyParam = RegionGetPhyParam( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &getPhy );
 800c406:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800c40a:	a908      	add	r1, sp, #32
 800c40c:	7818      	ldrb	r0, [r3, #0]
 800c40e:	f001 fce9 	bl	800dde4 <RegionGetPhyParam>
 800c412:	4601      	mov	r1, r0
 800c414:	9007      	str	r0, [sp, #28]
                TimerTime_t time = Radio.TimeOnAir( MODEM_LORA, bandwidth, spreadingFactor, 1, 10, true, size, false );
 800c416:	4b42      	ldr	r3, [pc, #264]	; (800c520 <LoRaMacClassBRxBeacon+0x1e8>)
 800c418:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800c41c:	2600      	movs	r6, #0
 800c41e:	9603      	str	r6, [sp, #12]
 800c420:	b2ed      	uxtb	r5, r5
 800c422:	9502      	str	r5, [sp, #8]
 800c424:	2001      	movs	r0, #1
 800c426:	9001      	str	r0, [sp, #4]
 800c428:	230a      	movs	r3, #10
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	4603      	mov	r3, r0
 800c42e:	463a      	mov	r2, r7
 800c430:	47c0      	blx	r8
                timeOnAir.Seconds = time / 1000;
 800c432:	4b3c      	ldr	r3, [pc, #240]	; (800c524 <LoRaMacClassBRxBeacon+0x1ec>)
 800c434:	fba3 2300 	umull	r2, r3, r3, r0
 800c438:	099b      	lsrs	r3, r3, #6
 800c43a:	9305      	str	r3, [sp, #20]
                timeOnAir.SubSeconds = time - timeOnAir.Seconds * 1000;
 800c43c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 800c440:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c444:	eba0 00c2 	sub.w	r0, r0, r2, lsl #3
 800c448:	f8ad 0018 	strh.w	r0, [sp, #24]
                Ctx.BeaconCtx.LastBeaconRx = Ctx.BeaconCtx.BeaconTime;
 800c44c:	f104 0218 	add.w	r2, r4, #24
 800c450:	f104 0110 	add.w	r1, r4, #16
 800c454:	c903      	ldmia	r1, {r0, r1}
 800c456:	e882 0003 	stmia.w	r2, {r0, r1}
                Ctx.BeaconCtx.LastBeaconRx.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c45a:	4933      	ldr	r1, [pc, #204]	; (800c528 <LoRaMacClassBRxBeacon+0x1f0>)
 800c45c:	4401      	add	r1, r0
 800c45e:	61a1      	str	r1, [r4, #24]
                SysTimeSet( SysTimeAdd( Ctx.BeaconCtx.LastBeaconRx, timeOnAir ) );
 800c460:	ad0a      	add	r5, sp, #40	; 0x28
 800c462:	9906      	ldr	r1, [sp, #24]
 800c464:	9100      	str	r1, [sp, #0]
 800c466:	ca06      	ldmia	r2, {r1, r2}
 800c468:	4628      	mov	r0, r5
 800c46a:	f005 ff79 	bl	8012360 <SysTimeAdd>
 800c46e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c472:	f005 ffb3 	bl	80123dc <SysTimeSet>
                Ctx.BeaconCtx.Ctrl.BeaconAcquired = 1;
 800c476:	7b23      	ldrb	r3, [r4, #12]
 800c478:	f043 0302 	orr.w	r3, r3, #2
 800c47c:	7323      	strb	r3, [r4, #12]
                Ctx.BeaconCtx.Ctrl.BeaconMode = 1;
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	f043 0301 	orr.w	r3, r3, #1
 800c484:	7323      	strb	r3, [r4, #12]
                ResetWindowTimeout( );
 800c486:	f7ff fa79 	bl	800b97c <ResetWindowTimeout>
                Ctx.BeaconState = BEACON_STATE_LOCKED;
 800c48a:	2305      	movs	r3, #5
 800c48c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
                LoRaMacClassBBeaconTimerEvent( NULL );
 800c490:	4630      	mov	r0, r6
 800c492:	f7ff fbb9 	bl	800bc08 <LoRaMacClassBBeaconTimerEvent>
 800c496:	e76c      	b.n	800c372 <LoRaMacClassBRxBeacon+0x3a>
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Param = ( payload[phyParam.BeaconFormat.Rfu1Size] );
 800c498:	4b20      	ldr	r3, [pc, #128]	; (800c51c <LoRaMacClassBRxBeacon+0x1e4>)
 800c49a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c49e:	5da1      	ldrb	r1, [r4, r6]
 800c4a0:	7651      	strb	r1, [r2, #25]
                Ctx.BeaconCtx.BeaconTimePrecision.SubSeconds = BeaconPrecTimeValue[Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Param];
 800c4a2:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 800c4a6:	7e42      	ldrb	r2, [r0, #25]
 800c4a8:	4920      	ldr	r1, [pc, #128]	; (800c52c <LoRaMacClassBRxBeacon+0x1f4>)
 800c4aa:	5c8a      	ldrb	r2, [r1, r2]
 800c4ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
                Ctx.BeaconCtx.BeaconTime.Seconds  = ( ( uint32_t )payload[phyParam.BeaconFormat.Rfu1Size + 1] ) & 0x000000FF;
 800c4b0:	19a1      	adds	r1, r4, r6
 800c4b2:	784a      	ldrb	r2, [r1, #1]
 800c4b4:	611a      	str	r2, [r3, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 2] << 8 ) ) & 0x0000FF00;
 800c4b6:	788f      	ldrb	r7, [r1, #2]
 800c4b8:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800c4bc:	611a      	str	r2, [r3, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 3] << 16 ) ) & 0x00FF0000;
 800c4be:	78cf      	ldrb	r7, [r1, #3]
 800c4c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800c4c4:	611a      	str	r2, [r3, #16]
                Ctx.BeaconCtx.BeaconTime.Seconds |= ( ( uint32_t )( payload[phyParam.BeaconFormat.Rfu1Size + 4] << 24 ) ) & 0xFF000000;
 800c4c6:	7909      	ldrb	r1, [r1, #4]
 800c4c8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c4cc:	611a      	str	r2, [r3, #16]
                Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	829a      	strh	r2, [r3, #20]
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.Time = Ctx.BeaconCtx.BeaconTime;
 800c4d2:	f100 0208 	add.w	r2, r0, #8
 800c4d6:	3310      	adds	r3, #16
 800c4d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c4dc:	e882 0003 	stmia.w	r2, {r0, r1}
                beaconProcessed = true;
 800c4e0:	2701      	movs	r7, #1
 800c4e2:	e75e      	b.n	800c3a2 <LoRaMacClassBRxBeacon+0x6a>
                Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.InfoDesc = payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2];
 800c4e4:	4b0d      	ldr	r3, [pc, #52]	; (800c51c <LoRaMacClassBRxBeacon+0x1e4>)
 800c4e6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800c4ea:	f814 1009 	ldrb.w	r1, [r4, r9]
 800c4ee:	7691      	strb	r1, [r2, #26]
                memcpy1( Ctx.LoRaMacClassBParams.MlmeIndication->BeaconInfo.GwSpecific.Info, &payload[phyParam.BeaconFormat.Rfu1Size + 1 + 4 + 2 + 1], 6 );
 800c4f0:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 800c4f4:	f106 0108 	add.w	r1, r6, #8
 800c4f8:	2206      	movs	r2, #6
 800c4fa:	4421      	add	r1, r4
 800c4fc:	301b      	adds	r0, #27
 800c4fe:	f003 fe80 	bl	8010202 <memcpy1>
 800c502:	e763      	b.n	800c3cc <LoRaMacClassBRxBeacon+0x94>
            Ctx.BeaconState = BEACON_STATE_TIMEOUT;
 800c504:	4b05      	ldr	r3, [pc, #20]	; (800c51c <LoRaMacClassBRxBeacon+0x1e4>)
 800c506:	2202      	movs	r2, #2
 800c508:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            LoRaMacClassBBeaconTimerEvent( NULL );
 800c50c:	2000      	movs	r0, #0
 800c50e:	f7ff fb7b 	bl	800bc08 <LoRaMacClassBBeaconTimerEvent>
        beaconProcessed = true;
 800c512:	2001      	movs	r0, #1
 800c514:	e734      	b.n	800c380 <LoRaMacClassBRxBeacon+0x48>
    bool beaconProcessed = false;
 800c516:	2000      	movs	r0, #0
 800c518:	e732      	b.n	800c380 <LoRaMacClassBRxBeacon+0x48>
 800c51a:	bf00      	nop
 800c51c:	20000c1c 	.word	0x20000c1c
 800c520:	080139bc 	.word	0x080139bc
 800c524:	10624dd3 	.word	0x10624dd3
 800c528:	12d53d80 	.word	0x12d53d80
 800c52c:	0801337c 	.word	0x0801337c

0800c530 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 800c530:	4b07      	ldr	r3, [pc, #28]	; (800c550 <LoRaMacClassBIsBeaconExpected+0x20>)
 800c532:	7b1b      	ldrb	r3, [r3, #12]
 800c534:	f013 0f10 	tst.w	r3, #16
 800c538:	d106      	bne.n	800c548 <LoRaMacClassBIsBeaconExpected+0x18>
        ( Ctx.BeaconState == BEACON_STATE_RX ) )
 800c53a:	4b05      	ldr	r3, [pc, #20]	; (800c550 <LoRaMacClassBIsBeaconExpected+0x20>)
 800c53c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    if( ( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 ) ||
 800c540:	2b09      	cmp	r3, #9
 800c542:	d003      	beq.n	800c54c <LoRaMacClassBIsBeaconExpected+0x1c>
    {
        return true;
    }
    return false;
 800c544:	2000      	movs	r0, #0
 800c546:	4770      	bx	lr
        return true;
 800c548:	2001      	movs	r0, #1
 800c54a:	4770      	bx	lr
 800c54c:	2001      	movs	r0, #1
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c54e:	4770      	bx	lr
 800c550:	20000c1c 	.word	0x20000c1c

0800c554 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.PingSlotState == PINGSLOT_STATE_RX )
 800c554:	4b04      	ldr	r3, [pc, #16]	; (800c568 <LoRaMacClassBIsPingExpected+0x14>)
 800c556:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c55a:	2b03      	cmp	r3, #3
 800c55c:	d001      	beq.n	800c562 <LoRaMacClassBIsPingExpected+0xe>
    {
        return true;
    }
    return false;
 800c55e:	2000      	movs	r0, #0
 800c560:	4770      	bx	lr
        return true;
 800c562:	2001      	movs	r0, #1
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop
 800c568:	20000c1c 	.word	0x20000c1c

0800c56c <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.MulticastSlotState == PINGSLOT_STATE_RX )
 800c56c:	4b04      	ldr	r3, [pc, #16]	; (800c580 <LoRaMacClassBIsMulticastExpected+0x14>)
 800c56e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800c572:	2b03      	cmp	r3, #3
 800c574:	d001      	beq.n	800c57a <LoRaMacClassBIsMulticastExpected+0xe>
    {
        return true;
    }
    return false;
 800c576:	2000      	movs	r0, #0
 800c578:	4770      	bx	lr
        return true;
 800c57a:	2001      	movs	r0, #1
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	20000c1c 	.word	0x20000c1c

0800c584 <LoRaMacClassBIsAcquisitionPending>:

bool LoRaMacClassBIsAcquisitionPending( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 800c584:	4b04      	ldr	r3, [pc, #16]	; (800c598 <LoRaMacClassBIsAcquisitionPending+0x14>)
 800c586:	7b1b      	ldrb	r3, [r3, #12]
 800c588:	f013 0f10 	tst.w	r3, #16
 800c58c:	d101      	bne.n	800c592 <LoRaMacClassBIsAcquisitionPending+0xe>
    {
        return true;
    }
    return false;
 800c58e:	2000      	movs	r0, #0
 800c590:	4770      	bx	lr
        return true;
 800c592:	2001      	movs	r0, #1
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop
 800c598:	20000c1c 	.word	0x20000c1c

0800c59c <LoRaMacClassBSetBeaconState>:
{
 800c59c:	b510      	push	{r4, lr}
    if( beaconState == BEACON_STATE_ACQUISITION )
 800c59e:	4604      	mov	r4, r0
 800c5a0:	b980      	cbnz	r0, 800c5c4 <LoRaMacClassBSetBeaconState+0x28>
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 800c5a2:	4b0d      	ldr	r3, [pc, #52]	; (800c5d8 <LoRaMacClassBSetBeaconState+0x3c>)
 800c5a4:	7b1b      	ldrb	r3, [r3, #12]
 800c5a6:	f013 0f04 	tst.w	r3, #4
 800c5aa:	d007      	beq.n	800c5bc <LoRaMacClassBSetBeaconState+0x20>
            ( LoRaMacClassBIsAcquisitionPending( ) == false ) )
 800c5ac:	f7ff ffea 	bl	800c584 <LoRaMacClassBIsAcquisitionPending>
        if( ( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 ) &&
 800c5b0:	b920      	cbnz	r0, 800c5bc <LoRaMacClassBSetBeaconState+0x20>
            Ctx.BeaconState = BEACON_STATE_ACQUISITION_BY_TIME;
 800c5b2:	4b09      	ldr	r3, [pc, #36]	; (800c5d8 <LoRaMacClassBSetBeaconState+0x3c>)
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800c5ba:	e002      	b.n	800c5c2 <LoRaMacClassBSetBeaconState+0x26>
           Ctx.BeaconState = beaconState;
 800c5bc:	4b06      	ldr	r3, [pc, #24]	; (800c5d8 <LoRaMacClassBSetBeaconState+0x3c>)
 800c5be:	f883 4048 	strb.w	r4, [r3, #72]	; 0x48
}
 800c5c2:	bd10      	pop	{r4, pc}
        if( ( Ctx.BeaconState != BEACON_STATE_ACQUISITION ) &&
 800c5c4:	4b04      	ldr	r3, [pc, #16]	; (800c5d8 <LoRaMacClassBSetBeaconState+0x3c>)
 800c5c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d9f9      	bls.n	800c5c2 <LoRaMacClassBSetBeaconState+0x26>
            Ctx.BeaconState = beaconState;
 800c5ce:	4b02      	ldr	r3, [pc, #8]	; (800c5d8 <LoRaMacClassBSetBeaconState+0x3c>)
 800c5d0:	f883 0048 	strb.w	r0, [r3, #72]	; 0x48
}
 800c5d4:	e7f5      	b.n	800c5c2 <LoRaMacClassBSetBeaconState+0x26>
 800c5d6:	bf00      	nop
 800c5d8:	20000c1c 	.word	0x20000c1c

0800c5dc <LoRaMacClassBIsAcquisitionInProgress>:
{
 800c5dc:	b508      	push	{r3, lr}
    if( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME )
 800c5de:	4b05      	ldr	r3, [pc, #20]	; (800c5f4 <LoRaMacClassBIsAcquisitionInProgress+0x18>)
 800c5e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d002      	beq.n	800c5ee <LoRaMacClassBIsAcquisitionInProgress+0x12>
    if( LoRaMacClassBIsAcquisitionPending( ) == true )
 800c5e8:	f7ff ffcc 	bl	800c584 <LoRaMacClassBIsAcquisitionPending>
}
 800c5ec:	bd08      	pop	{r3, pc}
        return true;
 800c5ee:	2001      	movs	r0, #1
 800c5f0:	e7fc      	b.n	800c5ec <LoRaMacClassBIsAcquisitionInProgress+0x10>
 800c5f2:	bf00      	nop
 800c5f4:	20000c1c 	.word	0x20000c1c

0800c5f8 <LoRaMacClassBIsBeaconModeActive>:

bool LoRaMacClassBIsBeaconModeActive( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 800c5f8:	4b07      	ldr	r3, [pc, #28]	; (800c618 <LoRaMacClassBIsBeaconModeActive+0x20>)
 800c5fa:	7b1b      	ldrb	r3, [r3, #12]
 800c5fc:	f013 0f01 	tst.w	r3, #1
 800c600:	d106      	bne.n	800c610 <LoRaMacClassBIsBeaconModeActive+0x18>
        ( Ctx.BeaconState == BEACON_STATE_ACQUISITION_BY_TIME ) )
 800c602:	4b05      	ldr	r3, [pc, #20]	; (800c618 <LoRaMacClassBIsBeaconModeActive+0x20>)
 800c604:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) ||
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d003      	beq.n	800c614 <LoRaMacClassBIsBeaconModeActive+0x1c>
    {
        return true;
    }
    return false;
 800c60c:	2000      	movs	r0, #0
 800c60e:	4770      	bx	lr
        return true;
 800c610:	2001      	movs	r0, #1
 800c612:	4770      	bx	lr
 800c614:	2001      	movs	r0, #1
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c616:	4770      	bx	lr
 800c618:	20000c1c 	.word	0x20000c1c

0800c61c <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800c61c:	b510      	push	{r4, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
 800c61e:	4b04      	ldr	r3, [pc, #16]	; (800c630 <LoRaMacClassBSetPingSlotInfo+0x14>)
 800c620:	681c      	ldr	r4, [r3, #0]
 800c622:	f7ff f9ec 	bl	800b9fe <CalcPingNb>
 800c626:	7060      	strb	r0, [r4, #1]
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
 800c628:	f7ff f9ee 	bl	800ba08 <CalcPingPeriod>
 800c62c:	8060      	strh	r0, [r4, #2]
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c62e:	bd10      	pop	{r4, pc}
 800c630:	20000c18 	.word	0x20000c18

0800c634 <LoRaMacClassBResumeBeaconing>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBResumeBeaconing( void )
{
 800c634:	b508      	push	{r3, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( Ctx.BeaconState == BEACON_STATE_HALT )
 800c636:	4b0d      	ldr	r3, [pc, #52]	; (800c66c <LoRaMacClassBResumeBeaconing+0x38>)
 800c638:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c63c:	2b06      	cmp	r3, #6
 800c63e:	d000      	beq.n	800c642 <LoRaMacClassBResumeBeaconing+0xe>
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c640:	bd08      	pop	{r3, pc}
        Ctx.BeaconCtx.Ctrl.ResumeBeaconing = 1;
 800c642:	4b0a      	ldr	r3, [pc, #40]	; (800c66c <LoRaMacClassBResumeBeaconing+0x38>)
 800c644:	7b1a      	ldrb	r2, [r3, #12]
 800c646:	f042 0220 	orr.w	r2, r2, #32
 800c64a:	731a      	strb	r2, [r3, #12]
        Ctx.BeaconState = BEACON_STATE_LOCKED;
 800c64c:	2205      	movs	r2, #5
 800c64e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        if( Ctx.BeaconCtx.Ctrl.BeaconAcquired == 0 )
 800c652:	7b1b      	ldrb	r3, [r3, #12]
 800c654:	f013 0f02 	tst.w	r3, #2
 800c658:	d103      	bne.n	800c662 <LoRaMacClassBResumeBeaconing+0x2e>
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 800c65a:	4b04      	ldr	r3, [pc, #16]	; (800c66c <LoRaMacClassBResumeBeaconing+0x38>)
 800c65c:	2204      	movs	r2, #4
 800c65e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
        LoRaMacClassBBeaconTimerEvent( NULL );
 800c662:	2000      	movs	r0, #0
 800c664:	f7ff fad0 	bl	800bc08 <LoRaMacClassBBeaconTimerEvent>
}
 800c668:	e7ea      	b.n	800c640 <LoRaMacClassBResumeBeaconing+0xc>
 800c66a:	bf00      	nop
 800c66c:	20000c1c 	.word	0x20000c1c

0800c670 <LoRaMacClassBMibGetRequestConfirm>:
LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;

    switch( mibGet->Type )
 800c670:	7803      	ldrb	r3, [r0, #0]
 800c672:	2b37      	cmp	r3, #55	; 0x37
 800c674:	d003      	beq.n	800c67e <LoRaMacClassBMibGetRequestConfirm+0xe>
 800c676:	2b3a      	cmp	r3, #58	; 0x3a
 800c678:	d008      	beq.n	800c68c <LoRaMacClassBMibGetRequestConfirm+0x1c>
 800c67a:	2002      	movs	r0, #2
 800c67c:	4770      	bx	lr
    {
        case MIB_PING_SLOT_DATARATE:
        {
            mibGet->Param.PingSlotDatarate = ClassBNvm->PingSlotCtx.Datarate;
 800c67e:	4b06      	ldr	r3, [pc, #24]	; (800c698 <LoRaMacClassBMibGetRequestConfirm+0x28>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c686:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c688:	2000      	movs	r0, #0
            break;
 800c68a:	4770      	bx	lr
        }
        case MIB_BEACON_STATE:
        {
            mibGet->Param.BeaconState = Ctx.BeaconState;
 800c68c:	4b03      	ldr	r3, [pc, #12]	; (800c69c <LoRaMacClassBMibGetRequestConfirm+0x2c>)
 800c68e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c692:	7103      	strb	r3, [r0, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c694:	2000      	movs	r0, #0
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c696:	4770      	bx	lr
 800c698:	20000c18 	.word	0x20000c18
 800c69c:	20000c1c 	.word	0x20000c1c

0800c6a0 <LoRaMacMibClassBSetRequestConfirm>:
LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;

    switch( mibSet->Type )
 800c6a0:	7803      	ldrb	r3, [r0, #0]
 800c6a2:	2b37      	cmp	r3, #55	; 0x37
 800c6a4:	d001      	beq.n	800c6aa <LoRaMacMibClassBSetRequestConfirm+0xa>
            ClassBNvm->PingSlotCtx.Datarate = mibSet->Param.PingSlotDatarate;
            break;
        }
        default:
        {
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c6a6:	2002      	movs	r0, #2
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c6a8:	4770      	bx	lr
            ClassBNvm->PingSlotCtx.Datarate = mibSet->Param.PingSlotDatarate;
 800c6aa:	4b03      	ldr	r3, [pc, #12]	; (800c6b8 <LoRaMacMibClassBSetRequestConfirm+0x18>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800c6b2:	721a      	strb	r2, [r3, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c6b4:	2000      	movs	r0, #0
            break;
 800c6b6:	4770      	bx	lr
 800c6b8:	20000c18 	.word	0x20000c18

0800c6bc <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800c6bc:	b508      	push	{r3, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800c6be:	200c      	movs	r0, #12
 800c6c0:	f000 fe28 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 800c6c4:	b900      	cbnz	r0, 800c6c8 <LoRaMacClassBPingSlotInfoAns+0xc>
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c6c6:	bd08      	pop	{r3, pc}
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800c6c8:	210c      	movs	r1, #12
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	f000 fdd6 	bl	800d27c <LoRaMacConfirmQueueSetStatus>
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
 800c6d0:	4b03      	ldr	r3, [pc, #12]	; (800c6e0 <LoRaMacClassBPingSlotInfoAns+0x24>)
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	7813      	ldrb	r3, [r2, #0]
 800c6d6:	f043 0301 	orr.w	r3, r3, #1
 800c6da:	7013      	strb	r3, [r2, #0]
}
 800c6dc:	e7f3      	b.n	800c6c6 <LoRaMacClassBPingSlotInfoAns+0xa>
 800c6de:	bf00      	nop
 800c6e0:	20000c18 	.word	0x20000c18

0800c6e4 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800c6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	4604      	mov	r4, r0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    uint8_t status = 0x03;
    VerifyParams_t verify;
    bool isCustomFreq = false;

    if( frequency != 0 )
 800c6ea:	460e      	mov	r6, r1
 800c6ec:	b9d1      	cbnz	r1, 800c724 <LoRaMacClassBPingSlotChannelReq+0x40>
    bool isCustomFreq = false;
 800c6ee:	2700      	movs	r7, #0
    uint8_t status = 0x03;
 800c6f0:	2503      	movs	r5, #3
        {
            status &= 0xFE; // Channel frequency KO
        }
    }

    verify.DatarateParams.Datarate = datarate;
 800c6f2:	b264      	sxtb	r4, r4
 800c6f4:	f88d 4004 	strb.w	r4, [sp, #4]
    verify.DatarateParams.DownlinkDwellTime = Ctx.LoRaMacClassBParams.LoRaMacParams->DownlinkDwellTime;
 800c6f8:	4b1d      	ldr	r3, [pc, #116]	; (800c770 <LoRaMacClassBPingSlotChannelReq+0x8c>)
 800c6fa:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800c6fe:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 800c702:	f88d 2005 	strb.w	r2, [sp, #5]

    if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_RX_DR ) == false )
 800c706:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c70a:	2207      	movs	r2, #7
 800c70c:	a901      	add	r1, sp, #4
 800c70e:	7818      	ldrb	r0, [r3, #0]
 800c710:	f001 fb89 	bl	800de26 <RegionVerify>
 800c714:	b908      	cbnz	r0, 800c71a <LoRaMacClassBPingSlotChannelReq+0x36>
    {
        status &= 0xFD; // Datarate range KO
 800c716:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    if( status == 0x03 )
 800c71a:	2d03      	cmp	r5, #3
 800c71c:	d012      	beq.n	800c744 <LoRaMacClassBPingSlotChannelReq+0x60>

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c71e:	4628      	mov	r0, r5
 800c720:	b003      	add	sp, #12
 800c722:	bdf0      	pop	{r4, r5, r6, r7, pc}
        verify.Frequency = frequency;
 800c724:	9101      	str	r1, [sp, #4]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == false )
 800c726:	4b12      	ldr	r3, [pc, #72]	; (800c770 <LoRaMacClassBPingSlotChannelReq+0x8c>)
 800c728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c72c:	2200      	movs	r2, #0
 800c72e:	a901      	add	r1, sp, #4
 800c730:	7818      	ldrb	r0, [r3, #0]
 800c732:	f001 fb78 	bl	800de26 <RegionVerify>
 800c736:	4607      	mov	r7, r0
 800c738:	b108      	cbz	r0, 800c73e <LoRaMacClassBPingSlotChannelReq+0x5a>
    uint8_t status = 0x03;
 800c73a:	2503      	movs	r5, #3
 800c73c:	e7d9      	b.n	800c6f2 <LoRaMacClassBPingSlotChannelReq+0xe>
        isCustomFreq = true;
 800c73e:	2701      	movs	r7, #1
            status &= 0xFE; // Channel frequency KO
 800c740:	2502      	movs	r5, #2
 800c742:	e7d6      	b.n	800c6f2 <LoRaMacClassBPingSlotChannelReq+0xe>
        if( isCustomFreq == true )
 800c744:	b157      	cbz	r7, 800c75c <LoRaMacClassBPingSlotChannelReq+0x78>
            ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = 1;
 800c746:	4b0b      	ldr	r3, [pc, #44]	; (800c774 <LoRaMacClassBPingSlotChannelReq+0x90>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	781a      	ldrb	r2, [r3, #0]
 800c74c:	f042 0202 	orr.w	r2, r2, #2
 800c750:	701a      	strb	r2, [r3, #0]
            ClassBNvm->PingSlotCtx.Frequency = frequency;
 800c752:	605e      	str	r6, [r3, #4]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
 800c754:	4b07      	ldr	r3, [pc, #28]	; (800c774 <LoRaMacClassBPingSlotChannelReq+0x90>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	721c      	strb	r4, [r3, #8]
 800c75a:	e7e0      	b.n	800c71e <LoRaMacClassBPingSlotChannelReq+0x3a>
            ClassBNvm->PingSlotCtx.Ctrl.CustomFreq = 0;
 800c75c:	4b05      	ldr	r3, [pc, #20]	; (800c774 <LoRaMacClassBPingSlotChannelReq+0x90>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	781a      	ldrb	r2, [r3, #0]
 800c762:	f36f 0241 	bfc	r2, #1, #1
 800c766:	701a      	strb	r2, [r3, #0]
            ClassBNvm->PingSlotCtx.Frequency = 0;
 800c768:	2200      	movs	r2, #0
 800c76a:	605a      	str	r2, [r3, #4]
 800c76c:	e7f2      	b.n	800c754 <LoRaMacClassBPingSlotChannelReq+0x70>
 800c76e:	bf00      	nop
 800c770:	20000c1c 	.word	0x20000c1c
 800c774:	20000c18 	.word	0x20000c18

0800c778 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800c778:	b570      	push	{r4, r5, r6, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	4615      	mov	r5, r2
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.BeaconCtx.BeaconTimingDelay = ( CLASSB_BEACON_DELAY_BEACON_TIMING_ANS * beaconTimingDelay );
 800c77e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800c782:	0040      	lsls	r0, r0, #1
 800c784:	4b1c      	ldr	r3, [pc, #112]	; (800c7f8 <LoRaMacClassBBeaconTimingAns+0x80>)
 800c786:	6398      	str	r0, [r3, #56]	; 0x38
    Ctx.BeaconCtx.BeaconTimingChannel = beaconTimingChannel;
 800c788:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34

    if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800c78c:	200d      	movs	r0, #13
 800c78e:	f000 fdc1 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 800c792:	b1b0      	cbz	r0, 800c7c2 <LoRaMacClassBBeaconTimingAns+0x4a>
    {
        if( Ctx.BeaconCtx.BeaconTimingDelay > CLASSB_BEACON_INTERVAL )
 800c794:	4b18      	ldr	r3, [pc, #96]	; (800c7f8 <LoRaMacClassBBeaconTimingAns+0x80>)
 800c796:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c798:	f5b1 3ffa 	cmp.w	r1, #128000	; 0x1f400
 800c79c:	d913      	bls.n	800c7c6 <LoRaMacClassBBeaconTimingAns+0x4e>
        {
            // We missed the beacon already
            Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800c79e:	2200      	movs	r2, #0
 800c7a0:	639a      	str	r2, [r3, #56]	; 0x38
            Ctx.BeaconCtx.BeaconTimingChannel = 0;
 800c7a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_TIMING );
 800c7a6:	210d      	movs	r1, #13
 800c7a8:	200f      	movs	r0, #15
 800c7aa:	f000 fd67 	bl	800d27c <LoRaMacConfirmQueueSetStatus>
            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 1;
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
        }

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
 800c7ae:	4b12      	ldr	r3, [pc, #72]	; (800c7f8 <LoRaMacClassBBeaconTimingAns+0x80>)
 800c7b0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c7b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800c7b6:	60d1      	str	r1, [r2, #12]
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
 800c7b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c7bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c7c0:	7413      	strb	r3, [r2, #16]
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c7c2:	b002      	add	sp, #8
 800c7c4:	bd70      	pop	{r4, r5, r6, pc}
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800c7c6:	4c0c      	ldr	r4, [pc, #48]	; (800c7f8 <LoRaMacClassBBeaconTimingAns+0x80>)
 800c7c8:	7b23      	ldrb	r3, [r4, #12]
 800c7ca:	f043 0304 	orr.w	r3, r3, #4
 800c7ce:	7323      	strb	r3, [r4, #12]
            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 1;
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	f043 0308 	orr.w	r3, r3, #8
 800c7d6:	7323      	strb	r3, [r4, #12]
            Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( lastRxDone + Ctx.BeaconCtx.BeaconTimingDelay );
 800c7d8:	466e      	mov	r6, sp
 800c7da:	4429      	add	r1, r5
 800c7dc:	4630      	mov	r0, r6
 800c7de:	f005 fe77 	bl	80124d0 <SysTimeFromMs>
 800c7e2:	3420      	adds	r4, #32
 800c7e4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c7e8:	e884 0003 	stmia.w	r4, {r0, r1}
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800c7ec:	210d      	movs	r1, #13
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	f000 fd44 	bl	800d27c <LoRaMacConfirmQueueSetStatus>
 800c7f4:	e7db      	b.n	800c7ae <LoRaMacClassBBeaconTimingAns+0x36>
 800c7f6:	bf00      	nop
 800c7f8:	20000c1c 	.word	0x20000c1c

0800c7fc <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800c7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7fe:	b089      	sub	sp, #36	; 0x24
#if ( LORAMAC_CLASSB_ENABLED == 1 )

    SysTime_t nextBeacon = SysTimeGet( );
 800c800:	ae04      	add	r6, sp, #16
 800c802:	4630      	mov	r0, r6
 800c804:	f005 fe0c 	bl	8012420 <SysTimeGet>
    uint32_t currentTimeMs = SysTimeToMs( nextBeacon );
 800c808:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c80c:	f005 fe40 	bl	8012490 <SysTimeToMs>
 800c810:	4607      	mov	r7, r0

    nextBeacon.Seconds = nextBeacon.Seconds + ( 128 - ( nextBeacon.Seconds % 128 ) );
 800c812:	9c04      	ldr	r4, [sp, #16]
 800c814:	f024 047f 	bic.w	r4, r4, #127	; 0x7f
 800c818:	3480      	adds	r4, #128	; 0x80
 800c81a:	9404      	str	r4, [sp, #16]
    nextBeacon.SubSeconds = 0;
 800c81c:	f04f 0c00 	mov.w	ip, #0
 800c820:	f8ad c014 	strh.w	ip, [sp, #20]

    Ctx.BeaconCtx.NextBeaconRx = nextBeacon;
 800c824:	4d23      	ldr	r5, [pc, #140]	; (800c8b4 <LoRaMacClassBDeviceTimeAns+0xb8>)
 800c826:	f105 0220 	add.w	r2, r5, #32
 800c82a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c82e:	e882 0003 	stmia.w	r2, {r0, r1}
    Ctx.BeaconCtx.LastBeaconRx = SysTimeSub( Ctx.BeaconCtx.NextBeaconRx, ( SysTime_t ){ .Seconds = CLASSB_BEACON_INTERVAL / 1000, .SubSeconds = 0 } );
 800c832:	2380      	movs	r3, #128	; 0x80
 800c834:	9306      	str	r3, [sp, #24]
 800c836:	f8ad c01c 	strh.w	ip, [sp, #28]
 800c83a:	ae02      	add	r6, sp, #8
 800c83c:	9907      	ldr	r1, [sp, #28]
 800c83e:	9100      	str	r1, [sp, #0]
 800c840:	ca06      	ldmia	r2, {r1, r2}
 800c842:	4630      	mov	r0, r6
 800c844:	f005 fdab 	bl	801239e <SysTimeSub>
 800c848:	3518      	adds	r5, #24
 800c84a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c84e:	e885 0003 	stmia.w	r5, {r0, r1}

    if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800c852:	2009      	movs	r0, #9
 800c854:	f000 fd5e 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 800c858:	b908      	cbnz	r0, 800c85e <LoRaMacClassBDeviceTimeAns+0x62>
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c85a:	b009      	add	sp, #36	; 0x24
 800c85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( currentTimeMs > SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) )
 800c85e:	f105 0308 	add.w	r3, r5, #8
 800c862:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c866:	f005 fe13 	bl	8012490 <SysTimeToMs>
 800c86a:	42b8      	cmp	r0, r7
 800c86c:	d20b      	bcs.n	800c886 <LoRaMacClassBDeviceTimeAns+0x8a>
            Ctx.BeaconCtx.LastBeaconRx.Seconds = 0;
 800c86e:	f1a5 0318 	sub.w	r3, r5, #24
 800c872:	2200      	movs	r2, #0
 800c874:	619a      	str	r2, [r3, #24]
            Ctx.BeaconCtx.LastBeaconRx.SubSeconds = 0;
 800c876:	839a      	strh	r2, [r3, #28]
            Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 800c878:	621a      	str	r2, [r3, #32]
            Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 800c87a:	849a      	strh	r2, [r3, #36]	; 0x24
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_DEVICE_TIME );
 800c87c:	2109      	movs	r1, #9
 800c87e:	200f      	movs	r0, #15
 800c880:	f000 fcfc 	bl	800d27c <LoRaMacConfirmQueueSetStatus>
 800c884:	e7e9      	b.n	800c85a <LoRaMacClassBDeviceTimeAns+0x5e>
            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 1;
 800c886:	4d0b      	ldr	r5, [pc, #44]	; (800c8b4 <LoRaMacClassBDeviceTimeAns+0xb8>)
 800c888:	7b2b      	ldrb	r3, [r5, #12]
 800c88a:	f043 0304 	orr.w	r3, r3, #4
 800c88e:	732b      	strb	r3, [r5, #12]
            Ctx.BeaconCtx.BeaconTimingDelay = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTimeMs;
 800c890:	f105 0320 	add.w	r3, r5, #32
 800c894:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c898:	f005 fdfa 	bl	8012490 <SysTimeToMs>
 800c89c:	1bc7      	subs	r7, r0, r7
 800c89e:	63af      	str	r7, [r5, #56]	; 0x38
            Ctx.BeaconCtx.BeaconTime.Seconds = nextBeacon.Seconds - UNIX_GPS_EPOCH_OFFSET - 128;
 800c8a0:	4b05      	ldr	r3, [pc, #20]	; (800c8b8 <LoRaMacClassBDeviceTimeAns+0xbc>)
 800c8a2:	4423      	add	r3, r4
 800c8a4:	612b      	str	r3, [r5, #16]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 800c8a6:	2000      	movs	r0, #0
 800c8a8:	82a8      	strh	r0, [r5, #20]
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800c8aa:	2109      	movs	r1, #9
 800c8ac:	f000 fce6 	bl	800d27c <LoRaMacConfirmQueueSetStatus>
}
 800c8b0:	e7d3      	b.n	800c85a <LoRaMacClassBDeviceTimeAns+0x5e>
 800c8b2:	bf00      	nop
 800c8b4:	20000c1c 	.word	0x20000c1c
 800c8b8:	ed2ac200 	.word	0xed2ac200

0800c8bc <LoRaMacClassBBeaconFreqReq>:
bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    VerifyParams_t verify;

    if( frequency != 0 )
 800c8bc:	b938      	cbnz	r0, 800c8ce <LoRaMacClassBBeaconFreqReq+0x12>
            return true;
        }
    }
    else
    {
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
 800c8be:	4b0f      	ldr	r3, [pc, #60]	; (800c8fc <LoRaMacClassBBeaconFreqReq+0x40>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	7b1a      	ldrb	r2, [r3, #12]
 800c8c4:	f36f 0200 	bfc	r2, #0, #1
 800c8c8:	731a      	strb	r2, [r3, #12]
        return true;
 800c8ca:	2001      	movs	r0, #1
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c8cc:	4770      	bx	lr
{
 800c8ce:	b510      	push	{r4, lr}
 800c8d0:	b082      	sub	sp, #8
 800c8d2:	4604      	mov	r4, r0
        verify.Frequency = frequency;
 800c8d4:	9001      	str	r0, [sp, #4]
        if( RegionVerify( *Ctx.LoRaMacClassBParams.LoRaMacRegion, &verify, PHY_FREQUENCY ) == true )
 800c8d6:	4b0a      	ldr	r3, [pc, #40]	; (800c900 <LoRaMacClassBBeaconFreqReq+0x44>)
 800c8d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c8dc:	2200      	movs	r2, #0
 800c8de:	a901      	add	r1, sp, #4
 800c8e0:	7818      	ldrb	r0, [r3, #0]
 800c8e2:	f001 faa0 	bl	800de26 <RegionVerify>
 800c8e6:	b908      	cbnz	r0, 800c8ec <LoRaMacClassBBeaconFreqReq+0x30>
}
 800c8e8:	b002      	add	sp, #8
 800c8ea:	bd10      	pop	{r4, pc}
            ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 1;
 800c8ec:	4b03      	ldr	r3, [pc, #12]	; (800c8fc <LoRaMacClassBBeaconFreqReq+0x40>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	7b1a      	ldrb	r2, [r3, #12]
 800c8f2:	f042 0201 	orr.w	r2, r2, #1
 800c8f6:	731a      	strb	r2, [r3, #12]
            ClassBNvm->BeaconCtx.Frequency = frequency;
 800c8f8:	611c      	str	r4, [r3, #16]
            return true;
 800c8fa:	e7f5      	b.n	800c8e8 <LoRaMacClassBBeaconFreqReq+0x2c>
 800c8fc:	20000c18 	.word	0x20000c18
 800c900:	20000c1c 	.word	0x20000c1c

0800c904 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	4605      	mov	r5, r0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c908:	f005 fe38 	bl	801257c <UTIL_TIMER_GetCurrentTime>
 800c90c:	4604      	mov	r4, r0
    TimerTime_t beaconReserved = 0;
    TimerTime_t nextBeacon = SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx );
 800c90e:	4e0f      	ldr	r6, [pc, #60]	; (800c94c <LoRaMacClassBIsUplinkCollision+0x48>)
 800c910:	f106 0320 	add.w	r3, r6, #32
 800c914:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c918:	f005 fdba 	bl	8012490 <SysTimeToMs>
 800c91c:	4602      	mov	r2, r0

    beaconReserved = nextBeacon -
                     CLASSB_BEACON_GUARD -
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 800c91e:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
 800c922:	68cb      	ldr	r3, [r1, #12]
                     CLASSB_BEACON_GUARD -
 800c924:	1ac3      	subs	r3, r0, r3
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay2 -
 800c926:	6908      	ldr	r0, [r1, #16]
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay1 -
 800c928:	1a1b      	subs	r3, r3, r0
                     Ctx.LoRaMacClassBParams.LoRaMacParams->ReceiveDelay2 -
 800c92a:	1b5b      	subs	r3, r3, r5
    beaconReserved = nextBeacon -
 800c92c:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
                     txTimeOnAir;

    // Check if the next beacon will be received during the next uplink.
    if( ( currentTime >= beaconReserved ) && ( currentTime < ( nextBeacon + CLASSB_BEACON_RESERVED ) ) )
 800c930:	429c      	cmp	r4, r3
 800c932:	d305      	bcc.n	800c940 <LoRaMacClassBIsUplinkCollision+0x3c>
 800c934:	f602 0248 	addw	r2, r2, #2120	; 0x848
 800c938:	42a2      	cmp	r2, r4
 800c93a:	d803      	bhi.n	800c944 <LoRaMacClassBIsUplinkCollision+0x40>
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
 800c93c:	2000      	movs	r0, #0
 800c93e:	e000      	b.n	800c942 <LoRaMacClassBIsUplinkCollision+0x3e>
 800c940:	2000      	movs	r0, #0
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c942:	bd70      	pop	{r4, r5, r6, pc}
        return CLASSB_BEACON_RESERVED;
 800c944:	f640 0048 	movw	r0, #2120	; 0x848
 800c948:	e7fb      	b.n	800c942 <LoRaMacClassBIsUplinkCollision+0x3e>
 800c94a:	bf00      	nop
 800c94c:	20000c1c 	.word	0x20000c1c

0800c950 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800c950:	b510      	push	{r4, lr}
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    TimerStop( &Ctx.PingSlotTimer );
 800c952:	4c0c      	ldr	r4, [pc, #48]	; (800c984 <LoRaMacClassBStopRxSlots+0x34>)
 800c954:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800c958:	f005 fe50 	bl	80125fc <UTIL_TIMER_Stop>
    TimerStop( &Ctx.MulticastSlotTimer );
 800c95c:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 800c960:	f005 fe4c 	bl	80125fc <UTIL_TIMER_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c964:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c968:	b672      	cpsid	i

    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
 800c96a:	4b07      	ldr	r3, [pc, #28]	; (800c988 <LoRaMacClassBStopRxSlots+0x38>)
 800c96c:	781a      	ldrb	r2, [r3, #0]
 800c96e:	f36f 0241 	bfc	r2, #1, #1
 800c972:	701a      	strb	r2, [r3, #0]
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
 800c974:	b2d2      	uxtb	r2, r2
 800c976:	f36f 0282 	bfc	r2, #2, #1
 800c97a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c97c:	f381 8810 	msr	PRIMASK, r1
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c980:	bd10      	pop	{r4, pc}
 800c982:	bf00      	nop
 800c984:	20000c1c 	.word	0x20000c1c
 800c988:	20000cdc 	.word	0x20000cdc

0800c98c <LoRaMacClassBHaltBeaconing>:
    if( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 )
 800c98c:	4b13      	ldr	r3, [pc, #76]	; (800c9dc <LoRaMacClassBHaltBeaconing+0x50>)
 800c98e:	7b1b      	ldrb	r3, [r3, #12]
 800c990:	f013 0f01 	tst.w	r3, #1
 800c994:	d020      	beq.n	800c9d8 <LoRaMacClassBHaltBeaconing+0x4c>
{
 800c996:	b510      	push	{r4, lr}
        if( ( Ctx.BeaconState == BEACON_STATE_TIMEOUT ) ||
 800c998:	4b10      	ldr	r3, [pc, #64]	; (800c9dc <LoRaMacClassBHaltBeaconing+0x50>)
 800c99a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800c99e:	2b02      	cmp	r3, #2
 800c9a0:	d016      	beq.n	800c9d0 <LoRaMacClassBHaltBeaconing+0x44>
 800c9a2:	2b0a      	cmp	r3, #10
 800c9a4:	d014      	beq.n	800c9d0 <LoRaMacClassBHaltBeaconing+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9a6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c9aa:	b672      	cpsid	i
        LoRaMacClassBEvents.Events.Beacon = 0;
 800c9ac:	4b0c      	ldr	r3, [pc, #48]	; (800c9e0 <LoRaMacClassBHaltBeaconing+0x54>)
 800c9ae:	781a      	ldrb	r2, [r3, #0]
 800c9b0:	f36f 0200 	bfc	r2, #0, #1
 800c9b4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9b6:	f381 8810 	msr	PRIMASK, r1
        TimerStop( &Ctx.BeaconTimer );
 800c9ba:	4c08      	ldr	r4, [pc, #32]	; (800c9dc <LoRaMacClassBHaltBeaconing+0x50>)
 800c9bc:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800c9c0:	f005 fe1c 	bl	80125fc <UTIL_TIMER_Stop>
        Ctx.BeaconState = BEACON_STATE_HALT;
 800c9c4:	2306      	movs	r3, #6
 800c9c6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        LoRaMacClassBStopRxSlots( );
 800c9ca:	f7ff ffc1 	bl	800c950 <LoRaMacClassBStopRxSlots>
}
 800c9ce:	bd10      	pop	{r4, pc}
            LoRaMacClassBBeaconTimerEvent( NULL );
 800c9d0:	2000      	movs	r0, #0
 800c9d2:	f7ff f919 	bl	800bc08 <LoRaMacClassBBeaconTimerEvent>
 800c9d6:	e7e6      	b.n	800c9a6 <LoRaMacClassBHaltBeaconing+0x1a>
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	20000c1c 	.word	0x20000c1c
 800c9e0:	20000cdc 	.word	0x20000cdc

0800c9e4 <LoRaMacClassBSwitchClass>:
{
 800c9e4:	b510      	push	{r4, lr}
 800c9e6:	4604      	mov	r4, r0
    if( nextClass == CLASS_B )
 800c9e8:	2801      	cmp	r0, #1
 800c9ea:	d002      	beq.n	800c9f2 <LoRaMacClassBSwitchClass+0xe>
    if( nextClass == CLASS_A )
 800c9ec:	b174      	cbz	r4, 800ca0c <LoRaMacClassBSwitchClass+0x28>
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c9ee:	2002      	movs	r0, #2
}
 800c9f0:	bd10      	pop	{r4, pc}
        if( ( Ctx.BeaconCtx.Ctrl.BeaconMode == 1 ) && ( ClassBNvm->PingSlotCtx.Ctrl.Assigned == 1 ) )
 800c9f2:	4b09      	ldr	r3, [pc, #36]	; (800ca18 <LoRaMacClassBSwitchClass+0x34>)
 800c9f4:	7b1b      	ldrb	r3, [r3, #12]
 800c9f6:	f013 0f01 	tst.w	r3, #1
 800c9fa:	d0f7      	beq.n	800c9ec <LoRaMacClassBSwitchClass+0x8>
 800c9fc:	4b07      	ldr	r3, [pc, #28]	; (800ca1c <LoRaMacClassBSwitchClass+0x38>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	f013 0f01 	tst.w	r3, #1
 800ca06:	d0f1      	beq.n	800c9ec <LoRaMacClassBSwitchClass+0x8>
            return LORAMAC_STATUS_OK;
 800ca08:	2000      	movs	r0, #0
 800ca0a:	e7f1      	b.n	800c9f0 <LoRaMacClassBSwitchClass+0xc>
        LoRaMacClassBHaltBeaconing( );
 800ca0c:	f7ff ffbe 	bl	800c98c <LoRaMacClassBHaltBeaconing>
        InitClassBDefaults( );
 800ca10:	f7ff f874 	bl	800bafc <InitClassBDefaults>
        return LORAMAC_STATUS_OK;
 800ca14:	4620      	mov	r0, r4
 800ca16:	e7eb      	b.n	800c9f0 <LoRaMacClassBSwitchClass+0xc>
 800ca18:	20000c1c 	.word	0x20000c1c
 800ca1c:	20000c18 	.word	0x20000c18

0800ca20 <LoRaMacClassBStartRxSlots>:

void LoRaMacClassBStartRxSlots( void )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    if( ClassBNvm->PingSlotCtx.Ctrl.Assigned == 1 )
 800ca20:	4b0f      	ldr	r3, [pc, #60]	; (800ca60 <LoRaMacClassBStartRxSlots+0x40>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	f013 0f01 	tst.w	r3, #1
 800ca2a:	d100      	bne.n	800ca2e <LoRaMacClassBStartRxSlots+0xe>
 800ca2c:	4770      	bx	lr
{
 800ca2e:	b570      	push	{r4, r5, r6, lr}
    {
        Ctx.PingSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800ca30:	4c0c      	ldr	r4, [pc, #48]	; (800ca64 <LoRaMacClassBStartRxSlots+0x44>)
 800ca32:	2500      	movs	r5, #0
 800ca34:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
        TimerSetValue( &Ctx.PingSlotTimer, 1 );
 800ca38:	f104 0664 	add.w	r6, r4, #100	; 0x64
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f005 fe7c 	bl	801273c <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.PingSlotTimer );
 800ca44:	4630      	mov	r0, r6
 800ca46:	f005 fe33 	bl	80126b0 <UTIL_TIMER_Start>

        Ctx.MulticastSlotState = PINGSLOT_STATE_CALC_PING_OFFSET;
 800ca4a:	f884 504a 	strb.w	r5, [r4, #74]	; 0x4a
        TimerSetValue( &Ctx.MulticastSlotTimer, 1 );
 800ca4e:	347c      	adds	r4, #124	; 0x7c
 800ca50:	2101      	movs	r1, #1
 800ca52:	4620      	mov	r0, r4
 800ca54:	f005 fe72 	bl	801273c <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.MulticastSlotTimer );
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f005 fe29 	bl	80126b0 <UTIL_TIMER_Start>
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ca5e:	bd70      	pop	{r4, r5, r6, pc}
 800ca60:	20000c18 	.word	0x20000c18
 800ca64:	20000c1c 	.word	0x20000c1c

0800ca68 <UpdateBeaconState>:
{
 800ca68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca6c:	b083      	sub	sp, #12
 800ca6e:	4607      	mov	r7, r0
 800ca70:	460e      	mov	r6, r1
 800ca72:	4614      	mov	r4, r2
    beaconEventTime = CalcDelayForNextBeacon( currentTime, SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) );
 800ca74:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800cad4 <UpdateBeaconState+0x6c>
 800ca78:	f108 0318 	add.w	r3, r8, #24
 800ca7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ca80:	f005 fd06 	bl	8012490 <SysTimeToMs>
 800ca84:	4601      	mov	r1, r0
 800ca86:	4620      	mov	r0, r4
 800ca88:	f7fe ff82 	bl	800b990 <CalcDelayForNextBeacon>
 800ca8c:	4605      	mov	r5, r0
    Ctx.BeaconCtx.NextBeaconRx = SysTimeFromMs( currentTime + beaconEventTime );
 800ca8e:	46e9      	mov	r9, sp
 800ca90:	1821      	adds	r1, r4, r0
 800ca92:	4648      	mov	r0, r9
 800ca94:	f005 fd1c 	bl	80124d0 <SysTimeFromMs>
 800ca98:	f108 0320 	add.w	r3, r8, #32
 800ca9c:	e899 0003 	ldmia.w	r9, {r0, r1}
 800caa0:	e883 0003 	stmia.w	r3, {r0, r1}
    beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 800caa4:	f9b8 100e 	ldrsh.w	r1, [r8, #14]
 800caa8:	4628      	mov	r0, r5
 800caaa:	f7ff f8f1 	bl	800bc90 <TimerTempCompensation>
 800caae:	4605      	mov	r5, r0
    if( beaconEventTime > windowMovement )
 800cab0:	42b0      	cmp	r0, r6
 800cab2:	d900      	bls.n	800cab6 <UpdateBeaconState+0x4e>
        beaconEventTime -= windowMovement;
 800cab4:	1b85      	subs	r5, r0, r6
    Ctx.BeaconCtx.NextBeaconRxAdjusted = currentTime + beaconEventTime;
 800cab6:	442c      	add	r4, r5
 800cab8:	4b06      	ldr	r3, [pc, #24]	; (800cad4 <UpdateBeaconState+0x6c>)
 800caba:	629c      	str	r4, [r3, #40]	; 0x28
    LoRaMacClassBStartRxSlots( );
 800cabc:	f7ff ffb0 	bl	800ca20 <LoRaMacClassBStartRxSlots>
    IndicateBeaconStatus( status );
 800cac0:	4638      	mov	r0, r7
 800cac2:	f7fe ff73 	bl	800b9ac <IndicateBeaconStatus>
    return ApplyGuardTime( beaconEventTime );
 800cac6:	4628      	mov	r0, r5
 800cac8:	f7fe ff92 	bl	800b9f0 <ApplyGuardTime>
}
 800cacc:	b003      	add	sp, #12
 800cace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cad2:	bf00      	nop
 800cad4:	20000c1c 	.word	0x20000c1c

0800cad8 <LoRaMacClassBProcessBeacon>:
{
 800cad8:	b570      	push	{r4, r5, r6, lr}
 800cada:	b088      	sub	sp, #32
    TimerTime_t currentTime = Ctx.BeaconCtx.TimeStamp;
 800cadc:	4bb6      	ldr	r3, [pc, #728]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cade:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    switch( Ctx.BeaconState )
 800cae0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800cae4:	2b0a      	cmp	r3, #10
 800cae6:	f200 815e 	bhi.w	800cda6 <LoRaMacClassBProcessBeacon+0x2ce>
 800caea:	e8df f013 	tbh	[pc, r3, lsl #1]
 800caee:	0070      	.short	0x0070
 800caf0:	0094000b 	.word	0x0094000b
 800caf4:	009f015c 	.word	0x009f015c
 800caf8:	015c00ce 	.word	0x015c00ce
 800cafc:	011e00f3 	.word	0x011e00f3
 800cb00:	012e015c 	.word	0x012e015c
            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 800cb04:	4bac      	ldr	r3, [pc, #688]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cb06:	7b1b      	ldrb	r3, [r3, #12]
 800cb08:	f013 0f10 	tst.w	r3, #16
 800cb0c:	d009      	beq.n	800cb22 <LoRaMacClassBProcessBeacon+0x4a>
                Radio.Sleep();
 800cb0e:	4bab      	ldr	r3, [pc, #684]	; (800cdbc <LoRaMacClassBProcessBeacon+0x2e4>)
 800cb10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb12:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 800cb14:	4ba8      	ldr	r3, [pc, #672]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cb16:	220a      	movs	r2, #10
 800cb18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    TimerTime_t beaconEventTime = 1;
 800cb1c:	2501      	movs	r5, #1
            activateTimer = true;
 800cb1e:	462c      	mov	r4, r5
 800cb20:	e098      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
                ResetWindowTimeout( );
 800cb22:	f7fe ff2b 	bl	800b97c <ResetWindowTimeout>
                if( Ctx.BeaconCtx.Ctrl.BeaconDelaySet == 1 )
 800cb26:	4ba4      	ldr	r3, [pc, #656]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cb28:	7b1b      	ldrb	r3, [r3, #12]
 800cb2a:	f013 0f04 	tst.w	r3, #4
 800cb2e:	d109      	bne.n	800cb44 <LoRaMacClassBProcessBeacon+0x6c>
                    Ctx.BeaconCtx.NextBeaconRx.Seconds = 0;
 800cb30:	4ba1      	ldr	r3, [pc, #644]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cb32:	2200      	movs	r2, #0
 800cb34:	621a      	str	r2, [r3, #32]
                    Ctx.BeaconCtx.NextBeaconRx.SubSeconds = 0;
 800cb36:	849a      	strh	r2, [r3, #36]	; 0x24
                    Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800cb38:	639a      	str	r2, [r3, #56]	; 0x38
                    Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800cb3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    TimerTime_t beaconEventTime = 1;
 800cb3e:	2501      	movs	r5, #1
            activateTimer = true;
 800cb40:	462c      	mov	r4, r5
 800cb42:	e087      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
                    CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 800cb44:	4d9c      	ldr	r5, [pc, #624]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cb46:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
 800cb48:	a802      	add	r0, sp, #8
 800cb4a:	f7ff f875 	bl	800bc38 <CalculateBeaconRxWindowConfig>
                    if( Ctx.BeaconCtx.BeaconTimingDelay > 0 )
 800cb4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800cb50:	b353      	cbz	r3, 800cba8 <LoRaMacClassBProcessBeacon+0xd0>
                        if( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) > currentTime )
 800cb52:	f105 0320 	add.w	r3, r5, #32
 800cb56:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cb5a:	f005 fc99 	bl	8012490 <SysTimeToMs>
 800cb5e:	42a0      	cmp	r0, r4
 800cb60:	d811      	bhi.n	800cb86 <LoRaMacClassBProcessBeacon+0xae>
                            Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 800cb62:	4b95      	ldr	r3, [pc, #596]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cb64:	7b1a      	ldrb	r2, [r3, #12]
 800cb66:	f36f 0282 	bfc	r2, #2, #1
 800cb6a:	731a      	strb	r2, [r3, #12]
                            Ctx.BeaconCtx.Ctrl.BeaconChannelSet = 0;
 800cb6c:	b2d2      	uxtb	r2, r2
 800cb6e:	f36f 02c3 	bfc	r2, #3, #1
 800cb72:	731a      	strb	r2, [r3, #12]
                            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800cb74:	2200      	movs	r2, #0
 800cb76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    TimerTime_t beaconEventTime = 1;
 800cb7a:	2501      	movs	r5, #1
                        Ctx.BeaconCtx.BeaconTimingDelay = 0;
 800cb7c:	4b8e      	ldr	r3, [pc, #568]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	639a      	str	r2, [r3, #56]	; 0x38
            activateTimer = true;
 800cb82:	2401      	movs	r4, #1
 800cb84:	e066      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
                            beaconEventTime = TimerTempCompensation( SysTimeToMs( Ctx.BeaconCtx.NextBeaconRx ) - currentTime, Ctx.BeaconCtx.Temperature );
 800cb86:	f105 0320 	add.w	r3, r5, #32
 800cb8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cb8e:	f005 fc7f 	bl	8012490 <SysTimeToMs>
 800cb92:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
 800cb96:	1b00      	subs	r0, r0, r4
 800cb98:	f7ff f87a 	bl	800bc90 <TimerTempCompensation>
 800cb9c:	4605      	mov	r5, r0
                            if( ( int32_t ) beaconEventTime > beaconRxConfig.WindowOffset )
 800cb9e:	9b05      	ldr	r3, [sp, #20]
 800cba0:	4283      	cmp	r3, r0
 800cba2:	daeb      	bge.n	800cb7c <LoRaMacClassBProcessBeacon+0xa4>
                                beaconEventTime += beaconRxConfig.WindowOffset;
 800cba4:	441d      	add	r5, r3
 800cba6:	e7e9      	b.n	800cb7c <LoRaMacClassBProcessBeacon+0xa4>
                        Ctx.BeaconCtx.Ctrl.BeaconDelaySet = 0;
 800cba8:	4b83      	ldr	r3, [pc, #524]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cbaa:	7b1a      	ldrb	r2, [r3, #12]
 800cbac:	f36f 0282 	bfc	r2, #2, #1
 800cbb0:	731a      	strb	r2, [r3, #12]
                        Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 800cbb2:	b2d2      	uxtb	r2, r2
 800cbb4:	f042 0210 	orr.w	r2, r2, #16
 800cbb8:	731a      	strb	r2, [r3, #12]
                        RxBeaconSetup( CLASSB_BEACON_RESERVED, false, beaconRxConfig.WindowTimeout );
 800cbba:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	f640 0048 	movw	r0, #2120	; 0x848
 800cbc4:	f7ff f8f4 	bl	800bdb0 <RxBeaconSetup>
    TimerTime_t beaconEventTime = 1;
 800cbc8:	2501      	movs	r5, #1
                        activateTimer = false;
 800cbca:	2400      	movs	r4, #0
 800cbcc:	e042      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
            if( Ctx.BeaconCtx.Ctrl.AcquisitionPending == 1 )
 800cbce:	4b7a      	ldr	r3, [pc, #488]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cbd0:	7b1b      	ldrb	r3, [r3, #12]
 800cbd2:	f013 0f10 	tst.w	r3, #16
 800cbd6:	d009      	beq.n	800cbec <LoRaMacClassBProcessBeacon+0x114>
                Radio.Sleep();
 800cbd8:	4b78      	ldr	r3, [pc, #480]	; (800cdbc <LoRaMacClassBProcessBeacon+0x2e4>)
 800cbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbdc:	4798      	blx	r3
                Ctx.BeaconState = BEACON_STATE_LOST;
 800cbde:	4b76      	ldr	r3, [pc, #472]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cbe0:	220a      	movs	r2, #10
 800cbe2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    TimerTime_t beaconEventTime = 1;
 800cbe6:	2501      	movs	r5, #1
            activateTimer = true;
 800cbe8:	462c      	mov	r4, r5
 800cbea:	e033      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
                ResetWindowTimeout( );
 800cbec:	f7fe fec6 	bl	800b97c <ResetWindowTimeout>
                Ctx.BeaconCtx.Ctrl.AcquisitionPending = 1;
 800cbf0:	4b71      	ldr	r3, [pc, #452]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cbf2:	7b1a      	ldrb	r2, [r3, #12]
 800cbf4:	f042 0210 	orr.w	r2, r2, #16
 800cbf8:	731a      	strb	r2, [r3, #12]
                CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 800cbfa:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800cbfc:	a802      	add	r0, sp, #8
 800cbfe:	f7ff f81b 	bl	800bc38 <CalculateBeaconRxWindowConfig>
                RxBeaconSetup( 0, true, beaconRxConfig.WindowTimeout );
 800cc02:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800cc06:	2101      	movs	r1, #1
 800cc08:	2000      	movs	r0, #0
 800cc0a:	f7ff f8d1 	bl	800bdb0 <RxBeaconSetup>
                beaconEventTime = CLASSB_BEACON_INTERVAL;
 800cc0e:	f44f 35fa 	mov.w	r5, #128000	; 0x1f400
            activateTimer = true;
 800cc12:	2401      	movs	r4, #1
 800cc14:	e01e      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
            Ctx.BeaconCtx.BeaconTime.Seconds += ( CLASSB_BEACON_INTERVAL / 1000 );
 800cc16:	4d68      	ldr	r5, [pc, #416]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cc18:	692b      	ldr	r3, [r5, #16]
 800cc1a:	3380      	adds	r3, #128	; 0x80
 800cc1c:	612b      	str	r3, [r5, #16]
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	82ab      	strh	r3, [r5, #20]
            EnlargeWindowTimeout( );
 800cc22:	f7fe fe89 	bl	800b938 <EnlargeWindowTimeout>
            Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 800cc26:	2304      	movs	r3, #4
 800cc28:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
            Ctx.BeaconCtx.Ctrl.BeaconAcquired = 0;
 800cc2c:	4b62      	ldr	r3, [pc, #392]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cc2e:	7b1a      	ldrb	r2, [r3, #12]
 800cc30:	f36f 0241 	bfc	r2, #1, #1
 800cc34:	731a      	strb	r2, [r3, #12]
            if( ( currentTime - SysTimeToMs( Ctx.BeaconCtx.LastBeaconRx ) ) > CLASSB_MAX_BEACON_LESS_PERIOD )
 800cc36:	3318      	adds	r3, #24
 800cc38:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cc3c:	f005 fc28 	bl	8012490 <SysTimeToMs>
 800cc40:	1a20      	subs	r0, r4, r0
 800cc42:	4b5f      	ldr	r3, [pc, #380]	; (800cdc0 <LoRaMacClassBProcessBeacon+0x2e8>)
 800cc44:	4298      	cmp	r0, r3
 800cc46:	d914      	bls.n	800cc72 <LoRaMacClassBProcessBeacon+0x19a>
                Ctx.BeaconState = BEACON_STATE_LOST;
 800cc48:	4b5b      	ldr	r3, [pc, #364]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cc4a:	220a      	movs	r2, #10
 800cc4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    TimerTime_t beaconEventTime = 1;
 800cc50:	2501      	movs	r5, #1
            activateTimer = true;
 800cc52:	462c      	mov	r4, r5
    MW_LOG(TS_ON, VLEVEL_H, "beacon state %d\r\n", Ctx.BeaconState);
 800cc54:	4b58      	ldr	r3, [pc, #352]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cc56:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	4b59      	ldr	r3, [pc, #356]	; (800cdc4 <LoRaMacClassBProcessBeacon+0x2ec>)
 800cc5e:	2201      	movs	r2, #1
 800cc60:	2100      	movs	r1, #0
 800cc62:	2003      	movs	r0, #3
 800cc64:	f005 f976 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
    if( activateTimer == true )
 800cc68:	2c00      	cmp	r4, #0
 800cc6a:	f040 80ad 	bne.w	800cdc8 <LoRaMacClassBProcessBeacon+0x2f0>
}
 800cc6e:	b008      	add	sp, #32
 800cc70:	bd70      	pop	{r4, r5, r6, pc}
                beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND,
 800cc72:	4e51      	ldr	r6, [pc, #324]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cc74:	4622      	mov	r2, r4
 800cc76:	6b31      	ldr	r1, [r6, #48]	; 0x30
 800cc78:	200f      	movs	r0, #15
 800cc7a:	f7ff fef5 	bl	800ca68 <UpdateBeaconState>
 800cc7e:	4605      	mov	r5, r0
                Ctx.BeaconState = BEACON_STATE_IDLE;
 800cc80:	2307      	movs	r3, #7
 800cc82:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
            activateTimer = true;
 800cc86:	2401      	movs	r4, #1
 800cc88:	e7e4      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
            Ctx.BeaconCtx.Ctrl.AcquisitionPending = 0;
 800cc8a:	4e4b      	ldr	r6, [pc, #300]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cc8c:	7b33      	ldrb	r3, [r6, #12]
 800cc8e:	f36f 1304 	bfc	r3, #4, #1
 800cc92:	7333      	strb	r3, [r6, #12]
            beaconEventTime = UpdateBeaconState( LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED,
 800cc94:	4622      	mov	r2, r4
 800cc96:	2100      	movs	r1, #0
 800cc98:	200d      	movs	r0, #13
 800cc9a:	f7ff fee5 	bl	800ca68 <UpdateBeaconState>
 800cc9e:	4605      	mov	r5, r0
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 800cca0:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	f013 0f04 	tst.w	r3, #4
 800ccaa:	d105      	bne.n	800ccb8 <LoRaMacClassBProcessBeacon+0x1e0>
            Ctx.BeaconState = BEACON_STATE_IDLE;
 800ccac:	4b42      	ldr	r3, [pc, #264]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800ccae:	2207      	movs	r2, #7
 800ccb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            activateTimer = true;
 800ccb4:	2401      	movs	r4, #1
            break;
 800ccb6:	e7cd      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 800ccb8:	200b      	movs	r0, #11
 800ccba:	f000 fb2b 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d0f4      	beq.n	800ccac <LoRaMacClassBProcessBeacon+0x1d4>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_ACQUISITION );
 800ccc2:	210b      	movs	r1, #11
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	f000 fad9 	bl	800d27c <LoRaMacConfirmQueueSetStatus>
                    Ctx.LoRaMacClassBParams.MlmeConfirm->TxTimeOnAir = 0;
 800ccca:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 800ccce:	2200      	movs	r2, #0
 800ccd0:	605a      	str	r2, [r3, #4]
 800ccd2:	e7eb      	b.n	800ccac <LoRaMacClassBProcessBeacon+0x1d4>
            GetTemperature( &Ctx.LoRaMacClassBCallbacks, &Ctx.BeaconCtx );
 800ccd4:	4c38      	ldr	r4, [pc, #224]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800ccd6:	f104 010c 	add.w	r1, r4, #12
 800ccda:	f104 0094 	add.w	r0, r4, #148	; 0x94
 800ccde:	f7fe fe21 	bl	800b924 <GetTemperature>
            beaconEventTime = Ctx.BeaconCtx.NextBeaconRxAdjusted - Radio.GetWakeupTime( );
 800cce2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cce4:	4b35      	ldr	r3, [pc, #212]	; (800cdbc <LoRaMacClassBProcessBeacon+0x2e4>)
 800cce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cce8:	4798      	blx	r3
 800ccea:	1a36      	subs	r6, r6, r0
            currentTime = TimerGetCurrentTime( );
 800ccec:	f005 fc46 	bl	801257c <UTIL_TIMER_GetCurrentTime>
 800ccf0:	4605      	mov	r5, r0
            CalculateBeaconRxWindowConfig( &beaconRxConfig, Ctx.BeaconCtx.SymbolTimeout );
 800ccf2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800ccf4:	a802      	add	r0, sp, #8
 800ccf6:	f7fe ff9f 	bl	800bc38 <CalculateBeaconRxWindowConfig>
            if( beaconEventTime > currentTime )
 800ccfa:	42ae      	cmp	r6, r5
 800ccfc:	d90e      	bls.n	800cd1c <LoRaMacClassBProcessBeacon+0x244>
                Ctx.BeaconState = BEACON_STATE_GUARD;
 800ccfe:	2208      	movs	r2, #8
 800cd00:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
                beaconEventTime = TimerTempCompensation( beaconEventTime, Ctx.BeaconCtx.Temperature );
 800cd04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd08:	1b70      	subs	r0, r6, r5
 800cd0a:	f7fe ffc1 	bl	800bc90 <TimerTempCompensation>
 800cd0e:	4605      	mov	r5, r0
                if( ( int32_t ) beaconEventTime > beaconRxConfig.WindowOffset )
 800cd10:	9b05      	ldr	r3, [sp, #20]
 800cd12:	4283      	cmp	r3, r0
 800cd14:	da4d      	bge.n	800cdb2 <LoRaMacClassBProcessBeacon+0x2da>
                    beaconEventTime += beaconRxConfig.WindowOffset;
 800cd16:	441d      	add	r5, r3
            activateTimer = true;
 800cd18:	2401      	movs	r4, #1
 800cd1a:	e79b      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
                Ctx.BeaconState = BEACON_STATE_REACQUISITION;
 800cd1c:	4b26      	ldr	r3, [pc, #152]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cd1e:	2204      	movs	r2, #4
 800cd20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                beaconEventTime = 1;
 800cd24:	2501      	movs	r5, #1
            activateTimer = true;
 800cd26:	462c      	mov	r4, r5
 800cd28:	e794      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
            Ctx.BeaconState = BEACON_STATE_RX;
 800cd2a:	4b23      	ldr	r3, [pc, #140]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cd2c:	2209      	movs	r2, #9
 800cd2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            LoRaMacClassBStopRxSlots( );
 800cd32:	f7ff fe0d 	bl	800c950 <LoRaMacClassBStopRxSlots>
            RxBeaconSetup( CLASSB_BEACON_RESERVED, false, beaconRxConfig.WindowTimeout );
 800cd36:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	f640 0048 	movw	r0, #2120	; 0x848
 800cd40:	f7ff f836 	bl	800bdb0 <RxBeaconSetup>
    TimerTime_t beaconEventTime = 1;
 800cd44:	2501      	movs	r5, #1
    bool activateTimer = false;
 800cd46:	2400      	movs	r4, #0
            break;
 800cd48:	e784      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
            if( Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeReq == 1 )
 800cd4a:	4b1b      	ldr	r3, [pc, #108]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cd4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	f013 0f04 	tst.w	r3, #4
 800cd56:	d11c      	bne.n	800cd92 <LoRaMacClassBProcessBeacon+0x2ba>
                Ctx.LoRaMacClassBParams.MlmeIndication->MlmeIndication = MLME_BEACON_LOST;
 800cd58:	4b17      	ldr	r3, [pc, #92]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cd5a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800cd5e:	210e      	movs	r1, #14
 800cd60:	7011      	strb	r1, [r2, #0]
                Ctx.LoRaMacClassBParams.MlmeIndication->Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cd62:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800cd66:	2100      	movs	r1, #0
 800cd68:	7051      	strb	r1, [r2, #1]
                Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MlmeInd = 1;
 800cd6a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800cd6e:	7813      	ldrb	r3, [r2, #0]
 800cd70:	f043 0308 	orr.w	r3, r3, #8
 800cd74:	7013      	strb	r3, [r2, #0]
            LoRaMacClassBStopRxSlots( );
 800cd76:	f7ff fdeb 	bl	800c950 <LoRaMacClassBStopRxSlots>
            InitClassBDefaults( );
 800cd7a:	f7fe febf 	bl	800bafc <InitClassBDefaults>
            Ctx.LoRaMacClassBParams.LoRaMacFlags->Bits.MacDone = 1;
 800cd7e:	4b0e      	ldr	r3, [pc, #56]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cd80:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800cd84:	7813      	ldrb	r3, [r2, #0]
 800cd86:	f043 0320 	orr.w	r3, r3, #32
 800cd8a:	7013      	strb	r3, [r2, #0]
    TimerTime_t beaconEventTime = 1;
 800cd8c:	2501      	movs	r5, #1
    bool activateTimer = false;
 800cd8e:	2400      	movs	r4, #0
            break;
 800cd90:	e760      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true )
 800cd92:	200b      	movs	r0, #11
 800cd94:	f000 fabe 	bl	800d314 <LoRaMacConfirmQueueIsCmdActive>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d0ec      	beq.n	800cd76 <LoRaMacClassBProcessBeacon+0x29e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_BEACON_NOT_FOUND, MLME_BEACON_ACQUISITION );
 800cd9c:	210b      	movs	r1, #11
 800cd9e:	200f      	movs	r0, #15
 800cda0:	f000 fa6c 	bl	800d27c <LoRaMacConfirmQueueSetStatus>
 800cda4:	e7e7      	b.n	800cd76 <LoRaMacClassBProcessBeacon+0x29e>
            Ctx.BeaconState = BEACON_STATE_ACQUISITION;
 800cda6:	2400      	movs	r4, #0
 800cda8:	4b03      	ldr	r3, [pc, #12]	; (800cdb8 <LoRaMacClassBProcessBeacon+0x2e0>)
 800cdaa:	f883 4048 	strb.w	r4, [r3, #72]	; 0x48
    TimerTime_t beaconEventTime = 1;
 800cdae:	2501      	movs	r5, #1
            break;
 800cdb0:	e750      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
            activateTimer = true;
 800cdb2:	2401      	movs	r4, #1
 800cdb4:	e74e      	b.n	800cc54 <LoRaMacClassBProcessBeacon+0x17c>
 800cdb6:	bf00      	nop
 800cdb8:	20000c1c 	.word	0x20000c1c
 800cdbc:	080139bc 	.word	0x080139bc
 800cdc0:	006ddd00 	.word	0x006ddd00
 800cdc4:	08013368 	.word	0x08013368
        TimerSetValue( &Ctx.BeaconTimer, beaconEventTime );
 800cdc8:	4c04      	ldr	r4, [pc, #16]	; (800cddc <LoRaMacClassBProcessBeacon+0x304>)
 800cdca:	4629      	mov	r1, r5
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f005 fcb5 	bl	801273c <UTIL_TIMER_SetPeriod>
        TimerStart( &Ctx.BeaconTimer );
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f005 fc6c 	bl	80126b0 <UTIL_TIMER_Start>
}
 800cdd8:	e749      	b.n	800cc6e <LoRaMacClassBProcessBeacon+0x196>
 800cdda:	bf00      	nop
 800cddc:	20000c68 	.word	0x20000c68

0800cde0 <LoRaMacClassBSetFPendingBit>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    MulticastCtx_t *cur = Ctx.LoRaMacClassBParams.MulticastChannels;
 800cde0:	4b0d      	ldr	r3, [pc, #52]	; (800ce18 <LoRaMacClassBSetFPendingBit+0x38>)
 800cde2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8

    if( address == *Ctx.LoRaMacClassBParams.LoRaMacDevAddr )
 800cde6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4283      	cmp	r3, r0
 800cdee:	d001      	beq.n	800cdf4 <LoRaMacClassBSetFPendingBit+0x14>
        // Unicast
        ClassBNvm->PingSlotCtx.FPendingSet = fPendingSet;
    }
    else
    {
        for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	e00b      	b.n	800ce0c <LoRaMacClassBSetFPendingBit+0x2c>
        ClassBNvm->PingSlotCtx.FPendingSet = fPendingSet;
 800cdf4:	4b09      	ldr	r3, [pc, #36]	; (800ce1c <LoRaMacClassBSetFPendingBit+0x3c>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	7259      	strb	r1, [r3, #9]
 800cdfa:	4770      	bx	lr
        {
            if( cur != NULL )
 800cdfc:	b11a      	cbz	r2, 800ce06 <LoRaMacClassBSetFPendingBit+0x26>
            {
                // Set the fPending bit, if its a multicast
                if( address == cur->ChannelParams.Address )
 800cdfe:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800ce02:	4584      	cmp	ip, r0
 800ce04:	d005      	beq.n	800ce12 <LoRaMacClassBSetFPendingBit+0x32>
                {
                    cur->FPendingSet = fPendingSet;
                }
            }
            cur++;
 800ce06:	322c      	adds	r2, #44	; 0x2c
        for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ce08:	3301      	adds	r3, #1
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d0f5      	beq.n	800cdfc <LoRaMacClassBSetFPendingBit+0x1c>
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ce10:	4770      	bx	lr
                    cur->FPendingSet = fPendingSet;
 800ce12:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
 800ce16:	e7f6      	b.n	800ce06 <LoRaMacClassBSetFPendingBit+0x26>
 800ce18:	20000c1c 	.word	0x20000c1c
 800ce1c:	20000c18 	.word	0x20000c18

0800ce20 <LoRaMacClassBProcess>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce20:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ce24:	b672      	cpsid	i
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents_t events;

    CRITICAL_SECTION_BEGIN( );
    events = LoRaMacClassBEvents;
 800ce26:	4a0e      	ldr	r2, [pc, #56]	; (800ce60 <LoRaMacClassBProcess+0x40>)
 800ce28:	6813      	ldr	r3, [r2, #0]
    LoRaMacClassBEvents.Value = 0;
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce2e:	f381 8810 	msr	PRIMASK, r1
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800ce32:	b1a3      	cbz	r3, 800ce5e <LoRaMacClassBProcess+0x3e>
{
 800ce34:	b510      	push	{r4, lr}
    {
        if( events.Events.Beacon == 1 )
 800ce36:	b2dc      	uxtb	r4, r3
 800ce38:	f013 0f01 	tst.w	r3, #1
 800ce3c:	d106      	bne.n	800ce4c <LoRaMacClassBProcess+0x2c>
        {
            LoRaMacClassBProcessBeacon( );
        }
        if( events.Events.PingSlot == 1 )
 800ce3e:	f014 0f02 	tst.w	r4, #2
 800ce42:	d106      	bne.n	800ce52 <LoRaMacClassBProcess+0x32>
        {
            LoRaMacClassBProcessPingSlot( );
        }
        if( events.Events.MulticastSlot == 1 )
 800ce44:	f014 0f04 	tst.w	r4, #4
 800ce48:	d106      	bne.n	800ce58 <LoRaMacClassBProcess+0x38>
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800ce4a:	bd10      	pop	{r4, pc}
            LoRaMacClassBProcessBeacon( );
 800ce4c:	f7ff fe44 	bl	800cad8 <LoRaMacClassBProcessBeacon>
 800ce50:	e7f5      	b.n	800ce3e <LoRaMacClassBProcess+0x1e>
            LoRaMacClassBProcessPingSlot( );
 800ce52:	f7ff f833 	bl	800bebc <LoRaMacClassBProcessPingSlot>
 800ce56:	e7f5      	b.n	800ce44 <LoRaMacClassBProcess+0x24>
            LoRaMacClassBProcessMulticastSlot( );
 800ce58:	f7ff f916 	bl	800c088 <LoRaMacClassBProcessMulticastSlot>
}
 800ce5c:	e7f5      	b.n	800ce4a <LoRaMacClassBProcess+0x2a>
 800ce5e:	4770      	bx	lr
 800ce60:	20000cdc 	.word	0x20000cdc

0800ce64 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800ce64:	2300      	movs	r3, #0
 800ce66:	2b0f      	cmp	r3, #15
 800ce68:	d804      	bhi.n	800ce74 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800ce6a:	5cc2      	ldrb	r2, [r0, r3]
 800ce6c:	b922      	cbnz	r2, 800ce78 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800ce6e:	3301      	adds	r3, #1
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	e7f8      	b.n	800ce66 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800ce74:	2001      	movs	r0, #1
 800ce76:	4770      	bx	lr
            return false;
 800ce78:	2000      	movs	r0, #0
}
 800ce7a:	4770      	bx	lr

0800ce7c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800ce7c:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800ce7e:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800ce80:	0125      	lsls	r5, r4, #4
 800ce82:	f105 0308 	add.w	r3, r5, #8
 800ce86:	4d06      	ldr	r5, [pc, #24]	; (800cea0 <MallocNewMacCommandSlot+0x24>)
 800ce88:	441d      	add	r5, r3
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	f7ff ffea 	bl	800ce64 <IsSlotFree>
 800ce90:	b920      	cbnz	r0, 800ce9c <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800ce92:	3401      	adds	r4, #1
 800ce94:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800ce96:	2c20      	cmp	r4, #32
 800ce98:	d1f2      	bne.n	800ce80 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800ce9a:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	bd38      	pop	{r3, r4, r5, pc}
 800cea0:	20000d10 	.word	0x20000d10

0800cea4 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800cea4:	b120      	cbz	r0, 800ceb0 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800cea6:	2200      	movs	r2, #0
 800cea8:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800ceaa:	6042      	str	r2, [r0, #4]

    return true;
 800ceac:	2001      	movs	r0, #1
 800ceae:	4770      	bx	lr
        return false;
 800ceb0:	2000      	movs	r0, #0
}
 800ceb2:	4770      	bx	lr

0800ceb4 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	b160      	cbz	r0, 800ced2 <LinkedListAdd+0x1e>
 800ceb8:	b169      	cbz	r1, 800ced6 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800ceba:	6802      	ldr	r2, [r0, #0]
 800cebc:	b13a      	cbz	r2, 800cece <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800cebe:	685a      	ldr	r2, [r3, #4]
 800cec0:	b102      	cbz	r2, 800cec4 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800cec2:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800cec4:	2200      	movs	r2, #0
 800cec6:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800cec8:	6059      	str	r1, [r3, #4]

    return true;
 800ceca:	2001      	movs	r0, #1
 800cecc:	4770      	bx	lr
        list->First = element;
 800cece:	6001      	str	r1, [r0, #0]
 800ced0:	e7f5      	b.n	800cebe <LinkedListAdd+0xa>
        return false;
 800ced2:	2000      	movs	r0, #0
 800ced4:	4770      	bx	lr
 800ced6:	2000      	movs	r0, #0
}
 800ced8:	4770      	bx	lr

0800ceda <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800ceda:	b160      	cbz	r0, 800cef6 <LinkedListGetPrevious+0x1c>
 800cedc:	b161      	cbz	r1, 800cef8 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800cede:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800cee0:	4281      	cmp	r1, r0
 800cee2:	d102      	bne.n	800ceea <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800cee4:	2000      	movs	r0, #0
    }

    return curElement;
}
 800cee6:	4770      	bx	lr
            curElement = curElement->Next;
 800cee8:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800ceea:	2800      	cmp	r0, #0
 800ceec:	d0fb      	beq.n	800cee6 <LinkedListGetPrevious+0xc>
 800ceee:	6803      	ldr	r3, [r0, #0]
 800cef0:	428b      	cmp	r3, r1
 800cef2:	d1f9      	bne.n	800cee8 <LinkedListGetPrevious+0xe>
 800cef4:	4770      	bx	lr
 800cef6:	4770      	bx	lr
        return NULL;
 800cef8:	4608      	mov	r0, r1
 800cefa:	4770      	bx	lr

0800cefc <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800cefc:	b1b8      	cbz	r0, 800cf2e <LinkedListRemove+0x32>
{
 800cefe:	b538      	push	{r3, r4, r5, lr}
 800cf00:	460c      	mov	r4, r1
 800cf02:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800cf04:	b1a9      	cbz	r1, 800cf32 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800cf06:	f7ff ffe8 	bl	800ceda <LinkedListGetPrevious>

    if( list->First == element )
 800cf0a:	682b      	ldr	r3, [r5, #0]
 800cf0c:	42a3      	cmp	r3, r4
 800cf0e:	d009      	beq.n	800cf24 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800cf10:	686b      	ldr	r3, [r5, #4]
 800cf12:	42a3      	cmp	r3, r4
 800cf14:	d009      	beq.n	800cf2a <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800cf16:	b108      	cbz	r0, 800cf1c <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800cf18:	6823      	ldr	r3, [r4, #0]
 800cf1a:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	6023      	str	r3, [r4, #0]

    return true;
 800cf20:	2001      	movs	r0, #1
}
 800cf22:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800cf24:	6823      	ldr	r3, [r4, #0]
 800cf26:	602b      	str	r3, [r5, #0]
 800cf28:	e7f2      	b.n	800cf10 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800cf2a:	6068      	str	r0, [r5, #4]
 800cf2c:	e7f3      	b.n	800cf16 <LinkedListRemove+0x1a>
        return false;
 800cf2e:	2000      	movs	r0, #0
}
 800cf30:	4770      	bx	lr
        return false;
 800cf32:	2000      	movs	r0, #0
 800cf34:	e7f5      	b.n	800cf22 <LinkedListRemove+0x26>
	...

0800cf38 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800cf38:	2811      	cmp	r0, #17
 800cf3a:	d808      	bhi.n	800cf4e <IsSticky+0x16>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	fa03 f000 	lsl.w	r0, r3, r0
 800cf42:	4b04      	ldr	r3, [pc, #16]	; (800cf54 <IsSticky+0x1c>)
 800cf44:	4218      	tst	r0, r3
 800cf46:	bf14      	ite	ne
 800cf48:	2001      	movne	r0, #1
 800cf4a:	2000      	moveq	r0, #0
 800cf4c:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800cf4e:	2000      	movs	r0, #0
    }
}
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	00020720 	.word	0x00020720

0800cf58 <FreeMacCommandSlot>:
    if( slot == NULL )
 800cf58:	b130      	cbz	r0, 800cf68 <FreeMacCommandSlot+0x10>
{
 800cf5a:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800cf5c:	2210      	movs	r2, #16
 800cf5e:	2100      	movs	r1, #0
 800cf60:	f003 f967 	bl	8010232 <memset1>
    return true;
 800cf64:	2001      	movs	r0, #1
}
 800cf66:	bd08      	pop	{r3, pc}
        return false;
 800cf68:	2000      	movs	r0, #0
}
 800cf6a:	4770      	bx	lr

0800cf6c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800cf6c:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800cf6e:	4c06      	ldr	r4, [pc, #24]	; (800cf88 <LoRaMacCommandsInit+0x1c>)
 800cf70:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800cf74:	2100      	movs	r1, #0
 800cf76:	4620      	mov	r0, r4
 800cf78:	f003 f95b 	bl	8010232 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f7ff ff91 	bl	800cea4 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800cf82:	2000      	movs	r0, #0
 800cf84:	bd10      	pop	{r4, pc}
 800cf86:	bf00      	nop
 800cf88:	20000d10 	.word	0x20000d10

0800cf8c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800cf8c:	b301      	cbz	r1, 800cfd0 <LoRaMacCommandsAddCmd+0x44>
{
 800cf8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf90:	4605      	mov	r5, r0
 800cf92:	4614      	mov	r4, r2
 800cf94:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800cf96:	f7ff ff71 	bl	800ce7c <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800cf9a:	4606      	mov	r6, r0
 800cf9c:	b1d0      	cbz	r0, 800cfd4 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800cf9e:	4601      	mov	r1, r0
 800cfa0:	480e      	ldr	r0, [pc, #56]	; (800cfdc <LoRaMacCommandsAddCmd+0x50>)
 800cfa2:	f7ff ff87 	bl	800ceb4 <LinkedListAdd>
 800cfa6:	b1b8      	cbz	r0, 800cfd8 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800cfa8:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800cfaa:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800cfac:	b2a2      	uxth	r2, r4
 800cfae:	4639      	mov	r1, r7
 800cfb0:	1d70      	adds	r0, r6, #5
 800cfb2:	f003 f926 	bl	8010202 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	f7ff ffbe 	bl	800cf38 <IsSticky>
 800cfbc:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800cfbe:	4b07      	ldr	r3, [pc, #28]	; (800cfdc <LoRaMacCommandsAddCmd+0x50>)
 800cfc0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cfc4:	4414      	add	r4, r2
 800cfc6:	3401      	adds	r4, #1
 800cfc8:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800cfcc:	2000      	movs	r0, #0
}
 800cfce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800cfd0:	2001      	movs	r0, #1
}
 800cfd2:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800cfd4:	2002      	movs	r0, #2
 800cfd6:	e7fa      	b.n	800cfce <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800cfd8:	2005      	movs	r0, #5
 800cfda:	e7f8      	b.n	800cfce <LoRaMacCommandsAddCmd+0x42>
 800cfdc:	20000d10 	.word	0x20000d10

0800cfe0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800cfe0:	b1a0      	cbz	r0, 800d00c <LoRaMacCommandsRemoveCmd+0x2c>
{
 800cfe2:	b510      	push	{r4, lr}
 800cfe4:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800cfe6:	4601      	mov	r1, r0
 800cfe8:	480b      	ldr	r0, [pc, #44]	; (800d018 <LoRaMacCommandsRemoveCmd+0x38>)
 800cfea:	f7ff ff87 	bl	800cefc <LinkedListRemove>
 800cfee:	b178      	cbz	r0, 800d010 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800cff0:	68a1      	ldr	r1, [r4, #8]
 800cff2:	4a09      	ldr	r2, [pc, #36]	; (800d018 <LoRaMacCommandsRemoveCmd+0x38>)
 800cff4:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800cff8:	1a5b      	subs	r3, r3, r1
 800cffa:	3b01      	subs	r3, #1
 800cffc:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800d000:	4620      	mov	r0, r4
 800d002:	f7ff ffa9 	bl	800cf58 <FreeMacCommandSlot>
 800d006:	b128      	cbz	r0, 800d014 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800d008:	2000      	movs	r0, #0
}
 800d00a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d00c:	2001      	movs	r0, #1
}
 800d00e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800d010:	2003      	movs	r0, #3
 800d012:	e7fa      	b.n	800d00a <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800d014:	2005      	movs	r0, #5
 800d016:	e7f8      	b.n	800d00a <LoRaMacCommandsRemoveCmd+0x2a>
 800d018:	20000d10 	.word	0x20000d10

0800d01c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800d01c:	4b0a      	ldr	r3, [pc, #40]	; (800d048 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800d01e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800d020:	b120      	cbz	r0, 800d02c <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800d022:	7b03      	ldrb	r3, [r0, #12]
 800d024:	b11b      	cbz	r3, 800d02e <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800d026:	6800      	ldr	r0, [r0, #0]
 800d028:	e7fa      	b.n	800d020 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800d02a:	bd10      	pop	{r4, pc}
 800d02c:	4770      	bx	lr
{
 800d02e:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800d030:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800d032:	f7ff ffd5 	bl	800cfe0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800d036:	4620      	mov	r0, r4
    while( curElement != NULL )
 800d038:	2800      	cmp	r0, #0
 800d03a:	d0f6      	beq.n	800d02a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800d03c:	7b03      	ldrb	r3, [r0, #12]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d0f6      	beq.n	800d030 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800d042:	6800      	ldr	r0, [r0, #0]
 800d044:	e7f8      	b.n	800d038 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800d046:	bf00      	nop
 800d048:	20000d10 	.word	0x20000d10

0800d04c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800d04c:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800d04e:	4b08      	ldr	r3, [pc, #32]	; (800d070 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800d050:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800d052:	e000      	b.n	800d056 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800d054:	462c      	mov	r4, r5
    while( curElement != NULL )
 800d056:	b14c      	cbz	r4, 800d06c <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800d058:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800d05a:	7920      	ldrb	r0, [r4, #4]
 800d05c:	f7ff ff6c 	bl	800cf38 <IsSticky>
 800d060:	2800      	cmp	r0, #0
 800d062:	d0f7      	beq.n	800d054 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800d064:	4620      	mov	r0, r4
 800d066:	f7ff ffbb 	bl	800cfe0 <LoRaMacCommandsRemoveCmd>
 800d06a:	e7f3      	b.n	800d054 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800d06c:	2000      	movs	r0, #0
 800d06e:	bd38      	pop	{r3, r4, r5, pc}
 800d070:	20000d10 	.word	0x20000d10

0800d074 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800d074:	b128      	cbz	r0, 800d082 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800d076:	4a04      	ldr	r2, [pc, #16]	; (800d088 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800d078:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800d07c:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800d07e:	2000      	movs	r0, #0
 800d080:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d082:	2001      	movs	r0, #1
}
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	20000d10 	.word	0x20000d10

0800d08c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800d08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800d090:	4b16      	ldr	r3, [pc, #88]	; (800d0ec <LoRaMacCommandsSerializeCmds+0x60>)
 800d092:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800d094:	b32a      	cbz	r2, 800d0e2 <LoRaMacCommandsSerializeCmds+0x56>
 800d096:	4607      	mov	r7, r0
 800d098:	4688      	mov	r8, r1
 800d09a:	4616      	mov	r6, r2
 800d09c:	b319      	cbz	r1, 800d0e6 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800d09e:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800d0a0:	b194      	cbz	r4, 800d0c8 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800d0a2:	1a7a      	subs	r2, r7, r1
 800d0a4:	68a3      	ldr	r3, [r4, #8]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d30d      	bcc.n	800d0c8 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800d0ac:	1c4d      	adds	r5, r1, #1
 800d0ae:	b2ed      	uxtb	r5, r5
 800d0b0:	7923      	ldrb	r3, [r4, #4]
 800d0b2:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800d0b4:	8922      	ldrh	r2, [r4, #8]
 800d0b6:	1d61      	adds	r1, r4, #5
 800d0b8:	1970      	adds	r0, r6, r5
 800d0ba:	f003 f8a2 	bl	8010202 <memcpy1>
            itr += curElement->PayloadSize;
 800d0be:	68a3      	ldr	r3, [r4, #8]
 800d0c0:	441d      	add	r5, r3
 800d0c2:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800d0c4:	6824      	ldr	r4, [r4, #0]
 800d0c6:	e7eb      	b.n	800d0a0 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800d0c8:	b12c      	cbz	r4, 800d0d6 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800d0ca:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	f7ff ff87 	bl	800cfe0 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800d0d2:	462c      	mov	r4, r5
 800d0d4:	e7f8      	b.n	800d0c8 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800d0d6:	4640      	mov	r0, r8
 800d0d8:	f7ff ffcc 	bl	800d074 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800d0dc:	2000      	movs	r0, #0
}
 800d0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d0e2:	2001      	movs	r0, #1
 800d0e4:	e7fb      	b.n	800d0de <LoRaMacCommandsSerializeCmds+0x52>
 800d0e6:	2001      	movs	r0, #1
 800d0e8:	e7f9      	b.n	800d0de <LoRaMacCommandsSerializeCmds+0x52>
 800d0ea:	bf00      	nop
 800d0ec:	20000d10 	.word	0x20000d10

0800d0f0 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800d0f0:	4601      	mov	r1, r0
 800d0f2:	b170      	cbz	r0, 800d112 <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800d0f4:	4b08      	ldr	r3, [pc, #32]	; (800d118 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800d0f6:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800d0fc:	b13b      	cbz	r3, 800d10e <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800d0fe:	7b1a      	ldrb	r2, [r3, #12]
 800d100:	b90a      	cbnz	r2, 800d106 <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	e7fa      	b.n	800d0fc <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800d106:	2301      	movs	r3, #1
 800d108:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800d10a:	2000      	movs	r0, #0
 800d10c:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800d10e:	2000      	movs	r0, #0
 800d110:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800d112:	2001      	movs	r0, #1
}
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	20000d10 	.word	0x20000d10

0800d11c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800d11c:	1e83      	subs	r3, r0, #2
 800d11e:	2b11      	cmp	r3, #17
 800d120:	d80a      	bhi.n	800d138 <LoRaMacCommandsGetCmdSize+0x1c>
 800d122:	e8df f003 	tbb	[pc, r3]
 800d126:	0b23      	.short	0x0b23
 800d128:	110f240d 	.word	0x110f240d
 800d12c:	09171513 	.word	0x09171513
 800d130:	09091909 	.word	0x09091909
 800d134:	211f1d1b 	.word	0x211f1d1b
 800d138:	2000      	movs	r0, #0
 800d13a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800d13c:	2005      	movs	r0, #5
            break;
 800d13e:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800d140:	2002      	movs	r0, #2
            break;
 800d142:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800d144:	2001      	movs	r0, #1
            break;
 800d146:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800d148:	2006      	movs	r0, #6
            break;
 800d14a:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800d14c:	2002      	movs	r0, #2
            break;
 800d14e:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800d150:	2002      	movs	r0, #2
            break;
 800d152:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800d154:	2005      	movs	r0, #5
            break;
 800d156:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800d158:	2006      	movs	r0, #6
            break;
 800d15a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800d15c:	2001      	movs	r0, #1
            break;
 800d15e:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800d160:	2005      	movs	r0, #5
            break;
 800d162:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800d164:	2004      	movs	r0, #4
            break;
 800d166:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800d168:	2004      	movs	r0, #4
            break;
 800d16a:	4770      	bx	lr
            cidSize = 3;
 800d16c:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800d16e:	4770      	bx	lr

0800d170 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800d170:	4b03      	ldr	r3, [pc, #12]	; (800d180 <IncreaseBufferPointer+0x10>)
 800d172:	4298      	cmp	r0, r3
 800d174:	d001      	beq.n	800d17a <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800d176:	3004      	adds	r0, #4
 800d178:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d17a:	4802      	ldr	r0, [pc, #8]	; (800d184 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	20000f38 	.word	0x20000f38
 800d184:	20000f28 	.word	0x20000f28

0800d188 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800d188:	b108      	cbz	r0, 800d18e <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800d18a:	2000      	movs	r0, #0
 800d18c:	4770      	bx	lr
        return true;
 800d18e:	2001      	movs	r0, #1
}
 800d190:	4770      	bx	lr

0800d192 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800d192:	2804      	cmp	r0, #4
 800d194:	d801      	bhi.n	800d19a <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800d196:	2000      	movs	r0, #0
 800d198:	4770      	bx	lr
        return true;
 800d19a:	2001      	movs	r0, #1
}
 800d19c:	4770      	bx	lr
	...

0800d1a0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d1a6:	4b0d      	ldr	r3, [pc, #52]	; (800d1dc <GetElement+0x3c>)
 800d1a8:	f893 7020 	ldrb.w	r7, [r3, #32]
 800d1ac:	4638      	mov	r0, r7
 800d1ae:	f7ff ffeb 	bl	800d188 <IsListEmpty>
 800d1b2:	b970      	cbnz	r0, 800d1d2 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800d1b4:	2500      	movs	r5, #0
 800d1b6:	42af      	cmp	r7, r5
 800d1b8:	d909      	bls.n	800d1ce <GetElement+0x2e>
    {
        if( element->Request == request )
 800d1ba:	7823      	ldrb	r3, [r4, #0]
 800d1bc:	42b3      	cmp	r3, r6
 800d1be:	d00a      	beq.n	800d1d6 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f7ff ffd5 	bl	800d170 <IncreaseBufferPointer>
 800d1c6:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800d1c8:	3501      	adds	r5, #1
 800d1ca:	b2ed      	uxtb	r5, r5
 800d1cc:	e7f3      	b.n	800d1b6 <GetElement+0x16>
    }

    return NULL;
 800d1ce:	2000      	movs	r0, #0
}
 800d1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800d1d2:	2000      	movs	r0, #0
 800d1d4:	e7fc      	b.n	800d1d0 <GetElement+0x30>
            return element;
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	e7fa      	b.n	800d1d0 <GetElement+0x30>
 800d1da:	bf00      	nop
 800d1dc:	20000f1c 	.word	0x20000f1c

0800d1e0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800d1e0:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800d1e2:	4c08      	ldr	r4, [pc, #32]	; (800d204 <LoRaMacConfirmQueueInit+0x24>)
 800d1e4:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d1ec:	f104 000c 	add.w	r0, r4, #12
 800d1f0:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800d1f2:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800d1f4:	2214      	movs	r2, #20
 800d1f6:	21ff      	movs	r1, #255	; 0xff
 800d1f8:	f003 f81b 	bl	8010232 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800d202:	bd10      	pop	{r4, pc}
 800d204:	20000f1c 	.word	0x20000f1c

0800d208 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d20c:	4b0f      	ldr	r3, [pc, #60]	; (800d24c <LoRaMacConfirmQueueAdd+0x44>)
 800d20e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d212:	f7ff ffbe 	bl	800d192 <IsListFull>
 800d216:	b9b8      	cbnz	r0, 800d248 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800d218:	4c0c      	ldr	r4, [pc, #48]	; (800d24c <LoRaMacConfirmQueueAdd+0x44>)
 800d21a:	68a3      	ldr	r3, [r4, #8]
 800d21c:	782a      	ldrb	r2, [r5, #0]
 800d21e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800d220:	68a3      	ldr	r3, [r4, #8]
 800d222:	786a      	ldrb	r2, [r5, #1]
 800d224:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800d226:	68a3      	ldr	r3, [r4, #8]
 800d228:	78ea      	ldrb	r2, [r5, #3]
 800d22a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800d22c:	68a3      	ldr	r3, [r4, #8]
 800d22e:	78aa      	ldrb	r2, [r5, #2]
 800d230:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800d232:	f894 3020 	ldrb.w	r3, [r4, #32]
 800d236:	3301      	adds	r3, #1
 800d238:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800d23c:	68a0      	ldr	r0, [r4, #8]
 800d23e:	f7ff ff97 	bl	800d170 <IncreaseBufferPointer>
 800d242:	60a0      	str	r0, [r4, #8]

    return true;
 800d244:	2001      	movs	r0, #1
}
 800d246:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800d248:	2000      	movs	r0, #0
 800d24a:	e7fc      	b.n	800d246 <LoRaMacConfirmQueueAdd+0x3e>
 800d24c:	20000f1c 	.word	0x20000f1c

0800d250 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800d250:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d252:	4b09      	ldr	r3, [pc, #36]	; (800d278 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800d254:	f893 4020 	ldrb.w	r4, [r3, #32]
 800d258:	4620      	mov	r0, r4
 800d25a:	f7ff ff95 	bl	800d188 <IsListEmpty>
 800d25e:	b948      	cbnz	r0, 800d274 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800d260:	4d05      	ldr	r5, [pc, #20]	; (800d278 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800d262:	3c01      	subs	r4, #1
 800d264:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800d268:	6868      	ldr	r0, [r5, #4]
 800d26a:	f7ff ff81 	bl	800d170 <IncreaseBufferPointer>
 800d26e:	6068      	str	r0, [r5, #4]

    return true;
 800d270:	2001      	movs	r0, #1
}
 800d272:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800d274:	2000      	movs	r0, #0
 800d276:	e7fc      	b.n	800d272 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800d278:	20000f1c 	.word	0x20000f1c

0800d27c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800d27c:	b538      	push	{r3, r4, r5, lr}
 800d27e:	4605      	mov	r5, r0
 800d280:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d282:	4b08      	ldr	r3, [pc, #32]	; (800d2a4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800d284:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d288:	f7ff ff7e 	bl	800d188 <IsListEmpty>
 800d28c:	b948      	cbnz	r0, 800d2a2 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d28e:	4b05      	ldr	r3, [pc, #20]	; (800d2a4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800d290:	689a      	ldr	r2, [r3, #8]
 800d292:	6859      	ldr	r1, [r3, #4]
 800d294:	4620      	mov	r0, r4
 800d296:	f7ff ff83 	bl	800d1a0 <GetElement>
        if( element != NULL )
 800d29a:	b110      	cbz	r0, 800d2a2 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800d29c:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800d29e:	2201      	movs	r2, #1
 800d2a0:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800d2a2:	bd38      	pop	{r3, r4, r5, pc}
 800d2a4:	20000f1c 	.word	0x20000f1c

0800d2a8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800d2a8:	b510      	push	{r4, lr}
 800d2aa:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d2ac:	4b09      	ldr	r3, [pc, #36]	; (800d2d4 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d2ae:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d2b2:	f7ff ff69 	bl	800d188 <IsListEmpty>
 800d2b6:	b940      	cbnz	r0, 800d2ca <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800d2b8:	4b06      	ldr	r3, [pc, #24]	; (800d2d4 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800d2ba:	689a      	ldr	r2, [r3, #8]
 800d2bc:	6859      	ldr	r1, [r3, #4]
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f7ff ff6e 	bl	800d1a0 <GetElement>
        if( element != NULL )
 800d2c4:	b118      	cbz	r0, 800d2ce <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800d2c6:	7840      	ldrb	r0, [r0, #1]
 800d2c8:	e000      	b.n	800d2cc <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d2ca:	2001      	movs	r0, #1
}
 800d2cc:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d2ce:	2001      	movs	r0, #1
 800d2d0:	e7fc      	b.n	800d2cc <LoRaMacConfirmQueueGetStatus+0x24>
 800d2d2:	bf00      	nop
 800d2d4:	20000f1c 	.word	0x20000f1c

0800d2d8 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800d2dc:	4b0c      	ldr	r3, [pc, #48]	; (800d310 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d2de:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800d2e0:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800d2e4:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d2e8:	f7ff ff4e 	bl	800d188 <IsListEmpty>
 800d2ec:	b150      	cbz	r0, 800d304 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800d2ee:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f7ff ff3b 	bl	800d170 <IncreaseBufferPointer>
 800d2fa:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800d2fc:	4b04      	ldr	r3, [pc, #16]	; (800d310 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	4283      	cmp	r3, r0
 800d302:	d0f4      	beq.n	800d2ee <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800d304:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800d306:	78e3      	ldrb	r3, [r4, #3]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d1f3      	bne.n	800d2f4 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800d30c:	e7f0      	b.n	800d2f0 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800d30e:	bf00      	nop
 800d310:	20000f1c 	.word	0x20000f1c

0800d314 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800d314:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800d316:	4b04      	ldr	r3, [pc, #16]	; (800d328 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800d318:	689a      	ldr	r2, [r3, #8]
 800d31a:	6859      	ldr	r1, [r3, #4]
 800d31c:	f7ff ff40 	bl	800d1a0 <GetElement>
 800d320:	b100      	cbz	r0, 800d324 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800d322:	2001      	movs	r0, #1
    }
    return false;
}
 800d324:	bd08      	pop	{r3, pc}
 800d326:	bf00      	nop
 800d328:	20000f1c 	.word	0x20000f1c

0800d32c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800d32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d32e:	b083      	sub	sp, #12
 800d330:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800d332:	4b16      	ldr	r3, [pc, #88]	; (800d38c <LoRaMacConfirmQueueHandleCb+0x60>)
 800d334:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800d338:	2400      	movs	r4, #0
 800d33a:	e00d      	b.n	800d358 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800d33c:	781a      	ldrb	r2, [r3, #0]
 800d33e:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800d342:	785a      	ldrb	r2, [r3, #1]
 800d344:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800d348:	78db      	ldrb	r3, [r3, #3]
 800d34a:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800d34e:	f7ff ff7f 	bl	800d250 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800d352:	b1a5      	cbz	r5, 800d37e <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800d354:	3401      	adds	r4, #1
 800d356:	b2e4      	uxtb	r4, r4
 800d358:	42bc      	cmp	r4, r7
 800d35a:	d214      	bcs.n	800d386 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800d35c:	4b0b      	ldr	r3, [pc, #44]	; (800d38c <LoRaMacConfirmQueueHandleCb+0x60>)
 800d35e:	685a      	ldr	r2, [r3, #4]
 800d360:	7812      	ldrb	r2, [r2, #0]
 800d362:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800d364:	685a      	ldr	r2, [r3, #4]
 800d366:	7852      	ldrb	r2, [r2, #1]
 800d368:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800d36e:	2d00      	cmp	r5, #0
 800d370:	d0e4      	beq.n	800d33c <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800d372:	4b06      	ldr	r3, [pc, #24]	; (800d38c <LoRaMacConfirmQueueHandleCb+0x60>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	4630      	mov	r0, r6
 800d37a:	4798      	blx	r3
 800d37c:	e7e7      	b.n	800d34e <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800d37e:	a801      	add	r0, sp, #4
 800d380:	f7ff ff42 	bl	800d208 <LoRaMacConfirmQueueAdd>
 800d384:	e7e6      	b.n	800d354 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800d386:	b003      	add	sp, #12
 800d388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d38a:	bf00      	nop
 800d38c:	20000f1c 	.word	0x20000f1c

0800d390 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800d390:	4b01      	ldr	r3, [pc, #4]	; (800d398 <LoRaMacConfirmQueueGetCnt+0x8>)
 800d392:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d396:	4770      	bx	lr
 800d398:	20000f1c 	.word	0x20000f1c

0800d39c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800d39c:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800d39e:	4b03      	ldr	r3, [pc, #12]	; (800d3ac <LoRaMacConfirmQueueIsFull+0x10>)
 800d3a0:	f893 0020 	ldrb.w	r0, [r3, #32]
 800d3a4:	f7ff fef5 	bl	800d192 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800d3a8:	bd08      	pop	{r3, pc}
 800d3aa:	bf00      	nop
 800d3ac:	20000f1c 	.word	0x20000f1c

0800d3b0 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800d3b0:	b410      	push	{r4}
 800d3b2:	9c01      	ldr	r4, [sp, #4]
 800d3b4:	9902      	ldr	r1, [sp, #8]
 800d3b6:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800d3b8:	b1da      	cbz	r2, 800d3f2 <PrepareB0+0x42>
 800d3ba:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800d3bc:	2049      	movs	r0, #73	; 0x49
 800d3be:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800d3c4:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800d3c6:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800d3c8:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800d3ca:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800d3cc:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800d3ce:	0a23      	lsrs	r3, r4, #8
 800d3d0:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800d3d2:	0c23      	lsrs	r3, r4, #16
 800d3d4:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800d3d6:	0e24      	lsrs	r4, r4, #24
 800d3d8:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800d3da:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800d3dc:	0a0b      	lsrs	r3, r1, #8
 800d3de:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800d3e0:	0c0b      	lsrs	r3, r1, #16
 800d3e2:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800d3e4:	0e09      	lsrs	r1, r1, #24
 800d3e6:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800d3e8:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800d3ea:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d3ee:	bc10      	pop	{r4}
 800d3f0:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d3f2:	2009      	movs	r0, #9
 800d3f4:	e7fb      	b.n	800d3ee <PrepareB0+0x3e>
	...

0800d3f8 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d80e      	bhi.n	800d41c <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800d3fe:	469c      	mov	ip, r3
 800d400:	4a07      	ldr	r2, [pc, #28]	; (800d420 <GetKeyAddrItem+0x28>)
 800d402:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800d406:	4282      	cmp	r2, r0
 800d408:	d002      	beq.n	800d410 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800d40a:	3301      	adds	r3, #1
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	e7f4      	b.n	800d3fa <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800d410:	4b03      	ldr	r3, [pc, #12]	; (800d420 <GetKeyAddrItem+0x28>)
 800d412:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800d416:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800d418:	2000      	movs	r0, #0
 800d41a:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800d41c:	200b      	movs	r0, #11
}
 800d41e:	4770      	bx	lr
 800d420:	20000100 	.word	0x20000100

0800d424 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800d424:	460b      	mov	r3, r1
 800d426:	2900      	cmp	r1, #0
 800d428:	d024      	beq.n	800d474 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800d42a:	3801      	subs	r0, #1
 800d42c:	2803      	cmp	r0, #3
 800d42e:	d823      	bhi.n	800d478 <GetLastFcntDown+0x54>
 800d430:	e8df f000 	tbb	[pc, r0]
 800d434:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800d438:	4a10      	ldr	r2, [pc, #64]	; (800d47c <GetLastFcntDown+0x58>)
 800d43a:	6812      	ldr	r2, [r2, #0]
 800d43c:	6911      	ldr	r1, [r2, #16]
 800d43e:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800d440:	6913      	ldr	r3, [r2, #16]
 800d442:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800d444:	2000      	movs	r0, #0
            break;
 800d446:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800d448:	4a0c      	ldr	r2, [pc, #48]	; (800d47c <GetLastFcntDown+0x58>)
 800d44a:	6812      	ldr	r2, [r2, #0]
 800d44c:	6951      	ldr	r1, [r2, #20]
 800d44e:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800d450:	6953      	ldr	r3, [r2, #20]
 800d452:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800d454:	2000      	movs	r0, #0
            break;
 800d456:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800d458:	4a08      	ldr	r2, [pc, #32]	; (800d47c <GetLastFcntDown+0x58>)
 800d45a:	6812      	ldr	r2, [r2, #0]
 800d45c:	6991      	ldr	r1, [r2, #24]
 800d45e:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800d460:	6993      	ldr	r3, [r2, #24]
 800d462:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800d464:	2000      	movs	r0, #0
            break;
 800d466:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800d468:	4a04      	ldr	r2, [pc, #16]	; (800d47c <GetLastFcntDown+0x58>)
 800d46a:	6812      	ldr	r2, [r2, #0]
 800d46c:	69d2      	ldr	r2, [r2, #28]
 800d46e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800d470:	2000      	movs	r0, #0
            break;
 800d472:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d474:	2009      	movs	r0, #9
 800d476:	4770      	bx	lr
    switch( fCntID )
 800d478:	2005      	movs	r0, #5
}
 800d47a:	4770      	bx	lr
 800d47c:	20000f40 	.word	0x20000f40

0800d480 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800d480:	b510      	push	{r4, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800d486:	2300      	movs	r3, #0
 800d488:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800d48a:	a901      	add	r1, sp, #4
 800d48c:	f7ff ffca 	bl	800d424 <GetLastFcntDown>
 800d490:	b948      	cbnz	r0, 800d4a6 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800d492:	9b01      	ldr	r3, [sp, #4]
 800d494:	42a3      	cmp	r3, r4
 800d496:	d309      	bcc.n	800d4ac <CheckFCntDown+0x2c>
 800d498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d49c:	d001      	beq.n	800d4a2 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800d49e:	2000      	movs	r0, #0
 800d4a0:	e002      	b.n	800d4a8 <CheckFCntDown+0x28>
        return true;
 800d4a2:	2001      	movs	r0, #1
 800d4a4:	e000      	b.n	800d4a8 <CheckFCntDown+0x28>
        return false;
 800d4a6:	2000      	movs	r0, #0
    }
}
 800d4a8:	b002      	add	sp, #8
 800d4aa:	bd10      	pop	{r4, pc}
        return true;
 800d4ac:	2001      	movs	r0, #1
 800d4ae:	e7fb      	b.n	800d4a8 <CheckFCntDown+0x28>

0800d4b0 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800d4b0:	3801      	subs	r0, #1
 800d4b2:	2803      	cmp	r0, #3
 800d4b4:	d812      	bhi.n	800d4dc <UpdateFCntDown+0x2c>
 800d4b6:	e8df f000 	tbb	[pc, r0]
 800d4ba:	0602      	.short	0x0602
 800d4bc:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800d4be:	4b08      	ldr	r3, [pc, #32]	; (800d4e0 <UpdateFCntDown+0x30>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	6119      	str	r1, [r3, #16]
            break;
 800d4c4:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800d4c6:	4b06      	ldr	r3, [pc, #24]	; (800d4e0 <UpdateFCntDown+0x30>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	6159      	str	r1, [r3, #20]
            break;
 800d4cc:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800d4ce:	4b04      	ldr	r3, [pc, #16]	; (800d4e0 <UpdateFCntDown+0x30>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6199      	str	r1, [r3, #24]
            break;
 800d4d4:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800d4d6:	4b02      	ldr	r3, [pc, #8]	; (800d4e0 <UpdateFCntDown+0x30>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	20000f40 	.word	0x20000f40

0800d4e4 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800d4e4:	4b0a      	ldr	r3, [pc, #40]	; (800d510 <ResetFCnts+0x2c>)
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d4ec:	f04f 31ff 	mov.w	r1, #4294967295
 800d4f0:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800d4f2:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800d4f4:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800d4f6:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	dd00      	ble.n	800d4fe <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800d4fc:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800d4fe:	1d99      	adds	r1, r3, #6
 800d500:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d504:	f04f 30ff 	mov.w	r0, #4294967295
 800d508:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d50a:	3301      	adds	r3, #1
 800d50c:	e7f4      	b.n	800d4f8 <ResetFCnts+0x14>
 800d50e:	bf00      	nop
 800d510:	20000f40 	.word	0x20000f40

0800d514 <ComputeCmacB0>:
{
 800d514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d518:	b088      	sub	sp, #32
 800d51a:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800d51c:	b1f0      	cbz	r0, 800d55c <ComputeCmacB0+0x48>
 800d51e:	460c      	mov	r4, r1
 800d520:	4615      	mov	r5, r2
 800d522:	461a      	mov	r2, r3
 800d524:	4680      	mov	r8, r0
 800d526:	b1de      	cbz	r6, 800d560 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d528:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d52c:	d81a      	bhi.n	800d564 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d52e:	af04      	add	r7, sp, #16
 800d530:	9702      	str	r7, [sp, #8]
 800d532:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d534:	9301      	str	r3, [sp, #4]
 800d536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800d53e:	4629      	mov	r1, r5
 800d540:	4620      	mov	r0, r4
 800d542:	f7ff ff35 	bl	800d3b0 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800d546:	9600      	str	r6, [sp, #0]
 800d548:	462b      	mov	r3, r5
 800d54a:	4622      	mov	r2, r4
 800d54c:	4641      	mov	r1, r8
 800d54e:	4638      	mov	r0, r7
 800d550:	f002 fcff 	bl	800ff52 <SecureElementComputeAesCmac>
 800d554:	b940      	cbnz	r0, 800d568 <ComputeCmacB0+0x54>
}
 800d556:	b008      	add	sp, #32
 800d558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d55c:	2009      	movs	r0, #9
 800d55e:	e7fa      	b.n	800d556 <ComputeCmacB0+0x42>
 800d560:	2009      	movs	r0, #9
 800d562:	e7f8      	b.n	800d556 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d564:	200d      	movs	r0, #13
 800d566:	e7f6      	b.n	800d556 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d568:	200e      	movs	r0, #14
 800d56a:	e7f4      	b.n	800d556 <ComputeCmacB0+0x42>

0800d56c <DeriveSessionKey10x>:
{
 800d56c:	b510      	push	{r4, lr}
 800d56e:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800d570:	2400      	movs	r4, #0
 800d572:	9400      	str	r4, [sp, #0]
 800d574:	9401      	str	r4, [sp, #4]
 800d576:	9402      	str	r4, [sp, #8]
 800d578:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800d57a:	2802      	cmp	r0, #2
 800d57c:	d003      	beq.n	800d586 <DeriveSessionKey10x+0x1a>
 800d57e:	2803      	cmp	r0, #3
 800d580:	d025      	beq.n	800d5ce <DeriveSessionKey10x+0x62>
 800d582:	200a      	movs	r0, #10
 800d584:	e021      	b.n	800d5ca <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800d586:	2401      	movs	r4, #1
 800d588:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800d58c:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800d590:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d594:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800d598:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800d59c:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800d5a0:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800d5a4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d5a8:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800d5ac:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800d5b0:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800d5b4:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800d5b8:	0a1b      	lsrs	r3, r3, #8
 800d5ba:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d5be:	4602      	mov	r2, r0
 800d5c0:	2101      	movs	r1, #1
 800d5c2:	4668      	mov	r0, sp
 800d5c4:	f002 fd64 	bl	8010090 <SecureElementDeriveAndStoreKey>
 800d5c8:	b928      	cbnz	r0, 800d5d6 <DeriveSessionKey10x+0x6a>
}
 800d5ca:	b004      	add	sp, #16
 800d5cc:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800d5ce:	2402      	movs	r4, #2
 800d5d0:	f88d 4000 	strb.w	r4, [sp]
            break;
 800d5d4:	e7da      	b.n	800d58c <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d5d6:	200e      	movs	r0, #14
 800d5d8:	e7f7      	b.n	800d5ca <DeriveSessionKey10x+0x5e>

0800d5da <PayloadEncrypt>:
{
 800d5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5de:	b088      	sub	sp, #32
 800d5e0:	4690      	mov	r8, r2
 800d5e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d052      	beq.n	800d68e <PayloadEncrypt+0xb4>
 800d5e8:	460d      	mov	r5, r1
 800d5ea:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800d5ec:	2600      	movs	r6, #0
 800d5ee:	9604      	str	r6, [sp, #16]
 800d5f0:	9605      	str	r6, [sp, #20]
 800d5f2:	9606      	str	r6, [sp, #24]
 800d5f4:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800d5f6:	9600      	str	r6, [sp, #0]
 800d5f8:	9601      	str	r6, [sp, #4]
 800d5fa:	9602      	str	r6, [sp, #8]
 800d5fc:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800d5fe:	2701      	movs	r7, #1
 800d600:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800d604:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800d608:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800d60c:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800d610:	0a19      	lsrs	r1, r3, #8
 800d612:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800d616:	0c19      	lsrs	r1, r3, #16
 800d618:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800d61c:	0e1b      	lsrs	r3, r3, #24
 800d61e:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800d622:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800d626:	0a13      	lsrs	r3, r2, #8
 800d628:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800d62c:	0c13      	lsrs	r3, r2, #16
 800d62e:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800d632:	0e12      	lsrs	r2, r2, #24
 800d634:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800d638:	e014      	b.n	800d664 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800d63a:	18f2      	adds	r2, r6, r3
 800d63c:	5ca0      	ldrb	r0, [r4, r2]
 800d63e:	f103 0120 	add.w	r1, r3, #32
 800d642:	4469      	add	r1, sp
 800d644:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800d648:	4048      	eors	r0, r1
 800d64a:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800d64c:	3301      	adds	r3, #1
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	462a      	mov	r2, r5
 800d652:	2d10      	cmp	r5, #16
 800d654:	bfa8      	it	ge
 800d656:	2210      	movge	r2, #16
 800d658:	4293      	cmp	r3, r2
 800d65a:	dbee      	blt.n	800d63a <PayloadEncrypt+0x60>
        size -= 16;
 800d65c:	3d10      	subs	r5, #16
 800d65e:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800d660:	3610      	adds	r6, #16
 800d662:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800d664:	2d00      	cmp	r5, #0
 800d666:	dd0e      	ble.n	800d686 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800d668:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800d66c:	3701      	adds	r7, #1
 800d66e:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800d670:	ab04      	add	r3, sp, #16
 800d672:	4642      	mov	r2, r8
 800d674:	2110      	movs	r1, #16
 800d676:	4668      	mov	r0, sp
 800d678:	f002 fc90 	bl	800ff9c <SecureElementAesEncrypt>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2800      	cmp	r0, #0
 800d680:	d0e6      	beq.n	800d650 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d682:	200e      	movs	r0, #14
 800d684:	e000      	b.n	800d688 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800d686:	2000      	movs	r0, #0
}
 800d688:	b008      	add	sp, #32
 800d68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d68e:	2009      	movs	r0, #9
 800d690:	e7fa      	b.n	800d688 <PayloadEncrypt+0xae>

0800d692 <VerifyCmacB0>:
    if( msg == 0 )
 800d692:	b370      	cbz	r0, 800d6f2 <VerifyCmacB0+0x60>
{
 800d694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d698:	b0c8      	sub	sp, #288	; 0x120
 800d69a:	460c      	mov	r4, r1
 800d69c:	4615      	mov	r5, r2
 800d69e:	461e      	mov	r6, r3
 800d6a0:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800d6a2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d6a6:	d826      	bhi.n	800d6f6 <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800d6a8:	af04      	add	r7, sp, #16
 800d6aa:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	4638      	mov	r0, r7
 800d6b2:	f002 fdbe 	bl	8010232 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d6b6:	9702      	str	r7, [sp, #8]
 800d6b8:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800d6ba:	9301      	str	r3, [sp, #4]
 800d6bc:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800d6c4:	4632      	mov	r2, r6
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f7ff fe71 	bl	800d3b0 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800d6ce:	4622      	mov	r2, r4
 800d6d0:	4641      	mov	r1, r8
 800d6d2:	a808      	add	r0, sp, #32
 800d6d4:	f002 fd95 	bl	8010202 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800d6d8:	f104 0110 	add.w	r1, r4, #16
 800d6dc:	462b      	mov	r3, r5
 800d6de:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800d6e0:	b289      	uxth	r1, r1
 800d6e2:	4638      	mov	r0, r7
 800d6e4:	f002 fc44 	bl	800ff70 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800d6e8:	b130      	cbz	r0, 800d6f8 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800d6ea:	2801      	cmp	r0, #1
 800d6ec:	d004      	beq.n	800d6f8 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d6ee:	200e      	movs	r0, #14
 800d6f0:	e002      	b.n	800d6f8 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d6f2:	2009      	movs	r0, #9
}
 800d6f4:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d6f6:	200d      	movs	r0, #13
}
 800d6f8:	b048      	add	sp, #288	; 0x120
 800d6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800d700 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800d700:	b188      	cbz	r0, 800d726 <LoRaMacCryptoInit+0x26>
{
 800d702:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800d704:	4c09      	ldr	r4, [pc, #36]	; (800d72c <LoRaMacCryptoInit+0x2c>)
 800d706:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800d708:	2228      	movs	r2, #40	; 0x28
 800d70a:	2100      	movs	r1, #0
 800d70c:	f002 fd91 	bl	8010232 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800d710:	6823      	ldr	r3, [r4, #0]
 800d712:	2201      	movs	r2, #1
 800d714:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800d716:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800d718:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800d71a:	2400      	movs	r4, #0
 800d71c:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800d71e:	f7ff fee1 	bl	800d4e4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800d722:	4620      	mov	r0, r4
}
 800d724:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800d726:	2008      	movs	r0, #8
}
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	20000f40 	.word	0x20000f40

0800d730 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800d730:	4b02      	ldr	r3, [pc, #8]	; (800d73c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800d736:	2000      	movs	r0, #0
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop
 800d73c:	20000f40 	.word	0x20000f40

0800d740 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800d740:	b130      	cbz	r0, 800d750 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800d742:	4b04      	ldr	r3, [pc, #16]	; (800d754 <LoRaMacCryptoGetFCntUp+0x14>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	3301      	adds	r3, #1
 800d74a:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800d74c:	2000      	movs	r0, #0
 800d74e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d750:	2009      	movs	r0, #9
}
 800d752:	4770      	bx	lr
 800d754:	20000f40 	.word	0x20000f40

0800d758 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800d758:	b530      	push	{r4, r5, lr}
 800d75a:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800d75c:	2300      	movs	r3, #0
 800d75e:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800d760:	b1f2      	cbz	r2, 800d7a0 <LoRaMacCryptoGetFCntDown+0x48>
 800d762:	460c      	mov	r4, r1
 800d764:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800d766:	a901      	add	r1, sp, #4
 800d768:	f7ff fe5c 	bl	800d424 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d76c:	b948      	cbnz	r0, 800d782 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800d76e:	9b01      	ldr	r3, [sp, #4]
 800d770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d774:	d007      	beq.n	800d786 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800d776:	b29a      	uxth	r2, r3
 800d778:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800d77a:	2a00      	cmp	r2, #0
 800d77c:	dd05      	ble.n	800d78a <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800d77e:	4413      	add	r3, r2
 800d780:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d782:	b003      	add	sp, #12
 800d784:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800d786:	602c      	str	r4, [r5, #0]
 800d788:	e7fb      	b.n	800d782 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800d78a:	b132      	cbz	r2, 800d79a <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800d78c:	0c1b      	lsrs	r3, r3, #16
 800d78e:	041b      	lsls	r3, r3, #16
 800d790:	4423      	add	r3, r4
 800d792:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d796:	602b      	str	r3, [r5, #0]
 800d798:	e7f3      	b.n	800d782 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800d79a:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800d79c:	2007      	movs	r0, #7
 800d79e:	e7f0      	b.n	800d782 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d7a0:	2009      	movs	r0, #9
 800d7a2:	e7ee      	b.n	800d782 <LoRaMacCryptoGetFCntDown+0x2a>

0800d7a4 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800d7a4:	4601      	mov	r1, r0
 800d7a6:	b908      	cbnz	r0, 800d7ac <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d7a8:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d7aa:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	dd01      	ble.n	800d7b6 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800d7b2:	2000      	movs	r0, #0
 800d7b4:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800d7b6:	4a06      	ldr	r2, [pc, #24]	; (800d7d0 <LoRaMacCryptoSetMulticastReference+0x2c>)
 800d7b8:	6812      	ldr	r2, [r2, #0]
 800d7ba:	202c      	movs	r0, #44	; 0x2c
 800d7bc:	fb00 1003 	mla	r0, r0, r3, r1
 800d7c0:	f103 0c06 	add.w	ip, r3, #6
 800d7c4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d7c8:	3204      	adds	r2, #4
 800d7ca:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	e7ee      	b.n	800d7ae <LoRaMacCryptoSetMulticastReference+0xa>
 800d7d0:	20000f40 	.word	0x20000f40

0800d7d4 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800d7d4:	b1d8      	cbz	r0, 800d80e <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800d7d6:	b510      	push	{r4, lr}
 800d7d8:	b082      	sub	sp, #8
 800d7da:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800d7dc:	4b0f      	ldr	r3, [pc, #60]	; (800d81c <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800d7de:	681a      	ldr	r2, [r3, #0]
 800d7e0:	8893      	ldrh	r3, [r2, #4]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800d7e8:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d7ea:	f000 fa2e 	bl	800dc4a <LoRaMacSerializerJoinRequest>
 800d7ee:	b980      	cbnz	r0, 800d812 <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800d7f0:	4623      	mov	r3, r4
 800d7f2:	f853 1b18 	ldr.w	r1, [r3], #24
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	2213      	movs	r2, #19
 800d7fc:	f002 fba9 	bl	800ff52 <SecureElementComputeAesCmac>
 800d800:	b950      	cbnz	r0, 800d818 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d802:	4620      	mov	r0, r4
 800d804:	f000 fa21 	bl	800dc4a <LoRaMacSerializerJoinRequest>
 800d808:	b120      	cbz	r0, 800d814 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d80a:	2010      	movs	r0, #16
 800d80c:	e002      	b.n	800d814 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d80e:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d810:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d812:	2010      	movs	r0, #16
}
 800d814:	b002      	add	sp, #8
 800d816:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d818:	200e      	movs	r0, #14
 800d81a:	e7fb      	b.n	800d814 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800d81c:	20000f40 	.word	0x20000f40

0800d820 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800d820:	2b00      	cmp	r3, #0
 800d822:	d036      	beq.n	800d892 <LoRaMacCryptoSecureMessage+0x72>
{
 800d824:	b530      	push	{r4, r5, lr}
 800d826:	b085      	sub	sp, #20
 800d828:	4604      	mov	r4, r0
 800d82a:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800d82c:	4b1d      	ldr	r3, [pc, #116]	; (800d8a4 <LoRaMacCryptoSecureMessage+0x84>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	4283      	cmp	r3, r0
 800d834:	d82f      	bhi.n	800d896 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800d836:	f895 2020 	ldrb.w	r2, [r5, #32]
 800d83a:	b342      	cbz	r2, 800d88e <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800d83c:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800d83e:	42a3      	cmp	r3, r4
 800d840:	d209      	bcs.n	800d856 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800d842:	9401      	str	r4, [sp, #4]
 800d844:	2300      	movs	r3, #0
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	68ab      	ldr	r3, [r5, #8]
 800d84a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800d84e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d850:	f7ff fec3 	bl	800d5da <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d854:	bb10      	cbnz	r0, 800d89c <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d856:	4628      	mov	r0, r5
 800d858:	f000 fa2d 	bl	800dcb6 <LoRaMacSerializerData>
 800d85c:	b9e8      	cbnz	r0, 800d89a <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800d85e:	7929      	ldrb	r1, [r5, #4]
 800d860:	3904      	subs	r1, #4
 800d862:	462b      	mov	r3, r5
 800d864:	f853 0b2c 	ldr.w	r0, [r3], #44
 800d868:	9303      	str	r3, [sp, #12]
 800d86a:	9402      	str	r4, [sp, #8]
 800d86c:	68ab      	ldr	r3, [r5, #8]
 800d86e:	9301      	str	r3, [sp, #4]
 800d870:	2300      	movs	r3, #0
 800d872:	9300      	str	r3, [sp, #0]
 800d874:	2202      	movs	r2, #2
 800d876:	b289      	uxth	r1, r1
 800d878:	f7ff fe4c 	bl	800d514 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d87c:	b970      	cbnz	r0, 800d89c <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d87e:	4628      	mov	r0, r5
 800d880:	f000 fa19 	bl	800dcb6 <LoRaMacSerializerData>
 800d884:	b960      	cbnz	r0, 800d8a0 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800d886:	4b07      	ldr	r3, [pc, #28]	; (800d8a4 <LoRaMacCryptoSecureMessage+0x84>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800d88c:	e006      	b.n	800d89c <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800d88e:	2202      	movs	r2, #2
 800d890:	e7d5      	b.n	800d83e <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d892:	2009      	movs	r0, #9
}
 800d894:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d896:	2006      	movs	r0, #6
 800d898:	e000      	b.n	800d89c <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d89a:	2010      	movs	r0, #16
}
 800d89c:	b005      	add	sp, #20
 800d89e:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d8a0:	2010      	movs	r0, #16
 800d8a2:	e7fb      	b.n	800d89c <LoRaMacCryptoSecureMessage+0x7c>
 800d8a4:	20000f40 	.word	0x20000f40

0800d8a8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800d8a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8ac:	b087      	sub	sp, #28
 800d8ae:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800d8b0:	2e00      	cmp	r6, #0
 800d8b2:	d049      	beq.n	800d948 <LoRaMacCryptoUnsecureMessage+0xa0>
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	4688      	mov	r8, r1
 800d8b8:	4617      	mov	r7, r2
 800d8ba:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800d8bc:	4619      	mov	r1, r3
 800d8be:	4610      	mov	r0, r2
 800d8c0:	f7ff fdde 	bl	800d480 <CheckFCntDown>
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	d041      	beq.n	800d94c <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	f000 f95f 	bl	800db8c <LoRaMacParserData>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d141      	bne.n	800d956 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800d8d2:	a905      	add	r1, sp, #20
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f7ff fd8f 	bl	800d3f8 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d8da:	4605      	mov	r5, r0
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	d136      	bne.n	800d94e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800d8e0:	9b05      	ldr	r3, [sp, #20]
 800d8e2:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800d8e6:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800d8e8:	68b3      	ldr	r3, [r6, #8]
 800d8ea:	4543      	cmp	r3, r8
 800d8ec:	d135      	bne.n	800d95a <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800d8ee:	7b33      	ldrb	r3, [r6, #12]
 800d8f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800d8f4:	491a      	ldr	r1, [pc, #104]	; (800d960 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800d8f6:	6809      	ldr	r1, [r1, #0]
 800d8f8:	7889      	ldrb	r1, [r1, #2]
 800d8fa:	b901      	cbnz	r1, 800d8fe <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800d8fc:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800d8fe:	7931      	ldrb	r1, [r6, #4]
 800d900:	3904      	subs	r1, #4
 800d902:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800d904:	9003      	str	r0, [sp, #12]
 800d906:	9402      	str	r4, [sp, #8]
 800d908:	f8cd 8004 	str.w	r8, [sp, #4]
 800d90c:	2001      	movs	r0, #1
 800d90e:	9000      	str	r0, [sp, #0]
 800d910:	b289      	uxth	r1, r1
 800d912:	6830      	ldr	r0, [r6, #0]
 800d914:	f7ff febd 	bl	800d692 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d918:	4605      	mov	r5, r0
 800d91a:	b9c0      	cbnz	r0, 800d94e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800d91c:	f896 3020 	ldrb.w	r3, [r6, #32]
 800d920:	b90b      	cbnz	r3, 800d926 <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800d922:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800d926:	9401      	str	r4, [sp, #4]
 800d928:	2301      	movs	r3, #1
 800d92a:	9300      	str	r3, [sp, #0]
 800d92c:	4643      	mov	r3, r8
 800d92e:	464a      	mov	r2, r9
 800d930:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800d934:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800d936:	f7ff fe50 	bl	800d5da <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d93a:	4605      	mov	r5, r0
 800d93c:	b938      	cbnz	r0, 800d94e <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800d93e:	4621      	mov	r1, r4
 800d940:	4638      	mov	r0, r7
 800d942:	f7ff fdb5 	bl	800d4b0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800d946:	e002      	b.n	800d94e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d948:	2509      	movs	r5, #9
 800d94a:	e000      	b.n	800d94e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d94c:	2506      	movs	r5, #6
}
 800d94e:	4628      	mov	r0, r5
 800d950:	b007      	add	sp, #28
 800d952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d956:	250f      	movs	r5, #15
 800d958:	e7f9      	b.n	800d94e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800d95a:	2502      	movs	r5, #2
 800d95c:	e7f7      	b.n	800d94e <LoRaMacCryptoUnsecureMessage+0xa6>
 800d95e:	bf00      	nop
 800d960:	20000f40 	.word	0x20000f40

0800d964 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800d964:	b9b1      	cbnz	r1, 800d994 <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800d966:	b500      	push	{lr}
 800d968:	b085      	sub	sp, #20
 800d96a:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800d96c:	2300      	movs	r3, #0
 800d96e:	9300      	str	r3, [sp, #0]
 800d970:	9301      	str	r3, [sp, #4]
 800d972:	9302      	str	r3, [sp, #8]
 800d974:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800d976:	2801      	cmp	r0, #1
 800d978:	d008      	beq.n	800d98c <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800d97a:	2204      	movs	r2, #4
 800d97c:	4661      	mov	r1, ip
 800d97e:	4668      	mov	r0, sp
 800d980:	f002 fb86 	bl	8010090 <SecureElementDeriveAndStoreKey>
 800d984:	b940      	cbnz	r0, 800d998 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d986:	b005      	add	sp, #20
 800d988:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800d98c:	2320      	movs	r3, #32
 800d98e:	f88d 3000 	strb.w	r3, [sp]
 800d992:	e7f2      	b.n	800d97a <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d994:	200a      	movs	r0, #10
}
 800d996:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d998:	200e      	movs	r0, #14
 800d99a:	e7f4      	b.n	800d986 <LoRaMacCryptoDeriveMcRootKey+0x22>

0800d99c <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800d99c:	2804      	cmp	r0, #4
 800d99e:	d001      	beq.n	800d9a4 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800d9a0:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d9a2:	4770      	bx	lr
{
 800d9a4:	b500      	push	{lr}
 800d9a6:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	9300      	str	r3, [sp, #0]
 800d9ac:	9301      	str	r3, [sp, #4]
 800d9ae:	9302      	str	r3, [sp, #8]
 800d9b0:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800d9b2:	227f      	movs	r2, #127	; 0x7f
 800d9b4:	4601      	mov	r1, r0
 800d9b6:	4668      	mov	r0, sp
 800d9b8:	f002 fb6a 	bl	8010090 <SecureElementDeriveAndStoreKey>
 800d9bc:	b910      	cbnz	r0, 800d9c4 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800d9be:	b005      	add	sp, #20
 800d9c0:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d9c4:	200e      	movs	r0, #14
 800d9c6:	e7fa      	b.n	800d9be <LoRaMacCryptoDeriveMcKEKey+0x22>

0800d9c8 <LoRaMacCryptoSetKey>:
{
 800d9c8:	b510      	push	{r4, lr}
 800d9ca:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800d9cc:	f002 fb1e 	bl	801000c <SecureElementSetKey>
 800d9d0:	b978      	cbnz	r0, 800d9f2 <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800d9d2:	b104      	cbz	r4, 800d9d6 <LoRaMacCryptoSetKey+0xe>
}
 800d9d4:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800d9d6:	4b09      	ldr	r3, [pc, #36]	; (800d9fc <LoRaMacCryptoSetKey+0x34>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4621      	mov	r1, r4
 800d9dc:	7898      	ldrb	r0, [r3, #2]
 800d9de:	f7ff ffc1 	bl	800d964 <LoRaMacCryptoDeriveMcRootKey>
 800d9e2:	b940      	cbnz	r0, 800d9f6 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800d9e4:	2004      	movs	r0, #4
 800d9e6:	f7ff ffd9 	bl	800d99c <LoRaMacCryptoDeriveMcKEKey>
 800d9ea:	2800      	cmp	r0, #0
 800d9ec:	d0f2      	beq.n	800d9d4 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d9ee:	200e      	movs	r0, #14
 800d9f0:	e7f0      	b.n	800d9d4 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d9f2:	200e      	movs	r0, #14
 800d9f4:	e7ee      	b.n	800d9d4 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d9f6:	200e      	movs	r0, #14
 800d9f8:	e7ec      	b.n	800d9d4 <LoRaMacCryptoSetKey+0xc>
 800d9fa:	bf00      	nop
 800d9fc:	20000f40 	.word	0x20000f40

0800da00 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800da00:	2a00      	cmp	r2, #0
 800da02:	d064      	beq.n	800dace <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800da04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da06:	b08f      	sub	sp, #60	; 0x3c
 800da08:	4607      	mov	r7, r0
 800da0a:	460d      	mov	r5, r1
 800da0c:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800da0e:	2900      	cmp	r1, #0
 800da10:	d05f      	beq.n	800dad2 <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800da12:	2600      	movs	r6, #0
 800da14:	9605      	str	r6, [sp, #20]
 800da16:	221d      	movs	r2, #29
 800da18:	4631      	mov	r1, r6
 800da1a:	a806      	add	r0, sp, #24
 800da1c:	f005 f872 	bl	8012b04 <memset>
    uint8_t versionMinor         = 0;
 800da20:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800da24:	4b2f      	ldr	r3, [pc, #188]	; (800dae4 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800da2a:	f10d 0313 	add.w	r3, sp, #19
 800da2e:	9302      	str	r3, [sp, #8]
 800da30:	ab05      	add	r3, sp, #20
 800da32:	9301      	str	r3, [sp, #4]
 800da34:	7923      	ldrb	r3, [r4, #4]
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	6823      	ldr	r3, [r4, #0]
 800da3a:	4632      	mov	r2, r6
 800da3c:	4629      	mov	r1, r5
 800da3e:	4638      	mov	r0, r7
 800da40:	f002 fb46 	bl	80100d0 <SecureElementProcessJoinAccept>
 800da44:	2800      	cmp	r0, #0
 800da46:	d146      	bne.n	800dad6 <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800da48:	7922      	ldrb	r2, [r4, #4]
 800da4a:	a905      	add	r1, sp, #20
 800da4c:	6820      	ldr	r0, [r4, #0]
 800da4e:	f002 fbd8 	bl	8010202 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800da52:	4620      	mov	r0, r4
 800da54:	f000 f848 	bl	800dae8 <LoRaMacParserJoinAccept>
 800da58:	2800      	cmp	r0, #0
 800da5a:	d13f      	bne.n	800dadc <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800da5c:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800da5e:	79e3      	ldrb	r3, [r4, #7]
 800da60:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800da64:	7a23      	ldrb	r3, [r4, #8]
 800da66:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800da6a:	4b1e      	ldr	r3, [pc, #120]	; (800dae4 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	689a      	ldr	r2, [r3, #8]
 800da70:	42aa      	cmp	r2, r5
 800da72:	d035      	beq.n	800dae0 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800da74:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800da76:	2100      	movs	r1, #0
 800da78:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800da7c:	f7ff ff72 	bl	800d964 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800da80:	bb50      	cbnz	r0, 800dad8 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800da82:	2004      	movs	r0, #4
 800da84:	f7ff ff8a 	bl	800d99c <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800da88:	bb30      	cbnz	r0, 800dad8 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800da8a:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800da8c:	7aa2      	ldrb	r2, [r4, #10]
 800da8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800da92:	7ae4      	ldrb	r4, [r4, #11]
 800da94:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800da98:	4633      	mov	r3, r6
 800da9a:	4622      	mov	r2, r4
 800da9c:	4629      	mov	r1, r5
 800da9e:	2003      	movs	r0, #3
 800daa0:	f7ff fd64 	bl	800d56c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800daa4:	b9c0      	cbnz	r0, 800dad8 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800daa6:	4633      	mov	r3, r6
 800daa8:	4622      	mov	r2, r4
 800daaa:	4629      	mov	r1, r5
 800daac:	2002      	movs	r0, #2
 800daae:	f7ff fd5d 	bl	800d56c <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800dab2:	b988      	cbnz	r0, 800dad8 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800dab4:	4b0b      	ldr	r3, [pc, #44]	; (800dae4 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800dabc:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800dabe:	2200      	movs	r2, #0
 800dac0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800dac2:	f04f 32ff 	mov.w	r2, #4294967295
 800dac6:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800dac8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800daca:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800dacc:	e004      	b.n	800dad8 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dace:	2009      	movs	r0, #9
}
 800dad0:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800dad2:	2009      	movs	r0, #9
 800dad4:	e000      	b.n	800dad8 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800dad6:	200e      	movs	r0, #14
}
 800dad8:	b00f      	add	sp, #60	; 0x3c
 800dada:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800dadc:	200f      	movs	r0, #15
 800dade:	e7fb      	b.n	800dad8 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800dae0:	2003      	movs	r0, #3
 800dae2:	e7f9      	b.n	800dad8 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800dae4:	20000f40 	.word	0x20000f40

0800dae8 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dae8:	2800      	cmp	r0, #0
 800daea:	d049      	beq.n	800db80 <LoRaMacParserJoinAccept+0x98>
{
 800daec:	b510      	push	{r4, lr}
 800daee:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800daf0:	6801      	ldr	r1, [r0, #0]
 800daf2:	2900      	cmp	r1, #0
 800daf4:	d046      	beq.n	800db84 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800daf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dafa:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800dafc:	2203      	movs	r2, #3
 800dafe:	3006      	adds	r0, #6
 800db00:	f002 fb7f 	bl	8010202 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800db04:	4620      	mov	r0, r4
 800db06:	f850 1b09 	ldr.w	r1, [r0], #9
 800db0a:	2203      	movs	r2, #3
 800db0c:	3104      	adds	r1, #4
 800db0e:	f002 fb78 	bl	8010202 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800db12:	6821      	ldr	r1, [r4, #0]
 800db14:	79cb      	ldrb	r3, [r1, #7]
 800db16:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800db18:	7a0a      	ldrb	r2, [r1, #8]
 800db1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800db1e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800db20:	7a4a      	ldrb	r2, [r1, #9]
 800db22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db26:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800db28:	7a8a      	ldrb	r2, [r1, #10]
 800db2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800db2e:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800db30:	7acb      	ldrb	r3, [r1, #11]
 800db32:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800db34:	7b0b      	ldrb	r3, [r1, #12]
 800db36:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800db38:	7923      	ldrb	r3, [r4, #4]
 800db3a:	2b21      	cmp	r3, #33	; 0x21
 800db3c:	d018      	beq.n	800db70 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800db3e:	2b11      	cmp	r3, #17
 800db40:	dc22      	bgt.n	800db88 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800db42:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800db44:	6821      	ldr	r1, [r4, #0]
 800db46:	f102 0c01 	add.w	ip, r2, #1
 800db4a:	5c8b      	ldrb	r3, [r1, r2]
 800db4c:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800db4e:	1c90      	adds	r0, r2, #2
 800db50:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800db54:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800db58:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800db5a:	3203      	adds	r2, #3
 800db5c:	5c08      	ldrb	r0, [r1, r0]
 800db5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800db62:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800db64:	5c8a      	ldrb	r2, [r1, r2]
 800db66:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800db6a:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800db6c:	2000      	movs	r0, #0
}
 800db6e:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800db70:	2210      	movs	r2, #16
 800db72:	310d      	adds	r1, #13
 800db74:	f104 0012 	add.w	r0, r4, #18
 800db78:	f002 fb43 	bl	8010202 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800db7c:	221d      	movs	r2, #29
 800db7e:	e7e1      	b.n	800db44 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800db80:	2002      	movs	r0, #2
}
 800db82:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800db84:	2002      	movs	r0, #2
 800db86:	e7f2      	b.n	800db6e <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800db88:	2001      	movs	r0, #1
 800db8a:	e7f0      	b.n	800db6e <LoRaMacParserJoinAccept+0x86>

0800db8c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800db8c:	2800      	cmp	r0, #0
 800db8e:	d058      	beq.n	800dc42 <LoRaMacParserData+0xb6>
{
 800db90:	b510      	push	{r4, lr}
 800db92:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800db94:	6801      	ldr	r1, [r0, #0]
 800db96:	2900      	cmp	r1, #0
 800db98:	d055      	beq.n	800dc46 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800db9a:	780b      	ldrb	r3, [r1, #0]
 800db9c:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800db9e:	784b      	ldrb	r3, [r1, #1]
 800dba0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800dba2:	788a      	ldrb	r2, [r1, #2]
 800dba4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dba8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800dbaa:	78ca      	ldrb	r2, [r1, #3]
 800dbac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbb0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800dbb2:	790a      	ldrb	r2, [r1, #4]
 800dbb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dbb8:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800dbba:	794b      	ldrb	r3, [r1, #5]
 800dbbc:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800dbbe:	798b      	ldrb	r3, [r1, #6]
 800dbc0:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800dbc2:	79ca      	ldrb	r2, [r1, #7]
 800dbc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800dbc8:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800dbca:	7b02      	ldrb	r2, [r0, #12]
 800dbcc:	f002 020f 	and.w	r2, r2, #15
 800dbd0:	3108      	adds	r1, #8
 800dbd2:	3010      	adds	r0, #16
 800dbd4:	f002 fb15 	bl	8010202 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800dbd8:	7b23      	ldrb	r3, [r4, #12]
 800dbda:	f003 030f 	and.w	r3, r3, #15
 800dbde:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800dbe8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800dbec:	7922      	ldrb	r2, [r4, #4]
 800dbee:	1a11      	subs	r1, r2, r0
 800dbf0:	2904      	cmp	r1, #4
 800dbf2:	dc16      	bgt.n	800dc22 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800dbf4:	6822      	ldr	r2, [r4, #0]
 800dbf6:	7923      	ldrb	r3, [r4, #4]
 800dbf8:	441a      	add	r2, r3
 800dbfa:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800dbfe:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800dc00:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800dc04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800dc08:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800dc0a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800dc0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800dc12:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800dc14:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800dc18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800dc1c:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800dc1e:	2000      	movs	r0, #0
}
 800dc20:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800dc22:	6821      	ldr	r1, [r4, #0]
 800dc24:	3309      	adds	r3, #9
 800dc26:	5c08      	ldrb	r0, [r1, r0]
 800dc28:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800dc2c:	1ad2      	subs	r2, r2, r3
 800dc2e:	b2d2      	uxtb	r2, r2
 800dc30:	3a04      	subs	r2, #4
 800dc32:	b2d2      	uxtb	r2, r2
 800dc34:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800dc38:	4419      	add	r1, r3
 800dc3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dc3c:	f002 fae1 	bl	8010202 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800dc40:	e7d8      	b.n	800dbf4 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800dc42:	2002      	movs	r0, #2
}
 800dc44:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800dc46:	2002      	movs	r0, #2
 800dc48:	e7ea      	b.n	800dc20 <LoRaMacParserData+0x94>

0800dc4a <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dc4a:	b370      	cbz	r0, 800dcaa <LoRaMacSerializerJoinRequest+0x60>
{
 800dc4c:	b510      	push	{r4, lr}
 800dc4e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dc50:	6803      	ldr	r3, [r0, #0]
 800dc52:	b363      	cbz	r3, 800dcae <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800dc54:	7902      	ldrb	r2, [r0, #4]
 800dc56:	2a16      	cmp	r2, #22
 800dc58:	d92b      	bls.n	800dcb2 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800dc5a:	7942      	ldrb	r2, [r0, #5]
 800dc5c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800dc5e:	4601      	mov	r1, r0
 800dc60:	f851 0b06 	ldr.w	r0, [r1], #6
 800dc64:	2208      	movs	r2, #8
 800dc66:	3001      	adds	r0, #1
 800dc68:	f002 fad6 	bl	8010218 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	f851 0b0e 	ldr.w	r0, [r1], #14
 800dc72:	2208      	movs	r2, #8
 800dc74:	3009      	adds	r0, #9
 800dc76:	f002 facf 	bl	8010218 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800dc7a:	8ae2      	ldrh	r2, [r4, #22]
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800dc80:	8ae3      	ldrh	r3, [r4, #22]
 800dc82:	6822      	ldr	r2, [r4, #0]
 800dc84:	0a1b      	lsrs	r3, r3, #8
 800dc86:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800dc88:	69a2      	ldr	r2, [r4, #24]
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800dc8e:	69a3      	ldr	r3, [r4, #24]
 800dc90:	0a1b      	lsrs	r3, r3, #8
 800dc92:	6822      	ldr	r2, [r4, #0]
 800dc94:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800dc96:	8b62      	ldrh	r2, [r4, #26]
 800dc98:	6823      	ldr	r3, [r4, #0]
 800dc9a:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800dc9c:	7ee2      	ldrb	r2, [r4, #27]
 800dc9e:	6823      	ldr	r3, [r4, #0]
 800dca0:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800dca2:	2317      	movs	r3, #23
 800dca4:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800dca6:	2000      	movs	r0, #0
}
 800dca8:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800dcaa:	2001      	movs	r0, #1
}
 800dcac:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800dcae:	2001      	movs	r0, #1
 800dcb0:	e7fa      	b.n	800dca8 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800dcb2:	2002      	movs	r0, #2
 800dcb4:	e7f8      	b.n	800dca8 <LoRaMacSerializerJoinRequest+0x5e>

0800dcb6 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	d066      	beq.n	800dd88 <LoRaMacSerializerData+0xd2>
{
 800dcba:	b538      	push	{r3, r4, r5, lr}
 800dcbc:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800dcbe:	6801      	ldr	r1, [r0, #0]
 800dcc0:	2900      	cmp	r1, #0
 800dcc2:	d063      	beq.n	800dd8c <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800dcc4:	7b02      	ldrb	r2, [r0, #12]
 800dcc6:	f002 020f 	and.w	r2, r2, #15
 800dcca:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800dcce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dcd2:	b10b      	cbz	r3, 800dcd8 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800dcd4:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800dcd8:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800dcda:	3304      	adds	r3, #4
 800dcdc:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800dcde:	7922      	ldrb	r2, [r4, #4]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	d355      	bcc.n	800dd90 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800dce4:	7963      	ldrb	r3, [r4, #5]
 800dce6:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800dce8:	68a2      	ldr	r2, [r4, #8]
 800dcea:	6823      	ldr	r3, [r4, #0]
 800dcec:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800dcee:	68a3      	ldr	r3, [r4, #8]
 800dcf0:	0a1b      	lsrs	r3, r3, #8
 800dcf2:	6822      	ldr	r2, [r4, #0]
 800dcf4:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800dcf6:	8962      	ldrh	r2, [r4, #10]
 800dcf8:	6823      	ldr	r3, [r4, #0]
 800dcfa:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800dcfc:	7ae2      	ldrb	r2, [r4, #11]
 800dcfe:	6823      	ldr	r3, [r4, #0]
 800dd00:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800dd02:	6823      	ldr	r3, [r4, #0]
 800dd04:	7b22      	ldrb	r2, [r4, #12]
 800dd06:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800dd08:	89e2      	ldrh	r2, [r4, #14]
 800dd0a:	6823      	ldr	r3, [r4, #0]
 800dd0c:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800dd0e:	89e3      	ldrh	r3, [r4, #14]
 800dd10:	6822      	ldr	r2, [r4, #0]
 800dd12:	0a1b      	lsrs	r3, r3, #8
 800dd14:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800dd16:	4621      	mov	r1, r4
 800dd18:	f851 0b10 	ldr.w	r0, [r1], #16
 800dd1c:	7b22      	ldrb	r2, [r4, #12]
 800dd1e:	f002 020f 	and.w	r2, r2, #15
 800dd22:	3008      	adds	r0, #8
 800dd24:	f002 fa6d 	bl	8010202 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800dd28:	7b23      	ldrb	r3, [r4, #12]
 800dd2a:	f003 030f 	and.w	r3, r3, #15
 800dd2e:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800dd32:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800dd36:	b12a      	cbz	r2, 800dd44 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800dd38:	6822      	ldr	r2, [r4, #0]
 800dd3a:	f894 1020 	ldrb.w	r1, [r4, #32]
 800dd3e:	5551      	strb	r1, [r2, r5]
 800dd40:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800dd44:	6820      	ldr	r0, [r4, #0]
 800dd46:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800dd4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dd4c:	4428      	add	r0, r5
 800dd4e:	f002 fa58 	bl	8010202 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800dd52:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800dd56:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800dd58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800dd5a:	6821      	ldr	r1, [r4, #0]
 800dd5c:	1c5a      	adds	r2, r3, #1
 800dd5e:	b292      	uxth	r2, r2
 800dd60:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800dd62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800dd64:	0a08      	lsrs	r0, r1, #8
 800dd66:	6825      	ldr	r5, [r4, #0]
 800dd68:	1c99      	adds	r1, r3, #2
 800dd6a:	b289      	uxth	r1, r1
 800dd6c:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800dd6e:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800dd70:	6820      	ldr	r0, [r4, #0]
 800dd72:	1cda      	adds	r2, r3, #3
 800dd74:	b292      	uxth	r2, r2
 800dd76:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800dd78:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800dd7c:	6821      	ldr	r1, [r4, #0]
 800dd7e:	3304      	adds	r3, #4
 800dd80:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800dd82:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800dd84:	2000      	movs	r0, #0
}
 800dd86:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800dd88:	2001      	movs	r0, #1
}
 800dd8a:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800dd8c:	2001      	movs	r0, #1
 800dd8e:	e7fa      	b.n	800dd86 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800dd90:	2002      	movs	r0, #2
 800dd92:	e7f8      	b.n	800dd86 <LoRaMacSerializerData+0xd0>

0800dd94 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800dd94:	4b02      	ldr	r3, [pc, #8]	; (800dda0 <NvmDataMgmtEvent+0xc>)
 800dd96:	881a      	ldrh	r2, [r3, #0]
 800dd98:	4310      	orrs	r0, r2
 800dd9a:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800dd9c:	4770      	bx	lr
 800dd9e:	bf00      	nop
 800dda0:	20000f44 	.word	0x20000f44

0800dda4 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800dda4:	b508      	push	{r3, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800dda6:	4b06      	ldr	r3, [pc, #24]	; (800ddc0 <NvmDataMgmtStoreBegin+0x1c>)
 800dda8:	881b      	ldrh	r3, [r3, #0]
 800ddaa:	b11b      	cbz	r3, 800ddb4 <NvmDataMgmtStoreBegin+0x10>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800ddac:	f7fc fe76 	bl	800aa9c <LoRaMacStop>
 800ddb0:	b918      	cbnz	r0, 800ddba <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ddb2:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800ddb4:	f06f 0001 	mvn.w	r0, #1
 800ddb8:	e7fb      	b.n	800ddb2 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800ddba:	f06f 0002 	mvn.w	r0, #2
 800ddbe:	e7f8      	b.n	800ddb2 <NvmDataMgmtStoreBegin+0xe>
 800ddc0:	20000f44 	.word	0x20000f44

0800ddc4 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800ddc4:	b510      	push	{r4, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800ddc6:	2400      	movs	r4, #0
 800ddc8:	4b02      	ldr	r3, [pc, #8]	; (800ddd4 <NvmDataMgmtStoreEnd+0x10>)
 800ddca:	801c      	strh	r4, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800ddcc:	f7fc fe5e 	bl	800aa8c <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	bd10      	pop	{r4, pc}
 800ddd4:	20000f44 	.word	0x20000f44

0800ddd8 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800ddd8:	2805      	cmp	r0, #5
 800ddda:	d001      	beq.n	800dde0 <RegionIsActive+0x8>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800dddc:	2000      	movs	r0, #0
        }
    }
}
 800ddde:	4770      	bx	lr
        EU868_IS_ACTIVE( );
 800dde0:	2001      	movs	r0, #1
 800dde2:	4770      	bx	lr

0800dde4 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800dde4:	b500      	push	{lr}
 800dde6:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 800dde8:	2300      	movs	r3, #0
 800ddea:	9300      	str	r3, [sp, #0]
    switch( region )
 800ddec:	2805      	cmp	r0, #5
 800ddee:	d005      	beq.n	800ddfc <RegionGetPhyParam+0x18>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800ddf0:	9b00      	ldr	r3, [sp, #0]
 800ddf2:	9301      	str	r3, [sp, #4]
        }
    }
}
 800ddf4:	9801      	ldr	r0, [sp, #4]
 800ddf6:	b003      	add	sp, #12
 800ddf8:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_GET_PHY_PARAM( );
 800ddfc:	4608      	mov	r0, r1
 800ddfe:	f000 fd59 	bl	800e8b4 <RegionEU868GetPhyParam>
 800de02:	9001      	str	r0, [sp, #4]
 800de04:	e7f6      	b.n	800ddf4 <RegionGetPhyParam+0x10>

0800de06 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 800de06:	2805      	cmp	r0, #5
 800de08:	d000      	beq.n	800de0c <RegionSetBandTxDone+0x6>
 800de0a:	4770      	bx	lr
{
 800de0c:	b508      	push	{r3, lr}
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 800de0e:	4608      	mov	r0, r1
 800de10:	f000 fe0c 	bl	800ea2c <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800de14:	bd08      	pop	{r3, pc}

0800de16 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 800de16:	2805      	cmp	r0, #5
 800de18:	d000      	beq.n	800de1c <RegionInitDefaults+0x6>
 800de1a:	4770      	bx	lr
{
 800de1c:	b508      	push	{r3, lr}
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 800de1e:	4608      	mov	r0, r1
 800de20:	f000 fe22 	bl	800ea68 <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 800de24:	bd08      	pop	{r3, pc}

0800de26 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 800de26:	2805      	cmp	r0, #5
 800de28:	d001      	beq.n	800de2e <RegionVerify+0x8>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800de2a:	2000      	movs	r0, #0
        }
    }
}
 800de2c:	4770      	bx	lr
{
 800de2e:	b508      	push	{r3, lr}
 800de30:	460b      	mov	r3, r1
        EU868_VERIFY( );
 800de32:	4611      	mov	r1, r2
 800de34:	4618      	mov	r0, r3
 800de36:	f000 fe83 	bl	800eb40 <RegionEU868Verify>
}
 800de3a:	bd08      	pop	{r3, pc}

0800de3c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 800de3c:	2805      	cmp	r0, #5
 800de3e:	d000      	beq.n	800de42 <RegionApplyCFList+0x6>
 800de40:	4770      	bx	lr
{
 800de42:	b508      	push	{r3, lr}
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 800de44:	4608      	mov	r0, r1
 800de46:	f001 fa49 	bl	800f2dc <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800de4a:	bd08      	pop	{r3, pc}

0800de4c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 800de4c:	2805      	cmp	r0, #5
 800de4e:	d001      	beq.n	800de54 <RegionChanMaskSet+0x8>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800de50:	2000      	movs	r0, #0
        }
    }
}
 800de52:	4770      	bx	lr
{
 800de54:	b508      	push	{r3, lr}
        EU868_CHAN_MASK_SET( );
 800de56:	4608      	mov	r0, r1
 800de58:	f000 feb8 	bl	800ebcc <RegionEU868ChanMaskSet>
}
 800de5c:	bd08      	pop	{r3, pc}

0800de5e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 800de5e:	2805      	cmp	r0, #5
 800de60:	d000      	beq.n	800de64 <RegionComputeRxWindowParameters+0x6>
 800de62:	4770      	bx	lr
{
 800de64:	b508      	push	{r3, lr}
 800de66:	468c      	mov	ip, r1
 800de68:	4611      	mov	r1, r2
 800de6a:	461a      	mov	r2, r3
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800de6c:	9b02      	ldr	r3, [sp, #8]
 800de6e:	4660      	mov	r0, ip
 800de70:	f000 feca 	bl	800ec08 <RegionEU868ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800de74:	bd08      	pop	{r3, pc}

0800de76 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 800de76:	2805      	cmp	r0, #5
 800de78:	d001      	beq.n	800de7e <RegionRxConfig+0x8>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800de7a:	2000      	movs	r0, #0
        }
    }
}
 800de7c:	4770      	bx	lr
{
 800de7e:	b508      	push	{r3, lr}
 800de80:	460b      	mov	r3, r1
        EU868_RX_CONFIG( );
 800de82:	4611      	mov	r1, r2
 800de84:	4618      	mov	r0, r3
 800de86:	f000 fef5 	bl	800ec74 <RegionEU868RxConfig>
}
 800de8a:	bd08      	pop	{r3, pc}

0800de8c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 800de8c:	2805      	cmp	r0, #5
 800de8e:	d001      	beq.n	800de94 <RegionTxConfig+0x8>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800de90:	2000      	movs	r0, #0
        }
    }
}
 800de92:	4770      	bx	lr
{
 800de94:	b508      	push	{r3, lr}
 800de96:	468c      	mov	ip, r1
 800de98:	4611      	mov	r1, r2
        EU868_TX_CONFIG( );
 800de9a:	461a      	mov	r2, r3
 800de9c:	4660      	mov	r0, ip
 800de9e:	f000 ff6d 	bl	800ed7c <RegionEU868TxConfig>
}
 800dea2:	bd08      	pop	{r3, pc}

0800dea4 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 800dea4:	2805      	cmp	r0, #5
 800dea6:	d001      	beq.n	800deac <RegionLinkAdrReq+0x8>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800dea8:	2000      	movs	r0, #0
        }
    }
}
 800deaa:	4770      	bx	lr
{
 800deac:	b500      	push	{lr}
 800deae:	b083      	sub	sp, #12
 800deb0:	468c      	mov	ip, r1
 800deb2:	4611      	mov	r1, r2
 800deb4:	461a      	mov	r2, r3
        EU868_LINK_ADR_REQ( );
 800deb6:	9b05      	ldr	r3, [sp, #20]
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	9b04      	ldr	r3, [sp, #16]
 800debc:	4660      	mov	r0, ip
 800debe:	f000 fff5 	bl	800eeac <RegionEU868LinkAdrReq>
}
 800dec2:	b003      	add	sp, #12
 800dec4:	f85d fb04 	ldr.w	pc, [sp], #4

0800dec8 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 800dec8:	2805      	cmp	r0, #5
 800deca:	d001      	beq.n	800ded0 <RegionRxParamSetupReq+0x8>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800decc:	2000      	movs	r0, #0
        }
    }
}
 800dece:	4770      	bx	lr
{
 800ded0:	b508      	push	{r3, lr}
        EU868_RX_PARAM_SETUP_REQ( );
 800ded2:	4608      	mov	r0, r1
 800ded4:	f001 f8ae 	bl	800f034 <RegionEU868RxParamSetupReq>
}
 800ded8:	bd08      	pop	{r3, pc}

0800deda <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 800deda:	2805      	cmp	r0, #5
 800dedc:	d001      	beq.n	800dee2 <RegionNewChannelReq+0x8>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800dede:	2000      	movs	r0, #0
        }
    }
}
 800dee0:	4770      	bx	lr
{
 800dee2:	b508      	push	{r3, lr}
        EU868_NEW_CHANNEL_REQ( );
 800dee4:	4608      	mov	r0, r1
 800dee6:	f001 fa3a 	bl	800f35e <RegionEU868NewChannelReq>
}
 800deea:	bd08      	pop	{r3, pc}

0800deec <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 800deec:	2805      	cmp	r0, #5
 800deee:	d001      	beq.n	800def4 <RegionTxParamSetupReq+0x8>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800def0:	2000      	movs	r0, #0
        }
    }
}
 800def2:	4770      	bx	lr
{
 800def4:	b508      	push	{r3, lr}
        EU868_TX_PARAM_SETUP_REQ( );
 800def6:	4608      	mov	r0, r1
 800def8:	f001 f8c0 	bl	800f07c <RegionEU868TxParamSetupReq>
}
 800defc:	bd08      	pop	{r3, pc}

0800defe <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 800defe:	2805      	cmp	r0, #5
 800df00:	d001      	beq.n	800df06 <RegionDlChannelReq+0x8>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800df02:	2000      	movs	r0, #0
        }
    }
}
 800df04:	4770      	bx	lr
{
 800df06:	b508      	push	{r3, lr}
        EU868_DL_CHANNEL_REQ( );
 800df08:	4608      	mov	r0, r1
 800df0a:	f001 f8bb 	bl	800f084 <RegionEU868DlChannelReq>
}
 800df0e:	bd08      	pop	{r3, pc}

0800df10 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 800df10:	2805      	cmp	r0, #5
 800df12:	d001      	beq.n	800df18 <RegionAlternateDr+0x8>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800df14:	2000      	movs	r0, #0
        }
    }
}
 800df16:	4770      	bx	lr
{
 800df18:	b508      	push	{r3, lr}
 800df1a:	460b      	mov	r3, r1
        EU868_ALTERNATE_DR( );
 800df1c:	4611      	mov	r1, r2
 800df1e:	4618      	mov	r0, r3
 800df20:	f001 f8d8 	bl	800f0d4 <RegionEU868AlternateDr>
}
 800df24:	bd08      	pop	{r3, pc}

0800df26 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 800df26:	2805      	cmp	r0, #5
 800df28:	d001      	beq.n	800df2e <RegionNextChannel+0x8>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800df2a:	2009      	movs	r0, #9
        }
    }
}
 800df2c:	4770      	bx	lr
{
 800df2e:	b508      	push	{r3, lr}
 800df30:	468c      	mov	ip, r1
 800df32:	4611      	mov	r1, r2
 800df34:	461a      	mov	r2, r3
        EU868_NEXT_CHANNEL( );
 800df36:	9b02      	ldr	r3, [sp, #8]
 800df38:	4660      	mov	r0, ip
 800df3a:	f001 f8cd 	bl	800f0d8 <RegionEU868NextChannel>
}
 800df3e:	bd08      	pop	{r3, pc}

0800df40 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800df40:	468c      	mov	ip, r1
 800df42:	4611      	mov	r1, r2
    switch( region )
 800df44:	2805      	cmp	r0, #5
 800df46:	d001      	beq.n	800df4c <RegionApplyDrOffset+0xc>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800df48:	b2d0      	uxtb	r0, r2
        }
    }
}
 800df4a:	4770      	bx	lr
{
 800df4c:	b508      	push	{r3, lr}
        EU868_APPLY_DR_OFFSET( );
 800df4e:	461a      	mov	r2, r3
 800df50:	4660      	mov	r0, ip
 800df52:	f001 fa2f 	bl	800f3b4 <RegionEU868ApplyDrOffset>
}
 800df56:	bd08      	pop	{r3, pc}

0800df58 <RegionRxBeaconSetup>:

void RegionRxBeaconSetup( LoRaMacRegion_t region, RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
    switch( region )
 800df58:	2805      	cmp	r0, #5
 800df5a:	d000      	beq.n	800df5e <RegionRxBeaconSetup+0x6>
 800df5c:	4770      	bx	lr
{
 800df5e:	b508      	push	{r3, lr}
 800df60:	460b      	mov	r3, r1
        AS923_RX_BEACON_SETUP( );
        AU915_RX_BEACON_SETUP( );
        CN470_RX_BEACON_SETUP( );
        CN779_RX_BEACON_SETUP( );
        EU433_RX_BEACON_SETUP( );
        EU868_RX_BEACON_SETUP( );
 800df62:	4611      	mov	r1, r2
 800df64:	4618      	mov	r0, r3
 800df66:	f001 fa2d 	bl	800f3c4 <RegionEU868RxBeaconSetup>
        default:
        {
            break;
        }
    }
}
 800df6a:	bd08      	pop	{r3, pc}

0800df6c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800df6c:	4800      	ldr	r0, [pc, #0]	; (800df70 <RegionGetVersion+0x4>)
 800df6e:	4770      	bx	lr
 800df70:	02010001 	.word	0x02010001

0800df74 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800df74:	b082      	sub	sp, #8
 800df76:	f10d 0c08 	add.w	ip, sp, #8
 800df7a:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800df7e:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800df80:	b971      	cbnz	r1, 800dfa0 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800df82:	4613      	mov	r3, r2
 800df84:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800df88:	d306      	bcc.n	800df98 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800df8a:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800df8e:	4293      	cmp	r3, r2
 800df90:	d80a      	bhi.n	800dfa8 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800df92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800df96:	e000      	b.n	800df9a <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800df98:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800df9a:	4298      	cmp	r0, r3
 800df9c:	bf38      	it	cc
 800df9e:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800dfa0:	b900      	cbnz	r0, 800dfa4 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800dfa2:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800dfa4:	b002      	add	sp, #8
 800dfa6:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800dfa8:	f242 7310 	movw	r3, #10000	; 0x2710
 800dfac:	e7f5      	b.n	800df9a <GetDutyCycle+0x26>

0800dfae <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800dfae:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800dfb0:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800dfb2:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800dfb4:	e001      	b.n	800dfba <CountChannels+0xc>
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	428b      	cmp	r3, r1
 800dfbc:	d207      	bcs.n	800dfce <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	409a      	lsls	r2, r3
 800dfc2:	ea32 020c 	bics.w	r2, r2, ip
 800dfc6:	d1f6      	bne.n	800dfb6 <CountChannels+0x8>
        {
            nbActiveBits++;
 800dfc8:	3001      	adds	r0, #1
 800dfca:	b2c0      	uxtb	r0, r0
 800dfcc:	e7f3      	b.n	800dfb6 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800dfce:	4770      	bx	lr

0800dfd0 <SetMaxTimeCredits>:
{
 800dfd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfd4:	b089      	sub	sp, #36	; 0x24
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	460e      	mov	r6, r1
 800dfda:	ad02      	add	r5, sp, #8
 800dfdc:	e885 000c 	stmia.w	r5, {r2, r3}
 800dfe0:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800dfe4:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800dfe8:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dfec:	f004 fa50 	bl	8012490 <SysTimeToMs>
 800dff0:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800dff2:	2300      	movs	r3, #0
 800dff4:	9304      	str	r3, [sp, #16]
 800dff6:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800dff8:	e895 000c 	ldmia.w	r5, {r2, r3}
 800dffc:	4631      	mov	r1, r6
 800dffe:	4620      	mov	r0, r4
 800e000:	f7ff ffb8 	bl	800df74 <GetDutyCycle>
 800e004:	4605      	mov	r5, r0
    if( joined == false )
 800e006:	2e00      	cmp	r6, #0
 800e008:	d14c      	bne.n	800e0a4 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800e00a:	2864      	cmp	r0, #100	; 0x64
 800e00c:	d025      	beq.n	800e05a <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800e00e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e012:	d025      	beq.n	800e060 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800e014:	4e27      	ldr	r6, [pc, #156]	; (800e0b4 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800e016:	68a1      	ldr	r1, [r4, #8]
 800e018:	a806      	add	r0, sp, #24
 800e01a:	f004 fa59 	bl	80124d0 <SysTimeFromMs>
 800e01e:	9b07      	ldr	r3, [sp, #28]
 800e020:	9300      	str	r3, [sp, #0]
 800e022:	9b06      	ldr	r3, [sp, #24]
 800e024:	aa02      	add	r2, sp, #8
 800e026:	ca06      	ldmia	r2, {r1, r2}
 800e028:	a804      	add	r0, sp, #16
 800e02a:	f004 f9b8 	bl	801239e <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800e02e:	f1b8 0f00 	cmp.w	r8, #0
 800e032:	d102      	bne.n	800e03a <SetMaxTimeCredits+0x6a>
 800e034:	f1b9 0f00 	cmp.w	r9, #0
 800e038:	d002      	beq.n	800e040 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800e03a:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800e03c:	42b3      	cmp	r3, r6
 800e03e:	d012      	beq.n	800e066 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800e040:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800e042:	9b02      	ldr	r3, [sp, #8]
 800e044:	4a1c      	ldr	r2, [pc, #112]	; (800e0b8 <SetMaxTimeCredits+0xe8>)
 800e046:	4293      	cmp	r3, r2
 800e048:	d812      	bhi.n	800e070 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800e04a:	6863      	ldr	r3, [r4, #4]
 800e04c:	b903      	cbnz	r3, 800e050 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800e04e:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800e050:	6126      	str	r6, [r4, #16]
}
 800e052:	4628      	mov	r0, r5
 800e054:	b009      	add	sp, #36	; 0x24
 800e056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800e05a:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e05c:	4e17      	ldr	r6, [pc, #92]	; (800e0bc <SetMaxTimeCredits+0xec>)
 800e05e:	e7da      	b.n	800e016 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800e060:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800e062:	4e17      	ldr	r6, [pc, #92]	; (800e0c0 <SetMaxTimeCredits+0xf0>)
 800e064:	e7d7      	b.n	800e016 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800e066:	9a04      	ldr	r2, [sp, #16]
 800e068:	4b16      	ldr	r3, [pc, #88]	; (800e0c4 <SetMaxTimeCredits+0xf4>)
 800e06a:	429a      	cmp	r2, r3
 800e06c:	d9ed      	bls.n	800e04a <SetMaxTimeCredits+0x7a>
 800e06e:	e7e7      	b.n	800e040 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800e070:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800e074:	3b30      	subs	r3, #48	; 0x30
 800e076:	4a14      	ldr	r2, [pc, #80]	; (800e0c8 <SetMaxTimeCredits+0xf8>)
 800e078:	fba2 2303 	umull	r2, r3, r2, r3
 800e07c:	0c1b      	lsrs	r3, r3, #16
 800e07e:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800e080:	4a12      	ldr	r2, [pc, #72]	; (800e0cc <SetMaxTimeCredits+0xfc>)
 800e082:	fb02 f303 	mul.w	r3, r2, r3
 800e086:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e088:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800e08c:	3330      	adds	r3, #48	; 0x30
 800e08e:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800e090:	2300      	movs	r3, #0
 800e092:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800e096:	ab04      	add	r3, sp, #16
 800e098:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e09c:	f004 f9f8 	bl	8012490 <SysTimeToMs>
 800e0a0:	60a0      	str	r0, [r4, #8]
 800e0a2:	e7d2      	b.n	800e04a <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800e0a4:	f1b8 0f00 	cmp.w	r8, #0
 800e0a8:	d102      	bne.n	800e0b0 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800e0aa:	4e04      	ldr	r6, [pc, #16]	; (800e0bc <SetMaxTimeCredits+0xec>)
 800e0ac:	60e6      	str	r6, [r4, #12]
 800e0ae:	e7cc      	b.n	800e04a <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800e0b0:	4e02      	ldr	r6, [pc, #8]	; (800e0bc <SetMaxTimeCredits+0xec>)
 800e0b2:	e7ca      	b.n	800e04a <SetMaxTimeCredits+0x7a>
 800e0b4:	02932e00 	.word	0x02932e00
 800e0b8:	0001ec2f 	.word	0x0001ec2f
 800e0bc:	001b7740 	.word	0x001b7740
 800e0c0:	0112a880 	.word	0x0112a880
 800e0c4:	0001517f 	.word	0x0001517f
 800e0c8:	c22e4507 	.word	0xc22e4507
 800e0cc:	00015180 	.word	0x00015180

0800e0d0 <UpdateTimeCredits>:
{
 800e0d0:	b570      	push	{r4, r5, r6, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	9200      	str	r2, [sp, #0]
 800e0dc:	ab06      	add	r3, sp, #24
 800e0de:	cb0c      	ldmia	r3, {r2, r3}
 800e0e0:	f7ff ff76 	bl	800dfd0 <SetMaxTimeCredits>
 800e0e4:	4605      	mov	r5, r0
    if( joined == true )
 800e0e6:	b94e      	cbnz	r6, 800e0fc <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800e0e8:	68e2      	ldr	r2, [r4, #12]
 800e0ea:	6923      	ldr	r3, [r4, #16]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d900      	bls.n	800e0f2 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800e0f0:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800e0f2:	9b08      	ldr	r3, [sp, #32]
 800e0f4:	6063      	str	r3, [r4, #4]
}
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	b002      	add	sp, #8
 800e0fa:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800e0fc:	6860      	ldr	r0, [r4, #4]
 800e0fe:	f004 fa47 	bl	8012590 <UTIL_TIMER_GetElapsedTime>
 800e102:	68e3      	ldr	r3, [r4, #12]
 800e104:	4403      	add	r3, r0
 800e106:	60e3      	str	r3, [r4, #12]
 800e108:	e7ee      	b.n	800e0e8 <UpdateTimeCredits+0x18>

0800e10a <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800e10a:	4288      	cmp	r0, r1
 800e10c:	db03      	blt.n	800e116 <RegionCommonValueInRange+0xc>
 800e10e:	4290      	cmp	r0, r2
 800e110:	dd03      	ble.n	800e11a <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800e112:	2000      	movs	r0, #0
 800e114:	4770      	bx	lr
 800e116:	2000      	movs	r0, #0
 800e118:	4770      	bx	lr
        return 1;
 800e11a:	2001      	movs	r0, #1
}
 800e11c:	4770      	bx	lr

0800e11e <RegionCommonChanVerifyDr>:
{
 800e11e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e122:	4682      	mov	sl, r0
 800e124:	460e      	mov	r6, r1
 800e126:	4690      	mov	r8, r2
 800e128:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800e12c:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800e130:	4619      	mov	r1, r3
 800e132:	4640      	mov	r0, r8
 800e134:	f7ff ffe9 	bl	800e10a <RegionCommonValueInRange>
 800e138:	b338      	cbz	r0, 800e18a <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e13a:	2500      	movs	r5, #0
 800e13c:	462f      	mov	r7, r5
 800e13e:	e01e      	b.n	800e17e <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800e140:	3401      	adds	r4, #1
 800e142:	b2e4      	uxtb	r4, r4
 800e144:	2c0f      	cmp	r4, #15
 800e146:	d816      	bhi.n	800e176 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800e148:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800e14c:	4123      	asrs	r3, r4
 800e14e:	f013 0f01 	tst.w	r3, #1
 800e152:	d0f5      	beq.n	800e140 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800e154:	193b      	adds	r3, r7, r4
 800e156:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e15a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800e15e:	7a19      	ldrb	r1, [r3, #8]
 800e160:	090a      	lsrs	r2, r1, #4
 800e162:	f001 010f 	and.w	r1, r1, #15
 800e166:	4640      	mov	r0, r8
 800e168:	f7ff ffcf 	bl	800e10a <RegionCommonValueInRange>
 800e16c:	2801      	cmp	r0, #1
 800e16e:	d1e7      	bne.n	800e140 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800e170:	2001      	movs	r0, #1
}
 800e172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800e176:	3710      	adds	r7, #16
 800e178:	b2ff      	uxtb	r7, r7
 800e17a:	3501      	adds	r5, #1
 800e17c:	b2ed      	uxtb	r5, r5
 800e17e:	4557      	cmp	r7, sl
 800e180:	d201      	bcs.n	800e186 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800e182:	2400      	movs	r4, #0
 800e184:	e7de      	b.n	800e144 <RegionCommonChanVerifyDr+0x26>
    return false;
 800e186:	2000      	movs	r0, #0
 800e188:	e7f3      	b.n	800e172 <RegionCommonChanVerifyDr+0x54>
        return false;
 800e18a:	2000      	movs	r0, #0
 800e18c:	e7f1      	b.n	800e172 <RegionCommonChanVerifyDr+0x54>

0800e18e <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800e18e:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800e192:	0913      	lsrs	r3, r2, #4
 800e194:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800e198:	d30e      	bcc.n	800e1b8 <RegionCommonChanDisable+0x2a>
 800e19a:	4291      	cmp	r1, r2
 800e19c:	d20e      	bcs.n	800e1bc <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800e19e:	f001 010f 	and.w	r1, r1, #15
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	fa03 f101 	lsl.w	r1, r3, r1
 800e1a8:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800e1ac:	ea22 0101 	bic.w	r1, r2, r1
 800e1b0:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	4770      	bx	lr
        return false;
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	4770      	bx	lr
 800e1bc:	2000      	movs	r0, #0
}
 800e1be:	4770      	bx	lr

0800e1c0 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800e1c2:	b188      	cbz	r0, 800e1e8 <RegionCommonCountChannels+0x28>
 800e1c4:	460c      	mov	r4, r1
 800e1c6:	4616      	mov	r6, r2
 800e1c8:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800e1ca:	2500      	movs	r5, #0
 800e1cc:	e008      	b.n	800e1e0 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800e1ce:	2110      	movs	r1, #16
 800e1d0:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800e1d4:	f7ff feeb 	bl	800dfae <CountChannels>
 800e1d8:	4405      	add	r5, r0
 800e1da:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800e1dc:	3401      	adds	r4, #1
 800e1de:	b2e4      	uxtb	r4, r4
 800e1e0:	42b4      	cmp	r4, r6
 800e1e2:	d3f4      	bcc.n	800e1ce <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800e1e8:	2500      	movs	r5, #0
 800e1ea:	e7fb      	b.n	800e1e4 <RegionCommonCountChannels+0x24>

0800e1ec <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800e1ec:	4684      	mov	ip, r0
 800e1ee:	b158      	cbz	r0, 800e208 <RegionCommonChanMaskCopy+0x1c>
 800e1f0:	b109      	cbz	r1, 800e1f6 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	e006      	b.n	800e204 <RegionCommonChanMaskCopy+0x18>
 800e1f6:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800e1f8:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800e1fc:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800e200:	3301      	adds	r3, #1
 800e202:	b2db      	uxtb	r3, r3
 800e204:	4293      	cmp	r3, r2
 800e206:	d3f7      	bcc.n	800e1f8 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800e208:	4770      	bx	lr

0800e20a <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800e20a:	b082      	sub	sp, #8
 800e20c:	b538      	push	{r3, r4, r5, lr}
 800e20e:	4604      	mov	r4, r0
 800e210:	460d      	mov	r5, r1
 800e212:	4611      	mov	r1, r2
 800e214:	aa04      	add	r2, sp, #16
 800e216:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800e21a:	ca0c      	ldmia	r2, {r2, r3}
 800e21c:	f7ff feaa 	bl	800df74 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800e220:	68e3      	ldr	r3, [r4, #12]
 800e222:	fb05 f000 	mul.w	r0, r5, r0
 800e226:	4283      	cmp	r3, r0
 800e228:	d905      	bls.n	800e236 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800e22a:	1a18      	subs	r0, r3, r0
 800e22c:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800e22e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e232:	b002      	add	sp, #8
 800e234:	4770      	bx	lr
        band->TimeCredits = 0;
 800e236:	2300      	movs	r3, #0
 800e238:	60e3      	str	r3, [r4, #12]
}
 800e23a:	e7f8      	b.n	800e22e <RegionCommonSetBandTxDone+0x24>

0800e23c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800e23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e240:	b089      	sub	sp, #36	; 0x24
 800e242:	4607      	mov	r7, r0
 800e244:	468b      	mov	fp, r1
 800e246:	4691      	mov	r9, r2
 800e248:	4698      	mov	r8, r3
 800e24a:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800e24e:	f004 f995 	bl	801257c <UTIL_TIMER_GetCurrentTime>
 800e252:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800e254:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800e256:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800e258:	f04f 33ff 	mov.w	r3, #4294967295
 800e25c:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800e25e:	e005      	b.n	800e26c <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800e260:	2301      	movs	r3, #1
 800e262:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800e264:	441e      	add	r6, r3
 800e266:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800e268:	3401      	adds	r4, #1
 800e26a:	b2e4      	uxtb	r4, r4
 800e26c:	454c      	cmp	r4, r9
 800e26e:	d25d      	bcs.n	800e32c <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800e270:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800e274:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800e278:	9b04      	ldr	r3, [sp, #16]
 800e27a:	9302      	str	r3, [sp, #8]
 800e27c:	ab13      	add	r3, sp, #76	; 0x4c
 800e27e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e282:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e286:	4653      	mov	r3, sl
 800e288:	4642      	mov	r2, r8
 800e28a:	4639      	mov	r1, r7
 800e28c:	4628      	mov	r0, r5
 800e28e:	f7ff ff1f 	bl	800e0d0 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800e292:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e294:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800e298:	68ea      	ldr	r2, [r5, #12]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d8e0      	bhi.n	800e260 <RegionCommonUpdateBandTimeOff+0x24>
 800e29e:	f1b8 0f00 	cmp.w	r8, #0
 800e2a2:	d101      	bne.n	800e2a8 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800e2a4:	2f00      	cmp	r7, #0
 800e2a6:	d1db      	bne.n	800e260 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800e2ac:	6929      	ldr	r1, [r5, #16]
 800e2ae:	4299      	cmp	r1, r3
 800e2b0:	d907      	bls.n	800e2c2 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800e2b2:	1a9b      	subs	r3, r3, r2
 800e2b4:	9a05      	ldr	r2, [sp, #20]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	bf28      	it	cs
 800e2ba:	461a      	movcs	r2, r3
 800e2bc:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800e2be:	3601      	adds	r6, #1
 800e2c0:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800e2c2:	2f00      	cmp	r7, #0
 800e2c4:	d1d0      	bne.n	800e268 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	9306      	str	r3, [sp, #24]
 800e2ca:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800e2ce:	2864      	cmp	r0, #100	; 0x64
 800e2d0:	d024      	beq.n	800e31c <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800e2d2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e2d6:	d025      	beq.n	800e324 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800e2d8:	4b19      	ldr	r3, [pc, #100]	; (800e340 <RegionCommonUpdateBandTimeOff+0x104>)
 800e2da:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800e2dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e2de:	4a18      	ldr	r2, [pc, #96]	; (800e340 <RegionCommonUpdateBandTimeOff+0x104>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d90c      	bls.n	800e2fe <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800e2e4:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800e2e8:	3b30      	subs	r3, #48	; 0x30
 800e2ea:	4a16      	ldr	r2, [pc, #88]	; (800e344 <RegionCommonUpdateBandTimeOff+0x108>)
 800e2ec:	fba2 2303 	umull	r2, r3, r2, r3
 800e2f0:	0c1b      	lsrs	r3, r3, #16
 800e2f2:	4a15      	ldr	r2, [pc, #84]	; (800e348 <RegionCommonUpdateBandTimeOff+0x10c>)
 800e2f4:	fb03 2202 	mla	r2, r3, r2, r2
 800e2f8:	9b06      	ldr	r3, [sp, #24]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800e2fe:	ad06      	add	r5, sp, #24
 800e300:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e302:	9300      	str	r3, [sp, #0]
 800e304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e306:	e895 0006 	ldmia.w	r5, {r1, r2}
 800e30a:	4628      	mov	r0, r5
 800e30c:	f004 f847 	bl	801239e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800e310:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e314:	f004 f8bc 	bl	8012490 <SysTimeToMs>
 800e318:	9005      	str	r0, [sp, #20]
 800e31a:	e7a5      	b.n	800e268 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800e31c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800e320:	9306      	str	r3, [sp, #24]
 800e322:	e7db      	b.n	800e2dc <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800e324:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800e328:	9306      	str	r3, [sp, #24]
 800e32a:	e7d7      	b.n	800e2dc <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800e32c:	b11e      	cbz	r6, 800e336 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800e32e:	9805      	ldr	r0, [sp, #20]
 800e330:	b009      	add	sp, #36	; 0x24
 800e332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800e336:	f04f 33ff 	mov.w	r3, #4294967295
 800e33a:	9305      	str	r3, [sp, #20]
 800e33c:	e7f7      	b.n	800e32e <RegionCommonUpdateBandTimeOff+0xf2>
 800e33e:	bf00      	nop
 800e340:	0001ec30 	.word	0x0001ec30
 800e344:	c22e4507 	.word	0xc22e4507
 800e348:	00015180 	.word	0x00015180

0800e34c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800e34c:	7803      	ldrb	r3, [r0, #0]
 800e34e:	2b03      	cmp	r3, #3
 800e350:	d001      	beq.n	800e356 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800e352:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800e354:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800e356:	7842      	ldrb	r2, [r0, #1]
 800e358:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e35c:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800e35e:	f003 030f 	and.w	r3, r3, #15
 800e362:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800e364:	0913      	lsrs	r3, r2, #4
 800e366:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800e368:	7883      	ldrb	r3, [r0, #2]
 800e36a:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800e36c:	78c2      	ldrb	r2, [r0, #3]
 800e36e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e372:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800e374:	7903      	ldrb	r3, [r0, #4]
 800e376:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800e378:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800e37c:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800e37e:	f003 030f 	and.w	r3, r3, #15
 800e382:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800e384:	2005      	movs	r0, #5
 800e386:	4770      	bx	lr

0800e388 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800e388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e38c:	b085      	sub	sp, #20
 800e38e:	4604      	mov	r4, r0
 800e390:	4688      	mov	r8, r1
 800e392:	4617      	mov	r7, r2
 800e394:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800e396:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800e398:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800e39c:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800e3a0:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800e3a4:	7943      	ldrb	r3, [r0, #5]
 800e3a6:	b92b      	cbnz	r3, 800e3b4 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800e3a8:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800e3ac:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800e3b0:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800e3b4:	b355      	cbz	r5, 800e40c <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800e3b6:	f1ba 0f0f 	cmp.w	sl, #15
 800e3ba:	d114      	bne.n	800e3e6 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800e3bc:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800e3c0:	f1b9 0f0f 	cmp.w	r9, #15
 800e3c4:	d020      	beq.n	800e408 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800e3c6:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800e3ca:	9303      	str	r3, [sp, #12]
 800e3cc:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800e3d0:	461c      	mov	r4, r3
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	4648      	mov	r0, r9
 800e3d6:	f7ff fe98 	bl	800e10a <RegionCommonValueInRange>
 800e3da:	b9b8      	cbnz	r0, 800e40c <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800e3dc:	454c      	cmp	r4, r9
 800e3de:	dc21      	bgt.n	800e424 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800e3e0:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800e3e4:	e012      	b.n	800e40c <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800e3e6:	69a3      	ldr	r3, [r4, #24]
 800e3e8:	9301      	str	r3, [sp, #4]
 800e3ea:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800e3ee:	9300      	str	r3, [sp, #0]
 800e3f0:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800e3f4:	4652      	mov	r2, sl
 800e3f6:	6921      	ldr	r1, [r4, #16]
 800e3f8:	7b20      	ldrb	r0, [r4, #12]
 800e3fa:	f7ff fe90 	bl	800e11e <RegionCommonChanVerifyDr>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d1de      	bne.n	800e3c0 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800e402:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800e406:	e7db      	b.n	800e3c0 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800e408:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800e40c:	2d07      	cmp	r5, #7
 800e40e:	d00c      	beq.n	800e42a <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800e410:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800e414:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800e418:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800e41c:	4628      	mov	r0, r5
 800e41e:	b005      	add	sp, #20
 800e420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800e424:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e428:	e7f0      	b.n	800e40c <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800e42a:	f1bb 0f00 	cmp.w	fp, #0
 800e42e:	d1ef      	bne.n	800e410 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800e430:	f04f 0b01 	mov.w	fp, #1
 800e434:	e7ec      	b.n	800e410 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800e438 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800e438:	4b02      	ldr	r3, [pc, #8]	; (800e444 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800e43a:	fa03 f000 	lsl.w	r0, r3, r0
}
 800e43e:	fbb0 f0f1 	udiv	r0, r0, r1
 800e442:	4770      	bx	lr
 800e444:	000f4240 	.word	0x000f4240

0800e448 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800e448:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800e44c:	fbb3 f0f0 	udiv	r0, r3, r0
 800e450:	4770      	bx	lr
	...

0800e454 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800e454:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e456:	f1a1 0c04 	sub.w	ip, r1, #4
 800e45a:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800e45e:	fb0e f202 	mul.w	r2, lr, r2
 800e462:	fb00 220c 	mla	r2, r0, ip, r2
 800e466:	0052      	lsls	r2, r2, #1
 800e468:	d021      	beq.n	800e4ae <RegionCommonComputeRxWindowParameters+0x5a>
 800e46a:	4402      	add	r2, r0
 800e46c:	3a01      	subs	r2, #1
 800e46e:	fbb2 f2f0 	udiv	r2, r2, r0
 800e472:	4291      	cmp	r1, r2
 800e474:	bf38      	it	cc
 800e476:	4611      	movcc	r1, r2
 800e478:	9a01      	ldr	r2, [sp, #4]
 800e47a:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e47c:	0082      	lsls	r2, r0, #2
 800e47e:	fb00 f101 	mul.w	r1, r0, r1
 800e482:	b1b9      	cbz	r1, 800e4b4 <RegionCommonComputeRxWindowParameters+0x60>
 800e484:	3101      	adds	r1, #1
 800e486:	0849      	lsrs	r1, r1, #1
 800e488:	1a51      	subs	r1, r2, r1
 800e48a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e48e:	fb02 1313 	mls	r3, r2, r3, r1
 800e492:	2b00      	cmp	r3, #0
 800e494:	dd10      	ble.n	800e4b8 <RegionCommonComputeRxWindowParameters+0x64>
 800e496:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800e49a:	4a0b      	ldr	r2, [pc, #44]	; (800e4c8 <RegionCommonComputeRxWindowParameters+0x74>)
 800e49c:	fb82 1203 	smull	r1, r2, r2, r3
 800e4a0:	17db      	asrs	r3, r3, #31
 800e4a2:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e4a6:	9a02      	ldr	r2, [sp, #8]
 800e4a8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800e4aa:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e4ae:	fbb2 f2f0 	udiv	r2, r2, r0
 800e4b2:	e7de      	b.n	800e472 <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e4b4:	0849      	lsrs	r1, r1, #1
 800e4b6:	e7e7      	b.n	800e488 <RegionCommonComputeRxWindowParameters+0x34>
 800e4b8:	4a03      	ldr	r2, [pc, #12]	; (800e4c8 <RegionCommonComputeRxWindowParameters+0x74>)
 800e4ba:	fb82 1203 	smull	r1, r2, r2, r3
 800e4be:	17db      	asrs	r3, r3, #31
 800e4c0:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e4c4:	e7ef      	b.n	800e4a6 <RegionCommonComputeRxWindowParameters+0x52>
 800e4c6:	bf00      	nop
 800e4c8:	10624dd3 	.word	0x10624dd3

0800e4cc <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800e4cc:	b538      	push	{r3, r4, r5, lr}
 800e4ce:	460d      	mov	r5, r1
 800e4d0:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800e4d2:	0040      	lsls	r0, r0, #1
 800e4d4:	f7f2 f9ca 	bl	800086c <__aeabi_ui2f>
 800e4d8:	4601      	mov	r1, r0
 800e4da:	4628      	mov	r0, r5
 800e4dc:	f7f2 f914 	bl	8000708 <__aeabi_fsub>
 800e4e0:	4621      	mov	r1, r4
 800e4e2:	f7f2 f911 	bl	8000708 <__aeabi_fsub>
 800e4e6:	f7f1 ffb3 	bl	8000450 <__aeabi_f2d>
 800e4ea:	f004 fb15 	bl	8012b18 <floor>
 800e4ee:	f7f2 f88f 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800e4f2:	b240      	sxtb	r0, r0
 800e4f4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e4f8 <RegionCommonRxBeaconSetup>:

void RegionCommonRxBeaconSetup( RegionCommonRxBeaconSetupParams_t* rxBeaconSetupParams )
{
 800e4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4fa:	b08b      	sub	sp, #44	; 0x2c
 800e4fc:	4604      	mov	r4, r0
    bool rxContinuous = true;
    uint8_t datarate;

    // Set the radio into sleep mode
    Radio.Sleep( );
 800e4fe:	4d1c      	ldr	r5, [pc, #112]	; (800e570 <RegionCommonRxBeaconSetup+0x78>)
 800e500:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e502:	4798      	blx	r3

    // Setup frequency and payload length
    Radio.SetChannel( rxBeaconSetupParams->Frequency );
 800e504:	68eb      	ldr	r3, [r5, #12]
 800e506:	6860      	ldr	r0, [r4, #4]
 800e508:	4798      	blx	r3
    Radio.SetMaxPayloadLength( MODEM_LORA, rxBeaconSetupParams->BeaconSize );
 800e50a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800e50c:	7a21      	ldrb	r1, [r4, #8]
 800e50e:	2001      	movs	r0, #1
 800e510:	4798      	blx	r3

    // Check the RX continuous mode
    if( rxBeaconSetupParams->RxTime != 0 )
 800e512:	68e3      	ldr	r3, [r4, #12]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d128      	bne.n	800e56a <RegionCommonRxBeaconSetup+0x72>
    bool rxContinuous = true;
 800e518:	2301      	movs	r3, #1
    {
        rxContinuous = false;
    }

    // Get region specific datarate
    datarate = rxBeaconSetupParams->Datarates[rxBeaconSetupParams->BeaconDatarate];
 800e51a:	6821      	ldr	r1, [r4, #0]
 800e51c:	7a62      	ldrb	r2, [r4, #9]
 800e51e:	5c8a      	ldrb	r2, [r1, r2]

    // Setup radio
    Radio.SetRxConfig( MODEM_LORA, rxBeaconSetupParams->BeaconChannelBW, datarate,
 800e520:	4f13      	ldr	r7, [pc, #76]	; (800e570 <RegionCommonRxBeaconSetup+0x78>)
 800e522:	9309      	str	r3, [sp, #36]	; 0x24
 800e524:	2500      	movs	r5, #0
 800e526:	9508      	str	r5, [sp, #32]
 800e528:	9507      	str	r5, [sp, #28]
 800e52a:	9506      	str	r5, [sp, #24]
 800e52c:	9505      	str	r5, [sp, #20]
 800e52e:	7a23      	ldrb	r3, [r4, #8]
 800e530:	9304      	str	r3, [sp, #16]
 800e532:	2601      	movs	r6, #1
 800e534:	9603      	str	r6, [sp, #12]
 800e536:	8a23      	ldrh	r3, [r4, #16]
 800e538:	9302      	str	r3, [sp, #8]
 800e53a:	230a      	movs	r3, #10
 800e53c:	9301      	str	r3, [sp, #4]
 800e53e:	9500      	str	r5, [sp, #0]
 800e540:	4633      	mov	r3, r6
 800e542:	7aa1      	ldrb	r1, [r4, #10]
 800e544:	4630      	mov	r0, r6
 800e546:	f8d7 c018 	ldr.w	ip, [r7, #24]
 800e54a:	47e0      	blx	ip
                       1, 0, 10, rxBeaconSetupParams->SymbolTimeout, true, rxBeaconSetupParams->BeaconSize, false, 0, 0, false, rxContinuous );

    Radio.Rx( rxBeaconSetupParams->RxTime );
 800e54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e54e:	68e0      	ldr	r0, [r4, #12]
 800e550:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Beacon parameters */
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
 800e552:	7a63      	ldrb	r3, [r4, #9]
 800e554:	9301      	str	r3, [sp, #4]
 800e556:	6863      	ldr	r3, [r4, #4]
 800e558:	9300      	str	r3, [sp, #0]
 800e55a:	4b06      	ldr	r3, [pc, #24]	; (800e574 <RegionCommonRxBeaconSetup+0x7c>)
 800e55c:	4632      	mov	r2, r6
 800e55e:	4629      	mov	r1, r5
 800e560:	2002      	movs	r0, #2
 800e562:	f003 fcf7 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
    /* ST_WORKAROUND_END */
}
 800e566:	b00b      	add	sp, #44	; 0x2c
 800e568:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rxContinuous = false;
 800e56a:	2300      	movs	r3, #0
 800e56c:	e7d5      	b.n	800e51a <RegionCommonRxBeaconSetup+0x22>
 800e56e:	bf00      	nop
 800e570:	080139bc 	.word	0x080139bc
 800e574:	08013380 	.word	0x08013380

0800e578 <RegionCommonCountNbOfEnabledChannels>:

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800e578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e57c:	b083      	sub	sp, #12
 800e57e:	4605      	mov	r5, r0
 800e580:	468b      	mov	fp, r1
 800e582:	9200      	str	r2, [sp, #0]
 800e584:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e586:	2600      	movs	r6, #0
 800e588:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800e58a:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800e58c:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e58e:	e04a      	b.n	800e626 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800e590:	7a3a      	ldrb	r2, [r7, #8]
 800e592:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800e596:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800e59a:	b252      	sxtb	r2, r2
 800e59c:	b249      	sxtb	r1, r1
 800e59e:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800e5a2:	f7ff fdb2 	bl	800e10a <RegionCommonValueInRange>
 800e5a6:	b178      	cbz	r0, 800e5c8 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800e5a8:	68ea      	ldr	r2, [r5, #12]
 800e5aa:	7a7b      	ldrb	r3, [r7, #9]
 800e5ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e5b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e5b4:	7d1b      	ldrb	r3, [r3, #20]
 800e5b6:	b35b      	cbz	r3, 800e610 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800e5b8:	f109 0301 	add.w	r3, r9, #1
 800e5bc:	eb08 0204 	add.w	r2, r8, r4
 800e5c0:	f80b 2009 	strb.w	r2, [fp, r9]
 800e5c4:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800e5c8:	3401      	adds	r4, #1
 800e5ca:	b2e4      	uxtb	r4, r4
 800e5cc:	2c0f      	cmp	r4, #15
 800e5ce:	d824      	bhi.n	800e61a <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800e5d0:	686b      	ldr	r3, [r5, #4]
 800e5d2:	0072      	lsls	r2, r6, #1
 800e5d4:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800e5d8:	4123      	asrs	r3, r4
 800e5da:	f013 0f01 	tst.w	r3, #1
 800e5de:	d0f3      	beq.n	800e5c8 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800e5e0:	68a8      	ldr	r0, [r5, #8]
 800e5e2:	eb08 0304 	add.w	r3, r8, r4
 800e5e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e5ea:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800e5ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d0e8      	beq.n	800e5c8 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e5f6:	782b      	ldrb	r3, [r5, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d1c9      	bne.n	800e590 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800e5fc:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d0c6      	beq.n	800e590 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800e602:	5a9b      	ldrh	r3, [r3, r2]
 800e604:	fa43 f104 	asr.w	r1, r3, r4
 800e608:	f011 0f01 	tst.w	r1, #1
 800e60c:	d1c0      	bne.n	800e590 <RegionCommonCountNbOfEnabledChannels+0x18>
 800e60e:	e7db      	b.n	800e5c8 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800e610:	f10a 0a01 	add.w	sl, sl, #1
 800e614:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800e618:	e7d6      	b.n	800e5c8 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e61a:	f108 0810 	add.w	r8, r8, #16
 800e61e:	fa5f f888 	uxtb.w	r8, r8
 800e622:	3601      	adds	r6, #1
 800e624:	b2f6      	uxtb	r6, r6
 800e626:	fa1f f388 	uxth.w	r3, r8
 800e62a:	8a2a      	ldrh	r2, [r5, #16]
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d201      	bcs.n	800e634 <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800e630:	2400      	movs	r4, #0
 800e632:	e7cb      	b.n	800e5cc <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800e634:	9b00      	ldr	r3, [sp, #0]
 800e636:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800e63a:	9b01      	ldr	r3, [sp, #4]
 800e63c:	f883 a000 	strb.w	sl, [r3]
}
 800e640:	b003      	add	sp, #12
 800e642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e646 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800e646:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e64a:	b085      	sub	sp, #20
 800e64c:	4604      	mov	r4, r0
 800e64e:	460f      	mov	r7, r1
 800e650:	4616      	mov	r6, r2
 800e652:	461d      	mov	r5, r3
 800e654:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800e658:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800e65c:	6840      	ldr	r0, [r0, #4]
 800e65e:	f003 ff97 	bl	8012590 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800e662:	6823      	ldr	r3, [r4, #0]
 800e664:	1a1b      	subs	r3, r3, r0
 800e666:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800e66a:	2301      	movs	r3, #1
 800e66c:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800e670:	2300      	movs	r3, #0
 800e672:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e674:	6863      	ldr	r3, [r4, #4]
 800e676:	b113      	cbz	r3, 800e67e <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800e678:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e67a:	4283      	cmp	r3, r0
 800e67c:	d81e      	bhi.n	800e6bc <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800e67e:	2300      	movs	r3, #0
 800e680:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800e682:	69e3      	ldr	r3, [r4, #28]
 800e684:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800e688:	781f      	ldrb	r7, [r3, #0]
 800e68a:	69a3      	ldr	r3, [r4, #24]
 800e68c:	9303      	str	r3, [sp, #12]
 800e68e:	ab01      	add	r3, sp, #4
 800e690:	f104 020c 	add.w	r2, r4, #12
 800e694:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e698:	e883 0003 	stmia.w	r3, {r0, r1}
 800e69c:	7d23      	ldrb	r3, [r4, #20]
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	7a23      	ldrb	r3, [r4, #8]
 800e6a2:	7a62      	ldrb	r2, [r4, #9]
 800e6a4:	4661      	mov	r1, ip
 800e6a6:	4638      	mov	r0, r7
 800e6a8:	f7ff fdc8 	bl	800e23c <RegionCommonUpdateBandTimeOff>
 800e6ac:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800e6b0:	4643      	mov	r3, r8
 800e6b2:	462a      	mov	r2, r5
 800e6b4:	4631      	mov	r1, r6
 800e6b6:	69e0      	ldr	r0, [r4, #28]
 800e6b8:	f7ff ff5e 	bl	800e578 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800e6bc:	782b      	ldrb	r3, [r5, #0]
 800e6be:	b923      	cbnz	r3, 800e6ca <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800e6c0:	f898 3000 	ldrb.w	r3, [r8]
 800e6c4:	b13b      	cbz	r3, 800e6d6 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800e6c6:	200b      	movs	r0, #11
 800e6c8:	e002      	b.n	800e6d0 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800e6d0:	b005      	add	sp, #20
 800e6d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800e6d6:	200c      	movs	r0, #12
 800e6d8:	e7fa      	b.n	800e6d0 <RegionCommonIdentifyChannels+0x8a>

0800e6da <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800e6da:	b570      	push	{r4, r5, r6, lr}
 800e6dc:	b082      	sub	sp, #8
 800e6de:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800e6e0:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800e6e4:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800e6e8:	42a6      	cmp	r6, r4
 800e6ea:	d011      	beq.n	800e710 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800e6ec:	3c01      	subs	r4, #1
 800e6ee:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800e6f0:	42a6      	cmp	r6, r4
 800e6f2:	d00e      	beq.n	800e712 <RegionCommonGetNextLowerTxDr+0x38>
 800e6f4:	68ab      	ldr	r3, [r5, #8]
 800e6f6:	9301      	str	r3, [sp, #4]
 800e6f8:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	4633      	mov	r3, r6
 800e700:	4622      	mov	r2, r4
 800e702:	6869      	ldr	r1, [r5, #4]
 800e704:	78e8      	ldrb	r0, [r5, #3]
 800e706:	f7ff fd0a 	bl	800e11e <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800e70a:	2800      	cmp	r0, #0
 800e70c:	d0ee      	beq.n	800e6ec <RegionCommonGetNextLowerTxDr+0x12>
 800e70e:	e000      	b.n	800e712 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800e710:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800e712:	4620      	mov	r0, r4
 800e714:	b002      	add	sp, #8
 800e716:	bd70      	pop	{r4, r5, r6, pc}

0800e718 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800e718:	4288      	cmp	r0, r1
 800e71a:	bfb8      	it	lt
 800e71c:	4608      	movlt	r0, r1
 800e71e:	4770      	bx	lr

0800e720 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800e720:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800e724:	4a05      	ldr	r2, [pc, #20]	; (800e73c <RegionCommonGetBandwidth+0x1c>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d004      	beq.n	800e734 <RegionCommonGetBandwidth+0x14>
 800e72a:	4a05      	ldr	r2, [pc, #20]	; (800e740 <RegionCommonGetBandwidth+0x20>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d103      	bne.n	800e738 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800e730:	2002      	movs	r0, #2
 800e732:	4770      	bx	lr
            return 1;
 800e734:	2001      	movs	r0, #1
 800e736:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800e738:	2000      	movs	r0, #0
    }
}
 800e73a:	4770      	bx	lr
 800e73c:	0003d090 	.word	0x0003d090
 800e740:	0007a120 	.word	0x0007a120

0800e744 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800e744:	b500      	push	{lr}
 800e746:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800e748:	2805      	cmp	r0, #5
 800e74a:	d80e      	bhi.n	800e76a <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800e74c:	9202      	str	r2, [sp, #8]
 800e74e:	9101      	str	r1, [sp, #4]
 800e750:	4b0a      	ldr	r3, [pc, #40]	; (800e77c <RegionCommonRxConfigPrint+0x38>)
 800e752:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e756:	9300      	str	r3, [sp, #0]
 800e758:	4b09      	ldr	r3, [pc, #36]	; (800e780 <RegionCommonRxConfigPrint+0x3c>)
 800e75a:	2201      	movs	r2, #1
 800e75c:	2100      	movs	r1, #0
 800e75e:	2002      	movs	r0, #2
 800e760:	f003 fbf8 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800e764:	b005      	add	sp, #20
 800e766:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e76a:	9201      	str	r2, [sp, #4]
 800e76c:	9100      	str	r1, [sp, #0]
 800e76e:	4b05      	ldr	r3, [pc, #20]	; (800e784 <RegionCommonRxConfigPrint+0x40>)
 800e770:	2201      	movs	r2, #1
 800e772:	2100      	movs	r1, #0
 800e774:	2002      	movs	r0, #2
 800e776:	f003 fbed 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 800e77a:	e7f3      	b.n	800e764 <RegionCommonRxConfigPrint+0x20>
 800e77c:	08013408 	.word	0x08013408
 800e780:	080133a0 	.word	0x080133a0
 800e784:	080133c0 	.word	0x080133c0

0800e788 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800e788:	b500      	push	{lr}
 800e78a:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e78c:	9101      	str	r1, [sp, #4]
 800e78e:	9000      	str	r0, [sp, #0]
 800e790:	4b04      	ldr	r3, [pc, #16]	; (800e7a4 <RegionCommonTxConfigPrint+0x1c>)
 800e792:	2201      	movs	r2, #1
 800e794:	2100      	movs	r1, #0
 800e796:	2002      	movs	r0, #2
 800e798:	f003 fbdc 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 800e79c:	b003      	add	sp, #12
 800e79e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e7a2:	bf00      	nop
 800e7a4:	080133dc 	.word	0x080133dc

0800e7a8 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	4604      	mov	r4, r0
 800e7ac:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800e7ae:	4b1b      	ldr	r3, [pc, #108]	; (800e81c <VerifyRfFreq+0x74>)
 800e7b0:	6a1b      	ldr	r3, [r3, #32]
 800e7b2:	4798      	blx	r3
 800e7b4:	b130      	cbz	r0, 800e7c4 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800e7b6:	4b1a      	ldr	r3, [pc, #104]	; (800e820 <VerifyRfFreq+0x78>)
 800e7b8:	4423      	add	r3, r4
 800e7ba:	4a1a      	ldr	r2, [pc, #104]	; (800e824 <VerifyRfFreq+0x7c>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d802      	bhi.n	800e7c6 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800e7c0:	2302      	movs	r3, #2
 800e7c2:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800e7c4:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800e7c6:	4b18      	ldr	r3, [pc, #96]	; (800e828 <VerifyRfFreq+0x80>)
 800e7c8:	4423      	add	r3, r4
 800e7ca:	4a18      	ldr	r2, [pc, #96]	; (800e82c <VerifyRfFreq+0x84>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d802      	bhi.n	800e7d6 <VerifyRfFreq+0x2e>
        *band = 0;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	702b      	strb	r3, [r5, #0]
 800e7d4:	e7f6      	b.n	800e7c4 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800e7d6:	4b16      	ldr	r3, [pc, #88]	; (800e830 <VerifyRfFreq+0x88>)
 800e7d8:	4423      	add	r3, r4
 800e7da:	4a16      	ldr	r2, [pc, #88]	; (800e834 <VerifyRfFreq+0x8c>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d802      	bhi.n	800e7e6 <VerifyRfFreq+0x3e>
        *band = 1;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	702b      	strb	r3, [r5, #0]
 800e7e4:	e7ee      	b.n	800e7c4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800e7e6:	4b14      	ldr	r3, [pc, #80]	; (800e838 <VerifyRfFreq+0x90>)
 800e7e8:	4423      	add	r3, r4
 800e7ea:	4a14      	ldr	r2, [pc, #80]	; (800e83c <VerifyRfFreq+0x94>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d802      	bhi.n	800e7f6 <VerifyRfFreq+0x4e>
        *band = 5;
 800e7f0:	2305      	movs	r3, #5
 800e7f2:	702b      	strb	r3, [r5, #0]
 800e7f4:	e7e6      	b.n	800e7c4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800e7f6:	4b12      	ldr	r3, [pc, #72]	; (800e840 <VerifyRfFreq+0x98>)
 800e7f8:	4423      	add	r3, r4
 800e7fa:	4a12      	ldr	r2, [pc, #72]	; (800e844 <VerifyRfFreq+0x9c>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d802      	bhi.n	800e806 <VerifyRfFreq+0x5e>
        *band = 3;
 800e800:	2303      	movs	r3, #3
 800e802:	702b      	strb	r3, [r5, #0]
 800e804:	e7de      	b.n	800e7c4 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800e806:	4b10      	ldr	r3, [pc, #64]	; (800e848 <VerifyRfFreq+0xa0>)
 800e808:	4423      	add	r3, r4
 800e80a:	4a10      	ldr	r2, [pc, #64]	; (800e84c <VerifyRfFreq+0xa4>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d802      	bhi.n	800e816 <VerifyRfFreq+0x6e>
        *band = 4;
 800e810:	2304      	movs	r3, #4
 800e812:	702b      	strb	r3, [r5, #0]
 800e814:	e7d6      	b.n	800e7c4 <VerifyRfFreq+0x1c>
        return false;
 800e816:	2000      	movs	r0, #0
 800e818:	e7d4      	b.n	800e7c4 <VerifyRfFreq+0x1c>
 800e81a:	bf00      	nop
 800e81c:	080139bc 	.word	0x080139bc
 800e820:	cc8faa40 	.word	0xcc8faa40
 800e824:	001e847f 	.word	0x001e847f
 800e828:	cc7125c0 	.word	0xcc7125c0
 800e82c:	002dc6c0 	.word	0x002dc6c0
 800e830:	cc435eff 	.word	0xcc435eff
 800e834:	000927bf 	.word	0x000927bf
 800e838:	cc38b0a0 	.word	0xcc38b0a0
 800e83c:	0007a120 	.word	0x0007a120
 800e840:	cc2e0240 	.word	0xcc2e0240
 800e844:	0003d090 	.word	0x0003d090
 800e848:	cc296e60 	.word	0xcc296e60
 800e84c:	000493e0 	.word	0x000493e0

0800e850 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800e850:	b570      	push	{r4, r5, r6, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	4605      	mov	r5, r0
 800e856:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800e858:	4b13      	ldr	r3, [pc, #76]	; (800e8a8 <GetTimeOnAir+0x58>)
 800e85a:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800e85c:	4913      	ldr	r1, [pc, #76]	; (800e8ac <GetTimeOnAir+0x5c>)
 800e85e:	f7ff ff5f 	bl	800e720 <RegionCommonGetBandwidth>
 800e862:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800e864:	2d07      	cmp	r5, #7
 800e866:	d00e      	beq.n	800e886 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800e868:	4b11      	ldr	r3, [pc, #68]	; (800e8b0 <GetTimeOnAir+0x60>)
 800e86a:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e86c:	2001      	movs	r0, #1
 800e86e:	9003      	str	r0, [sp, #12]
 800e870:	b2e4      	uxtb	r4, r4
 800e872:	9402      	str	r4, [sp, #8]
 800e874:	2300      	movs	r3, #0
 800e876:	9301      	str	r3, [sp, #4]
 800e878:	2308      	movs	r3, #8
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	4603      	mov	r3, r0
 800e87e:	4632      	mov	r2, r6
 800e880:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800e882:	b004      	add	sp, #16
 800e884:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800e886:	4b0a      	ldr	r3, [pc, #40]	; (800e8b0 <GetTimeOnAir+0x60>)
 800e888:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e88a:	2301      	movs	r3, #1
 800e88c:	9303      	str	r3, [sp, #12]
 800e88e:	b2e4      	uxtb	r4, r4
 800e890:	9402      	str	r4, [sp, #8]
 800e892:	2000      	movs	r0, #0
 800e894:	9001      	str	r0, [sp, #4]
 800e896:	2305      	movs	r3, #5
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	4603      	mov	r3, r0
 800e89c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e8a0:	fb06 f202 	mul.w	r2, r6, r2
 800e8a4:	47a8      	blx	r5
 800e8a6:	e7ec      	b.n	800e882 <GetTimeOnAir+0x32>
 800e8a8:	08013440 	.word	0x08013440
 800e8ac:	08013420 	.word	0x08013420
 800e8b0:	080139bc 	.word	0x080139bc

0800e8b4 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800e8b4:	b500      	push	{lr}
 800e8b6:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800e8bc:	7803      	ldrb	r3, [r0, #0]
 800e8be:	3b0b      	subs	r3, #11
 800e8c0:	2b2d      	cmp	r3, #45	; 0x2d
 800e8c2:	d82f      	bhi.n	800e924 <RegionEU868GetPhyParam+0x70>
 800e8c4:	e8df f003 	tbb	[pc, r3]
 800e8c8:	3f393633 	.word	0x3f393633
 800e8cc:	504c4845 	.word	0x504c4845
 800e8d0:	2e5c5854 	.word	0x2e5c5854
 800e8d4:	6e682e65 	.word	0x6e682e65
 800e8d8:	2e2e7774 	.word	0x2e2e7774
 800e8dc:	2e177f7b 	.word	0x2e177f7b
 800e8e0:	2e2e2e2e 	.word	0x2e2e2e2e
 800e8e4:	2e2e2e2e 	.word	0x2e2e2e2e
 800e8e8:	2e2e2e2e 	.word	0x2e2e2e2e
 800e8ec:	2e8c8582 	.word	0x2e8c8582
 800e8f0:	2e928f2e 	.word	0x2e928f2e
 800e8f4:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800e8f6:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e8fa:	f88d 3004 	strb.w	r3, [sp, #4]
 800e8fe:	2307      	movs	r3, #7
 800e900:	f88d 3005 	strb.w	r3, [sp, #5]
 800e904:	2300      	movs	r3, #0
 800e906:	f88d 3006 	strb.w	r3, [sp, #6]
 800e90a:	2310      	movs	r3, #16
 800e90c:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800e910:	4b3e      	ldr	r3, [pc, #248]	; (800ea0c <RegionEU868GetPhyParam+0x158>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e918:	9202      	str	r2, [sp, #8]
 800e91a:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800e91c:	a801      	add	r0, sp, #4
 800e91e:	f7ff fedc 	bl	800e6da <RegionCommonGetNextLowerTxDr>
 800e922:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800e924:	9804      	ldr	r0, [sp, #16]
 800e926:	9005      	str	r0, [sp, #20]
}
 800e928:	b007      	add	sp, #28
 800e92a:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800e92e:	2340      	movs	r3, #64	; 0x40
 800e930:	9304      	str	r3, [sp, #16]
            break;
 800e932:	e7f7      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800e934:	2320      	movs	r3, #32
 800e936:	9304      	str	r3, [sp, #16]
            break;
 800e938:	e7f4      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800e93a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e93e:	4a34      	ldr	r2, [pc, #208]	; (800ea10 <RegionEU868GetPhyParam+0x15c>)
 800e940:	5cd3      	ldrb	r3, [r2, r3]
 800e942:	9304      	str	r3, [sp, #16]
            break;
 800e944:	e7ee      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800e946:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e94a:	4a32      	ldr	r2, [pc, #200]	; (800ea14 <RegionEU868GetPhyParam+0x160>)
 800e94c:	5cd3      	ldrb	r3, [r2, r3]
 800e94e:	9304      	str	r3, [sp, #16]
            break;
 800e950:	e7e8      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800e952:	2301      	movs	r3, #1
 800e954:	9304      	str	r3, [sp, #16]
            break;
 800e956:	e7e5      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800e958:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e95c:	9304      	str	r3, [sp, #16]
            break;
 800e95e:	e7e1      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800e960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e964:	9304      	str	r3, [sp, #16]
            break;
 800e966:	e7dd      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800e968:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e96c:	9304      	str	r3, [sp, #16]
            break;
 800e96e:	e7d9      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800e970:	f241 3388 	movw	r3, #5000	; 0x1388
 800e974:	9304      	str	r3, [sp, #16]
            break;
 800e976:	e7d5      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800e978:	f241 7370 	movw	r3, #6000	; 0x1770
 800e97c:	9304      	str	r3, [sp, #16]
            break;
 800e97e:	e7d1      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800e980:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e984:	4824      	ldr	r0, [pc, #144]	; (800ea18 <RegionEU868GetPhyParam+0x164>)
 800e986:	f001 fc2f 	bl	80101e8 <randr>
 800e98a:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800e98e:	9004      	str	r0, [sp, #16]
            break;
 800e990:	e7c8      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800e992:	4b22      	ldr	r3, [pc, #136]	; (800ea1c <RegionEU868GetPhyParam+0x168>)
 800e994:	9304      	str	r3, [sp, #16]
            break;
 800e996:	e7c5      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e998:	4b1c      	ldr	r3, [pc, #112]	; (800ea0c <RegionEU868GetPhyParam+0x158>)
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e9a0:	9304      	str	r3, [sp, #16]
            break;
 800e9a2:	e7bf      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800e9a4:	4b19      	ldr	r3, [pc, #100]	; (800ea0c <RegionEU868GetPhyParam+0x158>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800e9ac:	9304      	str	r3, [sp, #16]
            break;
 800e9ae:	e7b9      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800e9b0:	2310      	movs	r3, #16
 800e9b2:	9304      	str	r3, [sp, #16]
            break;
 800e9b4:	e7b6      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800e9b6:	4b15      	ldr	r3, [pc, #84]	; (800ea0c <RegionEU868GetPhyParam+0x158>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	9304      	str	r3, [sp, #16]
            break;
 800e9bc:	e7b2      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800e9be:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800e9c2:	9304      	str	r3, [sp, #16]
            break;
 800e9c4:	e7ae      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800e9c6:	4b16      	ldr	r3, [pc, #88]	; (800ea20 <RegionEU868GetPhyParam+0x16c>)
 800e9c8:	9304      	str	r3, [sp, #16]
            break;
 800e9ca:	e7ab      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800e9cc:	4b13      	ldr	r3, [pc, #76]	; (800ea1c <RegionEU868GetPhyParam+0x168>)
 800e9ce:	9304      	str	r3, [sp, #16]
            break;
 800e9d0:	e7a8      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800e9d2:	2311      	movs	r3, #17
 800e9d4:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800e9d8:	2301      	movs	r3, #1
 800e9da:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800e9de:	e7a1      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800e9e0:	2303      	movs	r3, #3
 800e9e2:	9304      	str	r3, [sp, #16]
            break;
 800e9e4:	e79e      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800e9e6:	4b0d      	ldr	r3, [pc, #52]	; (800ea1c <RegionEU868GetPhyParam+0x168>)
 800e9e8:	9304      	str	r3, [sp, #16]
            break;
 800e9ea:	e79b      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800e9ec:	2303      	movs	r3, #3
 800e9ee:	9304      	str	r3, [sp, #16]
            break;
 800e9f0:	e798      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800e9f2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e9f6:	4a0b      	ldr	r2, [pc, #44]	; (800ea24 <RegionEU868GetPhyParam+0x170>)
 800e9f8:	5cd3      	ldrb	r3, [r2, r3]
 800e9fa:	9304      	str	r3, [sp, #16]
            break;
 800e9fc:	e792      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800e9fe:	490a      	ldr	r1, [pc, #40]	; (800ea28 <RegionEU868GetPhyParam+0x174>)
 800ea00:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800ea04:	f7ff fe8c 	bl	800e720 <RegionCommonGetBandwidth>
 800ea08:	9004      	str	r0, [sp, #16]
            break;
 800ea0a:	e78b      	b.n	800e924 <RegionEU868GetPhyParam+0x70>
 800ea0c:	20000f4c 	.word	0x20000f4c
 800ea10:	08013448 	.word	0x08013448
 800ea14:	08013450 	.word	0x08013450
 800ea18:	fffffc18 	.word	0xfffffc18
 800ea1c:	33d3e608 	.word	0x33d3e608
 800ea20:	4009999a 	.word	0x4009999a
 800ea24:	08013440 	.word	0x08013440
 800ea28:	08013420 	.word	0x08013420

0800ea2c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800ea2c:	b510      	push	{r4, lr}
 800ea2e:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800ea30:	4b0b      	ldr	r3, [pc, #44]	; (800ea60 <RegionEU868SetBandTxDone+0x34>)
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	7803      	ldrb	r3, [r0, #0]
 800ea36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ea3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea3e:	7a5b      	ldrb	r3, [r3, #9]
 800ea40:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800ea44:	4b07      	ldr	r3, [pc, #28]	; (800ea64 <RegionEU868SetBandTxDone+0x38>)
 800ea46:	681c      	ldr	r4, [r3, #0]
 800ea48:	6903      	ldr	r3, [r0, #16]
 800ea4a:	9300      	str	r3, [sp, #0]
 800ea4c:	68c3      	ldr	r3, [r0, #12]
 800ea4e:	7842      	ldrb	r2, [r0, #1]
 800ea50:	6881      	ldr	r1, [r0, #8]
 800ea52:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800ea56:	f7ff fbd8 	bl	800e20a <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800ea5a:	b002      	add	sp, #8
 800ea5c:	bd10      	pop	{r4, pc}
 800ea5e:	bf00      	nop
 800ea60:	20000f4c 	.word	0x20000f4c
 800ea64:	20000f48 	.word	0x20000f48

0800ea68 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800ea68:	b530      	push	{r4, r5, lr}
 800ea6a:	b0a5      	sub	sp, #148	; 0x94
 800ea6c:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800ea6e:	2290      	movs	r2, #144	; 0x90
 800ea70:	2100      	movs	r1, #0
 800ea72:	4668      	mov	r0, sp
 800ea74:	f004 f846 	bl	8012b04 <memset>
 800ea78:	2364      	movs	r3, #100	; 0x64
 800ea7a:	f8ad 3000 	strh.w	r3, [sp]
 800ea7e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ea82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ea86:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800ea8a:	210a      	movs	r1, #10
 800ea8c:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800ea90:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800ea94:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800ea98:	7b23      	ldrb	r3, [r4, #12]
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d032      	beq.n	800eb04 <RegionEU868InitDefaults+0x9c>
 800ea9e:	2b02      	cmp	r3, #2
 800eaa0:	d03e      	beq.n	800eb20 <RegionEU868InitDefaults+0xb8>
 800eaa2:	b10b      	cbz	r3, 800eaa8 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800eaa4:	b025      	add	sp, #148	; 0x94
 800eaa6:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800eaa8:	6823      	ldr	r3, [r4, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d0fa      	beq.n	800eaa4 <RegionEU868InitDefaults+0x3c>
 800eaae:	6863      	ldr	r3, [r4, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d0f7      	beq.n	800eaa4 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800eab4:	4d1f      	ldr	r5, [pc, #124]	; (800eb34 <RegionEU868InitDefaults+0xcc>)
 800eab6:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 800eab8:	68a0      	ldr	r0, [r4, #8]
 800eaba:	4b1f      	ldr	r3, [pc, #124]	; (800eb38 <RegionEU868InitDefaults+0xd0>)
 800eabc:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800eabe:	2290      	movs	r2, #144	; 0x90
 800eac0:	4669      	mov	r1, sp
 800eac2:	f001 fb9e 	bl	8010202 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800eac6:	682c      	ldr	r4, [r5, #0]
 800eac8:	4b1c      	ldr	r3, [pc, #112]	; (800eb3c <RegionEU868InitDefaults+0xd4>)
 800eaca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eace:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800ead2:	f104 0c0c 	add.w	ip, r4, #12
 800ead6:	f103 020c 	add.w	r2, r3, #12
 800eada:	ca07      	ldmia	r2, {r0, r1, r2}
 800eadc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800eae0:	f104 0c18 	add.w	ip, r4, #24
 800eae4:	3318      	adds	r3, #24
 800eae6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eaea:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800eaee:	2307      	movs	r3, #7
 800eaf0:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800eafa:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800eafe:	f7ff fb75 	bl	800e1ec <RegionCommonChanMaskCopy>
            break;
 800eb02:	e7cf      	b.n	800eaa4 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800eb04:	4b0b      	ldr	r3, [pc, #44]	; (800eb34 <RegionEU868InitDefaults+0xcc>)
 800eb06:	6818      	ldr	r0, [r3, #0]
 800eb08:	2300      	movs	r3, #0
 800eb0a:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800eb0c:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800eb0e:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800eb10:	2201      	movs	r2, #1
 800eb12:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800eb16:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800eb1a:	f7ff fb67 	bl	800e1ec <RegionCommonChanMaskCopy>
            break;
 800eb1e:	e7c1      	b.n	800eaa4 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800eb20:	4b04      	ldr	r3, [pc, #16]	; (800eb34 <RegionEU868InitDefaults+0xcc>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800eb28:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800eb2c:	430a      	orrs	r2, r1
 800eb2e:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800eb32:	e7b7      	b.n	800eaa4 <RegionEU868InitDefaults+0x3c>
 800eb34:	20000f4c 	.word	0x20000f4c
 800eb38:	20000f48 	.word	0x20000f48
 800eb3c:	08012c78 	.word	0x08012c78

0800eb40 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800eb40:	b500      	push	{lr}
 800eb42:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800eb44:	290f      	cmp	r1, #15
 800eb46:	d83c      	bhi.n	800ebc2 <RegionEU868Verify+0x82>
 800eb48:	e8df f001 	tbb	[pc, r1]
 800eb4c:	3b3b3b0a 	.word	0x3b3b3b0a
 800eb50:	271d133b 	.word	0x271d133b
 800eb54:	3b31313b 	.word	0x3b31313b
 800eb58:	083b3b3b 	.word	0x083b3b3b
 800eb5c:	2001      	movs	r0, #1
 800eb5e:	e031      	b.n	800ebc4 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800eb60:	2300      	movs	r3, #0
 800eb62:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800eb66:	f10d 0107 	add.w	r1, sp, #7
 800eb6a:	6800      	ldr	r0, [r0, #0]
 800eb6c:	f7ff fe1c 	bl	800e7a8 <VerifyRfFreq>
 800eb70:	e028      	b.n	800ebc4 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800eb72:	2207      	movs	r2, #7
 800eb74:	2100      	movs	r1, #0
 800eb76:	f990 0000 	ldrsb.w	r0, [r0]
 800eb7a:	f7ff fac6 	bl	800e10a <RegionCommonValueInRange>
 800eb7e:	3800      	subs	r0, #0
 800eb80:	bf18      	it	ne
 800eb82:	2001      	movne	r0, #1
 800eb84:	e01e      	b.n	800ebc4 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800eb86:	2205      	movs	r2, #5
 800eb88:	2100      	movs	r1, #0
 800eb8a:	f990 0000 	ldrsb.w	r0, [r0]
 800eb8e:	f7ff fabc 	bl	800e10a <RegionCommonValueInRange>
 800eb92:	3800      	subs	r0, #0
 800eb94:	bf18      	it	ne
 800eb96:	2001      	movne	r0, #1
 800eb98:	e014      	b.n	800ebc4 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800eb9a:	2207      	movs	r2, #7
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	f990 0000 	ldrsb.w	r0, [r0]
 800eba2:	f7ff fab2 	bl	800e10a <RegionCommonValueInRange>
 800eba6:	3800      	subs	r0, #0
 800eba8:	bf18      	it	ne
 800ebaa:	2001      	movne	r0, #1
 800ebac:	e00a      	b.n	800ebc4 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800ebae:	2207      	movs	r2, #7
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	f990 0000 	ldrsb.w	r0, [r0]
 800ebb6:	f7ff faa8 	bl	800e10a <RegionCommonValueInRange>
 800ebba:	3800      	subs	r0, #0
 800ebbc:	bf18      	it	ne
 800ebbe:	2001      	movne	r0, #1
 800ebc0:	e000      	b.n	800ebc4 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800ebc2:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800ebc4:	b003      	add	sp, #12
 800ebc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ebcc <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800ebcc:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800ebce:	7903      	ldrb	r3, [r0, #4]
 800ebd0:	b11b      	cbz	r3, 800ebda <RegionEU868ChanMaskSet+0xe>
 800ebd2:	2b01      	cmp	r3, #1
 800ebd4:	d00b      	beq.n	800ebee <RegionEU868ChanMaskSet+0x22>
 800ebd6:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800ebd8:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800ebda:	4b0a      	ldr	r3, [pc, #40]	; (800ec04 <RegionEU868ChanMaskSet+0x38>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	6801      	ldr	r1, [r0, #0]
 800ebe2:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800ebe6:	f7ff fb01 	bl	800e1ec <RegionCommonChanMaskCopy>
    return true;
 800ebea:	2001      	movs	r0, #1
            break;
 800ebec:	e7f4      	b.n	800ebd8 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800ebee:	4b05      	ldr	r3, [pc, #20]	; (800ec04 <RegionEU868ChanMaskSet+0x38>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	6801      	ldr	r1, [r0, #0]
 800ebf6:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800ebfa:	f7ff faf7 	bl	800e1ec <RegionCommonChanMaskCopy>
    return true;
 800ebfe:	2001      	movs	r0, #1
            break;
 800ec00:	e7ea      	b.n	800ebd8 <RegionEU868ChanMaskSet+0xc>
 800ec02:	bf00      	nop
 800ec04:	20000f4c 	.word	0x20000f4c

0800ec08 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800ec08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec0a:	b083      	sub	sp, #12
 800ec0c:	460e      	mov	r6, r1
 800ec0e:	4617      	mov	r7, r2
 800ec10:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800ec12:	2807      	cmp	r0, #7
 800ec14:	bfa8      	it	ge
 800ec16:	2007      	movge	r0, #7
 800ec18:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800ec1a:	4913      	ldr	r1, [pc, #76]	; (800ec68 <RegionEU868ComputeRxWindowParameters+0x60>)
 800ec1c:	f7ff fd80 	bl	800e720 <RegionCommonGetBandwidth>
 800ec20:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800ec22:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800ec26:	2b07      	cmp	r3, #7
 800ec28:	d017      	beq.n	800ec5a <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800ec2a:	4a0f      	ldr	r2, [pc, #60]	; (800ec68 <RegionEU868ComputeRxWindowParameters+0x60>)
 800ec2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ec30:	4a0e      	ldr	r2, [pc, #56]	; (800ec6c <RegionEU868ComputeRxWindowParameters+0x64>)
 800ec32:	5cd0      	ldrb	r0, [r2, r3]
 800ec34:	f7ff fc00 	bl	800e438 <RegionCommonComputeSymbolTimeLoRa>
 800ec38:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800ec3a:	4b0d      	ldr	r3, [pc, #52]	; (800ec70 <RegionEU868ComputeRxWindowParameters+0x68>)
 800ec3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec3e:	4798      	blx	r3
 800ec40:	4603      	mov	r3, r0
 800ec42:	f104 020c 	add.w	r2, r4, #12
 800ec46:	9201      	str	r2, [sp, #4]
 800ec48:	3408      	adds	r4, #8
 800ec4a:	9400      	str	r4, [sp, #0]
 800ec4c:	463a      	mov	r2, r7
 800ec4e:	4631      	mov	r1, r6
 800ec50:	4628      	mov	r0, r5
 800ec52:	f7ff fbff 	bl	800e454 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800ec56:	b003      	add	sp, #12
 800ec58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800ec5a:	4a04      	ldr	r2, [pc, #16]	; (800ec6c <RegionEU868ComputeRxWindowParameters+0x64>)
 800ec5c:	5cd0      	ldrb	r0, [r2, r3]
 800ec5e:	f7ff fbf3 	bl	800e448 <RegionCommonComputeSymbolTimeFsk>
 800ec62:	4605      	mov	r5, r0
 800ec64:	e7e9      	b.n	800ec3a <RegionEU868ComputeRxWindowParameters+0x32>
 800ec66:	bf00      	nop
 800ec68:	08013420 	.word	0x08013420
 800ec6c:	08013440 	.word	0x08013440
 800ec70:	080139bc 	.word	0x080139bc

0800ec74 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800ec74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec78:	b08a      	sub	sp, #40	; 0x28
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800ec7e:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800ec82:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800ec86:	4b37      	ldr	r3, [pc, #220]	; (800ed64 <RegionEU868RxConfig+0xf0>)
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	4798      	blx	r3
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d167      	bne.n	800ed60 <RegionEU868RxConfig+0xec>
 800ec90:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800ec92:	7ce3      	ldrb	r3, [r4, #19]
 800ec94:	b983      	cbnz	r3, 800ecb8 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ec96:	4b34      	ldr	r3, [pc, #208]	; (800ed68 <RegionEU868RxConfig+0xf4>)
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	7823      	ldrb	r3, [r4, #0]
 800ec9c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800eca0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800eca4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800eca8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ecac:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ecb0:	f1b8 0f00 	cmp.w	r8, #0
 800ecb4:	d100      	bne.n	800ecb8 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800ecb6:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800ecb8:	4b2c      	ldr	r3, [pc, #176]	; (800ed6c <RegionEU868RxConfig+0xf8>)
 800ecba:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800ecbe:	4b29      	ldr	r3, [pc, #164]	; (800ed64 <RegionEU868RxConfig+0xf0>)
 800ecc0:	68db      	ldr	r3, [r3, #12]
 800ecc2:	4640      	mov	r0, r8
 800ecc4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800ecc6:	2d07      	cmp	r5, #7
 800ecc8:	d02b      	beq.n	800ed22 <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800ecca:	4b26      	ldr	r3, [pc, #152]	; (800ed64 <RegionEU868RxConfig+0xf0>)
 800eccc:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ecd0:	7ca3      	ldrb	r3, [r4, #18]
 800ecd2:	9309      	str	r3, [sp, #36]	; 0x24
 800ecd4:	2601      	movs	r6, #1
 800ecd6:	9608      	str	r6, [sp, #32]
 800ecd8:	2300      	movs	r3, #0
 800ecda:	9307      	str	r3, [sp, #28]
 800ecdc:	9306      	str	r3, [sp, #24]
 800ecde:	9305      	str	r3, [sp, #20]
 800ece0:	9304      	str	r3, [sp, #16]
 800ece2:	9303      	str	r3, [sp, #12]
 800ece4:	8922      	ldrh	r2, [r4, #8]
 800ece6:	9202      	str	r2, [sp, #8]
 800ece8:	2208      	movs	r2, #8
 800ecea:	9201      	str	r2, [sp, #4]
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	4633      	mov	r3, r6
 800ecf0:	464a      	mov	r2, r9
 800ecf2:	78a1      	ldrb	r1, [r4, #2]
 800ecf4:	4630      	mov	r0, r6
 800ecf6:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800ecf8:	7c63      	ldrb	r3, [r4, #17]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d02d      	beq.n	800ed5a <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800ecfe:	4b1c      	ldr	r3, [pc, #112]	; (800ed70 <RegionEU868RxConfig+0xfc>)
 800ed00:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ed02:	4b18      	ldr	r3, [pc, #96]	; (800ed64 <RegionEU868RxConfig+0xf0>)
 800ed04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed06:	310d      	adds	r1, #13
 800ed08:	b2c9      	uxtb	r1, r1
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ed0e:	462a      	mov	r2, r5
 800ed10:	4641      	mov	r1, r8
 800ed12:	7ce0      	ldrb	r0, [r4, #19]
 800ed14:	f7ff fd16 	bl	800e744 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800ed18:	703d      	strb	r5, [r7, #0]
    return true;
 800ed1a:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800ed1c:	b00a      	add	sp, #40	; 0x28
 800ed1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800ed22:	4b10      	ldr	r3, [pc, #64]	; (800ed64 <RegionEU868RxConfig+0xf0>)
 800ed24:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800ed28:	7ca3      	ldrb	r3, [r4, #18]
 800ed2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	9008      	str	r0, [sp, #32]
 800ed30:	9007      	str	r0, [sp, #28]
 800ed32:	9006      	str	r0, [sp, #24]
 800ed34:	2301      	movs	r3, #1
 800ed36:	9305      	str	r3, [sp, #20]
 800ed38:	9004      	str	r0, [sp, #16]
 800ed3a:	9003      	str	r0, [sp, #12]
 800ed3c:	8923      	ldrh	r3, [r4, #8]
 800ed3e:	9302      	str	r3, [sp, #8]
 800ed40:	2305      	movs	r3, #5
 800ed42:	9301      	str	r3, [sp, #4]
 800ed44:	4b0b      	ldr	r3, [pc, #44]	; (800ed74 <RegionEU868RxConfig+0x100>)
 800ed46:	9300      	str	r3, [sp, #0]
 800ed48:	4603      	mov	r3, r0
 800ed4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ed4e:	fb02 f209 	mul.w	r2, r2, r9
 800ed52:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ed56:	47d0      	blx	sl
 800ed58:	e7ce      	b.n	800ecf8 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800ed5a:	4b07      	ldr	r3, [pc, #28]	; (800ed78 <RegionEU868RxConfig+0x104>)
 800ed5c:	5d59      	ldrb	r1, [r3, r5]
 800ed5e:	e7d0      	b.n	800ed02 <RegionEU868RxConfig+0x8e>
        return false;
 800ed60:	2000      	movs	r0, #0
 800ed62:	e7db      	b.n	800ed1c <RegionEU868RxConfig+0xa8>
 800ed64:	080139bc 	.word	0x080139bc
 800ed68:	20000f4c 	.word	0x20000f4c
 800ed6c:	08013440 	.word	0x08013440
 800ed70:	08013450 	.word	0x08013450
 800ed74:	00014585 	.word	0x00014585
 800ed78:	08013448 	.word	0x08013448

0800ed7c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ed7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed80:	b08d      	sub	sp, #52	; 0x34
 800ed82:	4604      	mov	r4, r0
 800ed84:	460f      	mov	r7, r1
 800ed86:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800ed88:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ed8c:	4a42      	ldr	r2, [pc, #264]	; (800ee98 <RegionEU868TxConfig+0x11c>)
 800ed8e:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800ed92:	4d42      	ldr	r5, [pc, #264]	; (800ee9c <RegionEU868TxConfig+0x120>)
 800ed94:	682a      	ldr	r2, [r5, #0]
 800ed96:	7803      	ldrb	r3, [r0, #0]
 800ed98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ed9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eda0:	7a5b      	ldrb	r3, [r3, #9]
 800eda2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800eda6:	4a3e      	ldr	r2, [pc, #248]	; (800eea0 <RegionEU868TxConfig+0x124>)
 800eda8:	6812      	ldr	r2, [r2, #0]
 800edaa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800edae:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800edb2:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800edb6:	f7ff fcaf 	bl	800e718 <RegionCommonLimitTxPower>
 800edba:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800edbc:	4939      	ldr	r1, [pc, #228]	; (800eea4 <RegionEU868TxConfig+0x128>)
 800edbe:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800edc2:	f7ff fcad 	bl	800e720 <RegionCommonGetBandwidth>
 800edc6:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800edc8:	68a2      	ldr	r2, [r4, #8]
 800edca:	6861      	ldr	r1, [r4, #4]
 800edcc:	4630      	mov	r0, r6
 800edce:	f7ff fb7d 	bl	800e4cc <RegionCommonComputeTxPower>
 800edd2:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800edd4:	4b34      	ldr	r3, [pc, #208]	; (800eea8 <RegionEU868TxConfig+0x12c>)
 800edd6:	68da      	ldr	r2, [r3, #12]
 800edd8:	6829      	ldr	r1, [r5, #0]
 800edda:	7823      	ldrb	r3, [r4, #0]
 800eddc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ede0:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800ede4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800ede6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800edea:	2b07      	cmp	r3, #7
 800edec:	d031      	beq.n	800ee52 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800edee:	4b2e      	ldr	r3, [pc, #184]	; (800eea8 <RegionEU868TxConfig+0x12c>)
 800edf0:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800edf4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800edf8:	9308      	str	r3, [sp, #32]
 800edfa:	2200      	movs	r2, #0
 800edfc:	9207      	str	r2, [sp, #28]
 800edfe:	9206      	str	r2, [sp, #24]
 800ee00:	9205      	str	r2, [sp, #20]
 800ee02:	2501      	movs	r5, #1
 800ee04:	9504      	str	r5, [sp, #16]
 800ee06:	9203      	str	r2, [sp, #12]
 800ee08:	2308      	movs	r3, #8
 800ee0a:	9302      	str	r3, [sp, #8]
 800ee0c:	9501      	str	r5, [sp, #4]
 800ee0e:	f8cd a000 	str.w	sl, [sp]
 800ee12:	464b      	mov	r3, r9
 800ee14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee16:	4628      	mov	r0, r5
 800ee18:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800ee1a:	4b20      	ldr	r3, [pc, #128]	; (800ee9c <RegionEU868TxConfig+0x120>)
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	7823      	ldrb	r3, [r4, #0]
 800ee20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ee24:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800ee28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ee2c:	f7ff fcac 	bl	800e788 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800ee30:	89a1      	ldrh	r1, [r4, #12]
 800ee32:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800ee36:	f7ff fd0b 	bl	800e850 <GetTimeOnAir>
 800ee3a:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800ee3e:	4b1a      	ldr	r3, [pc, #104]	; (800eea8 <RegionEU868TxConfig+0x12c>)
 800ee40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee42:	7b21      	ldrb	r1, [r4, #12]
 800ee44:	4628      	mov	r0, r5
 800ee46:	4798      	blx	r3

    *txPower = txPowerLimited;
 800ee48:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800ee4a:	2001      	movs	r0, #1
 800ee4c:	b00d      	add	sp, #52	; 0x34
 800ee4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800ee52:	4b15      	ldr	r3, [pc, #84]	; (800eea8 <RegionEU868TxConfig+0x12c>)
 800ee54:	69dd      	ldr	r5, [r3, #28]
 800ee56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee5a:	fb03 f30a 	mul.w	r3, r3, sl
 800ee5e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800ee62:	9208      	str	r2, [sp, #32]
 800ee64:	f04f 0b00 	mov.w	fp, #0
 800ee68:	f8cd b01c 	str.w	fp, [sp, #28]
 800ee6c:	f8cd b018 	str.w	fp, [sp, #24]
 800ee70:	f8cd b014 	str.w	fp, [sp, #20]
 800ee74:	2201      	movs	r2, #1
 800ee76:	9204      	str	r2, [sp, #16]
 800ee78:	f8cd b00c 	str.w	fp, [sp, #12]
 800ee7c:	2205      	movs	r2, #5
 800ee7e:	9202      	str	r2, [sp, #8]
 800ee80:	f8cd b004 	str.w	fp, [sp, #4]
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	464b      	mov	r3, r9
 800ee88:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800ee8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee8e:	4658      	mov	r0, fp
 800ee90:	47a8      	blx	r5
        modem = MODEM_FSK;
 800ee92:	465d      	mov	r5, fp
 800ee94:	e7c1      	b.n	800ee1a <RegionEU868TxConfig+0x9e>
 800ee96:	bf00      	nop
 800ee98:	08013440 	.word	0x08013440
 800ee9c:	20000f4c 	.word	0x20000f4c
 800eea0:	20000f48 	.word	0x20000f48
 800eea4:	08013420 	.word	0x08013420
 800eea8:	080139bc 	.word	0x080139bc

0800eeac <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800eeac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eeb0:	b08f      	sub	sp, #60	; 0x3c
 800eeb2:	4605      	mov	r5, r0
 800eeb4:	4689      	mov	r9, r1
 800eeb6:	4690      	mov	r8, r2
 800eeb8:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800eeba:	2400      	movs	r4, #0
 800eebc:	940c      	str	r4, [sp, #48]	; 0x30
 800eebe:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800eec2:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800eec6:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800eec8:	e030      	b.n	800ef2c <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800eeca:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800eece:	2607      	movs	r6, #7
 800eed0:	e012      	b.n	800eef8 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800eed2:	4a57      	ldr	r2, [pc, #348]	; (800f030 <RegionEU868LinkAdrReq+0x184>)
 800eed4:	6812      	ldr	r2, [r2, #0]
 800eed6:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800eeda:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800eede:	b13a      	cbz	r2, 800eef0 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800eee0:	2201      	movs	r2, #1
 800eee2:	fa02 f20c 	lsl.w	r2, r2, ip
 800eee6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800eeea:	430a      	orrs	r2, r1
 800eeec:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800eef0:	f10c 0c01 	add.w	ip, ip, #1
 800eef4:	fa5f fc8c 	uxtb.w	ip, ip
 800eef8:	f1bc 0f0f 	cmp.w	ip, #15
 800eefc:	d816      	bhi.n	800ef2c <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800eefe:	2b06      	cmp	r3, #6
 800ef00:	d0e7      	beq.n	800eed2 <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800ef02:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800ef06:	fa4e fe0c 	asr.w	lr, lr, ip
 800ef0a:	f01e 0f01 	tst.w	lr, #1
 800ef0e:	d0ef      	beq.n	800eef0 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800ef10:	4a47      	ldr	r2, [pc, #284]	; (800f030 <RegionEU868LinkAdrReq+0x184>)
 800ef12:	6812      	ldr	r2, [r2, #0]
 800ef14:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800ef18:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800ef1c:	2a00      	cmp	r2, #0
 800ef1e:	d1e7      	bne.n	800eef0 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800ef20:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800ef24:	e7e4      	b.n	800eef0 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800ef26:	2606      	movs	r6, #6
 800ef28:	e000      	b.n	800ef2c <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800ef2a:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800ef2c:	7a2b      	ldrb	r3, [r5, #8]
 800ef2e:	42a3      	cmp	r3, r4
 800ef30:	d918      	bls.n	800ef64 <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800ef32:	6868      	ldr	r0, [r5, #4]
 800ef34:	a90c      	add	r1, sp, #48	; 0x30
 800ef36:	4420      	add	r0, r4
 800ef38:	f7ff fa08 	bl	800e34c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800ef3c:	b190      	cbz	r0, 800ef64 <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800ef3e:	4404      	add	r4, r0
 800ef40:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800ef42:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800ef46:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800ef4a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ef4e:	b90b      	cbnz	r3, 800ef54 <RegionEU868LinkAdrReq+0xa8>
 800ef50:	2a00      	cmp	r2, #0
 800ef52:	d0e8      	beq.n	800ef26 <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800ef54:	1e5a      	subs	r2, r3, #1
 800ef56:	b2d2      	uxtb	r2, r2
 800ef58:	2a04      	cmp	r2, #4
 800ef5a:	d9e6      	bls.n	800ef2a <RegionEU868LinkAdrReq+0x7e>
 800ef5c:	2b06      	cmp	r3, #6
 800ef5e:	d9b4      	bls.n	800eeca <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800ef60:	2606      	movs	r6, #6
 800ef62:	e7e3      	b.n	800ef2c <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ef64:	2302      	movs	r3, #2
 800ef66:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800ef6a:	7a6b      	ldrb	r3, [r5, #9]
 800ef6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800ef70:	a80a      	add	r0, sp, #40	; 0x28
 800ef72:	f7ff fc9f 	bl	800e8b4 <RegionEU868GetPhyParam>
 800ef76:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800ef78:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800ef7c:	7aab      	ldrb	r3, [r5, #10]
 800ef7e:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800ef82:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800ef86:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800ef8a:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800ef8e:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800ef92:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ef96:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800ef9a:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800ef9e:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800efa2:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800efa6:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800efaa:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800efae:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800efb2:	2310      	movs	r3, #16
 800efb4:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800efb8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800efbc:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800efbe:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800efc2:	2307      	movs	r3, #7
 800efc4:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800efc8:	4a19      	ldr	r2, [pc, #100]	; (800f030 <RegionEU868LinkAdrReq+0x184>)
 800efca:	6812      	ldr	r2, [r2, #0]
 800efcc:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800efce:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800efd2:	2300      	movs	r3, #0
 800efd4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800efd8:	682b      	ldr	r3, [r5, #0]
 800efda:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800efdc:	ab0c      	add	r3, sp, #48	; 0x30
 800efde:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800efe2:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800efe6:	a801      	add	r0, sp, #4
 800efe8:	f7ff f9ce 	bl	800e388 <RegionCommonLinkAdrReqVerifyParams>
 800efec:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800efee:	2807      	cmp	r0, #7
 800eff0:	d010      	beq.n	800f014 <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800eff2:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800eff6:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800effa:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800effe:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800f002:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f006:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800f008:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f00a:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800f00c:	4628      	mov	r0, r5
 800f00e:	b00f      	add	sp, #60	; 0x3c
 800f010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800f014:	4e06      	ldr	r6, [pc, #24]	; (800f030 <RegionEU868LinkAdrReq+0x184>)
 800f016:	6830      	ldr	r0, [r6, #0]
 800f018:	220c      	movs	r2, #12
 800f01a:	2100      	movs	r1, #0
 800f01c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f020:	f001 f907 	bl	8010232 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800f024:	6833      	ldr	r3, [r6, #0]
 800f026:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800f02a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800f02e:	e7e0      	b.n	800eff2 <RegionEU868LinkAdrReq+0x146>
 800f030:	20000f4c 	.word	0x20000f4c

0800f034 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800f034:	b530      	push	{r4, r5, lr}
 800f036:	b083      	sub	sp, #12
 800f038:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f03a:	2300      	movs	r3, #0
 800f03c:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800f040:	f10d 0107 	add.w	r1, sp, #7
 800f044:	6840      	ldr	r0, [r0, #4]
 800f046:	f7ff fbaf 	bl	800e7a8 <VerifyRfFreq>
 800f04a:	b1a8      	cbz	r0, 800f078 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800f04c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800f04e:	2207      	movs	r2, #7
 800f050:	2100      	movs	r1, #0
 800f052:	f994 0000 	ldrsb.w	r0, [r4]
 800f056:	f7ff f858 	bl	800e10a <RegionCommonValueInRange>
 800f05a:	b908      	cbnz	r0, 800f060 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800f05c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800f060:	2205      	movs	r2, #5
 800f062:	2100      	movs	r1, #0
 800f064:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f068:	f7ff f84f 	bl	800e10a <RegionCommonValueInRange>
 800f06c:	b908      	cbnz	r0, 800f072 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800f06e:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800f072:	4628      	mov	r0, r5
 800f074:	b003      	add	sp, #12
 800f076:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800f078:	2506      	movs	r5, #6
 800f07a:	e7e8      	b.n	800f04e <RegionEU868RxParamSetupReq+0x1a>

0800f07c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800f07c:	f04f 30ff 	mov.w	r0, #4294967295
 800f080:	4770      	bx	lr
	...

0800f084 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800f084:	b510      	push	{r4, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f08a:	2300      	movs	r3, #0
 800f08c:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800f090:	f10d 0107 	add.w	r1, sp, #7
 800f094:	6840      	ldr	r0, [r0, #4]
 800f096:	f7ff fb87 	bl	800e7a8 <VerifyRfFreq>
 800f09a:	b178      	cbz	r0, 800f0bc <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 800f09c:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800f09e:	4b0c      	ldr	r3, [pc, #48]	; (800f0d0 <RegionEU868DlChannelReq+0x4c>)
 800f0a0:	681a      	ldr	r2, [r3, #0]
 800f0a2:	7823      	ldrb	r3, [r4, #0]
 800f0a4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800f0a8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800f0ac:	b909      	cbnz	r1, 800f0b2 <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 800f0ae:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800f0b2:	2803      	cmp	r0, #3
 800f0b4:	d004      	beq.n	800f0c0 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800f0b6:	b240      	sxtb	r0, r0
 800f0b8:	b002      	add	sp, #8
 800f0ba:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800f0bc:	2002      	movs	r0, #2
 800f0be:	e7ee      	b.n	800f09e <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800f0c0:	6861      	ldr	r1, [r4, #4]
 800f0c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f0c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f0ca:	6059      	str	r1, [r3, #4]
 800f0cc:	e7f3      	b.n	800f0b6 <RegionEU868DlChannelReq+0x32>
 800f0ce:	bf00      	nop
 800f0d0:	20000f4c 	.word	0x20000f4c

0800f0d4 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800f0d4:	4770      	bx	lr
	...

0800f0d8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0da:	b097      	sub	sp, #92	; 0x5c
 800f0dc:	4604      	mov	r4, r0
 800f0de:	460f      	mov	r7, r1
 800f0e0:	4616      	mov	r6, r2
 800f0e2:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800f0e4:	2100      	movs	r1, #0
 800f0e6:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800f0ea:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800f0ee:	9111      	str	r1, [sp, #68]	; 0x44
 800f0f0:	9112      	str	r1, [sp, #72]	; 0x48
 800f0f2:	9113      	str	r1, [sp, #76]	; 0x4c
 800f0f4:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800f0f6:	2307      	movs	r3, #7
 800f0f8:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800f0fc:	4b34      	ldr	r3, [pc, #208]	; (800f1d0 <RegionEU868NextChannel+0xf8>)
 800f0fe:	6818      	ldr	r0, [r3, #0]
 800f100:	2201      	movs	r2, #1
 800f102:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f106:	f7ff f85b 	bl	800e1c0 <RegionCommonCountChannels>
 800f10a:	b938      	cbnz	r0, 800f11c <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f10c:	4b30      	ldr	r3, [pc, #192]	; (800f1d0 <RegionEU868NextChannel+0xf8>)
 800f10e:	681a      	ldr	r2, [r3, #0]
 800f110:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f114:	f043 0307 	orr.w	r3, r3, #7
 800f118:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800f11c:	7a63      	ldrb	r3, [r4, #9]
 800f11e:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800f122:	7a23      	ldrb	r3, [r4, #8]
 800f124:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f128:	4b29      	ldr	r3, [pc, #164]	; (800f1d0 <RegionEU868NextChannel+0xf8>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800f130:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800f132:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800f134:	4b27      	ldr	r3, [pc, #156]	; (800f1d4 <RegionEU868NextChannel+0xfc>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800f13a:	2310      	movs	r3, #16
 800f13c:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800f140:	f10d 030a 	add.w	r3, sp, #10
 800f144:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800f146:	6823      	ldr	r3, [r4, #0]
 800f148:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800f14a:	6863      	ldr	r3, [r4, #4]
 800f14c:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800f14e:	7aa3      	ldrb	r3, [r4, #10]
 800f150:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800f154:	2306      	movs	r3, #6
 800f156:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800f15a:	ab0c      	add	r3, sp, #48	; 0x30
 800f15c:	f104 020c 	add.w	r2, r4, #12
 800f160:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f164:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800f168:	7d23      	ldrb	r3, [r4, #20]
 800f16a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800f16e:	8ae1      	ldrh	r1, [r4, #22]
 800f170:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800f174:	f7ff fb6c 	bl	800e850 <GetTimeOnAir>
 800f178:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800f17a:	ab03      	add	r3, sp, #12
 800f17c:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800f17e:	9601      	str	r6, [sp, #4]
 800f180:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800f18a:	aa11      	add	r2, sp, #68	; 0x44
 800f18c:	4629      	mov	r1, r5
 800f18e:	a809      	add	r0, sp, #36	; 0x24
 800f190:	f7ff fa59 	bl	800e646 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800f194:	4604      	mov	r4, r0
 800f196:	b120      	cbz	r0, 800f1a2 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800f198:	280c      	cmp	r0, #12
 800f19a:	d00f      	beq.n	800f1bc <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f19c:	4620      	mov	r0, r4
 800f19e:	b017      	add	sp, #92	; 0x5c
 800f1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800f1a2:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800f1a6:	3901      	subs	r1, #1
 800f1a8:	f001 f81e 	bl	80101e8 <randr>
 800f1ac:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800f1b0:	eb0d 0003 	add.w	r0, sp, r3
 800f1b4:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800f1b8:	703b      	strb	r3, [r7, #0]
 800f1ba:	e7ef      	b.n	800f19c <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f1bc:	4b04      	ldr	r3, [pc, #16]	; (800f1d0 <RegionEU868NextChannel+0xf8>)
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f1c4:	f043 0307 	orr.w	r3, r3, #7
 800f1c8:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800f1cc:	e7e6      	b.n	800f19c <RegionEU868NextChannel+0xc4>
 800f1ce:	bf00      	nop
 800f1d0:	20000f4c 	.word	0x20000f4c
 800f1d4:	20000f48 	.word	0x20000f48

0800f1d8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800f1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1da:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800f1e2:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f1e4:	2d02      	cmp	r5, #2
 800f1e6:	d94f      	bls.n	800f288 <RegionEU868ChannelAdd+0xb0>
 800f1e8:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800f1ea:	2d0f      	cmp	r5, #15
 800f1ec:	d84e      	bhi.n	800f28c <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f1ee:	6803      	ldr	r3, [r0, #0]
 800f1f0:	7a18      	ldrb	r0, [r3, #8]
 800f1f2:	f340 0003 	sbfx	r0, r0, #0, #4
 800f1f6:	2207      	movs	r2, #7
 800f1f8:	2100      	movs	r1, #0
 800f1fa:	b240      	sxtb	r0, r0
 800f1fc:	f7fe ff85 	bl	800e10a <RegionCommonValueInRange>
 800f200:	2800      	cmp	r0, #0
 800f202:	d03d      	beq.n	800f280 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800f204:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f206:	6823      	ldr	r3, [r4, #0]
 800f208:	7a18      	ldrb	r0, [r3, #8]
 800f20a:	f340 1003 	sbfx	r0, r0, #4, #4
 800f20e:	2207      	movs	r2, #7
 800f210:	2100      	movs	r1, #0
 800f212:	b240      	sxtb	r0, r0
 800f214:	f7fe ff79 	bl	800e10a <RegionCommonValueInRange>
 800f218:	b900      	cbnz	r0, 800f21c <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800f21a:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800f21c:	6820      	ldr	r0, [r4, #0]
 800f21e:	7a03      	ldrb	r3, [r0, #8]
 800f220:	f343 0203 	sbfx	r2, r3, #0, #4
 800f224:	b252      	sxtb	r2, r2
 800f226:	f343 1303 	sbfx	r3, r3, #4, #4
 800f22a:	b25b      	sxtb	r3, r3
 800f22c:	429a      	cmp	r2, r3
 800f22e:	dd00      	ble.n	800f232 <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800f230:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800f232:	f10d 0107 	add.w	r1, sp, #7
 800f236:	6800      	ldr	r0, [r0, #0]
 800f238:	f7ff fab6 	bl	800e7a8 <VerifyRfFreq>
 800f23c:	b310      	cbz	r0, 800f284 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800f23e:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800f240:	b106      	cbz	r6, 800f244 <RegionEU868ChannelAdd+0x6c>
 800f242:	bb33      	cbnz	r3, 800f292 <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800f244:	bb3e      	cbnz	r6, 800f296 <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800f246:	bb43      	cbnz	r3, 800f29a <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800f248:	4f15      	ldr	r7, [pc, #84]	; (800f2a0 <RegionEU868ChannelAdd+0xc8>)
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	006e      	lsls	r6, r5, #1
 800f24e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800f252:	220c      	movs	r2, #12
 800f254:	6821      	ldr	r1, [r4, #0]
 800f256:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f25a:	f000 ffd2 	bl	8010202 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800f25e:	683a      	ldr	r2, [r7, #0]
 800f260:	442e      	add	r6, r5
 800f262:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f266:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f26a:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800f26c:	2301      	movs	r3, #1
 800f26e:	fa03 f505 	lsl.w	r5, r3, r5
 800f272:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f276:	431d      	orrs	r5, r3
 800f278:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800f27c:	2000      	movs	r0, #0
 800f27e:	e006      	b.n	800f28e <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800f280:	2601      	movs	r6, #1
 800f282:	e7c0      	b.n	800f206 <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800f284:	2301      	movs	r3, #1
 800f286:	e7db      	b.n	800f240 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f288:	2006      	movs	r0, #6
 800f28a:	e000      	b.n	800f28e <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f28c:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f28e:	b003      	add	sp, #12
 800f290:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f292:	2006      	movs	r0, #6
 800f294:	e7fb      	b.n	800f28e <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800f296:	2005      	movs	r0, #5
 800f298:	e7f9      	b.n	800f28e <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800f29a:	2004      	movs	r0, #4
 800f29c:	e7f7      	b.n	800f28e <RegionEU868ChannelAdd+0xb6>
 800f29e:	bf00      	nop
 800f2a0:	20000f4c 	.word	0x20000f4c

0800f2a4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800f2a4:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f2a6:	2902      	cmp	r1, #2
 800f2a8:	d801      	bhi.n	800f2ae <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800f2aa:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800f2ac:	4770      	bx	lr
{
 800f2ae:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800f2b0:	4b09      	ldr	r3, [pc, #36]	; (800f2d8 <RegionEU868ChannelsRemove+0x34>)
 800f2b2:	6818      	ldr	r0, [r3, #0]
 800f2b4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800f2b8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f2bc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	f840 200c 	str.w	r2, [r0, ip]
 800f2c6:	605a      	str	r2, [r3, #4]
 800f2c8:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800f2ca:	2210      	movs	r2, #16
 800f2cc:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f2d0:	f7fe ff5d 	bl	800e18e <RegionCommonChanDisable>
}
 800f2d4:	bd08      	pop	{r3, pc}
 800f2d6:	bf00      	nop
 800f2d8:	20000f4c 	.word	0x20000f4c

0800f2dc <RegionEU868ApplyCFList>:
{
 800f2dc:	b570      	push	{r4, r5, r6, lr}
 800f2de:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800f2e0:	2350      	movs	r3, #80	; 0x50
 800f2e2:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800f2e6:	7a03      	ldrb	r3, [r0, #8]
 800f2e8:	2b10      	cmp	r3, #16
 800f2ea:	d136      	bne.n	800f35a <RegionEU868ApplyCFList+0x7e>
 800f2ec:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800f2ee:	6843      	ldr	r3, [r0, #4]
 800f2f0:	7bdd      	ldrb	r5, [r3, #15]
 800f2f2:	2d00      	cmp	r5, #0
 800f2f4:	d131      	bne.n	800f35a <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f2f6:	2403      	movs	r4, #3
 800f2f8:	e01b      	b.n	800f332 <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800f2fa:	6872      	ldr	r2, [r6, #4]
 800f2fc:	5d53      	ldrb	r3, [r2, r5]
 800f2fe:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800f300:	442a      	add	r2, r5
 800f302:	7851      	ldrb	r1, [r2, #1]
 800f304:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f308:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800f30a:	7892      	ldrb	r2, [r2, #2]
 800f30c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f310:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800f312:	2264      	movs	r2, #100	; 0x64
 800f314:	fb02 f303 	mul.w	r3, r2, r3
 800f318:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800f31a:	2300      	movs	r3, #0
 800f31c:	9304      	str	r3, [sp, #16]
 800f31e:	e011      	b.n	800f344 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800f320:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800f324:	4668      	mov	r0, sp
 800f326:	f7ff ffbd 	bl	800f2a4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f32a:	3503      	adds	r5, #3
 800f32c:	b2ed      	uxtb	r5, r5
 800f32e:	3401      	adds	r4, #1
 800f330:	b2e4      	uxtb	r4, r4
 800f332:	2c0f      	cmp	r4, #15
 800f334:	d811      	bhi.n	800f35a <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800f336:	2c07      	cmp	r4, #7
 800f338:	d9df      	bls.n	800f2fa <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800f33a:	2300      	movs	r3, #0
 800f33c:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800f33e:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800f342:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800f344:	9b03      	ldr	r3, [sp, #12]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d0ea      	beq.n	800f320 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800f34a:	ab03      	add	r3, sp, #12
 800f34c:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800f34e:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800f352:	a801      	add	r0, sp, #4
 800f354:	f7ff ff40 	bl	800f1d8 <RegionEU868ChannelAdd>
 800f358:	e7e7      	b.n	800f32a <RegionEU868ApplyCFList+0x4e>
}
 800f35a:	b006      	add	sp, #24
 800f35c:	bd70      	pop	{r4, r5, r6, pc}

0800f35e <RegionEU868NewChannelReq>:
{
 800f35e:	b500      	push	{lr}
 800f360:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800f362:	6803      	ldr	r3, [r0, #0]
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	b952      	cbnz	r2, 800f37e <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800f368:	7903      	ldrb	r3, [r0, #4]
 800f36a:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800f36e:	a801      	add	r0, sp, #4
 800f370:	f7ff ff98 	bl	800f2a4 <RegionEU868ChannelsRemove>
 800f374:	b1d0      	cbz	r0, 800f3ac <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800f376:	2003      	movs	r0, #3
}
 800f378:	b005      	add	sp, #20
 800f37a:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800f37e:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800f380:	7903      	ldrb	r3, [r0, #4]
 800f382:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800f386:	a802      	add	r0, sp, #8
 800f388:	f7ff ff26 	bl	800f1d8 <RegionEU868ChannelAdd>
 800f38c:	2806      	cmp	r0, #6
 800f38e:	d80b      	bhi.n	800f3a8 <RegionEU868NewChannelReq+0x4a>
 800f390:	e8df f000 	tbb	[pc, r0]
 800f394:	0a0a0a04 	.word	0x0a0a0a04
 800f398:	060e      	.short	0x060e
 800f39a:	08          	.byte	0x08
 800f39b:	00          	.byte	0x00
 800f39c:	2003      	movs	r0, #3
 800f39e:	e7eb      	b.n	800f378 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800f3a0:	2001      	movs	r0, #1
                break;
 800f3a2:	e7e9      	b.n	800f378 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f3a4:	2000      	movs	r0, #0
                break;
 800f3a6:	e7e7      	b.n	800f378 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800f3a8:	2000      	movs	r0, #0
                break;
 800f3aa:	e7e5      	b.n	800f378 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800f3ac:	2000      	movs	r0, #0
 800f3ae:	e7e3      	b.n	800f378 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800f3b0:	2002      	movs	r0, #2
 800f3b2:	e7e1      	b.n	800f378 <RegionEU868NewChannelReq+0x1a>

0800f3b4 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800f3b4:	1a88      	subs	r0, r1, r2
 800f3b6:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	db01      	blt.n	800f3c0 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800f3bc:	b2c0      	uxtb	r0, r0
 800f3be:	4770      	bx	lr
        datarate = DR_0;
 800f3c0:	2000      	movs	r0, #0
 800f3c2:	e7fb      	b.n	800f3bc <RegionEU868ApplyDrOffset+0x8>

0800f3c4 <RegionEU868RxBeaconSetup>:

void RegionEU868RxBeaconSetup( RxBeaconSetup_t* rxBeaconSetup, uint8_t* outDr )
{
 800f3c4:	b530      	push	{r4, r5, lr}
 800f3c6:	b087      	sub	sp, #28
 800f3c8:	460c      	mov	r4, r1
#if defined( REGION_EU868 )
    RegionCommonRxBeaconSetupParams_t regionCommonRxBeaconSetup;

    regionCommonRxBeaconSetup.Datarates = DataratesEU868;
 800f3ca:	4b0c      	ldr	r3, [pc, #48]	; (800f3fc <RegionEU868RxBeaconSetup+0x38>)
 800f3cc:	9301      	str	r3, [sp, #4]
    regionCommonRxBeaconSetup.Frequency = rxBeaconSetup->Frequency;
 800f3ce:	6883      	ldr	r3, [r0, #8]
 800f3d0:	9302      	str	r3, [sp, #8]
    regionCommonRxBeaconSetup.BeaconSize = EU868_BEACON_SIZE;
 800f3d2:	2311      	movs	r3, #17
 800f3d4:	f88d 300c 	strb.w	r3, [sp, #12]
    regionCommonRxBeaconSetup.BeaconDatarate = EU868_BEACON_CHANNEL_DR;
 800f3d8:	2503      	movs	r5, #3
 800f3da:	f88d 500d 	strb.w	r5, [sp, #13]
    regionCommonRxBeaconSetup.BeaconChannelBW = EU868_BEACON_CHANNEL_BW;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	f88d 300e 	strb.w	r3, [sp, #14]
    regionCommonRxBeaconSetup.RxTime = rxBeaconSetup->RxTime;
 800f3e4:	6843      	ldr	r3, [r0, #4]
 800f3e6:	9304      	str	r3, [sp, #16]
    regionCommonRxBeaconSetup.SymbolTimeout = rxBeaconSetup->SymbolTimeout;
 800f3e8:	8803      	ldrh	r3, [r0, #0]
 800f3ea:	f8ad 3014 	strh.w	r3, [sp, #20]

    RegionCommonRxBeaconSetup( &regionCommonRxBeaconSetup );
 800f3ee:	a801      	add	r0, sp, #4
 800f3f0:	f7ff f882 	bl	800e4f8 <RegionCommonRxBeaconSetup>

    // Store downlink datarate
    *outDr = EU868_BEACON_CHANNEL_DR;
 800f3f4:	7025      	strb	r5, [r4, #0]
#endif /* REGION_EU868 */
}
 800f3f6:	b007      	add	sp, #28
 800f3f8:	bd30      	pop	{r4, r5, pc}
 800f3fa:	bf00      	nop
 800f3fc:	08013440 	.word	0x08013440

0800f400 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800f400:	b510      	push	{r4, lr}
 800f402:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800f404:	2210      	movs	r2, #16
 800f406:	2100      	movs	r1, #0
 800f408:	30f1      	adds	r0, #241	; 0xf1
 800f40a:	f000 ff12 	bl	8010232 <memset1>
    ctx->M_n = 0;
 800f40e:	2100      	movs	r1, #0
 800f410:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800f414:	22f0      	movs	r2, #240	; 0xf0
 800f416:	4620      	mov	r0, r4
 800f418:	f000 ff0b 	bl	8010232 <memset1>
}
 800f41c:	bd10      	pop	{r4, pc}

0800f41e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800f41e:	b508      	push	{r3, lr}
 800f420:	4602      	mov	r2, r0
 800f422:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800f424:	2110      	movs	r1, #16
 800f426:	f000 fb3b 	bl	800faa0 <lorawan_aes_set_key>
}
 800f42a:	bd08      	pop	{r3, pc}

0800f42c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800f42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f430:	b084      	sub	sp, #16
 800f432:	4604      	mov	r4, r0
 800f434:	460d      	mov	r5, r1
 800f436:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800f438:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d054      	beq.n	800f4ea <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800f440:	f1c3 0810 	rsb	r8, r3, #16
 800f444:	4647      	mov	r7, r8
 800f446:	4590      	cmp	r8, r2
 800f448:	bf28      	it	cs
 800f44a:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800f44c:	f200 1001 	addw	r0, r0, #257	; 0x101
 800f450:	b2ba      	uxth	r2, r7
 800f452:	4418      	add	r0, r3
 800f454:	f000 fed5 	bl	8010202 <memcpy1>
        ctx->M_n += mlen;
 800f458:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800f45c:	443b      	add	r3, r7
 800f45e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800f462:	2b0f      	cmp	r3, #15
 800f464:	d94d      	bls.n	800f502 <AES_CMAC_Update+0xd6>
 800f466:	45b0      	cmp	r8, r6
 800f468:	d24b      	bcs.n	800f502 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800f46a:	2300      	movs	r3, #0
 800f46c:	e008      	b.n	800f480 <AES_CMAC_Update+0x54>
 800f46e:	18e2      	adds	r2, r4, r3
 800f470:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800f474:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800f478:	4041      	eors	r1, r0
 800f47a:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800f47e:	3301      	adds	r3, #1
 800f480:	2b0f      	cmp	r3, #15
 800f482:	ddf4      	ble.n	800f46e <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f484:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800f488:	2210      	movs	r2, #16
 800f48a:	4641      	mov	r1, r8
 800f48c:	4668      	mov	r0, sp
 800f48e:	f000 feb8 	bl	8010202 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800f492:	4622      	mov	r2, r4
 800f494:	4669      	mov	r1, sp
 800f496:	4668      	mov	r0, sp
 800f498:	f000 fb84 	bl	800fba4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800f49c:	2210      	movs	r2, #16
 800f49e:	4669      	mov	r1, sp
 800f4a0:	4640      	mov	r0, r8
 800f4a2:	f000 feae 	bl	8010202 <memcpy1>

        data += mlen;
 800f4a6:	443d      	add	r5, r7
        len -= mlen;
 800f4a8:	1bf6      	subs	r6, r6, r7
 800f4aa:	e01e      	b.n	800f4ea <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800f4ac:	eb04 0e03 	add.w	lr, r4, r3
 800f4b0:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800f4b4:	5cea      	ldrb	r2, [r5, r3]
 800f4b6:	ea8c 0c02 	eor.w	ip, ip, r2
 800f4ba:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800f4be:	3301      	adds	r3, #1
 800f4c0:	2b0f      	cmp	r3, #15
 800f4c2:	ddf3      	ble.n	800f4ac <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f4c4:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800f4c8:	2210      	movs	r2, #16
 800f4ca:	4639      	mov	r1, r7
 800f4cc:	4668      	mov	r0, sp
 800f4ce:	f000 fe98 	bl	8010202 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800f4d2:	4622      	mov	r2, r4
 800f4d4:	4669      	mov	r1, sp
 800f4d6:	4668      	mov	r0, sp
 800f4d8:	f000 fb64 	bl	800fba4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800f4dc:	2210      	movs	r2, #16
 800f4de:	4669      	mov	r1, sp
 800f4e0:	4638      	mov	r0, r7
 800f4e2:	f000 fe8e 	bl	8010202 <memcpy1>

        data += 16;
 800f4e6:	3510      	adds	r5, #16
        len -= 16;
 800f4e8:	3e10      	subs	r6, #16
    while( len > 16 )
 800f4ea:	2e10      	cmp	r6, #16
 800f4ec:	d901      	bls.n	800f4f2 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	e7e6      	b.n	800f4c0 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800f4f2:	b2b2      	uxth	r2, r6
 800f4f4:	4629      	mov	r1, r5
 800f4f6:	f204 1001 	addw	r0, r4, #257	; 0x101
 800f4fa:	f000 fe82 	bl	8010202 <memcpy1>
    ctx->M_n = len;
 800f4fe:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800f502:	b004      	add	sp, #16
 800f504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f508 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800f508:	b530      	push	{r4, r5, lr}
 800f50a:	b089      	sub	sp, #36	; 0x24
 800f50c:	4605      	mov	r5, r0
 800f50e:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800f510:	2210      	movs	r2, #16
 800f512:	2100      	movs	r1, #0
 800f514:	eb0d 0002 	add.w	r0, sp, r2
 800f518:	f000 fe8b 	bl	8010232 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800f51c:	4622      	mov	r2, r4
 800f51e:	a904      	add	r1, sp, #16
 800f520:	4608      	mov	r0, r1
 800f522:	f000 fb3f 	bl	800fba4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800f526:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	db01      	blt.n	800f532 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800f52e:	2300      	movs	r3, #0
 800f530:	e030      	b.n	800f594 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800f532:	2300      	movs	r3, #0
 800f534:	2b0e      	cmp	r3, #14
 800f536:	dc11      	bgt.n	800f55c <AES_CMAC_Final+0x54>
 800f538:	f103 0220 	add.w	r2, r3, #32
 800f53c:	eb0d 0102 	add.w	r1, sp, r2
 800f540:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800f544:	3301      	adds	r3, #1
 800f546:	f103 0220 	add.w	r2, r3, #32
 800f54a:	446a      	add	r2, sp
 800f54c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800f550:	09d2      	lsrs	r2, r2, #7
 800f552:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800f556:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f55a:	e7eb      	b.n	800f534 <AES_CMAC_Final+0x2c>
 800f55c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f560:	005b      	lsls	r3, r3, #1
 800f562:	b2db      	uxtb	r3, r3
 800f564:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800f568:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800f56c:	f88d 301f 	strb.w	r3, [sp, #31]
 800f570:	e017      	b.n	800f5a2 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800f572:	f103 0220 	add.w	r2, r3, #32
 800f576:	eb0d 0102 	add.w	r1, sp, r2
 800f57a:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800f57e:	3301      	adds	r3, #1
 800f580:	f103 0220 	add.w	r2, r3, #32
 800f584:	446a      	add	r2, sp
 800f586:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800f58a:	09d2      	lsrs	r2, r2, #7
 800f58c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800f590:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f594:	2b0e      	cmp	r3, #14
 800f596:	ddec      	ble.n	800f572 <AES_CMAC_Final+0x6a>
 800f598:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f59c:	005b      	lsls	r3, r3, #1
 800f59e:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800f5a2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800f5a6:	2810      	cmp	r0, #16
 800f5a8:	d014      	beq.n	800f5d4 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800f5aa:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	db30      	blt.n	800f614 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	e041      	b.n	800f63a <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800f5b6:	18e1      	adds	r1, r4, r3
 800f5b8:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800f5bc:	f103 0020 	add.w	r0, r3, #32
 800f5c0:	4468      	add	r0, sp
 800f5c2:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800f5c6:	4042      	eors	r2, r0
 800f5c8:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	2b0f      	cmp	r3, #15
 800f5d0:	ddf1      	ble.n	800f5b6 <AES_CMAC_Final+0xae>
 800f5d2:	e059      	b.n	800f688 <AES_CMAC_Final+0x180>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	e7fa      	b.n	800f5ce <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800f5d8:	f103 0220 	add.w	r2, r3, #32
 800f5dc:	eb0d 0102 	add.w	r1, sp, r2
 800f5e0:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	f103 0220 	add.w	r2, r3, #32
 800f5ea:	446a      	add	r2, sp
 800f5ec:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800f5f0:	09d2      	lsrs	r2, r2, #7
 800f5f2:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800f5f6:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f5fa:	2b0e      	cmp	r3, #14
 800f5fc:	ddec      	ble.n	800f5d8 <AES_CMAC_Final+0xd0>
 800f5fe:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f602:	005b      	lsls	r3, r3, #1
 800f604:	b2db      	uxtb	r3, r3
 800f606:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800f60a:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800f60e:	f88d 301f 	strb.w	r3, [sp, #31]
 800f612:	e019      	b.n	800f648 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800f614:	2300      	movs	r3, #0
 800f616:	e7f0      	b.n	800f5fa <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800f618:	f103 0220 	add.w	r2, r3, #32
 800f61c:	eb0d 0102 	add.w	r1, sp, r2
 800f620:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800f624:	3301      	adds	r3, #1
 800f626:	f103 0220 	add.w	r2, r3, #32
 800f62a:	446a      	add	r2, sp
 800f62c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800f630:	09d2      	lsrs	r2, r2, #7
 800f632:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800f636:	f801 2c10 	strb.w	r2, [r1, #-16]
 800f63a:	2b0e      	cmp	r3, #14
 800f63c:	ddec      	ble.n	800f618 <AES_CMAC_Final+0x110>
 800f63e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800f642:	005b      	lsls	r3, r3, #1
 800f644:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800f648:	4420      	add	r0, r4
 800f64a:	2380      	movs	r3, #128	; 0x80
 800f64c:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800f650:	e003      	b.n	800f65a <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800f652:	4423      	add	r3, r4
 800f654:	2200      	movs	r2, #0
 800f656:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800f65a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800f65e:	3301      	adds	r3, #1
 800f660:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800f664:	2b0f      	cmp	r3, #15
 800f666:	d9f4      	bls.n	800f652 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800f668:	2300      	movs	r3, #0
 800f66a:	e00b      	b.n	800f684 <AES_CMAC_Final+0x17c>
 800f66c:	18e1      	adds	r1, r4, r3
 800f66e:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800f672:	f103 0020 	add.w	r0, r3, #32
 800f676:	4468      	add	r0, sp
 800f678:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800f67c:	4042      	eors	r2, r0
 800f67e:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800f682:	3301      	adds	r3, #1
 800f684:	2b0f      	cmp	r3, #15
 800f686:	ddf1      	ble.n	800f66c <AES_CMAC_Final+0x164>
 800f688:	2300      	movs	r3, #0
 800f68a:	e009      	b.n	800f6a0 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800f68c:	18e2      	adds	r2, r4, r3
 800f68e:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 800f692:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800f696:	ea8c 0c01 	eor.w	ip, ip, r1
 800f69a:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 800f69e:	3301      	adds	r3, #1
 800f6a0:	2b0f      	cmp	r3, #15
 800f6a2:	ddf3      	ble.n	800f68c <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800f6a4:	2210      	movs	r2, #16
 800f6a6:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 800f6aa:	4668      	mov	r0, sp
 800f6ac:	f000 fda9 	bl	8010202 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800f6b0:	4622      	mov	r2, r4
 800f6b2:	4629      	mov	r1, r5
 800f6b4:	4668      	mov	r0, sp
 800f6b6:	f000 fa75 	bl	800fba4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800f6ba:	2210      	movs	r2, #16
 800f6bc:	2100      	movs	r1, #0
 800f6be:	eb0d 0002 	add.w	r0, sp, r2
 800f6c2:	f000 fdb6 	bl	8010232 <memset1>
}
 800f6c6:	b009      	add	sp, #36	; 0x24
 800f6c8:	bd30      	pop	{r4, r5, pc}

0800f6ca <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800f6ca:	780b      	ldrb	r3, [r1, #0]
 800f6cc:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800f6ce:	784b      	ldrb	r3, [r1, #1]
 800f6d0:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800f6d2:	788b      	ldrb	r3, [r1, #2]
 800f6d4:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800f6d6:	78cb      	ldrb	r3, [r1, #3]
 800f6d8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800f6da:	790b      	ldrb	r3, [r1, #4]
 800f6dc:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800f6de:	794b      	ldrb	r3, [r1, #5]
 800f6e0:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800f6e2:	798b      	ldrb	r3, [r1, #6]
 800f6e4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800f6e6:	79cb      	ldrb	r3, [r1, #7]
 800f6e8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800f6ea:	7a0b      	ldrb	r3, [r1, #8]
 800f6ec:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800f6ee:	7a4b      	ldrb	r3, [r1, #9]
 800f6f0:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800f6f2:	7a8b      	ldrb	r3, [r1, #10]
 800f6f4:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800f6f6:	7acb      	ldrb	r3, [r1, #11]
 800f6f8:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800f6fa:	7b0b      	ldrb	r3, [r1, #12]
 800f6fc:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800f6fe:	7b4b      	ldrb	r3, [r1, #13]
 800f700:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800f702:	7b8b      	ldrb	r3, [r1, #14]
 800f704:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800f706:	7bcb      	ldrb	r3, [r1, #15]
 800f708:	73c3      	strb	r3, [r0, #15]
#endif
}
 800f70a:	4770      	bx	lr

0800f70c <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800f70c:	e004      	b.n	800f718 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800f70e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f712:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800f716:	461a      	mov	r2, r3
 800f718:	1e53      	subs	r3, r2, #1
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	2a00      	cmp	r2, #0
 800f71e:	d1f6      	bne.n	800f70e <copy_block_nn+0x2>
}
 800f720:	4770      	bx	lr

0800f722 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800f722:	780b      	ldrb	r3, [r1, #0]
 800f724:	7802      	ldrb	r2, [r0, #0]
 800f726:	4053      	eors	r3, r2
 800f728:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800f72a:	784b      	ldrb	r3, [r1, #1]
 800f72c:	7842      	ldrb	r2, [r0, #1]
 800f72e:	4053      	eors	r3, r2
 800f730:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800f732:	788b      	ldrb	r3, [r1, #2]
 800f734:	7882      	ldrb	r2, [r0, #2]
 800f736:	4053      	eors	r3, r2
 800f738:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800f73a:	78cb      	ldrb	r3, [r1, #3]
 800f73c:	78c2      	ldrb	r2, [r0, #3]
 800f73e:	4053      	eors	r3, r2
 800f740:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800f742:	790b      	ldrb	r3, [r1, #4]
 800f744:	7902      	ldrb	r2, [r0, #4]
 800f746:	4053      	eors	r3, r2
 800f748:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800f74a:	794b      	ldrb	r3, [r1, #5]
 800f74c:	7942      	ldrb	r2, [r0, #5]
 800f74e:	4053      	eors	r3, r2
 800f750:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800f752:	798b      	ldrb	r3, [r1, #6]
 800f754:	7982      	ldrb	r2, [r0, #6]
 800f756:	4053      	eors	r3, r2
 800f758:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800f75a:	79cb      	ldrb	r3, [r1, #7]
 800f75c:	79c2      	ldrb	r2, [r0, #7]
 800f75e:	4053      	eors	r3, r2
 800f760:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800f762:	7a0b      	ldrb	r3, [r1, #8]
 800f764:	7a02      	ldrb	r2, [r0, #8]
 800f766:	4053      	eors	r3, r2
 800f768:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800f76a:	7a4b      	ldrb	r3, [r1, #9]
 800f76c:	7a42      	ldrb	r2, [r0, #9]
 800f76e:	4053      	eors	r3, r2
 800f770:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800f772:	7a8b      	ldrb	r3, [r1, #10]
 800f774:	7a82      	ldrb	r2, [r0, #10]
 800f776:	4053      	eors	r3, r2
 800f778:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800f77a:	7acb      	ldrb	r3, [r1, #11]
 800f77c:	7ac2      	ldrb	r2, [r0, #11]
 800f77e:	4053      	eors	r3, r2
 800f780:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800f782:	7b0b      	ldrb	r3, [r1, #12]
 800f784:	7b02      	ldrb	r2, [r0, #12]
 800f786:	4053      	eors	r3, r2
 800f788:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800f78a:	7b4b      	ldrb	r3, [r1, #13]
 800f78c:	7b42      	ldrb	r2, [r0, #13]
 800f78e:	4053      	eors	r3, r2
 800f790:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800f792:	7b8b      	ldrb	r3, [r1, #14]
 800f794:	7b82      	ldrb	r2, [r0, #14]
 800f796:	4053      	eors	r3, r2
 800f798:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800f79a:	7bcb      	ldrb	r3, [r1, #15]
 800f79c:	7bc2      	ldrb	r2, [r0, #15]
 800f79e:	4053      	eors	r3, r2
 800f7a0:	73c3      	strb	r3, [r0, #15]
#endif
}
 800f7a2:	4770      	bx	lr

0800f7a4 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800f7a4:	780b      	ldrb	r3, [r1, #0]
 800f7a6:	f892 c000 	ldrb.w	ip, [r2]
 800f7aa:	ea83 030c 	eor.w	r3, r3, ip
 800f7ae:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800f7b0:	784b      	ldrb	r3, [r1, #1]
 800f7b2:	f892 c001 	ldrb.w	ip, [r2, #1]
 800f7b6:	ea83 030c 	eor.w	r3, r3, ip
 800f7ba:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800f7bc:	788b      	ldrb	r3, [r1, #2]
 800f7be:	f892 c002 	ldrb.w	ip, [r2, #2]
 800f7c2:	ea83 030c 	eor.w	r3, r3, ip
 800f7c6:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800f7c8:	78cb      	ldrb	r3, [r1, #3]
 800f7ca:	f892 c003 	ldrb.w	ip, [r2, #3]
 800f7ce:	ea83 030c 	eor.w	r3, r3, ip
 800f7d2:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800f7d4:	790b      	ldrb	r3, [r1, #4]
 800f7d6:	f892 c004 	ldrb.w	ip, [r2, #4]
 800f7da:	ea83 030c 	eor.w	r3, r3, ip
 800f7de:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800f7e0:	794b      	ldrb	r3, [r1, #5]
 800f7e2:	f892 c005 	ldrb.w	ip, [r2, #5]
 800f7e6:	ea83 030c 	eor.w	r3, r3, ip
 800f7ea:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800f7ec:	798b      	ldrb	r3, [r1, #6]
 800f7ee:	f892 c006 	ldrb.w	ip, [r2, #6]
 800f7f2:	ea83 030c 	eor.w	r3, r3, ip
 800f7f6:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800f7f8:	79cb      	ldrb	r3, [r1, #7]
 800f7fa:	f892 c007 	ldrb.w	ip, [r2, #7]
 800f7fe:	ea83 030c 	eor.w	r3, r3, ip
 800f802:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800f804:	7a0b      	ldrb	r3, [r1, #8]
 800f806:	f892 c008 	ldrb.w	ip, [r2, #8]
 800f80a:	ea83 030c 	eor.w	r3, r3, ip
 800f80e:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800f810:	7a4b      	ldrb	r3, [r1, #9]
 800f812:	f892 c009 	ldrb.w	ip, [r2, #9]
 800f816:	ea83 030c 	eor.w	r3, r3, ip
 800f81a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800f81c:	7a8b      	ldrb	r3, [r1, #10]
 800f81e:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800f822:	ea83 030c 	eor.w	r3, r3, ip
 800f826:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800f828:	7acb      	ldrb	r3, [r1, #11]
 800f82a:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800f82e:	ea83 030c 	eor.w	r3, r3, ip
 800f832:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800f834:	7b0b      	ldrb	r3, [r1, #12]
 800f836:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800f83a:	ea83 030c 	eor.w	r3, r3, ip
 800f83e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800f840:	7b4b      	ldrb	r3, [r1, #13]
 800f842:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800f846:	ea83 030c 	eor.w	r3, r3, ip
 800f84a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800f84c:	7b8b      	ldrb	r3, [r1, #14]
 800f84e:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800f852:	ea83 030c 	eor.w	r3, r3, ip
 800f856:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800f858:	7bcb      	ldrb	r3, [r1, #15]
 800f85a:	7bd2      	ldrb	r2, [r2, #15]
 800f85c:	4053      	eors	r3, r2
 800f85e:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800f860:	4770      	bx	lr

0800f862 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800f862:	b508      	push	{r3, lr}
    xor_block(d, k);
 800f864:	f7ff ff5d 	bl	800f722 <xor_block>
}
 800f868:	bd08      	pop	{r3, pc}
	...

0800f86c <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800f86c:	7802      	ldrb	r2, [r0, #0]
 800f86e:	4b18      	ldr	r3, [pc, #96]	; (800f8d0 <shift_sub_rows+0x64>)
 800f870:	5c9a      	ldrb	r2, [r3, r2]
 800f872:	7002      	strb	r2, [r0, #0]
 800f874:	7902      	ldrb	r2, [r0, #4]
 800f876:	5c9a      	ldrb	r2, [r3, r2]
 800f878:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800f87a:	7a02      	ldrb	r2, [r0, #8]
 800f87c:	5c9a      	ldrb	r2, [r3, r2]
 800f87e:	7202      	strb	r2, [r0, #8]
 800f880:	7b02      	ldrb	r2, [r0, #12]
 800f882:	5c9a      	ldrb	r2, [r3, r2]
 800f884:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800f886:	7842      	ldrb	r2, [r0, #1]
 800f888:	7941      	ldrb	r1, [r0, #5]
 800f88a:	5c59      	ldrb	r1, [r3, r1]
 800f88c:	7041      	strb	r1, [r0, #1]
 800f88e:	7a41      	ldrb	r1, [r0, #9]
 800f890:	5c59      	ldrb	r1, [r3, r1]
 800f892:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800f894:	7b41      	ldrb	r1, [r0, #13]
 800f896:	5c59      	ldrb	r1, [r3, r1]
 800f898:	7241      	strb	r1, [r0, #9]
 800f89a:	5c9a      	ldrb	r2, [r3, r2]
 800f89c:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800f89e:	7882      	ldrb	r2, [r0, #2]
 800f8a0:	7a81      	ldrb	r1, [r0, #10]
 800f8a2:	5c59      	ldrb	r1, [r3, r1]
 800f8a4:	7081      	strb	r1, [r0, #2]
 800f8a6:	5c9a      	ldrb	r2, [r3, r2]
 800f8a8:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800f8aa:	7982      	ldrb	r2, [r0, #6]
 800f8ac:	7b81      	ldrb	r1, [r0, #14]
 800f8ae:	5c59      	ldrb	r1, [r3, r1]
 800f8b0:	7181      	strb	r1, [r0, #6]
 800f8b2:	5c9a      	ldrb	r2, [r3, r2]
 800f8b4:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800f8b6:	7bc2      	ldrb	r2, [r0, #15]
 800f8b8:	7ac1      	ldrb	r1, [r0, #11]
 800f8ba:	5c59      	ldrb	r1, [r3, r1]
 800f8bc:	73c1      	strb	r1, [r0, #15]
 800f8be:	79c1      	ldrb	r1, [r0, #7]
 800f8c0:	5c59      	ldrb	r1, [r3, r1]
 800f8c2:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800f8c4:	78c1      	ldrb	r1, [r0, #3]
 800f8c6:	5c59      	ldrb	r1, [r3, r1]
 800f8c8:	71c1      	strb	r1, [r0, #7]
 800f8ca:	5c9b      	ldrb	r3, [r3, r2]
 800f8cc:	70c3      	strb	r3, [r0, #3]
}
 800f8ce:	4770      	bx	lr
 800f8d0:	08013658 	.word	0x08013658

0800f8d4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800f8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8d8:	b084      	sub	sp, #16
 800f8da:	4604      	mov	r4, r0
    block_copy(st, dt);
 800f8dc:	4601      	mov	r1, r0
 800f8de:	4668      	mov	r0, sp
 800f8e0:	f7ff fef3 	bl	800f6ca <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800f8e4:	f89d c000 	ldrb.w	ip, [sp]
 800f8e8:	4b6a      	ldr	r3, [pc, #424]	; (800fa94 <mix_sub_columns+0x1c0>)
 800f8ea:	f813 000c 	ldrb.w	r0, [r3, ip]
 800f8ee:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f8f2:	4a69      	ldr	r2, [pc, #420]	; (800fa98 <mix_sub_columns+0x1c4>)
 800f8f4:	f812 9008 	ldrb.w	r9, [r2, r8]
 800f8f8:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800f8fc:	4967      	ldr	r1, [pc, #412]	; (800fa9c <mix_sub_columns+0x1c8>)
 800f8fe:	f811 500e 	ldrb.w	r5, [r1, lr]
 800f902:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800f906:	5dce      	ldrb	r6, [r1, r7]
 800f908:	ea80 0009 	eor.w	r0, r0, r9
 800f90c:	4068      	eors	r0, r5
 800f90e:	4070      	eors	r0, r6
 800f910:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800f912:	f811 000c 	ldrb.w	r0, [r1, ip]
 800f916:	f813 a008 	ldrb.w	sl, [r3, r8]
 800f91a:	f812 900e 	ldrb.w	r9, [r2, lr]
 800f91e:	ea80 0a0a 	eor.w	sl, r0, sl
 800f922:	ea89 090a 	eor.w	r9, r9, sl
 800f926:	ea86 0609 	eor.w	r6, r6, r9
 800f92a:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800f92c:	f811 8008 	ldrb.w	r8, [r1, r8]
 800f930:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800f934:	5dd6      	ldrb	r6, [r2, r7]
 800f936:	ea80 0008 	eor.w	r0, r0, r8
 800f93a:	ea8e 0000 	eor.w	r0, lr, r0
 800f93e:	4070      	eors	r0, r6
 800f940:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800f942:	f812 600c 	ldrb.w	r6, [r2, ip]
 800f946:	5dd8      	ldrb	r0, [r3, r7]
 800f948:	ea86 0608 	eor.w	r6, r6, r8
 800f94c:	4075      	eors	r5, r6
 800f94e:	4045      	eors	r5, r0
 800f950:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800f952:	f89d c004 	ldrb.w	ip, [sp, #4]
 800f956:	f813 000c 	ldrb.w	r0, [r3, ip]
 800f95a:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800f95e:	f812 9008 	ldrb.w	r9, [r2, r8]
 800f962:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800f966:	f811 500e 	ldrb.w	r5, [r1, lr]
 800f96a:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800f96e:	5dce      	ldrb	r6, [r1, r7]
 800f970:	ea80 0009 	eor.w	r0, r0, r9
 800f974:	4068      	eors	r0, r5
 800f976:	4070      	eors	r0, r6
 800f978:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800f97a:	f811 000c 	ldrb.w	r0, [r1, ip]
 800f97e:	f813 a008 	ldrb.w	sl, [r3, r8]
 800f982:	f812 900e 	ldrb.w	r9, [r2, lr]
 800f986:	ea80 0a0a 	eor.w	sl, r0, sl
 800f98a:	ea89 090a 	eor.w	r9, r9, sl
 800f98e:	ea86 0609 	eor.w	r6, r6, r9
 800f992:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800f994:	f811 8008 	ldrb.w	r8, [r1, r8]
 800f998:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800f99c:	5dd6      	ldrb	r6, [r2, r7]
 800f99e:	ea80 0008 	eor.w	r0, r0, r8
 800f9a2:	ea8e 0000 	eor.w	r0, lr, r0
 800f9a6:	4070      	eors	r0, r6
 800f9a8:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800f9aa:	f812 600c 	ldrb.w	r6, [r2, ip]
 800f9ae:	5dd8      	ldrb	r0, [r3, r7]
 800f9b0:	ea86 0608 	eor.w	r6, r6, r8
 800f9b4:	4075      	eors	r5, r6
 800f9b6:	4045      	eors	r5, r0
 800f9b8:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800f9ba:	f89d c008 	ldrb.w	ip, [sp, #8]
 800f9be:	f813 000c 	ldrb.w	r0, [r3, ip]
 800f9c2:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800f9c6:	f812 9008 	ldrb.w	r9, [r2, r8]
 800f9ca:	f89d e002 	ldrb.w	lr, [sp, #2]
 800f9ce:	f811 500e 	ldrb.w	r5, [r1, lr]
 800f9d2:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800f9d6:	5dce      	ldrb	r6, [r1, r7]
 800f9d8:	ea80 0009 	eor.w	r0, r0, r9
 800f9dc:	4068      	eors	r0, r5
 800f9de:	4070      	eors	r0, r6
 800f9e0:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800f9e2:	f811 000c 	ldrb.w	r0, [r1, ip]
 800f9e6:	f813 a008 	ldrb.w	sl, [r3, r8]
 800f9ea:	f812 900e 	ldrb.w	r9, [r2, lr]
 800f9ee:	ea80 0a0a 	eor.w	sl, r0, sl
 800f9f2:	ea89 090a 	eor.w	r9, r9, sl
 800f9f6:	ea86 0609 	eor.w	r6, r6, r9
 800f9fa:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800f9fc:	f811 8008 	ldrb.w	r8, [r1, r8]
 800fa00:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800fa04:	5dd6      	ldrb	r6, [r2, r7]
 800fa06:	ea80 0008 	eor.w	r0, r0, r8
 800fa0a:	ea8e 0000 	eor.w	r0, lr, r0
 800fa0e:	4070      	eors	r0, r6
 800fa10:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800fa12:	f812 600c 	ldrb.w	r6, [r2, ip]
 800fa16:	5dd8      	ldrb	r0, [r3, r7]
 800fa18:	ea86 0608 	eor.w	r6, r6, r8
 800fa1c:	4075      	eors	r5, r6
 800fa1e:	4045      	eors	r5, r0
 800fa20:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800fa22:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800fa26:	5d98      	ldrb	r0, [r3, r6]
 800fa28:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800fa2c:	f812 9008 	ldrb.w	r9, [r2, r8]
 800fa30:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800fa34:	f811 c007 	ldrb.w	ip, [r1, r7]
 800fa38:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800fa3c:	f811 e005 	ldrb.w	lr, [r1, r5]
 800fa40:	ea80 0009 	eor.w	r0, r0, r9
 800fa44:	ea8c 0000 	eor.w	r0, ip, r0
 800fa48:	ea8e 0000 	eor.w	r0, lr, r0
 800fa4c:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800fa4e:	5d88      	ldrb	r0, [r1, r6]
 800fa50:	f813 a008 	ldrb.w	sl, [r3, r8]
 800fa54:	f812 9007 	ldrb.w	r9, [r2, r7]
 800fa58:	ea80 0a0a 	eor.w	sl, r0, sl
 800fa5c:	ea89 090a 	eor.w	r9, r9, sl
 800fa60:	ea8e 0e09 	eor.w	lr, lr, r9
 800fa64:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800fa68:	f811 1008 	ldrb.w	r1, [r1, r8]
 800fa6c:	f813 e007 	ldrb.w	lr, [r3, r7]
 800fa70:	5d57      	ldrb	r7, [r2, r5]
 800fa72:	4048      	eors	r0, r1
 800fa74:	ea8e 0000 	eor.w	r0, lr, r0
 800fa78:	4078      	eors	r0, r7
 800fa7a:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800fa7c:	5d92      	ldrb	r2, [r2, r6]
 800fa7e:	5d5b      	ldrb	r3, [r3, r5]
 800fa80:	4051      	eors	r1, r2
 800fa82:	ea8c 0c01 	eor.w	ip, ip, r1
 800fa86:	ea83 0c0c 	eor.w	ip, r3, ip
 800fa8a:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 800fa8e:	b004      	add	sp, #16
 800fa90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa94:	08013458 	.word	0x08013458
 800fa98:	08013558 	.word	0x08013558
 800fa9c:	08013658 	.word	0x08013658

0800faa0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800faa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faa4:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800faa6:	f1a1 0310 	sub.w	r3, r1, #16
 800faaa:	b2da      	uxtb	r2, r3
 800faac:	2a10      	cmp	r2, #16
 800faae:	d807      	bhi.n	800fac0 <lorawan_aes_set_key+0x20>
 800fab0:	460d      	mov	r5, r1
 800fab2:	2301      	movs	r3, #1
 800fab4:	4093      	lsls	r3, r2
 800fab6:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800faba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fabe:	b92b      	cbnz	r3, 800facc <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800fac0:	2300      	movs	r3, #0
 800fac2:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800fac6:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800fac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800facc:	460a      	mov	r2, r1
 800face:	4601      	mov	r1, r0
 800fad0:	4620      	mov	r0, r4
 800fad2:	f7ff fe1b 	bl	800f70c <copy_block_nn>
    hi = (keylen + 28) << 2;
 800fad6:	f105 031c 	add.w	r3, r5, #28
 800fada:	b2db      	uxtb	r3, r3
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800fae2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800fae6:	3b01      	subs	r3, #1
 800fae8:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800faec:	462b      	mov	r3, r5
 800faee:	f04f 0c01 	mov.w	ip, #1
 800faf2:	e023      	b.n	800fb3c <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 800faf4:	2d18      	cmp	r5, #24
 800faf6:	d901      	bls.n	800fafc <lorawan_aes_set_key+0x5c>
 800faf8:	2a10      	cmp	r2, #16
 800fafa:	d047      	beq.n	800fb8c <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800fafc:	1b5a      	subs	r2, r3, r5
 800fafe:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800fb00:	f814 9002 	ldrb.w	r9, [r4, r2]
 800fb04:	ea89 0808 	eor.w	r8, r9, r8
 800fb08:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800fb0c:	f102 0801 	add.w	r8, r2, #1
 800fb10:	f814 8008 	ldrb.w	r8, [r4, r8]
 800fb14:	f100 0901 	add.w	r9, r0, #1
 800fb18:	ea88 0707 	eor.w	r7, r8, r7
 800fb1c:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800fb20:	1c97      	adds	r7, r2, #2
 800fb22:	5de7      	ldrb	r7, [r4, r7]
 800fb24:	f100 0802 	add.w	r8, r0, #2
 800fb28:	407e      	eors	r6, r7
 800fb2a:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800fb2e:	3203      	adds	r2, #3
 800fb30:	5ca6      	ldrb	r6, [r4, r2]
 800fb32:	1cc2      	adds	r2, r0, #3
 800fb34:	4071      	eors	r1, r6
 800fb36:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800fb38:	3304      	adds	r3, #4
 800fb3a:	b2db      	uxtb	r3, r3
 800fb3c:	4573      	cmp	r3, lr
 800fb3e:	d22c      	bcs.n	800fb9a <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800fb40:	4618      	mov	r0, r3
 800fb42:	1f1a      	subs	r2, r3, #4
 800fb44:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800fb48:	1eda      	subs	r2, r3, #3
 800fb4a:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800fb4c:	1e9a      	subs	r2, r3, #2
 800fb4e:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800fb50:	1e5a      	subs	r2, r3, #1
 800fb52:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800fb54:	fbb3 f2f5 	udiv	r2, r3, r5
 800fb58:	fb05 3212 	mls	r2, r5, r2, r3
 800fb5c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800fb60:	d1c8      	bne.n	800faf4 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 800fb62:	4a0f      	ldr	r2, [pc, #60]	; (800fba0 <lorawan_aes_set_key+0x100>)
 800fb64:	f812 9007 	ldrb.w	r9, [r2, r7]
 800fb68:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800fb6c:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800fb6e:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800fb70:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800fb74:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800fb78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fb7c:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800fb80:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 800fb84:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 800fb88:	46c8      	mov	r8, r9
 800fb8a:	e7b7      	b.n	800fafc <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 800fb8c:	4a04      	ldr	r2, [pc, #16]	; (800fba0 <lorawan_aes_set_key+0x100>)
 800fb8e:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800fb92:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800fb94:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800fb96:	5c51      	ldrb	r1, [r2, r1]
 800fb98:	e7b0      	b.n	800fafc <lorawan_aes_set_key+0x5c>
    return 0;
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	e794      	b.n	800fac8 <lorawan_aes_set_key+0x28>
 800fb9e:	bf00      	nop
 800fba0:	08013658 	.word	0x08013658

0800fba4 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800fba4:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800fba8:	b31b      	cbz	r3, 800fbf2 <lorawan_aes_encrypt+0x4e>
{
 800fbaa:	b570      	push	{r4, r5, r6, lr}
 800fbac:	b084      	sub	sp, #16
 800fbae:	460e      	mov	r6, r1
 800fbb0:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800fbb2:	4601      	mov	r1, r0
 800fbb4:	4668      	mov	r0, sp
 800fbb6:	f7ff fdf5 	bl	800f7a4 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800fbba:	2401      	movs	r4, #1
 800fbbc:	e009      	b.n	800fbd2 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800fbbe:	4668      	mov	r0, sp
 800fbc0:	f7ff fe88 	bl	800f8d4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800fbc4:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800fbc8:	4668      	mov	r0, sp
 800fbca:	f7ff fe4a 	bl	800f862 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800fbce:	3401      	adds	r4, #1
 800fbd0:	b2e4      	uxtb	r4, r4
 800fbd2:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800fbd6:	42a3      	cmp	r3, r4
 800fbd8:	d8f1      	bhi.n	800fbbe <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800fbda:	4668      	mov	r0, sp
 800fbdc:	f7ff fe46 	bl	800f86c <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800fbe0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800fbe4:	4669      	mov	r1, sp
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	f7ff fddc 	bl	800f7a4 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800fbec:	2000      	movs	r0, #0
}
 800fbee:	b004      	add	sp, #16
 800fbf0:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800fbf2:	20ff      	movs	r0, #255	; 0xff
}
 800fbf4:	4770      	bx	lr
	...

0800fbf8 <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	2b09      	cmp	r3, #9
 800fbfc:	d817      	bhi.n	800fc2e <GetKeyByID+0x36>
{
 800fbfe:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800fc00:	4a0c      	ldr	r2, [pc, #48]	; (800fc34 <GetKeyByID+0x3c>)
 800fc02:	6814      	ldr	r4, [r2, #0]
 800fc04:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800fc08:	4422      	add	r2, r4
 800fc0a:	7c12      	ldrb	r2, [r2, #16]
 800fc0c:	4282      	cmp	r2, r0
 800fc0e:	d006      	beq.n	800fc1e <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800fc10:	3301      	adds	r3, #1
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	2b09      	cmp	r3, #9
 800fc16:	d9f3      	bls.n	800fc00 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fc18:	2003      	movs	r0, #3
}
 800fc1a:	bc10      	pop	{r4}
 800fc1c:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800fc1e:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800fc22:	f10c 0c10 	add.w	ip, ip, #16
 800fc26:	4464      	add	r4, ip
 800fc28:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800fc2a:	2000      	movs	r0, #0
 800fc2c:	e7f5      	b.n	800fc1a <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fc2e:	2003      	movs	r0, #3
}
 800fc30:	4770      	bx	lr
 800fc32:	bf00      	nop
 800fc34:	20000f50 	.word	0x20000f50

0800fc38 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800fc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc3c:	b0cc      	sub	sp, #304	; 0x130
 800fc3e:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800fc40:	b3a9      	cbz	r1, 800fcae <ComputeCmac+0x76>
 800fc42:	4605      	mov	r5, r0
 800fc44:	4617      	mov	r7, r2
 800fc46:	461c      	mov	r4, r3
 800fc48:	4688      	mov	r8, r1
 800fc4a:	b396      	cbz	r6, 800fcb2 <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800fc4c:	a802      	add	r0, sp, #8
 800fc4e:	f7ff fbd7 	bl	800f400 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800fc52:	a901      	add	r1, sp, #4
 800fc54:	4620      	mov	r0, r4
 800fc56:	f7ff ffcf 	bl	800fbf8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	b118      	cbz	r0, 800fc66 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800fc5e:	4620      	mov	r0, r4
 800fc60:	b04c      	add	sp, #304	; 0x130
 800fc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800fc66:	9901      	ldr	r1, [sp, #4]
 800fc68:	3101      	adds	r1, #1
 800fc6a:	a802      	add	r0, sp, #8
 800fc6c:	f7ff fbd7 	bl	800f41e <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800fc70:	b125      	cbz	r5, 800fc7c <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800fc72:	2210      	movs	r2, #16
 800fc74:	4629      	mov	r1, r5
 800fc76:	a802      	add	r0, sp, #8
 800fc78:	f7ff fbd8 	bl	800f42c <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800fc7c:	463a      	mov	r2, r7
 800fc7e:	4641      	mov	r1, r8
 800fc80:	a802      	add	r0, sp, #8
 800fc82:	f7ff fbd3 	bl	800f42c <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800fc86:	a902      	add	r1, sp, #8
 800fc88:	a848      	add	r0, sp, #288	; 0x120
 800fc8a:	f7ff fc3d 	bl	800f508 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800fc8e:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800fc92:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 800fc96:	041b      	lsls	r3, r3, #16
 800fc98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800fc9c:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800fca0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 800fca4:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	6033      	str	r3, [r6, #0]
 800fcac:	e7d7      	b.n	800fc5e <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800fcae:	2402      	movs	r4, #2
 800fcb0:	e7d5      	b.n	800fc5e <ComputeCmac+0x26>
 800fcb2:	2402      	movs	r4, #2
 800fcb4:	e7d3      	b.n	800fc5e <ComputeCmac+0x26>
	...

0800fcb8 <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800fcb8:	b168      	cbz	r0, 800fcd6 <SecureElementInit+0x1e>
{
 800fcba:	b510      	push	{r4, lr}
 800fcbc:	460c      	mov	r4, r1
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800fcbe:	4a08      	ldr	r2, [pc, #32]	; (800fce0 <SecureElementInit+0x28>)
 800fcc0:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800fcc2:	22c0      	movs	r2, #192	; 0xc0
 800fcc4:	4907      	ldr	r1, [pc, #28]	; (800fce4 <SecureElementInit+0x2c>)
 800fcc6:	f000 fa9c 	bl	8010202 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 800fcca:	b134      	cbz	r4, 800fcda <SecureElementInit+0x22>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 800fccc:	4b04      	ldr	r3, [pc, #16]	; (800fce0 <SecureElementInit+0x28>)
 800fcce:	6818      	ldr	r0, [r3, #0]
 800fcd0:	47a0      	blx	r4
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800fcd2:	2000      	movs	r0, #0
}
 800fcd4:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800fcd6:	2002      	movs	r0, #2
}
 800fcd8:	4770      	bx	lr
    return SECURE_ELEMENT_SUCCESS;
 800fcda:	2000      	movs	r0, #0
 800fcdc:	e7fa      	b.n	800fcd4 <SecureElementInit+0x1c>
 800fcde:	bf00      	nop
 800fce0:	20000f50 	.word	0x20000f50
 800fce4:	0803e500 	.word	0x0803e500

0800fce8 <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800fce8:	2300      	movs	r3, #0
 800fcea:	2b09      	cmp	r3, #9
 800fcec:	d817      	bhi.n	800fd1e <SecureElementGetKeyByID+0x36>
{
 800fcee:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800fcf0:	4a0c      	ldr	r2, [pc, #48]	; (800fd24 <SecureElementGetKeyByID+0x3c>)
 800fcf2:	6814      	ldr	r4, [r2, #0]
 800fcf4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800fcf8:	4422      	add	r2, r4
 800fcfa:	7c12      	ldrb	r2, [r2, #16]
 800fcfc:	4282      	cmp	r2, r0
 800fcfe:	d006      	beq.n	800fd0e <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800fd00:	3301      	adds	r3, #1
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	2b09      	cmp	r3, #9
 800fd06:	d9f3      	bls.n	800fcf0 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fd08:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800fd0a:	bc10      	pop	{r4}
 800fd0c:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 800fd0e:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800fd12:	f10c 0c10 	add.w	ip, ip, #16
 800fd16:	4464      	add	r4, ip
 800fd18:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800fd1a:	2000      	movs	r0, #0
 800fd1c:	e7f5      	b.n	800fd0a <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800fd1e:	2003      	movs	r0, #3
}
 800fd20:	4770      	bx	lr
 800fd22:	bf00      	nop
 800fd24:	20000f50 	.word	0x20000f50

0800fd28 <PrintKey>:
{
 800fd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd2c:	b095      	sub	sp, #84	; 0x54
 800fd2e:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 800fd30:	a913      	add	r1, sp, #76	; 0x4c
 800fd32:	f7ff ffd9 	bl	800fce8 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 800fd36:	2800      	cmp	r0, #0
 800fd38:	d154      	bne.n	800fde4 <PrintKey+0xbc>
        if (key == APP_KEY)
 800fd3a:	b1b4      	cbz	r4, 800fd6a <PrintKey+0x42>
        else if (key == NWK_KEY)
 800fd3c:	2c01      	cmp	r4, #1
 800fd3e:	d054      	beq.n	800fdea <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 800fd40:	2c03      	cmp	r4, #3
 800fd42:	d059      	beq.n	800fdf8 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 800fd44:	2c02      	cmp	r4, #2
 800fd46:	d05e      	beq.n	800fe06 <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 800fd48:	2c04      	cmp	r4, #4
 800fd4a:	d063      	beq.n	800fe14 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 800fd4c:	2c7f      	cmp	r4, #127	; 0x7f
 800fd4e:	d068      	beq.n	800fe22 <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 800fd50:	2c80      	cmp	r4, #128	; 0x80
 800fd52:	d06d      	beq.n	800fe30 <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 800fd54:	2c81      	cmp	r4, #129	; 0x81
 800fd56:	d072      	beq.n	800fe3e <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 800fd58:	2c82      	cmp	r4, #130	; 0x82
 800fd5a:	d10c      	bne.n	800fd76 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800fd5c:	4b3b      	ldr	r3, [pc, #236]	; (800fe4c <PrintKey+0x124>)
 800fd5e:	2200      	movs	r2, #0
 800fd60:	4611      	mov	r1, r2
 800fd62:	2002      	movs	r0, #2
 800fd64:	f002 f8f6 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 800fd68:	e005      	b.n	800fd76 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800fd6a:	4b39      	ldr	r3, [pc, #228]	; (800fe50 <PrintKey+0x128>)
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	4611      	mov	r1, r2
 800fd70:	2002      	movs	r0, #2
 800fd72:	f002 f8ef 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800fd76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fd78:	785a      	ldrb	r2, [r3, #1]
 800fd7a:	9210      	str	r2, [sp, #64]	; 0x40
 800fd7c:	7899      	ldrb	r1, [r3, #2]
 800fd7e:	9111      	str	r1, [sp, #68]	; 0x44
 800fd80:	78da      	ldrb	r2, [r3, #3]
 800fd82:	7919      	ldrb	r1, [r3, #4]
 800fd84:	7958      	ldrb	r0, [r3, #5]
 800fd86:	799c      	ldrb	r4, [r3, #6]
 800fd88:	79dd      	ldrb	r5, [r3, #7]
 800fd8a:	7a1e      	ldrb	r6, [r3, #8]
 800fd8c:	7a5f      	ldrb	r7, [r3, #9]
 800fd8e:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800fd92:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800fd96:	f893 800c 	ldrb.w	r8, [r3, #12]
 800fd9a:	f893 900d 	ldrb.w	r9, [r3, #13]
 800fd9e:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800fda2:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800fda6:	7c1b      	ldrb	r3, [r3, #16]
 800fda8:	930f      	str	r3, [sp, #60]	; 0x3c
 800fdaa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800fdae:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800fdb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800fdb6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800fdba:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800fdbe:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800fdc2:	9708      	str	r7, [sp, #32]
 800fdc4:	9607      	str	r6, [sp, #28]
 800fdc6:	9506      	str	r5, [sp, #24]
 800fdc8:	9405      	str	r4, [sp, #20]
 800fdca:	9004      	str	r0, [sp, #16]
 800fdcc:	9103      	str	r1, [sp, #12]
 800fdce:	9202      	str	r2, [sp, #8]
 800fdd0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fdd2:	9101      	str	r1, [sp, #4]
 800fdd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fdd6:	9200      	str	r2, [sp, #0]
 800fdd8:	4b1e      	ldr	r3, [pc, #120]	; (800fe54 <PrintKey+0x12c>)
 800fdda:	2200      	movs	r2, #0
 800fddc:	4611      	mov	r1, r2
 800fdde:	2002      	movs	r0, #2
 800fde0:	f002 f8b8 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 800fde4:	b015      	add	sp, #84	; 0x54
 800fde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800fdea:	4b1b      	ldr	r3, [pc, #108]	; (800fe58 <PrintKey+0x130>)
 800fdec:	2200      	movs	r2, #0
 800fdee:	4611      	mov	r1, r2
 800fdf0:	2002      	movs	r0, #2
 800fdf2:	f002 f8af 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 800fdf6:	e7be      	b.n	800fd76 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800fdf8:	4b18      	ldr	r3, [pc, #96]	; (800fe5c <PrintKey+0x134>)
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	4611      	mov	r1, r2
 800fdfe:	2002      	movs	r0, #2
 800fe00:	f002 f8a8 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 800fe04:	e7b7      	b.n	800fd76 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800fe06:	4b16      	ldr	r3, [pc, #88]	; (800fe60 <PrintKey+0x138>)
 800fe08:	2200      	movs	r2, #0
 800fe0a:	4611      	mov	r1, r2
 800fe0c:	2002      	movs	r0, #2
 800fe0e:	f002 f8a1 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 800fe12:	e7b0      	b.n	800fd76 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800fe14:	4b13      	ldr	r3, [pc, #76]	; (800fe64 <PrintKey+0x13c>)
 800fe16:	2200      	movs	r2, #0
 800fe18:	4611      	mov	r1, r2
 800fe1a:	2002      	movs	r0, #2
 800fe1c:	f002 f89a 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 800fe20:	e7a9      	b.n	800fd76 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800fe22:	4b11      	ldr	r3, [pc, #68]	; (800fe68 <PrintKey+0x140>)
 800fe24:	2200      	movs	r2, #0
 800fe26:	4611      	mov	r1, r2
 800fe28:	2002      	movs	r0, #2
 800fe2a:	f002 f893 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 800fe2e:	e7a2      	b.n	800fd76 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800fe30:	4b0e      	ldr	r3, [pc, #56]	; (800fe6c <PrintKey+0x144>)
 800fe32:	2200      	movs	r2, #0
 800fe34:	4611      	mov	r1, r2
 800fe36:	2002      	movs	r0, #2
 800fe38:	f002 f88c 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 800fe3c:	e79b      	b.n	800fd76 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800fe3e:	4b0c      	ldr	r3, [pc, #48]	; (800fe70 <PrintKey+0x148>)
 800fe40:	2200      	movs	r2, #0
 800fe42:	4611      	mov	r1, r2
 800fe44:	2002      	movs	r0, #2
 800fe46:	f002 f885 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 800fe4a:	e794      	b.n	800fd76 <PrintKey+0x4e>
 800fe4c:	08013818 	.word	0x08013818
 800fe50:	08013758 	.word	0x08013758
 800fe54:	08013830 	.word	0x08013830
 800fe58:	08013770 	.word	0x08013770
 800fe5c:	08013788 	.word	0x08013788
 800fe60:	080137a0 	.word	0x080137a0
 800fe64:	080137b8 	.word	0x080137b8
 800fe68:	080137d0 	.word	0x080137d0
 800fe6c:	080137e8 	.word	0x080137e8
 800fe70:	08013800 	.word	0x08013800

0800fe74 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800fe74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe76:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800fe78:	4b28      	ldr	r3, [pc, #160]	; (800ff1c <SecureElementPrintKeys+0xa8>)
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	4611      	mov	r1, r2
 800fe7e:	2002      	movs	r0, #2
 800fe80:	f002 f868 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800fe84:	2000      	movs	r0, #0
 800fe86:	f7ff ff4f 	bl	800fd28 <PrintKey>
    PrintKey(NWK_KEY);
 800fe8a:	2001      	movs	r0, #1
 800fe8c:	f7ff ff4c 	bl	800fd28 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800fe90:	4b23      	ldr	r3, [pc, #140]	; (800ff20 <SecureElementPrintKeys+0xac>)
 800fe92:	2200      	movs	r2, #0
 800fe94:	4611      	mov	r1, r2
 800fe96:	2002      	movs	r0, #2
 800fe98:	f002 f85c 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800fe9c:	2003      	movs	r0, #3
 800fe9e:	f7ff ff43 	bl	800fd28 <PrintKey>
    PrintKey(NWK_S_KEY);
 800fea2:	2002      	movs	r0, #2
 800fea4:	f7ff ff40 	bl	800fd28 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800fea8:	4b1e      	ldr	r3, [pc, #120]	; (800ff24 <SecureElementPrintKeys+0xb0>)
 800feaa:	2200      	movs	r2, #0
 800feac:	4611      	mov	r1, r2
 800feae:	2002      	movs	r0, #2
 800feb0:	f002 f850 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800feb4:	4c1c      	ldr	r4, [pc, #112]	; (800ff28 <SecureElementPrintKeys+0xb4>)
 800feb6:	6823      	ldr	r3, [r4, #0]
 800feb8:	781a      	ldrb	r2, [r3, #0]
 800feba:	7859      	ldrb	r1, [r3, #1]
 800febc:	7898      	ldrb	r0, [r3, #2]
 800febe:	78dd      	ldrb	r5, [r3, #3]
 800fec0:	791e      	ldrb	r6, [r3, #4]
 800fec2:	795f      	ldrb	r7, [r3, #5]
 800fec4:	f893 c006 	ldrb.w	ip, [r3, #6]
 800fec8:	79db      	ldrb	r3, [r3, #7]
 800feca:	9307      	str	r3, [sp, #28]
 800fecc:	f8cd c018 	str.w	ip, [sp, #24]
 800fed0:	9705      	str	r7, [sp, #20]
 800fed2:	9604      	str	r6, [sp, #16]
 800fed4:	9503      	str	r5, [sp, #12]
 800fed6:	9002      	str	r0, [sp, #8]
 800fed8:	9101      	str	r1, [sp, #4]
 800feda:	9200      	str	r2, [sp, #0]
 800fedc:	4b13      	ldr	r3, [pc, #76]	; (800ff2c <SecureElementPrintKeys+0xb8>)
 800fede:	2200      	movs	r2, #0
 800fee0:	4611      	mov	r1, r2
 800fee2:	2002      	movs	r0, #2
 800fee4:	f002 f836 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800fee8:	6823      	ldr	r3, [r4, #0]
 800feea:	7a1a      	ldrb	r2, [r3, #8]
 800feec:	7a59      	ldrb	r1, [r3, #9]
 800feee:	7a98      	ldrb	r0, [r3, #10]
 800fef0:	7adc      	ldrb	r4, [r3, #11]
 800fef2:	7b1d      	ldrb	r5, [r3, #12]
 800fef4:	7b5e      	ldrb	r6, [r3, #13]
 800fef6:	7b9f      	ldrb	r7, [r3, #14]
 800fef8:	7bdb      	ldrb	r3, [r3, #15]
 800fefa:	9307      	str	r3, [sp, #28]
 800fefc:	9706      	str	r7, [sp, #24]
 800fefe:	9605      	str	r6, [sp, #20]
 800ff00:	9504      	str	r5, [sp, #16]
 800ff02:	9403      	str	r4, [sp, #12]
 800ff04:	9002      	str	r0, [sp, #8]
 800ff06:	9101      	str	r1, [sp, #4]
 800ff08:	9200      	str	r2, [sp, #0]
 800ff0a:	4b09      	ldr	r3, [pc, #36]	; (800ff30 <SecureElementPrintKeys+0xbc>)
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	4611      	mov	r1, r2
 800ff10:	2002      	movs	r0, #2
 800ff12:	f002 f81f 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 800ff16:	2000      	movs	r0, #0
 800ff18:	b009      	add	sp, #36	; 0x24
 800ff1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff1c:	08013884 	.word	0x08013884
 800ff20:	0801389c 	.word	0x0801389c
 800ff24:	080138b4 	.word	0x080138b4
 800ff28:	20000f50 	.word	0x20000f50
 800ff2c:	080138cc 	.word	0x080138cc
 800ff30:	0801390c 	.word	0x0801390c

0800ff34 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800ff34:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800ff36:	2004      	movs	r0, #4
 800ff38:	f7ff fef6 	bl	800fd28 <PrintKey>
    PrintKey(MC_KE_KEY);
 800ff3c:	207f      	movs	r0, #127	; 0x7f
 800ff3e:	f7ff fef3 	bl	800fd28 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800ff42:	2002      	movs	r0, #2
 800ff44:	f7ff fef0 	bl	800fd28 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800ff48:	2003      	movs	r0, #3
 800ff4a:	f7ff feed 	bl	800fd28 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 800ff4e:	2000      	movs	r0, #0
 800ff50:	bd08      	pop	{r3, pc}

0800ff52 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800ff52:	2b7e      	cmp	r3, #126	; 0x7e
 800ff54:	d80a      	bhi.n	800ff6c <SecureElementComputeAesCmac+0x1a>
{
 800ff56:	b500      	push	{lr}
 800ff58:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800ff5a:	f8dd c010 	ldr.w	ip, [sp, #16]
 800ff5e:	f8cd c000 	str.w	ip, [sp]
 800ff62:	f7ff fe69 	bl	800fc38 <ComputeCmac>
}
 800ff66:	b003      	add	sp, #12
 800ff68:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ff6c:	2003      	movs	r0, #3
}
 800ff6e:	4770      	bx	lr

0800ff70 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800ff70:	b190      	cbz	r0, 800ff98 <SecureElementVerifyAesCmac+0x28>
{
 800ff72:	b510      	push	{r4, lr}
 800ff74:	b084      	sub	sp, #16
 800ff76:	468c      	mov	ip, r1
 800ff78:	4614      	mov	r4, r2
 800ff7a:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800ff7c:	2000      	movs	r0, #0
 800ff7e:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800ff80:	aa03      	add	r2, sp, #12
 800ff82:	9200      	str	r2, [sp, #0]
 800ff84:	4662      	mov	r2, ip
 800ff86:	f7ff fe57 	bl	800fc38 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ff8a:	b918      	cbnz	r0, 800ff94 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800ff8c:	9b03      	ldr	r3, [sp, #12]
 800ff8e:	42a3      	cmp	r3, r4
 800ff90:	d000      	beq.n	800ff94 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800ff92:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800ff94:	b004      	add	sp, #16
 800ff96:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800ff98:	2002      	movs	r0, #2
}
 800ff9a:	4770      	bx	lr

0800ff9c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800ff9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa0:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 800ffa2:	b350      	cbz	r0, 800fffa <SecureElementAesEncrypt+0x5e>
 800ffa4:	460c      	mov	r4, r1
 800ffa6:	4615      	mov	r5, r2
 800ffa8:	461e      	mov	r6, r3
 800ffaa:	4607      	mov	r7, r0
 800ffac:	b343      	cbz	r3, 8010000 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800ffae:	f011 0f0f 	tst.w	r1, #15
 800ffb2:	d128      	bne.n	8010006 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800ffb4:	22f0      	movs	r2, #240	; 0xf0
 800ffb6:	2100      	movs	r1, #0
 800ffb8:	a801      	add	r0, sp, #4
 800ffba:	f000 f93a 	bl	8010232 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800ffbe:	4669      	mov	r1, sp
 800ffc0:	4628      	mov	r0, r5
 800ffc2:	f7ff fe19 	bl	800fbf8 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ffc6:	4680      	mov	r8, r0
 800ffc8:	b118      	cbz	r0, 800ffd2 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800ffca:	4640      	mov	r0, r8
 800ffcc:	b03e      	add	sp, #248	; 0xf8
 800ffce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800ffd2:	aa01      	add	r2, sp, #4
 800ffd4:	2110      	movs	r1, #16
 800ffd6:	9800      	ldr	r0, [sp, #0]
 800ffd8:	3001      	adds	r0, #1
 800ffda:	f7ff fd61 	bl	800faa0 <lorawan_aes_set_key>
        uint8_t block = 0;
 800ffde:	4645      	mov	r5, r8
        while( size != 0 )
 800ffe0:	e008      	b.n	800fff4 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800ffe2:	aa01      	add	r2, sp, #4
 800ffe4:	1971      	adds	r1, r6, r5
 800ffe6:	1978      	adds	r0, r7, r5
 800ffe8:	f7ff fddc 	bl	800fba4 <lorawan_aes_encrypt>
            block = block + 16;
 800ffec:	3510      	adds	r5, #16
 800ffee:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 800fff0:	3c10      	subs	r4, #16
 800fff2:	b2a4      	uxth	r4, r4
        while( size != 0 )
 800fff4:	2c00      	cmp	r4, #0
 800fff6:	d1f4      	bne.n	800ffe2 <SecureElementAesEncrypt+0x46>
 800fff8:	e7e7      	b.n	800ffca <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800fffa:	f04f 0802 	mov.w	r8, #2
 800fffe:	e7e4      	b.n	800ffca <SecureElementAesEncrypt+0x2e>
 8010000:	f04f 0802 	mov.w	r8, #2
 8010004:	e7e1      	b.n	800ffca <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8010006:	f04f 0805 	mov.w	r8, #5
 801000a:	e7de      	b.n	800ffca <SecureElementAesEncrypt+0x2e>

0801000c <SecureElementSetKey>:
{
 801000c:	b530      	push	{r4, r5, lr}
 801000e:	b085      	sub	sp, #20
    if( key == NULL )
 8010010:	2900      	cmp	r1, #0
 8010012:	d038      	beq.n	8010086 <SecureElementSetKey+0x7a>
 8010014:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010016:	2300      	movs	r3, #0
 8010018:	2b09      	cmp	r3, #9
 801001a:	d830      	bhi.n	801007e <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 801001c:	4a1b      	ldr	r2, [pc, #108]	; (801008c <SecureElementSetKey+0x80>)
 801001e:	6811      	ldr	r1, [r2, #0]
 8010020:	461c      	mov	r4, r3
 8010022:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010026:	440a      	add	r2, r1
 8010028:	7c12      	ldrb	r2, [r2, #16]
 801002a:	4282      	cmp	r2, r0
 801002c:	d002      	beq.n	8010034 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801002e:	3301      	adds	r3, #1
 8010030:	b2db      	uxtb	r3, r3
 8010032:	e7f1      	b.n	8010018 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 8010034:	2880      	cmp	r0, #128	; 0x80
 8010036:	d00a      	beq.n	801004e <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8010038:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801003c:	3310      	adds	r3, #16
 801003e:	440b      	add	r3, r1
 8010040:	2210      	movs	r2, #16
 8010042:	4661      	mov	r1, ip
 8010044:	1c58      	adds	r0, r3, #1
 8010046:	f000 f8dc 	bl	8010202 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 801004a:	2500      	movs	r5, #0
 801004c:	e018      	b.n	8010080 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 801004e:	2300      	movs	r3, #0
 8010050:	9300      	str	r3, [sp, #0]
 8010052:	9301      	str	r3, [sp, #4]
 8010054:	9302      	str	r3, [sp, #8]
 8010056:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8010058:	466b      	mov	r3, sp
 801005a:	227f      	movs	r2, #127	; 0x7f
 801005c:	2110      	movs	r1, #16
 801005e:	4660      	mov	r0, ip
 8010060:	f7ff ff9c 	bl	800ff9c <SecureElementAesEncrypt>
 8010064:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8010066:	4b09      	ldr	r3, [pc, #36]	; (801008c <SecureElementSetKey+0x80>)
 8010068:	6818      	ldr	r0, [r3, #0]
 801006a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801006e:	3410      	adds	r4, #16
 8010070:	4420      	add	r0, r4
 8010072:	2210      	movs	r2, #16
 8010074:	4669      	mov	r1, sp
 8010076:	3001      	adds	r0, #1
 8010078:	f000 f8c3 	bl	8010202 <memcpy1>
                return retval;
 801007c:	e000      	b.n	8010080 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801007e:	2503      	movs	r5, #3
}
 8010080:	4628      	mov	r0, r5
 8010082:	b005      	add	sp, #20
 8010084:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010086:	2502      	movs	r5, #2
 8010088:	e7fa      	b.n	8010080 <SecureElementSetKey+0x74>
 801008a:	bf00      	nop
 801008c:	20000f50 	.word	0x20000f50

08010090 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8010090:	b1d0      	cbz	r0, 80100c8 <SecureElementDeriveAndStoreKey+0x38>
{
 8010092:	b510      	push	{r4, lr}
 8010094:	b084      	sub	sp, #16
 8010096:	4614      	mov	r4, r2
 8010098:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 801009a:	2a7f      	cmp	r2, #127	; 0x7f
 801009c:	d101      	bne.n	80100a2 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 801009e:	2904      	cmp	r1, #4
 80100a0:	d114      	bne.n	80100cc <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 80100a2:	2300      	movs	r3, #0
 80100a4:	9300      	str	r3, [sp, #0]
 80100a6:	9301      	str	r3, [sp, #4]
 80100a8:	9302      	str	r3, [sp, #8]
 80100aa:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 80100ac:	466b      	mov	r3, sp
 80100ae:	460a      	mov	r2, r1
 80100b0:	2110      	movs	r1, #16
 80100b2:	4660      	mov	r0, ip
 80100b4:	f7ff ff72 	bl	800ff9c <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80100b8:	b108      	cbz	r0, 80100be <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80100ba:	b004      	add	sp, #16
 80100bc:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 80100be:	4669      	mov	r1, sp
 80100c0:	4620      	mov	r0, r4
 80100c2:	f7ff ffa3 	bl	801000c <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80100c6:	e7f8      	b.n	80100ba <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 80100c8:	2002      	movs	r0, #2
}
 80100ca:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80100cc:	2003      	movs	r0, #3
 80100ce:	e7f4      	b.n	80100ba <SecureElementDeriveAndStoreKey+0x2a>

080100d0 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 80100d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80100d8:	9d07      	ldr	r5, [sp, #28]
 80100da:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80100dc:	b37b      	cbz	r3, 801013e <SecureElementProcessJoinAccept+0x6e>
 80100de:	4698      	mov	r8, r3
 80100e0:	b37d      	cbz	r5, 8010142 <SecureElementProcessJoinAccept+0x72>
 80100e2:	b386      	cbz	r6, 8010146 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80100e4:	2c21      	cmp	r4, #33	; 0x21
 80100e6:	d830      	bhi.n	801014a <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80100e8:	b2a7      	uxth	r7, r4
 80100ea:	463a      	mov	r2, r7
 80100ec:	4619      	mov	r1, r3
 80100ee:	4628      	mov	r0, r5
 80100f0:	f000 f887 	bl	8010202 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80100f4:	1e79      	subs	r1, r7, #1
 80100f6:	1c6b      	adds	r3, r5, #1
 80100f8:	2201      	movs	r2, #1
 80100fa:	b289      	uxth	r1, r1
 80100fc:	eb08 0002 	add.w	r0, r8, r2
 8010100:	f7ff ff4c 	bl	800ff9c <SecureElementAesEncrypt>
 8010104:	bb20      	cbnz	r0, 8010150 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8010106:	7aeb      	ldrb	r3, [r5, #11]
 8010108:	09db      	lsrs	r3, r3, #7
 801010a:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 801010c:	442c      	add	r4, r5
 801010e:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8010112:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8010116:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 801011a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801011e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8010122:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8010126:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 801012a:	b99b      	cbnz	r3, 8010154 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 801012c:	1f39      	subs	r1, r7, #4
 801012e:	2301      	movs	r3, #1
 8010130:	b289      	uxth	r1, r1
 8010132:	4628      	mov	r0, r5
 8010134:	f7ff ff1c 	bl	800ff70 <SecureElementVerifyAesCmac>
 8010138:	b140      	cbz	r0, 801014c <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 801013a:	2001      	movs	r0, #1
 801013c:	e006      	b.n	801014c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 801013e:	2002      	movs	r0, #2
 8010140:	e004      	b.n	801014c <SecureElementProcessJoinAccept+0x7c>
 8010142:	2002      	movs	r0, #2
 8010144:	e002      	b.n	801014c <SecureElementProcessJoinAccept+0x7c>
 8010146:	2002      	movs	r0, #2
 8010148:	e000      	b.n	801014c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801014a:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 801014c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8010150:	2007      	movs	r0, #7
 8010152:	e7fb      	b.n	801014c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8010154:	2004      	movs	r0, #4
 8010156:	e7f9      	b.n	801014c <SecureElementProcessJoinAccept+0x7c>

08010158 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 8010158:	b140      	cbz	r0, 801016c <SecureElementSetDevEui+0x14>
{
 801015a:	b508      	push	{r3, lr}
 801015c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 801015e:	2208      	movs	r2, #8
 8010160:	4b03      	ldr	r3, [pc, #12]	; (8010170 <SecureElementSetDevEui+0x18>)
 8010162:	6818      	ldr	r0, [r3, #0]
 8010164:	f000 f84d 	bl	8010202 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010168:	2000      	movs	r0, #0
}
 801016a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801016c:	2002      	movs	r0, #2
}
 801016e:	4770      	bx	lr
 8010170:	20000f50 	.word	0x20000f50

08010174 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 8010174:	4b01      	ldr	r3, [pc, #4]	; (801017c <SecureElementGetDevEui+0x8>)
 8010176:	6818      	ldr	r0, [r3, #0]
 8010178:	4770      	bx	lr
 801017a:	bf00      	nop
 801017c:	20000f50 	.word	0x20000f50

08010180 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 8010180:	b148      	cbz	r0, 8010196 <SecureElementSetJoinEui+0x16>
{
 8010182:	b508      	push	{r3, lr}
 8010184:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 8010186:	4b05      	ldr	r3, [pc, #20]	; (801019c <SecureElementSetJoinEui+0x1c>)
 8010188:	6818      	ldr	r0, [r3, #0]
 801018a:	2208      	movs	r2, #8
 801018c:	4410      	add	r0, r2
 801018e:	f000 f838 	bl	8010202 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8010192:	2000      	movs	r0, #0
}
 8010194:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010196:	2002      	movs	r0, #2
}
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop
 801019c:	20000f50 	.word	0x20000f50

080101a0 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 80101a0:	4b01      	ldr	r3, [pc, #4]	; (80101a8 <SecureElementGetJoinEui+0x8>)
 80101a2:	6818      	ldr	r0, [r3, #0]
}
 80101a4:	3008      	adds	r0, #8
 80101a6:	4770      	bx	lr
 80101a8:	20000f50 	.word	0x20000f50

080101ac <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80101ac:	4b09      	ldr	r3, [pc, #36]	; (80101d4 <rand1+0x28>)
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	4909      	ldr	r1, [pc, #36]	; (80101d8 <rand1+0x2c>)
 80101b2:	f243 0039 	movw	r0, #12345	; 0x3039
 80101b6:	fb01 0002 	mla	r0, r1, r2, r0
 80101ba:	6018      	str	r0, [r3, #0]
 80101bc:	2303      	movs	r3, #3
 80101be:	fba3 2300 	umull	r2, r3, r3, r0
 80101c2:	1ac2      	subs	r2, r0, r3
 80101c4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80101c8:	0f9b      	lsrs	r3, r3, #30
 80101ca:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 80101ce:	1ac0      	subs	r0, r0, r3
 80101d0:	4770      	bx	lr
 80101d2:	bf00      	nop
 80101d4:	20000108 	.word	0x20000108
 80101d8:	41c64e6d 	.word	0x41c64e6d

080101dc <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 80101dc:	4b01      	ldr	r3, [pc, #4]	; (80101e4 <srand1+0x8>)
 80101de:	6018      	str	r0, [r3, #0]
}
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	20000108 	.word	0x20000108

080101e8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80101e8:	b538      	push	{r3, r4, r5, lr}
 80101ea:	4605      	mov	r5, r0
 80101ec:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80101ee:	f7ff ffdd 	bl	80101ac <rand1>
 80101f2:	1b61      	subs	r1, r4, r5
 80101f4:	3101      	adds	r1, #1
 80101f6:	fb90 f3f1 	sdiv	r3, r0, r1
 80101fa:	fb01 0013 	mls	r0, r1, r3, r0
}
 80101fe:	4428      	add	r0, r5
 8010200:	bd38      	pop	{r3, r4, r5, pc}

08010202 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8010202:	e004      	b.n	801020e <memcpy1+0xc>
    {
        *dst++ = *src++;
 8010204:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010208:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 801020c:	461a      	mov	r2, r3
 801020e:	1e53      	subs	r3, r2, #1
 8010210:	b29b      	uxth	r3, r3
 8010212:	2a00      	cmp	r2, #0
 8010214:	d1f6      	bne.n	8010204 <memcpy1+0x2>
    }
}
 8010216:	4770      	bx	lr

08010218 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8010218:	1e53      	subs	r3, r2, #1
 801021a:	4418      	add	r0, r3
    while( size-- )
 801021c:	e004      	b.n	8010228 <memcpyr+0x10>
    {
        *dst-- = *src++;
 801021e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010222:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8010226:	461a      	mov	r2, r3
 8010228:	1e53      	subs	r3, r2, #1
 801022a:	b29b      	uxth	r3, r3
 801022c:	2a00      	cmp	r2, #0
 801022e:	d1f6      	bne.n	801021e <memcpyr+0x6>
    }
}
 8010230:	4770      	bx	lr

08010232 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8010232:	e002      	b.n	801023a <memset1+0x8>
    {
        *dst++ = value;
 8010234:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8010238:	461a      	mov	r2, r3
 801023a:	1e53      	subs	r3, r2, #1
 801023c:	b29b      	uxth	r3, r3
 801023e:	2a00      	cmp	r2, #0
 8010240:	d1f8      	bne.n	8010234 <memset1+0x2>
    }
}
 8010242:	4770      	bx	lr

08010244 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8010244:	b1f0      	cbz	r0, 8010284 <Crc32+0x40>
{
 8010246:	b510      	push	{r4, lr}
 8010248:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 801024a:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 801024e:	f04f 30ff 	mov.w	r0, #4294967295
 8010252:	e00e      	b.n	8010272 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8010254:	f340 0c00 	sbfx	ip, r0, #0, #1
 8010258:	4a0b      	ldr	r2, [pc, #44]	; (8010288 <Crc32+0x44>)
 801025a:	ea0c 0202 	and.w	r2, ip, r2
 801025e:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8010262:	3301      	adds	r3, #1
 8010264:	b29b      	uxth	r3, r3
 8010266:	2b07      	cmp	r3, #7
 8010268:	d9f4      	bls.n	8010254 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 801026a:	f10e 0e01 	add.w	lr, lr, #1
 801026e:	fa1f fe8e 	uxth.w	lr, lr
 8010272:	458e      	cmp	lr, r1
 8010274:	d204      	bcs.n	8010280 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 8010276:	f814 300e 	ldrb.w	r3, [r4, lr]
 801027a:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 801027c:	2300      	movs	r3, #0
 801027e:	e7f2      	b.n	8010266 <Crc32+0x22>
        }
    }

    return ~crc;
 8010280:	43c0      	mvns	r0, r0
}
 8010282:	bd10      	pop	{r4, pc}
        return 0;
 8010284:	2000      	movs	r0, #0
}
 8010286:	4770      	bx	lr
 8010288:	edb88320 	.word	0xedb88320

0801028c <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 801028c:	2001      	movs	r0, #1
 801028e:	4770      	bx	lr

08010290 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8010290:	280a      	cmp	r0, #10
 8010292:	d807      	bhi.n	80102a4 <RadioGetLoRaBandwidthInHz+0x14>
 8010294:	e8df f000 	tbb	[pc, r0]
 8010298:	17110b20 	.word	0x17110b20
 801029c:	061e1c1a 	.word	0x061e1c1a
 80102a0:	0e08      	.short	0x0e08
 80102a2:	14          	.byte	0x14
 80102a3:	00          	.byte	0x00
 80102a4:	2000      	movs	r0, #0
 80102a6:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80102a8:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 80102ac:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80102ae:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 80102b2:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80102b4:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 80102b8:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80102ba:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 80102be:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80102c0:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 80102c4:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80102c6:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 80102ca:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80102cc:	4804      	ldr	r0, [pc, #16]	; (80102e0 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 80102ce:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80102d0:	4804      	ldr	r0, [pc, #16]	; (80102e4 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 80102d2:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80102d4:	4804      	ldr	r0, [pc, #16]	; (80102e8 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 80102d6:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 80102d8:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 80102dc:	4770      	bx	lr
 80102de:	bf00      	nop
 80102e0:	0001e848 	.word	0x0001e848
 80102e4:	0003d090 	.word	0x0003d090
 80102e8:	0007a120 	.word	0x0007a120

080102ec <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80102ec:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80102f0:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80102f2:	b953      	cbnz	r3, 801030a <RadioGetGfskTimeOnAirNumerator+0x1e>
 80102f4:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 80102f6:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80102f8:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80102fa:	b141      	cbz	r1, 801030e <RadioGetGfskTimeOnAirNumerator+0x22>
 80102fc:	2302      	movs	r3, #2
 80102fe:	f89d 0000 	ldrb.w	r0, [sp]
 8010302:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 8010304:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8010308:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801030a:	2000      	movs	r0, #0
 801030c:	e7f3      	b.n	80102f6 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801030e:	2300      	movs	r3, #0
 8010310:	e7f5      	b.n	80102fe <RadioGetGfskTimeOnAirNumerator+0x12>

08010312 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8010312:	b570      	push	{r4, r5, r6, lr}
 8010314:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8010318:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 801031c:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801031e:	f1a1 0c05 	sub.w	ip, r1, #5
 8010322:	f1bc 0f01 	cmp.w	ip, #1
 8010326:	d932      	bls.n	801038e <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010328:	b918      	cbnz	r0, 8010332 <RadioGetLoRaTimeOnAirNumerator+0x20>
 801032a:	f1a1 060b 	sub.w	r6, r1, #11
 801032e:	2e01      	cmp	r6, #1
 8010330:	d935      	bls.n	801039e <RadioGetLoRaTimeOnAirNumerator+0x8c>
 8010332:	2801      	cmp	r0, #1
 8010334:	d02f      	beq.n	8010396 <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 8010336:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010338:	f89d e014 	ldrb.w	lr, [sp, #20]
 801033c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8010340:	b38d      	cbz	r5, 80103a6 <RadioGetLoRaTimeOnAirNumerator+0x94>
 8010342:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8010346:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8010348:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 801034a:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 801034e:	b36c      	cbz	r4, 80103ac <RadioGetLoRaTimeOnAirNumerator+0x9a>
 8010350:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 8010354:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8010356:	2906      	cmp	r1, #6
 8010358:	d904      	bls.n	8010364 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 801035a:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 801035e:	b10e      	cbz	r6, 8010364 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8010360:	1e88      	subs	r0, r1, #2
 8010362:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8010364:	f1bc 0f00 	cmp.w	ip, #0
 8010368:	db23      	blt.n	80103b2 <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801036a:	4484      	add	ip, r0
 801036c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010370:	fb9c fcf0 	sdiv	ip, ip, r0
 8010374:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8010378:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 801037c:	2906      	cmp	r1, #6
 801037e:	d801      	bhi.n	8010384 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 8010380:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8010384:	0080      	lsls	r0, r0, #2
 8010386:	3001      	adds	r0, #1
 8010388:	3902      	subs	r1, #2
}
 801038a:	4088      	lsls	r0, r1
 801038c:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 801038e:	2b0b      	cmp	r3, #11
 8010390:	d8ca      	bhi.n	8010328 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8010392:	230c      	movs	r3, #12
 8010394:	e7c8      	b.n	8010328 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010396:	290c      	cmp	r1, #12
 8010398:	d003      	beq.n	80103a2 <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 801039a:	2600      	movs	r6, #0
 801039c:	e7cc      	b.n	8010338 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 801039e:	2601      	movs	r6, #1
 80103a0:	e7ca      	b.n	8010338 <RadioGetLoRaTimeOnAirNumerator+0x26>
 80103a2:	2601      	movs	r6, #1
 80103a4:	e7c8      	b.n	8010338 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 80103a6:	f04f 0c00 	mov.w	ip, #0
 80103aa:	e7cc      	b.n	8010346 <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 80103ac:	f04f 0c14 	mov.w	ip, #20
 80103b0:	e7d0      	b.n	8010354 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 80103b2:	f04f 0c00 	mov.w	ip, #0
 80103b6:	e7d8      	b.n	801036a <RadioGetLoRaTimeOnAirNumerator+0x58>

080103b8 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80103b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103ba:	b085      	sub	sp, #20
 80103bc:	460e      	mov	r6, r1
 80103be:	4615      	mov	r5, r2
 80103c0:	4619      	mov	r1, r3
 80103c2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80103c6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80103ca:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80103ce:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 80103d2:	b148      	cbz	r0, 80103e8 <RadioTimeOnAir+0x30>
 80103d4:	2801      	cmp	r0, #1
 80103d6:	d012      	beq.n	80103fe <RadioTimeOnAir+0x46>
 80103d8:	2501      	movs	r5, #1
 80103da:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 80103dc:	442c      	add	r4, r5
 80103de:	1e60      	subs	r0, r4, #1
}
 80103e0:	fbb0 f0f5 	udiv	r0, r0, r5
 80103e4:	b005      	add	sp, #20
 80103e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80103e8:	f8cd c004 	str.w	ip, [sp, #4]
 80103ec:	9700      	str	r7, [sp, #0]
 80103ee:	4628      	mov	r0, r5
 80103f0:	f7ff ff7c 	bl	80102ec <RadioGetGfskTimeOnAirNumerator>
 80103f4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80103f8:	fb00 f404 	mul.w	r4, r0, r4
        break;
 80103fc:	e7ee      	b.n	80103dc <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80103fe:	f8cd c008 	str.w	ip, [sp, #8]
 8010402:	9701      	str	r7, [sp, #4]
 8010404:	9300      	str	r3, [sp, #0]
 8010406:	4613      	mov	r3, r2
 8010408:	460a      	mov	r2, r1
 801040a:	4629      	mov	r1, r5
 801040c:	4630      	mov	r0, r6
 801040e:	f7ff ff80 	bl	8010312 <RadioGetLoRaTimeOnAirNumerator>
 8010412:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010416:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801041a:	4b03      	ldr	r3, [pc, #12]	; (8010428 <RadioTimeOnAir+0x70>)
 801041c:	5d98      	ldrb	r0, [r3, r6]
 801041e:	f7ff ff37 	bl	8010290 <RadioGetLoRaBandwidthInHz>
 8010422:	4605      	mov	r5, r0
        break;
 8010424:	e7da      	b.n	80103dc <RadioTimeOnAir+0x24>
 8010426:	bf00      	nop
 8010428:	080139b8 	.word	0x080139b8

0801042c <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 801042c:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 801042e:	4b05      	ldr	r3, [pc, #20]	; (8010444 <RadioOnTxTimeoutProcess+0x18>)
 8010430:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010434:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8010436:	4b04      	ldr	r3, [pc, #16]	; (8010448 <RadioOnTxTimeoutProcess+0x1c>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	b113      	cbz	r3, 8010442 <RadioOnTxTimeoutProcess+0x16>
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	b103      	cbz	r3, 8010442 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8010440:	4798      	blx	r3
    }
}
 8010442:	bd08      	pop	{r3, pc}
 8010444:	48000400 	.word	0x48000400
 8010448:	20001054 	.word	0x20001054

0801044c <RadioOnTxTimeoutIrq>:
{
 801044c:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 801044e:	f7ff ffed 	bl	801042c <RadioOnTxTimeoutProcess>
}
 8010452:	bd08      	pop	{r3, pc}

08010454 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8010454:	b508      	push	{r3, lr}
 8010456:	4b05      	ldr	r3, [pc, #20]	; (801046c <RadioOnRxTimeoutProcess+0x18>)
 8010458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801045c:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801045e:	4b04      	ldr	r3, [pc, #16]	; (8010470 <RadioOnRxTimeoutProcess+0x1c>)
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	b113      	cbz	r3, 801046a <RadioOnRxTimeoutProcess+0x16>
 8010464:	68db      	ldr	r3, [r3, #12]
 8010466:	b103      	cbz	r3, 801046a <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8010468:	4798      	blx	r3
    }
}
 801046a:	bd08      	pop	{r3, pc}
 801046c:	48000400 	.word	0x48000400
 8010470:	20001054 	.word	0x20001054

08010474 <RadioOnRxTimeoutIrq>:
{
 8010474:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8010476:	f7ff ffed 	bl	8010454 <RadioOnRxTimeoutProcess>
}
 801047a:	bd08      	pop	{r3, pc}

0801047c <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801047c:	f04f 30ff 	mov.w	r0, #4294967295
 8010480:	4770      	bx	lr

08010482 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8010482:	f04f 30ff 	mov.w	r0, #4294967295
 8010486:	4770      	bx	lr

08010488 <RadioTxCw>:
{
 8010488:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801048a:	f001 fbab 	bl	8011be4 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801048e:	2101      	movs	r1, #1
 8010490:	f001 fb94 	bl	8011bbc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8010494:	f000 feac 	bl	80111f0 <SUBGRF_SetTxContinuousWave>
}
 8010498:	bd08      	pop	{r3, pc}
	...

0801049c <RadioSetRxDutyCycle>:
{
 801049c:	b570      	push	{r4, r5, r6, lr}
 801049e:	4604      	mov	r4, r0
 80104a0:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80104a2:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 80104a6:	4e09      	ldr	r6, [pc, #36]	; (80104cc <RadioSetRxDutyCycle+0x30>)
 80104a8:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80104aa:	2300      	movs	r3, #0
 80104ac:	461a      	mov	r2, r3
 80104ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80104b2:	4608      	mov	r0, r1
 80104b4:	f000 ff47 	bl	8011346 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80104b8:	2100      	movs	r1, #0
 80104ba:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80104be:	f001 fb7d 	bl	8011bbc <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80104c2:	4629      	mov	r1, r5
 80104c4:	4620      	mov	r0, r4
 80104c6:	f000 fe63 	bl	8011190 <SUBGRF_SetRxDutyCycle>
}
 80104ca:	bd70      	pop	{r4, r5, r6, pc}
 80104cc:	20001070 	.word	0x20001070

080104d0 <RadioRxBoosted>:
{
 80104d0:	b538      	push	{r3, r4, r5, lr}
 80104d2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 80104d4:	f001 fc57 	bl	8011d86 <RFW_Is_Init>
 80104d8:	2801      	cmp	r0, #1
 80104da:	d019      	beq.n	8010510 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80104dc:	2300      	movs	r3, #0
 80104de:	461a      	mov	r2, r3
 80104e0:	f240 2162 	movw	r1, #610	; 0x262
 80104e4:	4608      	mov	r0, r1
 80104e6:	f000 ff2e 	bl	8011346 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80104ea:	b9a4      	cbnz	r4, 8010516 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80104ec:	4c11      	ldr	r4, [pc, #68]	; (8010534 <RadioRxBoosted+0x64>)
 80104ee:	2100      	movs	r1, #0
 80104f0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80104f2:	4b11      	ldr	r3, [pc, #68]	; (8010538 <RadioRxBoosted+0x68>)
 80104f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80104f8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80104fa:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80104fe:	f001 fb5d 	bl	8011bbc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8010502:	7863      	ldrb	r3, [r4, #1]
 8010504:	b183      	cbz	r3, 8010528 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8010506:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801050a:	f000 ffef 	bl	80114ec <SUBGRF_SetRxBoosted>
}
 801050e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8010510:	f001 fc41 	bl	8011d96 <RFW_ReceiveInit>
 8010514:	e7e9      	b.n	80104ea <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8010516:	4d09      	ldr	r5, [pc, #36]	; (801053c <RadioRxBoosted+0x6c>)
 8010518:	4621      	mov	r1, r4
 801051a:	4628      	mov	r0, r5
 801051c:	f002 f90e 	bl	801273c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8010520:	4628      	mov	r0, r5
 8010522:	f002 f8c5 	bl	80126b0 <UTIL_TIMER_Start>
 8010526:	e7e1      	b.n	80104ec <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8010528:	4b02      	ldr	r3, [pc, #8]	; (8010534 <RadioRxBoosted+0x64>)
 801052a:	6898      	ldr	r0, [r3, #8]
 801052c:	0180      	lsls	r0, r0, #6
 801052e:	f000 ffdd 	bl	80114ec <SUBGRF_SetRxBoosted>
}
 8010532:	e7ec      	b.n	801050e <RadioRxBoosted+0x3e>
 8010534:	20001070 	.word	0x20001070
 8010538:	48000400 	.word	0x48000400
 801053c:	20001058 	.word	0x20001058

08010540 <RadioStandby>:
{
 8010540:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8010542:	2000      	movs	r0, #0
 8010544:	f000 fdd6 	bl	80110f4 <SUBGRF_SetStandby>
}
 8010548:	bd08      	pop	{r3, pc}

0801054a <RadioWrite>:
{
 801054a:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 801054c:	f000 ffbe 	bl	80114cc <SUBGRF_WriteRegister>
}
 8010550:	bd08      	pop	{r3, pc}
	...

08010554 <RadioTxPrbs>:
{
 8010554:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8010556:	2101      	movs	r1, #1
 8010558:	4b07      	ldr	r3, [pc, #28]	; (8010578 <RadioTxPrbs+0x24>)
 801055a:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 801055e:	f001 fb2d 	bl	8011bbc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8010562:	212d      	movs	r1, #45	; 0x2d
 8010564:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8010568:	f7ff ffef 	bl	801054a <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 801056c:	f000 fe47 	bl	80111fe <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8010570:	4802      	ldr	r0, [pc, #8]	; (801057c <RadioTxPrbs+0x28>)
 8010572:	f000 fdd9 	bl	8011128 <SUBGRF_SetTx>
}
 8010576:	bd08      	pop	{r3, pc}
 8010578:	20001070 	.word	0x20001070
 801057c:	000fffff 	.word	0x000fffff

08010580 <RadioRead>:
{
 8010580:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8010582:	f001 f895 	bl	80116b0 <SUBGRF_ReadRegister>
}
 8010586:	bd08      	pop	{r3, pc}

08010588 <RadioGetStatus>:
{
 8010588:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 801058a:	f000 fdad 	bl	80110e8 <SUBGRF_GetOperatingMode>
 801058e:	2805      	cmp	r0, #5
 8010590:	d007      	beq.n	80105a2 <RadioGetStatus+0x1a>
 8010592:	2807      	cmp	r0, #7
 8010594:	d007      	beq.n	80105a6 <RadioGetStatus+0x1e>
 8010596:	2804      	cmp	r0, #4
 8010598:	d001      	beq.n	801059e <RadioGetStatus+0x16>
            return RF_IDLE;
 801059a:	2000      	movs	r0, #0
}
 801059c:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 801059e:	2002      	movs	r0, #2
 80105a0:	e7fc      	b.n	801059c <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80105a2:	2001      	movs	r0, #1
 80105a4:	e7fa      	b.n	801059c <RadioGetStatus+0x14>
            return RF_CAD;
 80105a6:	2003      	movs	r0, #3
 80105a8:	e7f8      	b.n	801059c <RadioGetStatus+0x14>
	...

080105ac <RadioIrqProcess>:
{
 80105ac:	b530      	push	{r4, r5, lr}
 80105ae:	b083      	sub	sp, #12
    uint8_t size = 0;
 80105b0:	2300      	movs	r3, #0
 80105b2:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80105b6:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80105b8:	4ba5      	ldr	r3, [pc, #660]	; (8010850 <RadioIrqProcess+0x2a4>)
 80105ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80105be:	2b20      	cmp	r3, #32
 80105c0:	d829      	bhi.n	8010616 <RadioIrqProcess+0x6a>
 80105c2:	b21a      	sxth	r2, r3
 80105c4:	2a00      	cmp	r2, #0
 80105c6:	f000 8140 	beq.w	801084a <RadioIrqProcess+0x29e>
 80105ca:	3b01      	subs	r3, #1
 80105cc:	2b1f      	cmp	r3, #31
 80105ce:	f200 813c 	bhi.w	801084a <RadioIrqProcess+0x29e>
 80105d2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80105d6:	0063      	.short	0x0063
 80105d8:	013a007f 	.word	0x013a007f
 80105dc:	013a00f7 	.word	0x013a00f7
 80105e0:	013a013a 	.word	0x013a013a
 80105e4:	013a0127 	.word	0x013a0127
 80105e8:	013a013a 	.word	0x013a013a
 80105ec:	013a013a 	.word	0x013a013a
 80105f0:	013a013a 	.word	0x013a013a
 80105f4:	013a0134 	.word	0x013a0134
 80105f8:	013a013a 	.word	0x013a013a
 80105fc:	013a013a 	.word	0x013a013a
 8010600:	013a013a 	.word	0x013a013a
 8010604:	013a013a 	.word	0x013a013a
 8010608:	013a013a 	.word	0x013a013a
 801060c:	013a013a 	.word	0x013a013a
 8010610:	013a013a 	.word	0x013a013a
 8010614:	0155      	.short	0x0155
 8010616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801061a:	f000 80b3 	beq.w	8010784 <RadioIrqProcess+0x1d8>
 801061e:	d928      	bls.n	8010672 <RadioIrqProcess+0xc6>
 8010620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010624:	f040 8111 	bne.w	801084a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8010628:	4b8a      	ldr	r3, [pc, #552]	; (8010854 <RadioIrqProcess+0x2a8>)
 801062a:	2201      	movs	r2, #1
 801062c:	2100      	movs	r1, #0
 801062e:	2002      	movs	r0, #2
 8010630:	f001 fc90 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8010634:	f000 fd58 	bl	80110e8 <SUBGRF_GetOperatingMode>
 8010638:	2804      	cmp	r0, #4
 801063a:	f000 80b0 	beq.w	801079e <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801063e:	f000 fd53 	bl	80110e8 <SUBGRF_GetOperatingMode>
 8010642:	2805      	cmp	r0, #5
 8010644:	f040 8101 	bne.w	801084a <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8010648:	4b83      	ldr	r3, [pc, #524]	; (8010858 <RadioIrqProcess+0x2ac>)
 801064a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801064e:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8010650:	4882      	ldr	r0, [pc, #520]	; (801085c <RadioIrqProcess+0x2b0>)
 8010652:	f001 ffd3 	bl	80125fc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8010656:	2000      	movs	r0, #0
 8010658:	f000 fd4c 	bl	80110f4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801065c:	4b80      	ldr	r3, [pc, #512]	; (8010860 <RadioIrqProcess+0x2b4>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	2b00      	cmp	r3, #0
 8010662:	f000 80f2 	beq.w	801084a <RadioIrqProcess+0x29e>
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	2b00      	cmp	r3, #0
 801066a:	f000 80ee 	beq.w	801084a <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 801066e:	4798      	blx	r3
 8010670:	e0eb      	b.n	801084a <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8010672:	2b40      	cmp	r3, #64	; 0x40
 8010674:	f000 811d 	beq.w	80108b2 <RadioIrqProcess+0x306>
 8010678:	2b80      	cmp	r3, #128	; 0x80
 801067a:	f040 80e6 	bne.w	801084a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 801067e:	2000      	movs	r0, #0
 8010680:	f000 fd38 	bl	80110f4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8010684:	4b76      	ldr	r3, [pc, #472]	; (8010860 <RadioIrqProcess+0x2b4>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	f000 80de 	beq.w	801084a <RadioIrqProcess+0x29e>
 801068e:	699b      	ldr	r3, [r3, #24]
 8010690:	2b00      	cmp	r3, #0
 8010692:	f000 80da 	beq.w	801084a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8010696:	2000      	movs	r0, #0
 8010698:	4798      	blx	r3
 801069a:	e0d6      	b.n	801084a <RadioIrqProcess+0x29e>
 801069c:	4b6e      	ldr	r3, [pc, #440]	; (8010858 <RadioIrqProcess+0x2ac>)
 801069e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80106a2:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 80106a4:	486f      	ldr	r0, [pc, #444]	; (8010864 <RadioIrqProcess+0x2b8>)
 80106a6:	f001 ffa9 	bl	80125fc <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80106aa:	2000      	movs	r0, #0
 80106ac:	f000 fd22 	bl	80110f4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80106b0:	f001 fb6b 	bl	8011d8a <RFW_Is_LongPacketModeEnabled>
 80106b4:	2801      	cmp	r0, #1
 80106b6:	d00a      	beq.n	80106ce <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80106b8:	4b69      	ldr	r3, [pc, #420]	; (8010860 <RadioIrqProcess+0x2b4>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f000 80c4 	beq.w	801084a <RadioIrqProcess+0x29e>
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	f000 80c0 	beq.w	801084a <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 80106ca:	4798      	blx	r3
 80106cc:	e0bd      	b.n	801084a <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 80106ce:	f001 fb65 	bl	8011d9c <RFW_DeInit_TxLongPacket>
 80106d2:	e7f1      	b.n	80106b8 <RadioIrqProcess+0x10c>
 80106d4:	4b60      	ldr	r3, [pc, #384]	; (8010858 <RadioIrqProcess+0x2ac>)
 80106d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80106da:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 80106dc:	485f      	ldr	r0, [pc, #380]	; (801085c <RadioIrqProcess+0x2b0>)
 80106de:	f001 ff8d 	bl	80125fc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80106e2:	4b5b      	ldr	r3, [pc, #364]	; (8010850 <RadioIrqProcess+0x2a4>)
 80106e4:	785b      	ldrb	r3, [r3, #1]
 80106e6:	b303      	cbz	r3, 801072a <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80106e8:	22ff      	movs	r2, #255	; 0xff
 80106ea:	f10d 0107 	add.w	r1, sp, #7
 80106ee:	485e      	ldr	r0, [pc, #376]	; (8010868 <RadioIrqProcess+0x2bc>)
 80106f0:	f001 fa4a 	bl	8011b88 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80106f4:	485d      	ldr	r0, [pc, #372]	; (801086c <RadioIrqProcess+0x2c0>)
 80106f6:	f000 fead 	bl	8011454 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80106fa:	4b59      	ldr	r3, [pc, #356]	; (8010860 <RadioIrqProcess+0x2b4>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	f000 80a3 	beq.w	801084a <RadioIrqProcess+0x29e>
 8010704:	689c      	ldr	r4, [r3, #8]
 8010706:	2c00      	cmp	r4, #0
 8010708:	f000 809f 	beq.w	801084a <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 801070c:	4b50      	ldr	r3, [pc, #320]	; (8010850 <RadioIrqProcess+0x2a4>)
 801070e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010712:	2b01      	cmp	r3, #1
 8010714:	d11d      	bne.n	8010752 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8010716:	4a4e      	ldr	r2, [pc, #312]	; (8010850 <RadioIrqProcess+0x2a4>)
 8010718:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 801071c:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8010720:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010724:	4850      	ldr	r0, [pc, #320]	; (8010868 <RadioIrqProcess+0x2bc>)
 8010726:	47a0      	blx	r4
                break;
 8010728:	e08f      	b.n	801084a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801072a:	2000      	movs	r0, #0
 801072c:	f000 fce2 	bl	80110f4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8010730:	2100      	movs	r1, #0
 8010732:	f640 1002 	movw	r0, #2306	; 0x902
 8010736:	f000 fec9 	bl	80114cc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801073a:	f640 1044 	movw	r0, #2372	; 0x944
 801073e:	f000 ffb7 	bl	80116b0 <SUBGRF_ReadRegister>
 8010742:	f040 0102 	orr.w	r1, r0, #2
 8010746:	b2c9      	uxtb	r1, r1
 8010748:	f640 1044 	movw	r0, #2372	; 0x944
 801074c:	f000 febe 	bl	80114cc <SUBGRF_WriteRegister>
 8010750:	e7ca      	b.n	80106e8 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8010752:	4c3f      	ldr	r4, [pc, #252]	; (8010850 <RadioIrqProcess+0x2a4>)
 8010754:	4669      	mov	r1, sp
 8010756:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010758:	f001 faca 	bl	8011cf0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801075c:	4b40      	ldr	r3, [pc, #256]	; (8010860 <RadioIrqProcess+0x2b4>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	689d      	ldr	r5, [r3, #8]
 8010762:	9b00      	ldr	r3, [sp, #0]
 8010764:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8010768:	4a41      	ldr	r2, [pc, #260]	; (8010870 <RadioIrqProcess+0x2c4>)
 801076a:	fb82 1203 	smull	r1, r2, r2, r3
 801076e:	17db      	asrs	r3, r3, #31
 8010770:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8010774:	b25b      	sxtb	r3, r3
 8010776:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 801077a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801077e:	483a      	ldr	r0, [pc, #232]	; (8010868 <RadioIrqProcess+0x2bc>)
 8010780:	47a8      	blx	r5
                break;
 8010782:	e062      	b.n	801084a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8010784:	2000      	movs	r0, #0
 8010786:	f000 fcb5 	bl	80110f4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801078a:	4b35      	ldr	r3, [pc, #212]	; (8010860 <RadioIrqProcess+0x2b4>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d05b      	beq.n	801084a <RadioIrqProcess+0x29e>
 8010792:	699b      	ldr	r3, [r3, #24]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d058      	beq.n	801084a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8010798:	2001      	movs	r0, #1
 801079a:	4798      	blx	r3
 801079c:	e055      	b.n	801084a <RadioIrqProcess+0x29e>
 801079e:	4b2e      	ldr	r3, [pc, #184]	; (8010858 <RadioIrqProcess+0x2ac>)
 80107a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80107a4:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 80107a6:	482f      	ldr	r0, [pc, #188]	; (8010864 <RadioIrqProcess+0x2b8>)
 80107a8:	f001 ff28 	bl	80125fc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80107ac:	2000      	movs	r0, #0
 80107ae:	f000 fca1 	bl	80110f4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80107b2:	4b2b      	ldr	r3, [pc, #172]	; (8010860 <RadioIrqProcess+0x2b4>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d047      	beq.n	801084a <RadioIrqProcess+0x29e>
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d044      	beq.n	801084a <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 80107c0:	4798      	blx	r3
 80107c2:	e042      	b.n	801084a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80107c4:	4b2b      	ldr	r3, [pc, #172]	; (8010874 <RadioIrqProcess+0x2c8>)
 80107c6:	2201      	movs	r2, #1
 80107c8:	2100      	movs	r1, #0
 80107ca:	2002      	movs	r0, #2
 80107cc:	f001 fbc2 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80107d0:	4b1f      	ldr	r3, [pc, #124]	; (8010850 <RadioIrqProcess+0x2a4>)
 80107d2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80107d4:	b3c9      	cbz	r1, 801084a <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 80107d6:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80107da:	f640 1003 	movw	r0, #2307	; 0x903
 80107de:	f7ff feb4 	bl	801054a <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80107e2:	4c1b      	ldr	r4, [pc, #108]	; (8010850 <RadioIrqProcess+0x2a4>)
 80107e4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80107e8:	f640 1004 	movw	r0, #2308	; 0x904
 80107ec:	f7ff fead 	bl	801054a <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80107f0:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 80107f4:	f640 1005 	movw	r0, #2309	; 0x905
 80107f8:	f7ff fea7 	bl	801054a <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 80107fc:	f640 1002 	movw	r0, #2306	; 0x902
 8010800:	f7ff febe 	bl	8010580 <RadioRead>
 8010804:	f040 0101 	orr.w	r1, r0, #1
 8010808:	b2c9      	uxtb	r1, r1
 801080a:	f640 1002 	movw	r0, #2306	; 0x902
 801080e:	f7ff fe9c 	bl	801054a <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8010812:	2200      	movs	r2, #0
 8010814:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8010816:	4613      	mov	r3, r2
 8010818:	f240 2162 	movw	r1, #610	; 0x262
 801081c:	4608      	mov	r0, r1
 801081e:	f000 fd92 	bl	8011346 <SUBGRF_SetDioIrqParams>
 8010822:	e012      	b.n	801084a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8010824:	4b14      	ldr	r3, [pc, #80]	; (8010878 <RadioIrqProcess+0x2cc>)
 8010826:	2201      	movs	r2, #1
 8010828:	2100      	movs	r1, #0
 801082a:	2002      	movs	r0, #2
 801082c:	f001 fb92 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8010830:	f001 faa9 	bl	8011d86 <RFW_Is_Init>
 8010834:	2801      	cmp	r0, #1
 8010836:	d108      	bne.n	801084a <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8010838:	f001 fab1 	bl	8011d9e <RFW_ReceivePayload>
 801083c:	e005      	b.n	801084a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801083e:	4b0f      	ldr	r3, [pc, #60]	; (801087c <RadioIrqProcess+0x2d0>)
 8010840:	2201      	movs	r2, #1
 8010842:	2100      	movs	r1, #0
 8010844:	2002      	movs	r0, #2
 8010846:	f001 fb85 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
}
 801084a:	b003      	add	sp, #12
 801084c:	bd30      	pop	{r4, r5, pc}
 801084e:	bf00      	nop
 8010850:	20001070 	.word	0x20001070
 8010854:	0801394c 	.word	0x0801394c
 8010858:	48000400 	.word	0x48000400
 801085c:	20001058 	.word	0x20001058
 8010860:	20001054 	.word	0x20001054
 8010864:	200010cc 	.word	0x200010cc
 8010868:	20000f54 	.word	0x20000f54
 801086c:	20001094 	.word	0x20001094
 8010870:	10624dd3 	.word	0x10624dd3
 8010874:	08013960 	.word	0x08013960
 8010878:	0801396c 	.word	0x0801396c
 801087c:	08013978 	.word	0x08013978
        TimerStop( &RxTimeoutTimer );
 8010880:	4817      	ldr	r0, [pc, #92]	; (80108e0 <RadioIrqProcess+0x334>)
 8010882:	f001 febb 	bl	80125fc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8010886:	4b17      	ldr	r3, [pc, #92]	; (80108e4 <RadioIrqProcess+0x338>)
 8010888:	785b      	ldrb	r3, [r3, #1]
 801088a:	b173      	cbz	r3, 80108aa <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801088c:	4b16      	ldr	r3, [pc, #88]	; (80108e8 <RadioIrqProcess+0x33c>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d0da      	beq.n	801084a <RadioIrqProcess+0x29e>
 8010894:	68db      	ldr	r3, [r3, #12]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d0d7      	beq.n	801084a <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 801089a:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801089c:	4b13      	ldr	r3, [pc, #76]	; (80108ec <RadioIrqProcess+0x340>)
 801089e:	2201      	movs	r2, #1
 80108a0:	2100      	movs	r1, #0
 80108a2:	2002      	movs	r0, #2
 80108a4:	f001 fb56 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
 80108a8:	e7cf      	b.n	801084a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80108aa:	2000      	movs	r0, #0
 80108ac:	f000 fc22 	bl	80110f4 <SUBGRF_SetStandby>
 80108b0:	e7ec      	b.n	801088c <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80108b2:	4b0f      	ldr	r3, [pc, #60]	; (80108f0 <RadioIrqProcess+0x344>)
 80108b4:	2201      	movs	r2, #1
 80108b6:	2100      	movs	r1, #0
 80108b8:	2002      	movs	r0, #2
 80108ba:	f001 fb4b 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80108be:	4b09      	ldr	r3, [pc, #36]	; (80108e4 <RadioIrqProcess+0x338>)
 80108c0:	785b      	ldrb	r3, [r3, #1]
 80108c2:	b143      	cbz	r3, 80108d6 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80108c4:	4b08      	ldr	r3, [pc, #32]	; (80108e8 <RadioIrqProcess+0x33c>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d0be      	beq.n	801084a <RadioIrqProcess+0x29e>
 80108cc:	691b      	ldr	r3, [r3, #16]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d0bb      	beq.n	801084a <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 80108d2:	4798      	blx	r3
}
 80108d4:	e7b9      	b.n	801084a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80108d6:	2000      	movs	r0, #0
 80108d8:	f000 fc0c 	bl	80110f4 <SUBGRF_SetStandby>
 80108dc:	e7f2      	b.n	80108c4 <RadioIrqProcess+0x318>
 80108de:	bf00      	nop
 80108e0:	20001058 	.word	0x20001058
 80108e4:	20001070 	.word	0x20001070
 80108e8:	20001054 	.word	0x20001054
 80108ec:	08013984 	.word	0x08013984
 80108f0:	08013990 	.word	0x08013990

080108f4 <RadioOnDioIrq>:
{
 80108f4:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 80108f6:	4b03      	ldr	r3, [pc, #12]	; (8010904 <RadioOnDioIrq+0x10>)
 80108f8:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 80108fc:	f7ff fe56 	bl	80105ac <RadioIrqProcess>
}
 8010900:	bd08      	pop	{r3, pc}
 8010902:	bf00      	nop
 8010904:	20001070 	.word	0x20001070

08010908 <RadioGetWakeupTime>:
{
 8010908:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801090a:	f001 f982 	bl	8011c12 <SUBGRF_GetRadioWakeUpTime>
}
 801090e:	3003      	adds	r0, #3
 8010910:	bd08      	pop	{r3, pc}
	...

08010914 <RadioSetMaxPayloadLength>:
{
 8010914:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8010916:	2801      	cmp	r0, #1
 8010918:	d004      	beq.n	8010924 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801091a:	4b0a      	ldr	r3, [pc, #40]	; (8010944 <RadioSetMaxPayloadLength+0x30>)
 801091c:	7d5b      	ldrb	r3, [r3, #21]
 801091e:	2b01      	cmp	r3, #1
 8010920:	d008      	beq.n	8010934 <RadioSetMaxPayloadLength+0x20>
}
 8010922:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8010924:	4b08      	ldr	r3, [pc, #32]	; (8010948 <RadioSetMaxPayloadLength+0x34>)
 8010926:	7019      	strb	r1, [r3, #0]
 8010928:	4806      	ldr	r0, [pc, #24]	; (8010944 <RadioSetMaxPayloadLength+0x30>)
 801092a:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801092c:	300e      	adds	r0, #14
 801092e:	f001 f843 	bl	80119b8 <SUBGRF_SetPacketParams>
 8010932:	e7f6      	b.n	8010922 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8010934:	4b04      	ldr	r3, [pc, #16]	; (8010948 <RadioSetMaxPayloadLength+0x34>)
 8010936:	7019      	strb	r1, [r3, #0]
 8010938:	4802      	ldr	r0, [pc, #8]	; (8010944 <RadioSetMaxPayloadLength+0x30>)
 801093a:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801093c:	300e      	adds	r0, #14
 801093e:	f001 f83b 	bl	80119b8 <SUBGRF_SetPacketParams>
}
 8010942:	e7ee      	b.n	8010922 <RadioSetMaxPayloadLength+0xe>
 8010944:	20001070 	.word	0x20001070
 8010948:	2000010c 	.word	0x2000010c

0801094c <RadioReadRegisters>:
{
 801094c:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 801094e:	f001 f8a5 	bl	8011a9c <SUBGRF_ReadRegisters>
}
 8010952:	bd08      	pop	{r3, pc}

08010954 <RadioWriteRegisters>:
{
 8010954:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8010956:	f000 ffed 	bl	8011934 <SUBGRF_WriteRegisters>
}
 801095a:	bd08      	pop	{r3, pc}

0801095c <RadioRssi>:
{
 801095c:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 801095e:	f000 fd6b 	bl	8011438 <SUBGRF_GetRssiInst>
}
 8010962:	b200      	sxth	r0, r0
 8010964:	bd08      	pop	{r3, pc}
	...

08010968 <RadioSetTxContinuousWave>:
{
 8010968:	b538      	push	{r3, r4, r5, lr}
 801096a:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 801096c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8010970:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 8010974:	f000 fd20 	bl	80113b8 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8010978:	4628      	mov	r0, r5
 801097a:	f001 f933 	bl	8011be4 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801097e:	2101      	movs	r1, #1
 8010980:	f001 f91c 	bl	8011bbc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8010984:	f000 fc34 	bl	80111f0 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8010988:	4d04      	ldr	r5, [pc, #16]	; (801099c <RadioSetTxContinuousWave+0x34>)
 801098a:	4621      	mov	r1, r4
 801098c:	4628      	mov	r0, r5
 801098e:	f001 fed5 	bl	801273c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8010992:	4628      	mov	r0, r5
 8010994:	f001 fe8c 	bl	80126b0 <UTIL_TIMER_Start>
}
 8010998:	bd38      	pop	{r3, r4, r5, pc}
 801099a:	bf00      	nop
 801099c:	200010cc 	.word	0x200010cc

080109a0 <RadioSetChannel>:
{
 80109a0:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 80109a2:	f000 fd09 	bl	80113b8 <SUBGRF_SetRfFrequency>
}
 80109a6:	bd08      	pop	{r3, pc}

080109a8 <RadioStartCad>:
{
 80109a8:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80109aa:	2100      	movs	r1, #0
 80109ac:	4b07      	ldr	r3, [pc, #28]	; (80109cc <RadioStartCad+0x24>)
 80109ae:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80109b2:	f001 f903 	bl	8011bbc <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80109b6:	2300      	movs	r3, #0
 80109b8:	461a      	mov	r2, r3
 80109ba:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80109be:	4608      	mov	r0, r1
 80109c0:	f000 fcc1 	bl	8011346 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 80109c4:	f000 fc08 	bl	80111d8 <SUBGRF_SetCad>
}
 80109c8:	bd08      	pop	{r3, pc}
 80109ca:	bf00      	nop
 80109cc:	20001070 	.word	0x20001070

080109d0 <RadioRx>:
{
 80109d0:	b538      	push	{r3, r4, r5, lr}
 80109d2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 80109d4:	f001 f9d7 	bl	8011d86 <RFW_Is_Init>
 80109d8:	2801      	cmp	r0, #1
 80109da:	d019      	beq.n	8010a10 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80109dc:	2300      	movs	r3, #0
 80109de:	461a      	mov	r2, r3
 80109e0:	f240 2162 	movw	r1, #610	; 0x262
 80109e4:	4608      	mov	r0, r1
 80109e6:	f000 fcae 	bl	8011346 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80109ea:	b9a4      	cbnz	r4, 8010a16 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80109ec:	4c11      	ldr	r4, [pc, #68]	; (8010a34 <RadioRx+0x64>)
 80109ee:	2100      	movs	r1, #0
 80109f0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80109f2:	4b11      	ldr	r3, [pc, #68]	; (8010a38 <RadioRx+0x68>)
 80109f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80109f8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80109fa:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80109fe:	f001 f8dd 	bl	8011bbc <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8010a02:	7863      	ldrb	r3, [r4, #1]
 8010a04:	b183      	cbz	r3, 8010a28 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8010a06:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8010a0a:	f000 fba7 	bl	801115c <SUBGRF_SetRx>
}
 8010a0e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8010a10:	f001 f9c1 	bl	8011d96 <RFW_ReceiveInit>
 8010a14:	e7e9      	b.n	80109ea <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8010a16:	4d09      	ldr	r5, [pc, #36]	; (8010a3c <RadioRx+0x6c>)
 8010a18:	4621      	mov	r1, r4
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	f001 fe8e 	bl	801273c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8010a20:	4628      	mov	r0, r5
 8010a22:	f001 fe45 	bl	80126b0 <UTIL_TIMER_Start>
 8010a26:	e7e1      	b.n	80109ec <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8010a28:	4b02      	ldr	r3, [pc, #8]	; (8010a34 <RadioRx+0x64>)
 8010a2a:	6898      	ldr	r0, [r3, #8]
 8010a2c:	0180      	lsls	r0, r0, #6
 8010a2e:	f000 fb95 	bl	801115c <SUBGRF_SetRx>
}
 8010a32:	e7ec      	b.n	8010a0e <RadioRx+0x3e>
 8010a34:	20001070 	.word	0x20001070
 8010a38:	48000400 	.word	0x48000400
 8010a3c:	20001058 	.word	0x20001058

08010a40 <RadioSleep>:
{
 8010a40:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8010a42:	f04f 0004 	mov.w	r0, #4
 8010a46:	f000 fe8d 	bl	8011764 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8010a4a:	2002      	movs	r0, #2
 8010a4c:	f7f1 f85a 	bl	8001b04 <HAL_Delay>
}
 8010a50:	bd08      	pop	{r3, pc}
	...

08010a54 <RadioSend>:
{
 8010a54:	b570      	push	{r4, r5, r6, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	4605      	mov	r5, r0
 8010a5a:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	461a      	mov	r2, r3
 8010a60:	f240 2101 	movw	r1, #513	; 0x201
 8010a64:	4608      	mov	r0, r1
 8010a66:	f000 fc6e 	bl	8011346 <SUBGRF_SetDioIrqParams>
 8010a6a:	4b3e      	ldr	r3, [pc, #248]	; (8010b64 <RadioSend+0x110>)
 8010a6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010a70:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8010a72:	4e3d      	ldr	r6, [pc, #244]	; (8010b68 <RadioSend+0x114>)
 8010a74:	2101      	movs	r1, #1
 8010a76:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8010a7a:	f001 f89f 	bl	8011bbc <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8010a7e:	7833      	ldrb	r3, [r6, #0]
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d103      	bne.n	8010a8c <RadioSend+0x38>
 8010a84:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8010a88:	2b06      	cmp	r3, #6
 8010a8a:	d012      	beq.n	8010ab2 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8010a8c:	f640 0089 	movw	r0, #2185	; 0x889
 8010a90:	f000 fe0e 	bl	80116b0 <SUBGRF_ReadRegister>
 8010a94:	f040 0104 	orr.w	r1, r0, #4
 8010a98:	b2c9      	uxtb	r1, r1
 8010a9a:	f640 0089 	movw	r0, #2185	; 0x889
 8010a9e:	f000 fd15 	bl	80114cc <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 8010aa2:	4b31      	ldr	r3, [pc, #196]	; (8010b68 <RadioSend+0x114>)
 8010aa4:	781b      	ldrb	r3, [r3, #0]
 8010aa6:	2b03      	cmp	r3, #3
 8010aa8:	d818      	bhi.n	8010adc <RadioSend+0x88>
 8010aaa:	e8df f003 	tbb	[pc, r3]
 8010aae:	0d22      	.short	0x0d22
 8010ab0:	4d22      	.short	0x4d22
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8010ab2:	f640 0089 	movw	r0, #2185	; 0x889
 8010ab6:	f000 fdfb 	bl	80116b0 <SUBGRF_ReadRegister>
 8010aba:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8010abe:	f640 0089 	movw	r0, #2185	; 0x889
 8010ac2:	f000 fd03 	bl	80114cc <SUBGRF_WriteRegister>
 8010ac6:	e7ec      	b.n	8010aa2 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8010ac8:	4827      	ldr	r0, [pc, #156]	; (8010b68 <RadioSend+0x114>)
 8010aca:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010acc:	300e      	adds	r0, #14
 8010ace:	f000 ff73 	bl	80119b8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	4621      	mov	r1, r4
 8010ad6:	4628      	mov	r0, r5
 8010ad8:	f001 f83d 	bl	8011b56 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8010adc:	4c23      	ldr	r4, [pc, #140]	; (8010b6c <RadioSend+0x118>)
 8010ade:	4b22      	ldr	r3, [pc, #136]	; (8010b68 <RadioSend+0x114>)
 8010ae0:	6859      	ldr	r1, [r3, #4]
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	f001 fe2a 	bl	801273c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8010ae8:	4620      	mov	r0, r4
 8010aea:	f001 fde1 	bl	80126b0 <UTIL_TIMER_Start>
}
 8010aee:	b002      	add	sp, #8
 8010af0:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8010af2:	f001 f948 	bl	8011d86 <RFW_Is_Init>
 8010af6:	2801      	cmp	r0, #1
 8010af8:	d00a      	beq.n	8010b10 <RadioSend+0xbc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8010afa:	481b      	ldr	r0, [pc, #108]	; (8010b68 <RadioSend+0x114>)
 8010afc:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010afe:	300e      	adds	r0, #14
 8010b00:	f000 ff5a 	bl	80119b8 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8010b04:	2200      	movs	r2, #0
 8010b06:	4621      	mov	r1, r4
 8010b08:	4628      	mov	r0, r5
 8010b0a:	f001 f824 	bl	8011b56 <SUBGRF_SendPayload>
 8010b0e:	e7e5      	b.n	8010adc <RadioSend+0x88>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8010b10:	f10d 0207 	add.w	r2, sp, #7
 8010b14:	4621      	mov	r1, r4
 8010b16:	4628      	mov	r0, r5
 8010b18:	f001 f93a 	bl	8011d90 <RFW_TransmitInit>
 8010b1c:	b968      	cbnz	r0, 8010b3a <RadioSend+0xe6>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8010b1e:	4812      	ldr	r0, [pc, #72]	; (8010b68 <RadioSend+0x114>)
 8010b20:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010b24:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010b26:	300e      	adds	r0, #14
 8010b28:	f000 ff46 	bl	80119b8 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010b32:	4628      	mov	r0, r5
 8010b34:	f001 f80f 	bl	8011b56 <SUBGRF_SendPayload>
 8010b38:	e7d0      	b.n	8010adc <RadioSend+0x88>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8010b3a:	4b0d      	ldr	r3, [pc, #52]	; (8010b70 <RadioSend+0x11c>)
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	2100      	movs	r1, #0
 8010b40:	2002      	movs	r0, #2
 8010b42:	f001 fa07 	bl	8011f54 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8010b46:	e7d2      	b.n	8010aee <RadioSend+0x9a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8010b48:	4807      	ldr	r0, [pc, #28]	; (8010b68 <RadioSend+0x114>)
 8010b4a:	2302      	movs	r3, #2
 8010b4c:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8010b4e:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010b50:	300e      	adds	r0, #14
 8010b52:	f000 ff31 	bl	80119b8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8010b56:	2200      	movs	r2, #0
 8010b58:	4621      	mov	r1, r4
 8010b5a:	4628      	mov	r0, r5
 8010b5c:	f000 fffb 	bl	8011b56 <SUBGRF_SendPayload>
            break;
 8010b60:	e7bc      	b.n	8010adc <RadioSend+0x88>
 8010b62:	bf00      	nop
 8010b64:	48000400 	.word	0x48000400
 8010b68:	20001070 	.word	0x20001070
 8010b6c:	200010cc 	.word	0x200010cc
 8010b70:	080139a0 	.word	0x080139a0

08010b74 <RadioRandom>:
{
 8010b74:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8010b76:	2300      	movs	r3, #0
 8010b78:	461a      	mov	r2, r3
 8010b7a:	4619      	mov	r1, r3
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f000 fbe2 	bl	8011346 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8010b82:	f000 ff9b 	bl	8011abc <SUBGRF_GetRandom>
}
 8010b86:	bd08      	pop	{r3, pc}

08010b88 <RadioSetModem>:
{
 8010b88:	b510      	push	{r4, lr}
 8010b8a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8010b8c:	4b14      	ldr	r3, [pc, #80]	; (8010be0 <RadioSetModem+0x58>)
 8010b8e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8010b90:	f001 f906 	bl	8011da0 <RFW_SetRadioModem>
    switch( modem )
 8010b94:	2c01      	cmp	r4, #1
 8010b96:	d010      	beq.n	8010bba <RadioSetModem+0x32>
 8010b98:	2c03      	cmp	r4, #3
 8010b9a:	d01a      	beq.n	8010bd2 <RadioSetModem+0x4a>
 8010b9c:	b134      	cbz	r4, 8010bac <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8010b9e:	2003      	movs	r0, #3
 8010ba0:	f000 fce4 	bl	801156c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010ba4:	4b0e      	ldr	r3, [pc, #56]	; (8010be0 <RadioSetModem+0x58>)
 8010ba6:	2200      	movs	r2, #0
 8010ba8:	735a      	strb	r2, [r3, #13]
}
 8010baa:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8010bac:	2000      	movs	r0, #0
 8010bae:	f000 fcdd 	bl	801156c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010bb2:	4b0b      	ldr	r3, [pc, #44]	; (8010be0 <RadioSetModem+0x58>)
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	735a      	strb	r2, [r3, #13]
        break;
 8010bb8:	e7f7      	b.n	8010baa <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8010bba:	2001      	movs	r0, #1
 8010bbc:	f000 fcd6 	bl	801156c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8010bc0:	4b07      	ldr	r3, [pc, #28]	; (8010be0 <RadioSetModem+0x58>)
 8010bc2:	7b5a      	ldrb	r2, [r3, #13]
 8010bc4:	7b18      	ldrb	r0, [r3, #12]
 8010bc6:	4282      	cmp	r2, r0
 8010bc8:	d0ef      	beq.n	8010baa <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8010bca:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8010bcc:	f000 f80a 	bl	8010be4 <RadioSetPublicNetwork>
 8010bd0:	e7eb      	b.n	8010baa <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8010bd2:	2002      	movs	r0, #2
 8010bd4:	f000 fcca 	bl	801156c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8010bd8:	4b01      	ldr	r3, [pc, #4]	; (8010be0 <RadioSetModem+0x58>)
 8010bda:	2200      	movs	r2, #0
 8010bdc:	735a      	strb	r2, [r3, #13]
}
 8010bde:	e7e4      	b.n	8010baa <RadioSetModem+0x22>
 8010be0:	20001070 	.word	0x20001070

08010be4 <RadioSetPublicNetwork>:
{
 8010be4:	b510      	push	{r4, lr}
 8010be6:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8010be8:	4b0e      	ldr	r3, [pc, #56]	; (8010c24 <RadioSetPublicNetwork+0x40>)
 8010bea:	7318      	strb	r0, [r3, #12]
 8010bec:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8010bee:	2001      	movs	r0, #1
 8010bf0:	f7ff ffca 	bl	8010b88 <RadioSetModem>
    if( enable == true )
 8010bf4:	b154      	cbz	r4, 8010c0c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8010bf6:	2134      	movs	r1, #52	; 0x34
 8010bf8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8010bfc:	f000 fc66 	bl	80114cc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8010c00:	2144      	movs	r1, #68	; 0x44
 8010c02:	f240 7041 	movw	r0, #1857	; 0x741
 8010c06:	f000 fc61 	bl	80114cc <SUBGRF_WriteRegister>
}
 8010c0a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8010c0c:	2114      	movs	r1, #20
 8010c0e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8010c12:	f000 fc5b 	bl	80114cc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8010c16:	2124      	movs	r1, #36	; 0x24
 8010c18:	f240 7041 	movw	r0, #1857	; 0x741
 8010c1c:	f000 fc56 	bl	80114cc <SUBGRF_WriteRegister>
}
 8010c20:	e7f3      	b.n	8010c0a <RadioSetPublicNetwork+0x26>
 8010c22:	bf00      	nop
 8010c24:	20001070 	.word	0x20001070

08010c28 <RadioSetTxConfig>:
{
 8010c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c2c:	b083      	sub	sp, #12
 8010c2e:	4604      	mov	r4, r0
 8010c30:	460e      	mov	r6, r1
 8010c32:	4617      	mov	r7, r2
 8010c34:	461d      	mov	r5, r3
 8010c36:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8010c3a:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8010c3e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8010c42:	f001 f89f 	bl	8011d84 <RFW_DeInit>
    switch( modem )
 8010c46:	b174      	cbz	r4, 8010c66 <RadioSetTxConfig+0x3e>
 8010c48:	2c01      	cmp	r4, #1
 8010c4a:	d053      	beq.n	8010cf4 <RadioSetTxConfig+0xcc>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8010c4c:	4630      	mov	r0, r6
 8010c4e:	f000 ffc9 	bl	8011be4 <SUBGRF_SetRfTxPower>
 8010c52:	4c51      	ldr	r4, [pc, #324]	; (8010d98 <RadioSetTxConfig+0x170>)
 8010c54:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8010c58:	f001 f899 	bl	8011d8e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8010c5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010c5e:	6063      	str	r3, [r4, #4]
}
 8010c60:	b003      	add	sp, #12
 8010c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010c66:	4c4c      	ldr	r4, [pc, #304]	; (8010d98 <RadioSetTxConfig+0x170>)
 8010c68:	f04f 0b00 	mov.w	fp, #0
 8010c6c:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c72:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8010c74:	230b      	movs	r3, #11
 8010c76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8010c7a:	4628      	mov	r0, r5
 8010c7c:	f001 f820 	bl	8011cc0 <SUBGRF_GetFskBandwidthRegValue>
 8010c80:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8010c84:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010c86:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8010c8a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8010c8e:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8010c92:	2304      	movs	r3, #4
 8010c94:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8010c96:	2318      	movs	r3, #24
 8010c98:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010c9a:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8010c9e:	f089 0901 	eor.w	r9, r9, #1
 8010ca2:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8010ca6:	f1ba 0f00 	cmp.w	sl, #0
 8010caa:	d01f      	beq.n	8010cec <RadioSetTxConfig+0xc4>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8010cac:	22f2      	movs	r2, #242	; 0xf2
 8010cae:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8010cb0:	4c39      	ldr	r4, [pc, #228]	; (8010d98 <RadioSetTxConfig+0x170>)
 8010cb2:	2301      	movs	r3, #1
 8010cb4:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010cb6:	f7ff fc43 	bl	8010540 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8010cba:	2000      	movs	r0, #0
 8010cbc:	f7ff ff64 	bl	8010b88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010cc0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010cc4:	f000 fc6c 	bl	80115a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010cc8:	f104 000e 	add.w	r0, r4, #14
 8010ccc:	f000 fe74 	bl	80119b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010cd0:	4a32      	ldr	r2, [pc, #200]	; (8010d9c <RadioSetTxConfig+0x174>)
 8010cd2:	466b      	mov	r3, sp
 8010cd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cd8:	e883 0003 	stmia.w	r3, {r0, r1}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f000 fe39 	bl	8011954 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010ce2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010ce6:	f000 fd5d 	bl	80117a4 <SUBGRF_SetWhiteningSeed>
            break;
 8010cea:	e7af      	b.n	8010c4c <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8010cec:	4b2a      	ldr	r3, [pc, #168]	; (8010d98 <RadioSetTxConfig+0x170>)
 8010cee:	2201      	movs	r2, #1
 8010cf0:	75da      	strb	r2, [r3, #23]
 8010cf2:	e7dd      	b.n	8010cb0 <RadioSetTxConfig+0x88>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010cf4:	4a28      	ldr	r2, [pc, #160]	; (8010d98 <RadioSetTxConfig+0x170>)
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8010cfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010cfe:	b2db      	uxtb	r3, r3
 8010d00:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8010d04:	4926      	ldr	r1, [pc, #152]	; (8010da0 <RadioSetTxConfig+0x178>)
 8010d06:	5d49      	ldrb	r1, [r1, r5]
 8010d08:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8010d0c:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8010d10:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010d14:	b91d      	cbnz	r5, 8010d1e <RadioSetTxConfig+0xf6>
 8010d16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d18:	3a0b      	subs	r2, #11
 8010d1a:	2a01      	cmp	r2, #1
 8010d1c:	d92c      	bls.n	8010d78 <RadioSetTxConfig+0x150>
 8010d1e:	2d01      	cmp	r5, #1
 8010d20:	d027      	beq.n	8010d72 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010d22:	4a1d      	ldr	r2, [pc, #116]	; (8010d98 <RadioSetTxConfig+0x170>)
 8010d24:	2100      	movs	r1, #0
 8010d26:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010d2a:	4a1b      	ldr	r2, [pc, #108]	; (8010d98 <RadioSetTxConfig+0x170>)
 8010d2c:	2101      	movs	r1, #1
 8010d2e:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010d30:	3b05      	subs	r3, #5
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	428b      	cmp	r3, r1
 8010d36:	d924      	bls.n	8010d82 <RadioSetTxConfig+0x15a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010d38:	4b17      	ldr	r3, [pc, #92]	; (8010d98 <RadioSetTxConfig+0x170>)
 8010d3a:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010d3e:	4c16      	ldr	r4, [pc, #88]	; (8010d98 <RadioSetTxConfig+0x170>)
 8010d40:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010d44:	4b17      	ldr	r3, [pc, #92]	; (8010da4 <RadioSetTxConfig+0x17c>)
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8010d4a:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010d4e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8010d52:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8010d56:	f7ff fbf3 	bl	8010540 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8010d5a:	2001      	movs	r0, #1
 8010d5c:	f7ff ff14 	bl	8010b88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010d60:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010d64:	f000 fc1c 	bl	80115a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010d68:	f104 000e 	add.w	r0, r4, #14
 8010d6c:	f000 fe24 	bl	80119b8 <SUBGRF_SetPacketParams>
            break;
 8010d70:	e76c      	b.n	8010c4c <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010d72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d74:	2a0c      	cmp	r2, #12
 8010d76:	d1d4      	bne.n	8010d22 <RadioSetTxConfig+0xfa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8010d78:	4a07      	ldr	r2, [pc, #28]	; (8010d98 <RadioSetTxConfig+0x170>)
 8010d7a:	2101      	movs	r1, #1
 8010d7c:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8010d80:	e7d3      	b.n	8010d2a <RadioSetTxConfig+0x102>
                if( preambleLen < 12 )
 8010d82:	f1b8 0f0b 	cmp.w	r8, #11
 8010d86:	d803      	bhi.n	8010d90 <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8010d88:	4613      	mov	r3, r2
 8010d8a:	220c      	movs	r2, #12
 8010d8c:	839a      	strh	r2, [r3, #28]
 8010d8e:	e7d6      	b.n	8010d3e <RadioSetTxConfig+0x116>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010d90:	4b01      	ldr	r3, [pc, #4]	; (8010d98 <RadioSetTxConfig+0x170>)
 8010d92:	f8a3 801c 	strh.w	r8, [r3, #28]
 8010d96:	e7d2      	b.n	8010d3e <RadioSetTxConfig+0x116>
 8010d98:	20001070 	.word	0x20001070
 8010d9c:	08012c9c 	.word	0x08012c9c
 8010da0:	080139b8 	.word	0x080139b8
 8010da4:	2000010c 	.word	0x2000010c

08010da8 <RadioSetRxConfig>:
{
 8010da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dac:	b085      	sub	sp, #20
 8010dae:	4604      	mov	r4, r0
 8010db0:	460d      	mov	r5, r1
 8010db2:	4616      	mov	r6, r2
 8010db4:	9301      	str	r3, [sp, #4]
 8010db6:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 8010dba:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8010dbe:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8010dc2:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8010dc6:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8010dca:	4b6e      	ldr	r3, [pc, #440]	; (8010f84 <RadioSetRxConfig+0x1dc>)
 8010dcc:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8010dd0:	f000 ffd8 	bl	8011d84 <RFW_DeInit>
    if( rxContinuous == true )
 8010dd4:	f1b8 0f00 	cmp.w	r8, #0
 8010dd8:	d001      	beq.n	8010dde <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8010dda:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8010dde:	b14f      	cbz	r7, 8010df4 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 8010de0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8010de4:	4b68      	ldr	r3, [pc, #416]	; (8010f88 <RadioSetRxConfig+0x1e0>)
 8010de6:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8010de8:	b144      	cbz	r4, 8010dfc <RadioSetRxConfig+0x54>
 8010dea:	2c01      	cmp	r4, #1
 8010dec:	d057      	beq.n	8010e9e <RadioSetRxConfig+0xf6>
}
 8010dee:	b005      	add	sp, #20
 8010df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8010df4:	4b64      	ldr	r3, [pc, #400]	; (8010f88 <RadioSetRxConfig+0x1e0>)
 8010df6:	22ff      	movs	r2, #255	; 0xff
 8010df8:	701a      	strb	r2, [r3, #0]
 8010dfa:	e7f5      	b.n	8010de8 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010dfc:	2000      	movs	r0, #0
 8010dfe:	f000 fa05 	bl	801120c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8010e02:	4c60      	ldr	r4, [pc, #384]	; (8010f84 <RadioSetRxConfig+0x1dc>)
 8010e04:	f04f 0800 	mov.w	r8, #0
 8010e08:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8010e0c:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8010e0e:	230b      	movs	r3, #11
 8010e10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8010e14:	4628      	mov	r0, r5
 8010e16:	f000 ff53 	bl	8011cc0 <SUBGRF_GetFskBandwidthRegValue>
 8010e1a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8010e1e:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8010e22:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8010e26:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8010e2a:	2304      	movs	r3, #4
 8010e2c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8010e2e:	2318      	movs	r3, #24
 8010e30:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8010e32:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8010e36:	f087 0701 	eor.w	r7, r7, #1
 8010e3a:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8010e3c:	4b52      	ldr	r3, [pc, #328]	; (8010f88 <RadioSetRxConfig+0x1e0>)
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8010e42:	f1bb 0f00 	cmp.w	fp, #0
 8010e46:	d026      	beq.n	8010e96 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8010e48:	22f2      	movs	r2, #242	; 0xf2
 8010e4a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8010e4c:	4c4d      	ldr	r4, [pc, #308]	; (8010f84 <RadioSetRxConfig+0x1dc>)
 8010e4e:	2301      	movs	r3, #1
 8010e50:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8010e52:	f7ff fb75 	bl	8010540 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8010e56:	2000      	movs	r0, #0
 8010e58:	f7ff fe96 	bl	8010b88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010e5c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010e60:	f000 fb9e 	bl	80115a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010e64:	f104 000e 	add.w	r0, r4, #14
 8010e68:	f000 fda6 	bl	80119b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8010e6c:	4a47      	ldr	r2, [pc, #284]	; (8010f8c <RadioSetRxConfig+0x1e4>)
 8010e6e:	ab02      	add	r3, sp, #8
 8010e70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e74:	e883 0003 	stmia.w	r3, {r0, r1}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f000 fd6b 	bl	8011954 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8010e7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010e82:	f000 fc8f 	bl	80117a4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8010e86:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8010e8a:	fb02 fa0a 	mul.w	sl, r2, sl
 8010e8e:	fbba f6f6 	udiv	r6, sl, r6
 8010e92:	60a6      	str	r6, [r4, #8]
            break;
 8010e94:	e7ab      	b.n	8010dee <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8010e96:	4b3b      	ldr	r3, [pc, #236]	; (8010f84 <RadioSetRxConfig+0x1dc>)
 8010e98:	2201      	movs	r2, #1
 8010e9a:	75da      	strb	r2, [r3, #23]
 8010e9c:	e7d6      	b.n	8010e4c <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8010e9e:	2000      	movs	r0, #0
 8010ea0:	f000 f9b4 	bl	801120c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8010ea4:	4a37      	ldr	r2, [pc, #220]	; (8010f84 <RadioSetRxConfig+0x1dc>)
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8010eac:	b2f3      	uxtb	r3, r6
 8010eae:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8010eb2:	4937      	ldr	r1, [pc, #220]	; (8010f90 <RadioSetRxConfig+0x1e8>)
 8010eb4:	5d49      	ldrb	r1, [r1, r5]
 8010eb6:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8010eba:	9901      	ldr	r1, [sp, #4]
 8010ebc:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8010ec0:	b91d      	cbnz	r5, 8010eca <RadioSetRxConfig+0x122>
 8010ec2:	f1a6 020b 	sub.w	r2, r6, #11
 8010ec6:	2a01      	cmp	r2, #1
 8010ec8:	d941      	bls.n	8010f4e <RadioSetRxConfig+0x1a6>
 8010eca:	2d01      	cmp	r5, #1
 8010ecc:	d03d      	beq.n	8010f4a <RadioSetRxConfig+0x1a2>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8010ece:	4a2d      	ldr	r2, [pc, #180]	; (8010f84 <RadioSetRxConfig+0x1dc>)
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8010ed6:	4a2b      	ldr	r2, [pc, #172]	; (8010f84 <RadioSetRxConfig+0x1dc>)
 8010ed8:	2101      	movs	r1, #1
 8010eda:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8010edc:	3b05      	subs	r3, #5
 8010ede:	b2db      	uxtb	r3, r3
 8010ee0:	428b      	cmp	r3, r1
 8010ee2:	d939      	bls.n	8010f58 <RadioSetRxConfig+0x1b0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010ee4:	4b27      	ldr	r3, [pc, #156]	; (8010f84 <RadioSetRxConfig+0x1dc>)
 8010ee6:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8010eea:	4c26      	ldr	r4, [pc, #152]	; (8010f84 <RadioSetRxConfig+0x1dc>)
 8010eec:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8010eee:	4b26      	ldr	r3, [pc, #152]	; (8010f88 <RadioSetRxConfig+0x1e0>)
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8010ef4:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8010ef8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010efc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8010f00:	f7ff fb1e 	bl	8010540 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8010f04:	2001      	movs	r0, #1
 8010f06:	f7ff fe3f 	bl	8010b88 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8010f0a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8010f0e:	f000 fb47 	bl	80115a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8010f12:	f104 000e 	add.w	r0, r4, #14
 8010f16:	f000 fd4f 	bl	80119b8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8010f1a:	fa5f f08a 	uxtb.w	r0, sl
 8010f1e:	f000 fb03 	bl	8011528 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8010f22:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d021      	beq.n	8010f6e <RadioSetRxConfig+0x1c6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8010f2a:	f240 7036 	movw	r0, #1846	; 0x736
 8010f2e:	f000 fbbf 	bl	80116b0 <SUBGRF_ReadRegister>
 8010f32:	f040 0104 	orr.w	r1, r0, #4
 8010f36:	b2c9      	uxtb	r1, r1
 8010f38:	f240 7036 	movw	r0, #1846	; 0x736
 8010f3c:	f000 fac6 	bl	80114cc <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8010f40:	4b10      	ldr	r3, [pc, #64]	; (8010f84 <RadioSetRxConfig+0x1dc>)
 8010f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f46:	609a      	str	r2, [r3, #8]
}
 8010f48:	e751      	b.n	8010dee <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8010f4a:	2e0c      	cmp	r6, #12
 8010f4c:	d1bf      	bne.n	8010ece <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8010f4e:	4a0d      	ldr	r2, [pc, #52]	; (8010f84 <RadioSetRxConfig+0x1dc>)
 8010f50:	2101      	movs	r1, #1
 8010f52:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8010f56:	e7be      	b.n	8010ed6 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8010f58:	f1b9 0f0b 	cmp.w	r9, #11
 8010f5c:	d803      	bhi.n	8010f66 <RadioSetRxConfig+0x1be>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8010f5e:	4613      	mov	r3, r2
 8010f60:	220c      	movs	r2, #12
 8010f62:	839a      	strh	r2, [r3, #28]
 8010f64:	e7c1      	b.n	8010eea <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8010f66:	4b07      	ldr	r3, [pc, #28]	; (8010f84 <RadioSetRxConfig+0x1dc>)
 8010f68:	f8a3 901c 	strh.w	r9, [r3, #28]
 8010f6c:	e7bd      	b.n	8010eea <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8010f6e:	f240 7036 	movw	r0, #1846	; 0x736
 8010f72:	f000 fb9d 	bl	80116b0 <SUBGRF_ReadRegister>
 8010f76:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8010f7a:	f240 7036 	movw	r0, #1846	; 0x736
 8010f7e:	f000 faa5 	bl	80114cc <SUBGRF_WriteRegister>
 8010f82:	e7dd      	b.n	8010f40 <RadioSetRxConfig+0x198>
 8010f84:	20001070 	.word	0x20001070
 8010f88:	2000010c 	.word	0x2000010c
 8010f8c:	08012c9c 	.word	0x08012c9c
 8010f90:	080139b8 	.word	0x080139b8

08010f94 <RadioIsChannelFree>:
{
 8010f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f96:	b08b      	sub	sp, #44	; 0x2c
 8010f98:	4604      	mov	r4, r0
 8010f9a:	460f      	mov	r7, r1
 8010f9c:	4616      	mov	r6, r2
 8010f9e:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8010fa0:	f7ff face 	bl	8010540 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	f7ff fdef 	bl	8010b88 <RadioSetModem>
    RadioSetChannel( freq );
 8010faa:	4620      	mov	r0, r4
 8010fac:	f7ff fcf8 	bl	80109a0 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8010fb4:	2400      	movs	r4, #0
 8010fb6:	9408      	str	r4, [sp, #32]
 8010fb8:	9407      	str	r4, [sp, #28]
 8010fba:	9406      	str	r4, [sp, #24]
 8010fbc:	9405      	str	r4, [sp, #20]
 8010fbe:	9404      	str	r4, [sp, #16]
 8010fc0:	9403      	str	r4, [sp, #12]
 8010fc2:	9402      	str	r4, [sp, #8]
 8010fc4:	2303      	movs	r3, #3
 8010fc6:	9301      	str	r3, [sp, #4]
 8010fc8:	9700      	str	r7, [sp, #0]
 8010fca:	4623      	mov	r3, r4
 8010fcc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8010fd0:	4639      	mov	r1, r7
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	f7ff fee8 	bl	8010da8 <RadioSetRxConfig>
    RadioRx( 0 );
 8010fd8:	4620      	mov	r0, r4
 8010fda:	f7ff fcf9 	bl	80109d0 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8010fde:	f7ff fc93 	bl	8010908 <RadioGetWakeupTime>
 8010fe2:	f7f0 fd8f 	bl	8001b04 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8010fe6:	f001 fac9 	bl	801257c <UTIL_TIMER_GetCurrentTime>
 8010fea:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8010fec:	4620      	mov	r0, r4
 8010fee:	f001 facf 	bl	8012590 <UTIL_TIMER_GetElapsedTime>
 8010ff2:	42a8      	cmp	r0, r5
 8010ff4:	d206      	bcs.n	8011004 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8010ff6:	2000      	movs	r0, #0
 8010ff8:	f7ff fcb0 	bl	801095c <RadioRssi>
        if( rssi > rssiThresh )
 8010ffc:	42b0      	cmp	r0, r6
 8010ffe:	ddf5      	ble.n	8010fec <RadioIsChannelFree+0x58>
            status = false;
 8011000:	2400      	movs	r4, #0
 8011002:	e000      	b.n	8011006 <RadioIsChannelFree+0x72>
    bool status = true;
 8011004:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8011006:	f7ff fa9b 	bl	8010540 <RadioStandby>
}
 801100a:	4620      	mov	r0, r4
 801100c:	b00b      	add	sp, #44	; 0x2c
 801100e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011010 <RadioInit>:
{
 8011010:	b570      	push	{r4, r5, r6, lr}
 8011012:	b082      	sub	sp, #8
    RadioEvents = events;
 8011014:	4b1d      	ldr	r3, [pc, #116]	; (801108c <RadioInit+0x7c>)
 8011016:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8011018:	4d1d      	ldr	r5, [pc, #116]	; (8011090 <RadioInit+0x80>)
 801101a:	2400      	movs	r4, #0
 801101c:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 801101e:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8011020:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011022:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8011024:	481b      	ldr	r0, [pc, #108]	; (8011094 <RadioInit+0x84>)
 8011026:	f000 fb67 	bl	80116f8 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 801102a:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 801102c:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 801102e:	f000 f8fa 	bl	8011226 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8011032:	4621      	mov	r1, r4
 8011034:	4620      	mov	r0, r4
 8011036:	f000 f9f1 	bl	801141c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801103a:	2204      	movs	r2, #4
 801103c:	4621      	mov	r1, r4
 801103e:	2001      	movs	r0, #1
 8011040:	f000 fbc9 	bl	80117d6 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011044:	4623      	mov	r3, r4
 8011046:	4622      	mov	r2, r4
 8011048:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801104c:	4608      	mov	r0, r1
 801104e:	f000 f97a 	bl	8011346 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 8011052:	f7ff fcf5 	bl	8010a40 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8011056:	4e10      	ldr	r6, [pc, #64]	; (8011098 <RadioInit+0x88>)
 8011058:	9400      	str	r4, [sp, #0]
 801105a:	4b10      	ldr	r3, [pc, #64]	; (801109c <RadioInit+0x8c>)
 801105c:	4622      	mov	r2, r4
 801105e:	f04f 31ff 	mov.w	r1, #4294967295
 8011062:	4630      	mov	r0, r6
 8011064:	f001 fa6c 	bl	8012540 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8011068:	4d0d      	ldr	r5, [pc, #52]	; (80110a0 <RadioInit+0x90>)
 801106a:	9400      	str	r4, [sp, #0]
 801106c:	4b0d      	ldr	r3, [pc, #52]	; (80110a4 <RadioInit+0x94>)
 801106e:	4622      	mov	r2, r4
 8011070:	f04f 31ff 	mov.w	r1, #4294967295
 8011074:	4628      	mov	r0, r5
 8011076:	f001 fa63 	bl	8012540 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801107a:	4630      	mov	r0, r6
 801107c:	f001 fabe 	bl	80125fc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8011080:	4628      	mov	r0, r5
 8011082:	f001 fabb 	bl	80125fc <UTIL_TIMER_Stop>
}
 8011086:	b002      	add	sp, #8
 8011088:	bd70      	pop	{r4, r5, r6, pc}
 801108a:	bf00      	nop
 801108c:	20001054 	.word	0x20001054
 8011090:	20001070 	.word	0x20001070
 8011094:	080108f5 	.word	0x080108f5
 8011098:	200010cc 	.word	0x200010cc
 801109c:	0801044d 	.word	0x0801044d
 80110a0:	20001058 	.word	0x20001058
 80110a4:	08010475 	.word	0x08010475

080110a8 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80110a8:	b510      	push	{r4, lr}
 80110aa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110ac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80110b0:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 80110b2:	460a      	mov	r2, r1
 80110b4:	4601      	mov	r1, r0
 80110b6:	4803      	ldr	r0, [pc, #12]	; (80110c4 <SUBGRF_WriteCommand+0x1c>)
 80110b8:	f7f4 fdc0 	bl	8005c3c <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110bc:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80110c0:	bd10      	pop	{r4, pc}
 80110c2:	bf00      	nop
 80110c4:	200001d0 	.word	0x200001d0

080110c8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80110c8:	b510      	push	{r4, lr}
 80110ca:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110cc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80110d0:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80110d2:	460a      	mov	r2, r1
 80110d4:	4601      	mov	r1, r0
 80110d6:	4803      	ldr	r0, [pc, #12]	; (80110e4 <SUBGRF_ReadCommand+0x1c>)
 80110d8:	f7f4 fe06 	bl	8005ce8 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110dc:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 80110e0:	bd10      	pop	{r4, pc}
 80110e2:	bf00      	nop
 80110e4:	200001d0 	.word	0x200001d0

080110e8 <SUBGRF_GetOperatingMode>:
}
 80110e8:	4b01      	ldr	r3, [pc, #4]	; (80110f0 <SUBGRF_GetOperatingMode+0x8>)
 80110ea:	7818      	ldrb	r0, [r3, #0]
 80110ec:	4770      	bx	lr
 80110ee:	bf00      	nop
 80110f0:	200010ea 	.word	0x200010ea

080110f4 <SUBGRF_SetStandby>:
{
 80110f4:	b500      	push	{lr}
 80110f6:	b083      	sub	sp, #12
 80110f8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80110fc:	2201      	movs	r2, #1
 80110fe:	f10d 0107 	add.w	r1, sp, #7
 8011102:	2080      	movs	r0, #128	; 0x80
 8011104:	f7ff ffd0 	bl	80110a8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8011108:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801110c:	b92b      	cbnz	r3, 801111a <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 801110e:	4b05      	ldr	r3, [pc, #20]	; (8011124 <SUBGRF_SetStandby+0x30>)
 8011110:	2201      	movs	r2, #1
 8011112:	701a      	strb	r2, [r3, #0]
}
 8011114:	b003      	add	sp, #12
 8011116:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 801111a:	4b02      	ldr	r3, [pc, #8]	; (8011124 <SUBGRF_SetStandby+0x30>)
 801111c:	2202      	movs	r2, #2
 801111e:	701a      	strb	r2, [r3, #0]
}
 8011120:	e7f8      	b.n	8011114 <SUBGRF_SetStandby+0x20>
 8011122:	bf00      	nop
 8011124:	200010ea 	.word	0x200010ea

08011128 <SUBGRF_SetTx>:
{
 8011128:	b500      	push	{lr}
 801112a:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 801112c:	4b0a      	ldr	r3, [pc, #40]	; (8011158 <SUBGRF_SetTx+0x30>)
 801112e:	2204      	movs	r2, #4
 8011130:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011132:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011136:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801113a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801113e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011142:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8011146:	2203      	movs	r2, #3
 8011148:	a901      	add	r1, sp, #4
 801114a:	2083      	movs	r0, #131	; 0x83
 801114c:	f7ff ffac 	bl	80110a8 <SUBGRF_WriteCommand>
}
 8011150:	b003      	add	sp, #12
 8011152:	f85d fb04 	ldr.w	pc, [sp], #4
 8011156:	bf00      	nop
 8011158:	200010ea 	.word	0x200010ea

0801115c <SUBGRF_SetRx>:
{
 801115c:	b500      	push	{lr}
 801115e:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8011160:	4b0a      	ldr	r3, [pc, #40]	; (801118c <SUBGRF_SetRx+0x30>)
 8011162:	2205      	movs	r2, #5
 8011164:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011166:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801116a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801116e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011172:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011176:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801117a:	2203      	movs	r2, #3
 801117c:	a901      	add	r1, sp, #4
 801117e:	2082      	movs	r0, #130	; 0x82
 8011180:	f7ff ff92 	bl	80110a8 <SUBGRF_WriteCommand>
}
 8011184:	b003      	add	sp, #12
 8011186:	f85d fb04 	ldr.w	pc, [sp], #4
 801118a:	bf00      	nop
 801118c:	200010ea 	.word	0x200010ea

08011190 <SUBGRF_SetRxDutyCycle>:
{
 8011190:	b500      	push	{lr}
 8011192:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8011194:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011198:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801119c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80111a0:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80111a4:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80111a8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80111ac:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80111b0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80111b4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 80111b8:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80111bc:	2206      	movs	r2, #6
 80111be:	4669      	mov	r1, sp
 80111c0:	2094      	movs	r0, #148	; 0x94
 80111c2:	f7ff ff71 	bl	80110a8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80111c6:	4b03      	ldr	r3, [pc, #12]	; (80111d4 <SUBGRF_SetRxDutyCycle+0x44>)
 80111c8:	2206      	movs	r2, #6
 80111ca:	701a      	strb	r2, [r3, #0]
}
 80111cc:	b003      	add	sp, #12
 80111ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80111d2:	bf00      	nop
 80111d4:	200010ea 	.word	0x200010ea

080111d8 <SUBGRF_SetCad>:
{
 80111d8:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80111da:	2200      	movs	r2, #0
 80111dc:	4611      	mov	r1, r2
 80111de:	20c5      	movs	r0, #197	; 0xc5
 80111e0:	f7ff ff62 	bl	80110a8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80111e4:	4b01      	ldr	r3, [pc, #4]	; (80111ec <SUBGRF_SetCad+0x14>)
 80111e6:	2207      	movs	r2, #7
 80111e8:	701a      	strb	r2, [r3, #0]
}
 80111ea:	bd08      	pop	{r3, pc}
 80111ec:	200010ea 	.word	0x200010ea

080111f0 <SUBGRF_SetTxContinuousWave>:
{
 80111f0:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80111f2:	2200      	movs	r2, #0
 80111f4:	4611      	mov	r1, r2
 80111f6:	20d1      	movs	r0, #209	; 0xd1
 80111f8:	f7ff ff56 	bl	80110a8 <SUBGRF_WriteCommand>
}
 80111fc:	bd08      	pop	{r3, pc}

080111fe <SUBGRF_SetTxInfinitePreamble>:
{
 80111fe:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8011200:	2200      	movs	r2, #0
 8011202:	4611      	mov	r1, r2
 8011204:	20d2      	movs	r0, #210	; 0xd2
 8011206:	f7ff ff4f 	bl	80110a8 <SUBGRF_WriteCommand>
}
 801120a:	bd08      	pop	{r3, pc}

0801120c <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 801120c:	b500      	push	{lr}
 801120e:	b083      	sub	sp, #12
 8011210:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8011214:	2201      	movs	r2, #1
 8011216:	f10d 0107 	add.w	r1, sp, #7
 801121a:	209f      	movs	r0, #159	; 0x9f
 801121c:	f7ff ff44 	bl	80110a8 <SUBGRF_WriteCommand>
}
 8011220:	b003      	add	sp, #12
 8011222:	f85d fb04 	ldr.w	pc, [sp], #4

08011226 <SUBGRF_SetRegulatorMode>:
{
 8011226:	b500      	push	{lr}
 8011228:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801122a:	f7f1 fd77 	bl	8002d1c <RBI_IsDCDC>
 801122e:	2801      	cmp	r0, #1
 8011230:	d00b      	beq.n	801124a <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8011232:	2300      	movs	r3, #0
 8011234:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8011238:	2201      	movs	r2, #1
 801123a:	f10d 0107 	add.w	r1, sp, #7
 801123e:	2096      	movs	r0, #150	; 0x96
 8011240:	f7ff ff32 	bl	80110a8 <SUBGRF_WriteCommand>
}
 8011244:	b003      	add	sp, #12
 8011246:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 801124a:	2301      	movs	r3, #1
 801124c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011250:	e7f2      	b.n	8011238 <SUBGRF_SetRegulatorMode+0x12>

08011252 <SUBGRF_Calibrate>:
{
 8011252:	b500      	push	{lr}
 8011254:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8011256:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801125a:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801125e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8011260:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8011264:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8011266:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801126a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801126c:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8011270:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8011272:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8011276:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8011278:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801127c:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801127e:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8011282:	2201      	movs	r2, #1
 8011284:	f10d 0107 	add.w	r1, sp, #7
 8011288:	2089      	movs	r0, #137	; 0x89
 801128a:	f7ff ff0d 	bl	80110a8 <SUBGRF_WriteCommand>
}
 801128e:	b003      	add	sp, #12
 8011290:	f85d fb04 	ldr.w	pc, [sp], #4

08011294 <SUBGRF_CalibrateImage>:
{
 8011294:	b500      	push	{lr}
 8011296:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8011298:	4b1c      	ldr	r3, [pc, #112]	; (801130c <SUBGRF_CalibrateImage+0x78>)
 801129a:	4298      	cmp	r0, r3
 801129c:	d90d      	bls.n	80112ba <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 801129e:	23e1      	movs	r3, #225	; 0xe1
 80112a0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 80112a4:	23e9      	movs	r3, #233	; 0xe9
 80112a6:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80112aa:	2202      	movs	r2, #2
 80112ac:	a901      	add	r1, sp, #4
 80112ae:	2098      	movs	r0, #152	; 0x98
 80112b0:	f7ff fefa 	bl	80110a8 <SUBGRF_WriteCommand>
}
 80112b4:	b003      	add	sp, #12
 80112b6:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80112ba:	4b15      	ldr	r3, [pc, #84]	; (8011310 <SUBGRF_CalibrateImage+0x7c>)
 80112bc:	4298      	cmp	r0, r3
 80112be:	d906      	bls.n	80112ce <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80112c0:	23d7      	movs	r3, #215	; 0xd7
 80112c2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80112c6:	23db      	movs	r3, #219	; 0xdb
 80112c8:	f88d 3005 	strb.w	r3, [sp, #5]
 80112cc:	e7ed      	b.n	80112aa <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80112ce:	4b11      	ldr	r3, [pc, #68]	; (8011314 <SUBGRF_CalibrateImage+0x80>)
 80112d0:	4298      	cmp	r0, r3
 80112d2:	d906      	bls.n	80112e2 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80112d4:	23c1      	movs	r3, #193	; 0xc1
 80112d6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80112da:	23c5      	movs	r3, #197	; 0xc5
 80112dc:	f88d 3005 	strb.w	r3, [sp, #5]
 80112e0:	e7e3      	b.n	80112aa <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80112e2:	4b0d      	ldr	r3, [pc, #52]	; (8011318 <SUBGRF_CalibrateImage+0x84>)
 80112e4:	4298      	cmp	r0, r3
 80112e6:	d906      	bls.n	80112f6 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80112e8:	2375      	movs	r3, #117	; 0x75
 80112ea:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80112ee:	2381      	movs	r3, #129	; 0x81
 80112f0:	f88d 3005 	strb.w	r3, [sp, #5]
 80112f4:	e7d9      	b.n	80112aa <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 80112f6:	4b09      	ldr	r3, [pc, #36]	; (801131c <SUBGRF_CalibrateImage+0x88>)
 80112f8:	4298      	cmp	r0, r3
 80112fa:	d9d6      	bls.n	80112aa <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 80112fc:	236b      	movs	r3, #107	; 0x6b
 80112fe:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8011302:	236f      	movs	r3, #111	; 0x6f
 8011304:	f88d 3005 	strb.w	r3, [sp, #5]
 8011308:	e7cf      	b.n	80112aa <SUBGRF_CalibrateImage+0x16>
 801130a:	bf00      	nop
 801130c:	35a4e900 	.word	0x35a4e900
 8011310:	32a9f880 	.word	0x32a9f880
 8011314:	2de54480 	.word	0x2de54480
 8011318:	1b6b0b00 	.word	0x1b6b0b00
 801131c:	1954fc40 	.word	0x1954fc40

08011320 <SUBGRF_SetPaConfig>:
{
 8011320:	b500      	push	{lr}
 8011322:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8011324:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8011328:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 801132c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8011330:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8011334:	2204      	movs	r2, #4
 8011336:	eb0d 0102 	add.w	r1, sp, r2
 801133a:	2095      	movs	r0, #149	; 0x95
 801133c:	f7ff feb4 	bl	80110a8 <SUBGRF_WriteCommand>
}
 8011340:	b003      	add	sp, #12
 8011342:	f85d fb04 	ldr.w	pc, [sp], #4

08011346 <SUBGRF_SetDioIrqParams>:
{
 8011346:	b500      	push	{lr}
 8011348:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801134a:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 801134e:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8011352:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8011356:	0a08      	lsrs	r0, r1, #8
 8011358:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801135c:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8011360:	0a11      	lsrs	r1, r2, #8
 8011362:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8011366:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801136a:	0a1a      	lsrs	r2, r3, #8
 801136c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8011370:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8011374:	2208      	movs	r2, #8
 8011376:	4669      	mov	r1, sp
 8011378:	4610      	mov	r0, r2
 801137a:	f7ff fe95 	bl	80110a8 <SUBGRF_WriteCommand>
}
 801137e:	b003      	add	sp, #12
 8011380:	f85d fb04 	ldr.w	pc, [sp], #4

08011384 <SUBGRF_SetTcxoMode>:
{
 8011384:	b500      	push	{lr}
 8011386:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8011388:	f000 0007 	and.w	r0, r0, #7
 801138c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011390:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8011394:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8011398:	f3c1 2307 	ubfx	r3, r1, #8, #8
 801139c:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80113a0:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80113a4:	2204      	movs	r2, #4
 80113a6:	eb0d 0102 	add.w	r1, sp, r2
 80113aa:	2097      	movs	r0, #151	; 0x97
 80113ac:	f7ff fe7c 	bl	80110a8 <SUBGRF_WriteCommand>
}
 80113b0:	b003      	add	sp, #12
 80113b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080113b8 <SUBGRF_SetRfFrequency>:
{
 80113b8:	b510      	push	{r4, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80113be:	4b12      	ldr	r3, [pc, #72]	; (8011408 <SUBGRF_SetRfFrequency+0x50>)
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	b1d3      	cbz	r3, 80113fa <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80113c4:	4a11      	ldr	r2, [pc, #68]	; (801140c <SUBGRF_SetRfFrequency+0x54>)
 80113c6:	2300      	movs	r3, #0
 80113c8:	0660      	lsls	r0, r4, #25
 80113ca:	09e1      	lsrs	r1, r4, #7
 80113cc:	f7ef fcb2 	bl	8000d34 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80113d0:	0e03      	lsrs	r3, r0, #24
 80113d2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80113d6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80113da:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80113de:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80113e2:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80113e6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80113ea:	2204      	movs	r2, #4
 80113ec:	eb0d 0102 	add.w	r1, sp, r2
 80113f0:	2086      	movs	r0, #134	; 0x86
 80113f2:	f7ff fe59 	bl	80110a8 <SUBGRF_WriteCommand>
}
 80113f6:	b002      	add	sp, #8
 80113f8:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 80113fa:	f7ff ff4b 	bl	8011294 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80113fe:	4b02      	ldr	r3, [pc, #8]	; (8011408 <SUBGRF_SetRfFrequency+0x50>)
 8011400:	2201      	movs	r2, #1
 8011402:	701a      	strb	r2, [r3, #0]
 8011404:	e7de      	b.n	80113c4 <SUBGRF_SetRfFrequency+0xc>
 8011406:	bf00      	nop
 8011408:	200010e8 	.word	0x200010e8
 801140c:	01e84800 	.word	0x01e84800

08011410 <SUBGRF_GetPacketType>:
}
 8011410:	4b01      	ldr	r3, [pc, #4]	; (8011418 <SUBGRF_GetPacketType+0x8>)
 8011412:	7818      	ldrb	r0, [r3, #0]
 8011414:	4770      	bx	lr
 8011416:	bf00      	nop
 8011418:	200010eb 	.word	0x200010eb

0801141c <SUBGRF_SetBufferBaseAddress>:
{
 801141c:	b500      	push	{lr}
 801141e:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8011420:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8011424:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8011428:	2202      	movs	r2, #2
 801142a:	a901      	add	r1, sp, #4
 801142c:	208f      	movs	r0, #143	; 0x8f
 801142e:	f7ff fe3b 	bl	80110a8 <SUBGRF_WriteCommand>
}
 8011432:	b003      	add	sp, #12
 8011434:	f85d fb04 	ldr.w	pc, [sp], #4

08011438 <SUBGRF_GetRssiInst>:
{
 8011438:	b500      	push	{lr}
 801143a:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801143c:	2201      	movs	r2, #1
 801143e:	a901      	add	r1, sp, #4
 8011440:	2015      	movs	r0, #21
 8011442:	f7ff fe41 	bl	80110c8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8011446:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801144a:	4240      	negs	r0, r0
}
 801144c:	1040      	asrs	r0, r0, #1
 801144e:	b003      	add	sp, #12
 8011450:	f85d fb04 	ldr.w	pc, [sp], #4

08011454 <SUBGRF_GetPacketStatus>:
{
 8011454:	b510      	push	{r4, lr}
 8011456:	b082      	sub	sp, #8
 8011458:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801145a:	2203      	movs	r2, #3
 801145c:	a901      	add	r1, sp, #4
 801145e:	2014      	movs	r0, #20
 8011460:	f7ff fe32 	bl	80110c8 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8011464:	f7ff ffd4 	bl	8011410 <SUBGRF_GetPacketType>
 8011468:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 801146a:	b148      	cbz	r0, 8011480 <SUBGRF_GetPacketStatus+0x2c>
 801146c:	2801      	cmp	r0, #1
 801146e:	d018      	beq.n	80114a2 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8011470:	2214      	movs	r2, #20
 8011472:	2100      	movs	r1, #0
 8011474:	4620      	mov	r0, r4
 8011476:	f000 fe8e 	bl	8012196 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801147a:	230f      	movs	r3, #15
 801147c:	7023      	strb	r3, [r4, #0]
}
 801147e:	e00e      	b.n	801149e <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8011480:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011484:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8011486:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801148a:	425b      	negs	r3, r3
 801148c:	105b      	asrs	r3, r3, #1
 801148e:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8011490:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011494:	425b      	negs	r3, r3
 8011496:	105b      	asrs	r3, r3, #1
 8011498:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801149a:	2300      	movs	r3, #0
 801149c:	60a3      	str	r3, [r4, #8]
}
 801149e:	b002      	add	sp, #8
 80114a0:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80114a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80114a6:	425b      	negs	r3, r3
 80114a8:	105b      	asrs	r3, r3, #1
 80114aa:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80114ac:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 80114b0:	3302      	adds	r3, #2
 80114b2:	109b      	asrs	r3, r3, #2
 80114b4:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80114b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80114ba:	425b      	negs	r3, r3
 80114bc:	105b      	asrs	r3, r3, #1
 80114be:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80114c0:	4b01      	ldr	r3, [pc, #4]	; (80114c8 <SUBGRF_GetPacketStatus+0x74>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	6123      	str	r3, [r4, #16]
            break;
 80114c6:	e7ea      	b.n	801149e <SUBGRF_GetPacketStatus+0x4a>
 80114c8:	200010e4 	.word	0x200010e4

080114cc <SUBGRF_WriteRegister>:
{
 80114cc:	b500      	push	{lr}
 80114ce:	b083      	sub	sp, #12
 80114d0:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80114d4:	2301      	movs	r3, #1
 80114d6:	f10d 0207 	add.w	r2, sp, #7
 80114da:	4601      	mov	r1, r0
 80114dc:	4802      	ldr	r0, [pc, #8]	; (80114e8 <SUBGRF_WriteRegister+0x1c>)
 80114de:	f7f4 fb09 	bl	8005af4 <HAL_SUBGHZ_WriteRegisters>
}
 80114e2:	b003      	add	sp, #12
 80114e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80114e8:	200001d0 	.word	0x200001d0

080114ec <SUBGRF_SetRxBoosted>:
{
 80114ec:	b510      	push	{r4, lr}
 80114ee:	b082      	sub	sp, #8
 80114f0:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 80114f2:	4b0c      	ldr	r3, [pc, #48]	; (8011524 <SUBGRF_SetRxBoosted+0x38>)
 80114f4:	2205      	movs	r2, #5
 80114f6:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80114f8:	2197      	movs	r1, #151	; 0x97
 80114fa:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80114fe:	f7ff ffe5 	bl	80114cc <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8011502:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8011506:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801150a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801150e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8011512:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8011516:	2203      	movs	r2, #3
 8011518:	a901      	add	r1, sp, #4
 801151a:	2082      	movs	r0, #130	; 0x82
 801151c:	f7ff fdc4 	bl	80110a8 <SUBGRF_WriteCommand>
}
 8011520:	b002      	add	sp, #8
 8011522:	bd10      	pop	{r4, pc}
 8011524:	200010ea 	.word	0x200010ea

08011528 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8011528:	b500      	push	{lr}
 801152a:	b083      	sub	sp, #12
 801152c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8011530:	2201      	movs	r2, #1
 8011532:	f10d 0107 	add.w	r1, sp, #7
 8011536:	20a0      	movs	r0, #160	; 0xa0
 8011538:	f7ff fdb6 	bl	80110a8 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 801153c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011540:	2b3f      	cmp	r3, #63	; 0x3f
 8011542:	d90f      	bls.n	8011564 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8011544:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8011546:	2200      	movs	r2, #0
        while( mant > 31 )
 8011548:	e002      	b.n	8011550 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 801154a:	089b      	lsrs	r3, r3, #2
            exp++;
 801154c:	1c51      	adds	r1, r2, #1
 801154e:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 8011550:	2b1f      	cmp	r3, #31
 8011552:	d8fa      	bhi.n	801154a <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8011554:	00d9      	lsls	r1, r3, #3
 8011556:	b2c9      	uxtb	r1, r1
 8011558:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801155a:	b2c9      	uxtb	r1, r1
 801155c:	f240 7006 	movw	r0, #1798	; 0x706
 8011560:	f7ff ffb4 	bl	80114cc <SUBGRF_WriteRegister>
}
 8011564:	b003      	add	sp, #12
 8011566:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801156c <SUBGRF_SetPacketType>:
{
 801156c:	b500      	push	{lr}
 801156e:	b083      	sub	sp, #12
 8011570:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8011574:	b2c3      	uxtb	r3, r0
 8011576:	4a09      	ldr	r2, [pc, #36]	; (801159c <SUBGRF_SetPacketType+0x30>)
 8011578:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 801157a:	b143      	cbz	r3, 801158e <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801157c:	2201      	movs	r2, #1
 801157e:	f10d 0107 	add.w	r1, sp, #7
 8011582:	208a      	movs	r0, #138	; 0x8a
 8011584:	f7ff fd90 	bl	80110a8 <SUBGRF_WriteCommand>
}
 8011588:	b003      	add	sp, #12
 801158a:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801158e:	2100      	movs	r1, #0
 8011590:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8011594:	f7ff ff9a 	bl	80114cc <SUBGRF_WriteRegister>
 8011598:	e7f0      	b.n	801157c <SUBGRF_SetPacketType+0x10>
 801159a:	bf00      	nop
 801159c:	200010eb 	.word	0x200010eb

080115a0 <SUBGRF_SetModulationParams>:
{
 80115a0:	b510      	push	{r4, lr}
 80115a2:	b082      	sub	sp, #8
 80115a4:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80115a6:	4b3e      	ldr	r3, [pc, #248]	; (80116a0 <SUBGRF_SetModulationParams+0x100>)
 80115a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80115ac:	ab02      	add	r3, sp, #8
 80115ae:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 80115b2:	7820      	ldrb	r0, [r4, #0]
 80115b4:	4b3b      	ldr	r3, [pc, #236]	; (80116a4 <SUBGRF_SetModulationParams+0x104>)
 80115b6:	781b      	ldrb	r3, [r3, #0]
 80115b8:	4298      	cmp	r0, r3
 80115ba:	d106      	bne.n	80115ca <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 80115bc:	7823      	ldrb	r3, [r4, #0]
 80115be:	2b03      	cmp	r3, #3
 80115c0:	d82c      	bhi.n	801161c <SUBGRF_SetModulationParams+0x7c>
 80115c2:	e8df f003 	tbb	[pc, r3]
 80115c6:	4205      	.short	0x4205
 80115c8:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80115ca:	f7ff ffcf 	bl	801156c <SUBGRF_SetPacketType>
 80115ce:	e7f5      	b.n	80115bc <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80115d0:	6862      	ldr	r2, [r4, #4]
 80115d2:	4b35      	ldr	r3, [pc, #212]	; (80116a8 <SUBGRF_SetModulationParams+0x108>)
 80115d4:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80115d8:	0c1a      	lsrs	r2, r3, #16
 80115da:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80115de:	0a1a      	lsrs	r2, r3, #8
 80115e0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80115e4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80115e8:	7b23      	ldrb	r3, [r4, #12]
 80115ea:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80115ee:	7b63      	ldrb	r3, [r4, #13]
 80115f0:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80115f4:	68a1      	ldr	r1, [r4, #8]
 80115f6:	4a2d      	ldr	r2, [pc, #180]	; (80116ac <SUBGRF_SetModulationParams+0x10c>)
 80115f8:	2300      	movs	r3, #0
 80115fa:	0648      	lsls	r0, r1, #25
 80115fc:	09c9      	lsrs	r1, r1, #7
 80115fe:	f7ef fb99 	bl	8000d34 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8011602:	0c03      	lsrs	r3, r0, #16
 8011604:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8011608:	0a03      	lsrs	r3, r0, #8
 801160a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 801160e:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011612:	2208      	movs	r2, #8
 8011614:	4669      	mov	r1, sp
 8011616:	208b      	movs	r0, #139	; 0x8b
 8011618:	f7ff fd46 	bl	80110a8 <SUBGRF_WriteCommand>
}
 801161c:	b002      	add	sp, #8
 801161e:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8011620:	6922      	ldr	r2, [r4, #16]
 8011622:	4b21      	ldr	r3, [pc, #132]	; (80116a8 <SUBGRF_SetModulationParams+0x108>)
 8011624:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011628:	0c1a      	lsrs	r2, r3, #16
 801162a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801162e:	0a1a      	lsrs	r2, r3, #8
 8011630:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011634:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8011638:	7d23      	ldrb	r3, [r4, #20]
 801163a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801163e:	2204      	movs	r2, #4
 8011640:	4669      	mov	r1, sp
 8011642:	208b      	movs	r0, #139	; 0x8b
 8011644:	f7ff fd30 	bl	80110a8 <SUBGRF_WriteCommand>
        break;
 8011648:	e7e8      	b.n	801161c <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801164a:	7e23      	ldrb	r3, [r4, #24]
 801164c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8011650:	7e63      	ldrb	r3, [r4, #25]
 8011652:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8011656:	7ea3      	ldrb	r3, [r4, #26]
 8011658:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801165c:	7ee3      	ldrb	r3, [r4, #27]
 801165e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011662:	2204      	movs	r2, #4
 8011664:	4669      	mov	r1, sp
 8011666:	208b      	movs	r0, #139	; 0x8b
 8011668:	f7ff fd1e 	bl	80110a8 <SUBGRF_WriteCommand>
        break;
 801166c:	e7d6      	b.n	801161c <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801166e:	6862      	ldr	r2, [r4, #4]
 8011670:	4b0d      	ldr	r3, [pc, #52]	; (80116a8 <SUBGRF_SetModulationParams+0x108>)
 8011672:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8011676:	0c1a      	lsrs	r2, r3, #16
 8011678:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801167c:	0a1a      	lsrs	r2, r3, #8
 801167e:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8011682:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8011686:	7b23      	ldrb	r3, [r4, #12]
 8011688:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801168c:	7b63      	ldrb	r3, [r4, #13]
 801168e:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8011692:	2205      	movs	r2, #5
 8011694:	4669      	mov	r1, sp
 8011696:	208b      	movs	r0, #139	; 0x8b
 8011698:	f7ff fd06 	bl	80110a8 <SUBGRF_WriteCommand>
}
 801169c:	e7be      	b.n	801161c <SUBGRF_SetModulationParams+0x7c>
 801169e:	bf00      	nop
 80116a0:	08012ca4 	.word	0x08012ca4
 80116a4:	200010eb 	.word	0x200010eb
 80116a8:	3d090000 	.word	0x3d090000
 80116ac:	01e84800 	.word	0x01e84800

080116b0 <SUBGRF_ReadRegister>:
{
 80116b0:	b500      	push	{lr}
 80116b2:	b083      	sub	sp, #12
 80116b4:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80116b6:	2301      	movs	r3, #1
 80116b8:	f10d 0207 	add.w	r2, sp, #7
 80116bc:	4803      	ldr	r0, [pc, #12]	; (80116cc <SUBGRF_ReadRegister+0x1c>)
 80116be:	f7f4 fa69 	bl	8005b94 <HAL_SUBGHZ_ReadRegisters>
}
 80116c2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80116c6:	b003      	add	sp, #12
 80116c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80116cc:	200001d0 	.word	0x200001d0

080116d0 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80116d0:	b510      	push	{r4, lr}
 80116d2:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80116d4:	f7f1 fb22 	bl	8002d1c <RBI_IsDCDC>
 80116d8:	2801      	cmp	r0, #1
 80116da:	d000      	beq.n	80116de <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80116dc:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80116de:	f640 1023 	movw	r0, #2339	; 0x923
 80116e2:	f7ff ffe5 	bl	80116b0 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80116e6:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80116ea:	4321      	orrs	r1, r4
 80116ec:	f640 1023 	movw	r0, #2339	; 0x923
 80116f0:	f7ff feec 	bl	80114cc <SUBGRF_WriteRegister>
}
 80116f4:	e7f2      	b.n	80116dc <Radio_SMPS_Set+0xc>
	...

080116f8 <SUBGRF_Init>:
{
 80116f8:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80116fa:	b108      	cbz	r0, 8011700 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80116fc:	4a16      	ldr	r2, [pc, #88]	; (8011758 <SUBGRF_Init+0x60>)
 80116fe:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8011700:	f7f0 f8d4 	bl	80018ac <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8011704:	2002      	movs	r0, #2
 8011706:	f7ff ffe3 	bl	80116d0 <Radio_SMPS_Set>
    ImageCalibrated = false;
 801170a:	2000      	movs	r0, #0
 801170c:	4b13      	ldr	r3, [pc, #76]	; (801175c <SUBGRF_Init+0x64>)
 801170e:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8011710:	f7ff fcf0 	bl	80110f4 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8011714:	f7f1 fafe 	bl	8002d14 <RBI_IsTCXO>
 8011718:	2801      	cmp	r0, #1
 801171a:	d00f      	beq.n	801173c <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801171c:	2120      	movs	r1, #32
 801171e:	f640 1011 	movw	r0, #2321	; 0x911
 8011722:	f7ff fed3 	bl	80114cc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8011726:	2120      	movs	r1, #32
 8011728:	f640 1012 	movw	r0, #2322	; 0x912
 801172c:	f7ff fece 	bl	80114cc <SUBGRF_WriteRegister>
    RBI_Init();
 8011730:	f7f1 fae4 	bl	8002cfc <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8011734:	4b0a      	ldr	r3, [pc, #40]	; (8011760 <SUBGRF_Init+0x68>)
 8011736:	2201      	movs	r2, #1
 8011738:	701a      	strb	r2, [r3, #0]
}
 801173a:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801173c:	2140      	movs	r1, #64	; 0x40
 801173e:	f7ff fe21 	bl	8011384 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8011742:	2100      	movs	r1, #0
 8011744:	f640 1011 	movw	r0, #2321	; 0x911
 8011748:	f7ff fec0 	bl	80114cc <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 801174c:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8011750:	f7ff fd7f 	bl	8011252 <SUBGRF_Calibrate>
 8011754:	e7ec      	b.n	8011730 <SUBGRF_Init+0x38>
 8011756:	bf00      	nop
 8011758:	200010ec 	.word	0x200010ec
 801175c:	200010e8 	.word	0x200010e8
 8011760:	200010ea 	.word	0x200010ea

08011764 <SUBGRF_SetSleep>:
{
 8011764:	b510      	push	{r4, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801176a:	2000      	movs	r0, #0
 801176c:	f7f1 faca 	bl	8002d04 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8011770:	2002      	movs	r0, #2
 8011772:	f7ff ffad 	bl	80116d0 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8011776:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801177a:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801177e:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8011780:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8011784:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8011786:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801178a:	2201      	movs	r2, #1
 801178c:	f10d 0107 	add.w	r1, sp, #7
 8011790:	2084      	movs	r0, #132	; 0x84
 8011792:	f7ff fc89 	bl	80110a8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8011796:	4b02      	ldr	r3, [pc, #8]	; (80117a0 <SUBGRF_SetSleep+0x3c>)
 8011798:	2200      	movs	r2, #0
 801179a:	701a      	strb	r2, [r3, #0]
}
 801179c:	b002      	add	sp, #8
 801179e:	bd10      	pop	{r4, pc}
 80117a0:	200010ea 	.word	0x200010ea

080117a4 <SUBGRF_SetWhiteningSeed>:
{
 80117a4:	b510      	push	{r4, lr}
 80117a6:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80117a8:	f7ff fe32 	bl	8011410 <SUBGRF_GetPacketType>
 80117ac:	b100      	cbz	r0, 80117b0 <SUBGRF_SetWhiteningSeed+0xc>
}
 80117ae:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80117b0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80117b4:	f7ff ff7c 	bl	80116b0 <SUBGRF_ReadRegister>
 80117b8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80117bc:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80117c0:	4301      	orrs	r1, r0
 80117c2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80117c6:	f7ff fe81 	bl	80114cc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80117ca:	b2e1      	uxtb	r1, r4
 80117cc:	f240 60b9 	movw	r0, #1721	; 0x6b9
 80117d0:	f7ff fe7c 	bl	80114cc <SUBGRF_WriteRegister>
}
 80117d4:	e7eb      	b.n	80117ae <SUBGRF_SetWhiteningSeed+0xa>

080117d6 <SUBGRF_SetTxParams>:
{
 80117d6:	b570      	push	{r4, r5, r6, lr}
 80117d8:	b082      	sub	sp, #8
 80117da:	460c      	mov	r4, r1
 80117dc:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 80117de:	2801      	cmp	r0, #1
 80117e0:	d035      	beq.n	801184e <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80117e2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80117e6:	f7ff ff63 	bl	80116b0 <SUBGRF_ReadRegister>
 80117ea:	f040 011e 	orr.w	r1, r0, #30
 80117ee:	b2c9      	uxtb	r1, r1
 80117f0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80117f4:	f7ff fe6a 	bl	80114cc <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80117f8:	2001      	movs	r0, #1
 80117fa:	f7f1 fa93 	bl	8002d24 <RBI_GetRFOMaxPowerConfig>
 80117fe:	4605      	mov	r5, r0
        if (power > max_power)
 8011800:	4284      	cmp	r4, r0
 8011802:	dd00      	ble.n	8011806 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8011804:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8011806:	2d14      	cmp	r5, #20
 8011808:	d054      	beq.n	80118b4 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 801180a:	2d11      	cmp	r5, #17
 801180c:	d05c      	beq.n	80118c8 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 801180e:	2d0e      	cmp	r5, #14
 8011810:	d064      	beq.n	80118dc <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8011812:	2301      	movs	r3, #1
 8011814:	2200      	movs	r2, #0
 8011816:	2107      	movs	r1, #7
 8011818:	2004      	movs	r0, #4
 801181a:	f7ff fd81 	bl	8011320 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801181e:	1b64      	subs	r4, r4, r5
 8011820:	3416      	adds	r4, #22
 8011822:	b264      	sxtb	r4, r4
        if (power < -9)
 8011824:	f114 0f09 	cmn.w	r4, #9
 8011828:	da01      	bge.n	801182e <SUBGRF_SetTxParams+0x58>
            power = -9;
 801182a:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801182e:	2138      	movs	r1, #56	; 0x38
 8011830:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8011834:	f7ff fe4a 	bl	80114cc <SUBGRF_WriteRegister>
    buf[0] = power;
 8011838:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 801183c:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8011840:	2202      	movs	r2, #2
 8011842:	a901      	add	r1, sp, #4
 8011844:	208e      	movs	r0, #142	; 0x8e
 8011846:	f7ff fc2f 	bl	80110a8 <SUBGRF_WriteCommand>
}
 801184a:	b002      	add	sp, #8
 801184c:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801184e:	2000      	movs	r0, #0
 8011850:	f7f1 fa68 	bl	8002d24 <RBI_GetRFOMaxPowerConfig>
 8011854:	4605      	mov	r5, r0
        if (power >  max_power)
 8011856:	4284      	cmp	r4, r0
 8011858:	dd00      	ble.n	801185c <SUBGRF_SetTxParams+0x86>
          power = max_power;
 801185a:	b244      	sxtb	r4, r0
        if (max_power == 14)
 801185c:	2d0e      	cmp	r5, #14
 801185e:	d015      	beq.n	801188c <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8011860:	2d0a      	cmp	r5, #10
 8011862:	d01d      	beq.n	80118a0 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8011864:	2301      	movs	r3, #1
 8011866:	461a      	mov	r2, r3
 8011868:	2100      	movs	r1, #0
 801186a:	2006      	movs	r0, #6
 801186c:	f7ff fd58 	bl	8011320 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8011870:	1b64      	subs	r4, r4, r5
 8011872:	340e      	adds	r4, #14
 8011874:	b264      	sxtb	r4, r4
        if (power < -17)
 8011876:	f114 0f11 	cmn.w	r4, #17
 801187a:	da01      	bge.n	8011880 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 801187c:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8011880:	2118      	movs	r1, #24
 8011882:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8011886:	f7ff fe21 	bl	80114cc <SUBGRF_WriteRegister>
 801188a:	e7d5      	b.n	8011838 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801188c:	2301      	movs	r3, #1
 801188e:	461a      	mov	r2, r3
 8011890:	2100      	movs	r1, #0
 8011892:	2004      	movs	r0, #4
 8011894:	f7ff fd44 	bl	8011320 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8011898:	1b64      	subs	r4, r4, r5
 801189a:	340e      	adds	r4, #14
 801189c:	b264      	sxtb	r4, r4
 801189e:	e7ea      	b.n	8011876 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80118a0:	2301      	movs	r3, #1
 80118a2:	461a      	mov	r2, r3
 80118a4:	2100      	movs	r1, #0
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7ff fd3a 	bl	8011320 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80118ac:	1b64      	subs	r4, r4, r5
 80118ae:	340d      	adds	r4, #13
 80118b0:	b264      	sxtb	r4, r4
 80118b2:	e7e0      	b.n	8011876 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80118b4:	2301      	movs	r3, #1
 80118b6:	2200      	movs	r2, #0
 80118b8:	2105      	movs	r1, #5
 80118ba:	2003      	movs	r0, #3
 80118bc:	f7ff fd30 	bl	8011320 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80118c0:	1b64      	subs	r4, r4, r5
 80118c2:	3416      	adds	r4, #22
 80118c4:	b264      	sxtb	r4, r4
 80118c6:	e7ad      	b.n	8011824 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80118c8:	2301      	movs	r3, #1
 80118ca:	2200      	movs	r2, #0
 80118cc:	2103      	movs	r1, #3
 80118ce:	2002      	movs	r0, #2
 80118d0:	f7ff fd26 	bl	8011320 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80118d4:	1b64      	subs	r4, r4, r5
 80118d6:	3416      	adds	r4, #22
 80118d8:	b264      	sxtb	r4, r4
 80118da:	e7a3      	b.n	8011824 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80118dc:	2301      	movs	r3, #1
 80118de:	2200      	movs	r2, #0
 80118e0:	2102      	movs	r1, #2
 80118e2:	4608      	mov	r0, r1
 80118e4:	f7ff fd1c 	bl	8011320 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80118e8:	1b64      	subs	r4, r4, r5
 80118ea:	340e      	adds	r4, #14
 80118ec:	b264      	sxtb	r4, r4
 80118ee:	e799      	b.n	8011824 <SUBGRF_SetTxParams+0x4e>

080118f0 <SUBGRF_GetRxBufferStatus>:
{
 80118f0:	b530      	push	{r4, r5, lr}
 80118f2:	b083      	sub	sp, #12
 80118f4:	4605      	mov	r5, r0
 80118f6:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80118f8:	2202      	movs	r2, #2
 80118fa:	a901      	add	r1, sp, #4
 80118fc:	2013      	movs	r0, #19
 80118fe:	f7ff fbe3 	bl	80110c8 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8011902:	f7ff fd85 	bl	8011410 <SUBGRF_GetPacketType>
 8011906:	2801      	cmp	r0, #1
 8011908:	d007      	beq.n	801191a <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 801190a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801190e:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8011910:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011914:	7023      	strb	r3, [r4, #0]
}
 8011916:	b003      	add	sp, #12
 8011918:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801191a:	4b05      	ldr	r3, [pc, #20]	; (8011930 <SUBGRF_GetRxBufferStatus+0x40>)
 801191c:	781b      	ldrb	r3, [r3, #0]
 801191e:	b2db      	uxtb	r3, r3
 8011920:	2b01      	cmp	r3, #1
 8011922:	d1f2      	bne.n	801190a <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8011924:	f240 7002 	movw	r0, #1794	; 0x702
 8011928:	f7ff fec2 	bl	80116b0 <SUBGRF_ReadRegister>
 801192c:	7028      	strb	r0, [r5, #0]
 801192e:	e7ef      	b.n	8011910 <SUBGRF_GetRxBufferStatus+0x20>
 8011930:	200010e9 	.word	0x200010e9

08011934 <SUBGRF_WriteRegisters>:
{
 8011934:	b510      	push	{r4, lr}
 8011936:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011938:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801193c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801193e:	460a      	mov	r2, r1
 8011940:	4601      	mov	r1, r0
 8011942:	4803      	ldr	r0, [pc, #12]	; (8011950 <SUBGRF_WriteRegisters+0x1c>)
 8011944:	f7f4 f8d6 	bl	8005af4 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011948:	f384 8810 	msr	PRIMASK, r4
}
 801194c:	bd10      	pop	{r4, pc}
 801194e:	bf00      	nop
 8011950:	200001d0 	.word	0x200001d0

08011954 <SUBGRF_SetSyncWord>:
{
 8011954:	b508      	push	{r3, lr}
 8011956:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8011958:	2208      	movs	r2, #8
 801195a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801195e:	f7ff ffe9 	bl	8011934 <SUBGRF_WriteRegisters>
}
 8011962:	2000      	movs	r0, #0
 8011964:	bd08      	pop	{r3, pc}

08011966 <SUBGRF_SetCrcSeed>:
{
 8011966:	b500      	push	{lr}
 8011968:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801196a:	0a03      	lsrs	r3, r0, #8
 801196c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8011970:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8011974:	f7ff fd4c 	bl	8011410 <SUBGRF_GetPacketType>
 8011978:	b110      	cbz	r0, 8011980 <SUBGRF_SetCrcSeed+0x1a>
}
 801197a:	b003      	add	sp, #12
 801197c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8011980:	2202      	movs	r2, #2
 8011982:	a901      	add	r1, sp, #4
 8011984:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8011988:	f7ff ffd4 	bl	8011934 <SUBGRF_WriteRegisters>
}
 801198c:	e7f5      	b.n	801197a <SUBGRF_SetCrcSeed+0x14>

0801198e <SUBGRF_SetCrcPolynomial>:
{
 801198e:	b500      	push	{lr}
 8011990:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8011992:	0a03      	lsrs	r3, r0, #8
 8011994:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8011998:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 801199c:	f7ff fd38 	bl	8011410 <SUBGRF_GetPacketType>
 80119a0:	b110      	cbz	r0, 80119a8 <SUBGRF_SetCrcPolynomial+0x1a>
}
 80119a2:	b003      	add	sp, #12
 80119a4:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80119a8:	2202      	movs	r2, #2
 80119aa:	a901      	add	r1, sp, #4
 80119ac:	f240 60be 	movw	r0, #1726	; 0x6be
 80119b0:	f7ff ffc0 	bl	8011934 <SUBGRF_WriteRegisters>
}
 80119b4:	e7f5      	b.n	80119a2 <SUBGRF_SetCrcPolynomial+0x14>
	...

080119b8 <SUBGRF_SetPacketParams>:
{
 80119b8:	b510      	push	{r4, lr}
 80119ba:	b084      	sub	sp, #16
 80119bc:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80119be:	ab01      	add	r3, sp, #4
 80119c0:	4a33      	ldr	r2, [pc, #204]	; (8011a90 <SUBGRF_SetPacketParams+0xd8>)
 80119c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80119c4:	c303      	stmia	r3!, {r0, r1}
 80119c6:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 80119c8:	7820      	ldrb	r0, [r4, #0]
 80119ca:	4b32      	ldr	r3, [pc, #200]	; (8011a94 <SUBGRF_SetPacketParams+0xdc>)
 80119cc:	781b      	ldrb	r3, [r3, #0]
 80119ce:	4298      	cmp	r0, r3
 80119d0:	d106      	bne.n	80119e0 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 80119d2:	7823      	ldrb	r3, [r4, #0]
 80119d4:	2b03      	cmp	r3, #3
 80119d6:	d82a      	bhi.n	8011a2e <SUBGRF_SetPacketParams+0x76>
 80119d8:	e8df f003 	tbb	[pc, r3]
 80119dc:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 80119e0:	f7ff fdc4 	bl	801156c <SUBGRF_SetPacketType>
 80119e4:	e7f5      	b.n	80119d2 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80119e6:	7a63      	ldrb	r3, [r4, #9]
 80119e8:	2bf1      	cmp	r3, #241	; 0xf1
 80119ea:	d022      	beq.n	8011a32 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80119ec:	2bf2      	cmp	r3, #242	; 0xf2
 80119ee:	d02a      	beq.n	8011a46 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80119f0:	8862      	ldrh	r2, [r4, #2]
 80119f2:	0a11      	lsrs	r1, r2, #8
 80119f4:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80119f8:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80119fc:	7922      	ldrb	r2, [r4, #4]
 80119fe:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8011a02:	7962      	ldrb	r2, [r4, #5]
 8011a04:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8011a08:	79a2      	ldrb	r2, [r4, #6]
 8011a0a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8011a0e:	79e2      	ldrb	r2, [r4, #7]
 8011a10:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8011a14:	7a22      	ldrb	r2, [r4, #8]
 8011a16:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8011a1a:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8011a1e:	7aa3      	ldrb	r3, [r4, #10]
 8011a20:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8011a24:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8011a26:	a901      	add	r1, sp, #4
 8011a28:	208c      	movs	r0, #140	; 0x8c
 8011a2a:	f7ff fb3d 	bl	80110a8 <SUBGRF_WriteCommand>
}
 8011a2e:	b004      	add	sp, #16
 8011a30:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8011a32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011a36:	f7ff ff96 	bl	8011966 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8011a3a:	f248 0005 	movw	r0, #32773	; 0x8005
 8011a3e:	f7ff ffa6 	bl	801198e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8011a42:	2302      	movs	r3, #2
 8011a44:	e7d4      	b.n	80119f0 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8011a46:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8011a4a:	f7ff ff8c 	bl	8011966 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8011a4e:	f241 0021 	movw	r0, #4129	; 0x1021
 8011a52:	f7ff ff9c 	bl	801198e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8011a56:	2306      	movs	r3, #6
 8011a58:	e7ca      	b.n	80119f0 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8011a5a:	7b23      	ldrb	r3, [r4, #12]
 8011a5c:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8011a60:	2201      	movs	r2, #1
        break;
 8011a62:	e7e0      	b.n	8011a26 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8011a64:	89e3      	ldrh	r3, [r4, #14]
 8011a66:	0a1a      	lsrs	r2, r3, #8
 8011a68:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8011a6c:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8011a70:	7c23      	ldrb	r3, [r4, #16]
 8011a72:	4a09      	ldr	r2, [pc, #36]	; (8011a98 <SUBGRF_SetPacketParams+0xe0>)
 8011a74:	7013      	strb	r3, [r2, #0]
 8011a76:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8011a7a:	7c63      	ldrb	r3, [r4, #17]
 8011a7c:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8011a80:	7ca3      	ldrb	r3, [r4, #18]
 8011a82:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8011a86:	7ce3      	ldrb	r3, [r4, #19]
 8011a88:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8011a8c:	2206      	movs	r2, #6
        break;
 8011a8e:	e7ca      	b.n	8011a26 <SUBGRF_SetPacketParams+0x6e>
 8011a90:	08012cac 	.word	0x08012cac
 8011a94:	200010eb 	.word	0x200010eb
 8011a98:	200010e9 	.word	0x200010e9

08011a9c <SUBGRF_ReadRegisters>:
{
 8011a9c:	b510      	push	{r4, lr}
 8011a9e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011aa0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011aa4:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8011aa6:	460a      	mov	r2, r1
 8011aa8:	4601      	mov	r1, r0
 8011aaa:	4803      	ldr	r0, [pc, #12]	; (8011ab8 <SUBGRF_ReadRegisters+0x1c>)
 8011aac:	f7f4 f872 	bl	8005b94 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ab0:	f384 8810 	msr	PRIMASK, r4
}
 8011ab4:	bd10      	pop	{r4, pc}
 8011ab6:	bf00      	nop
 8011ab8:	200001d0 	.word	0x200001d0

08011abc <SUBGRF_GetRandom>:
{
 8011abc:	b570      	push	{r4, r5, r6, lr}
 8011abe:	b082      	sub	sp, #8
    uint32_t number = 0;
 8011ac0:	2600      	movs	r6, #0
 8011ac2:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8011ac4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011ac8:	f7ff fdf2 	bl	80116b0 <SUBGRF_ReadRegister>
 8011acc:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8011ace:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8011ad2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011ad6:	f7ff fcf9 	bl	80114cc <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8011ada:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011ade:	f7ff fde7 	bl	80116b0 <SUBGRF_ReadRegister>
 8011ae2:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8011ae4:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8011ae8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011aec:	f7ff fcee 	bl	80114cc <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8011af0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011af4:	f7ff fb32 	bl	801115c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8011af8:	2204      	movs	r2, #4
 8011afa:	eb0d 0102 	add.w	r1, sp, r2
 8011afe:	f640 0019 	movw	r0, #2073	; 0x819
 8011b02:	f7ff ffcb 	bl	8011a9c <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8011b06:	4630      	mov	r0, r6
 8011b08:	f7ff faf4 	bl	80110f4 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8011b0c:	4629      	mov	r1, r5
 8011b0e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8011b12:	f7ff fcdb 	bl	80114cc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8011b16:	4621      	mov	r1, r4
 8011b18:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011b1c:	f7ff fcd6 	bl	80114cc <SUBGRF_WriteRegister>
}
 8011b20:	9801      	ldr	r0, [sp, #4]
 8011b22:	b002      	add	sp, #8
 8011b24:	bd70      	pop	{r4, r5, r6, pc}
	...

08011b28 <SUBGRF_WriteBuffer>:
{
 8011b28:	b510      	push	{r4, lr}
 8011b2a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b2c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011b30:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8011b32:	460a      	mov	r2, r1
 8011b34:	4601      	mov	r1, r0
 8011b36:	4803      	ldr	r0, [pc, #12]	; (8011b44 <SUBGRF_WriteBuffer+0x1c>)
 8011b38:	f7f4 f982 	bl	8005e40 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b3c:	f384 8810 	msr	PRIMASK, r4
}
 8011b40:	bd10      	pop	{r4, pc}
 8011b42:	bf00      	nop
 8011b44:	200001d0 	.word	0x200001d0

08011b48 <SUBGRF_SetPayload>:
{
 8011b48:	b508      	push	{r3, lr}
 8011b4a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8011b4c:	4601      	mov	r1, r0
 8011b4e:	2000      	movs	r0, #0
 8011b50:	f7ff ffea 	bl	8011b28 <SUBGRF_WriteBuffer>
}
 8011b54:	bd08      	pop	{r3, pc}

08011b56 <SUBGRF_SendPayload>:
{
 8011b56:	b510      	push	{r4, lr}
 8011b58:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8011b5a:	f7ff fff5 	bl	8011b48 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8011b5e:	4620      	mov	r0, r4
 8011b60:	f7ff fae2 	bl	8011128 <SUBGRF_SetTx>
}
 8011b64:	bd10      	pop	{r4, pc}
	...

08011b68 <SUBGRF_ReadBuffer>:
{
 8011b68:	b510      	push	{r4, lr}
 8011b6a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b6c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011b70:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8011b72:	460a      	mov	r2, r1
 8011b74:	4601      	mov	r1, r0
 8011b76:	4803      	ldr	r0, [pc, #12]	; (8011b84 <SUBGRF_ReadBuffer+0x1c>)
 8011b78:	f7f4 f9ac 	bl	8005ed4 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b7c:	f384 8810 	msr	PRIMASK, r4
}
 8011b80:	bd10      	pop	{r4, pc}
 8011b82:	bf00      	nop
 8011b84:	200001d0 	.word	0x200001d0

08011b88 <SUBGRF_GetPayload>:
{
 8011b88:	b570      	push	{r4, r5, r6, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	4606      	mov	r6, r0
 8011b8e:	460c      	mov	r4, r1
 8011b90:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8011b92:	2300      	movs	r3, #0
 8011b94:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8011b98:	f10d 0107 	add.w	r1, sp, #7
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	f7ff fea7 	bl	80118f0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8011ba2:	7822      	ldrb	r2, [r4, #0]
 8011ba4:	42aa      	cmp	r2, r5
 8011ba6:	d902      	bls.n	8011bae <SUBGRF_GetPayload+0x26>
        return 1;
 8011ba8:	2001      	movs	r0, #1
}
 8011baa:	b002      	add	sp, #8
 8011bac:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8011bae:	4631      	mov	r1, r6
 8011bb0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011bb4:	f7ff ffd8 	bl	8011b68 <SUBGRF_ReadBuffer>
    return 0;
 8011bb8:	2000      	movs	r0, #0
 8011bba:	e7f6      	b.n	8011baa <SUBGRF_GetPayload+0x22>

08011bbc <SUBGRF_SetSwitch>:
{
 8011bbc:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8011bbe:	2901      	cmp	r1, #1
 8011bc0:	d003      	beq.n	8011bca <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8011bc2:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8011bc4:	f7f1 f89e 	bl	8002d04 <RBI_ConfigRFSwitch>
}
 8011bc8:	bd10      	pop	{r4, pc}
 8011bca:	4604      	mov	r4, r0
 8011bcc:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8011bce:	2c01      	cmp	r4, #1
 8011bd0:	d003      	beq.n	8011bda <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8011bd2:	2c02      	cmp	r4, #2
 8011bd4:	d1f6      	bne.n	8011bc4 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8011bd6:	2003      	movs	r0, #3
 8011bd8:	e7f4      	b.n	8011bc4 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8011bda:	2004      	movs	r0, #4
 8011bdc:	f7ff fd78 	bl	80116d0 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8011be0:	2002      	movs	r0, #2
 8011be2:	e7f6      	b.n	8011bd2 <SUBGRF_SetSwitch+0x16>

08011be4 <SUBGRF_SetRfTxPower>:
{
 8011be4:	b538      	push	{r3, r4, r5, lr}
 8011be6:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8011be8:	f7f1 f890 	bl	8002d0c <RBI_GetTxConfig>
    switch (TxConfig)
 8011bec:	b148      	cbz	r0, 8011c02 <SUBGRF_SetRfTxPower+0x1e>
 8011bee:	2802      	cmp	r0, #2
 8011bf0:	d10d      	bne.n	8011c0e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8011bf2:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8011bf4:	2202      	movs	r2, #2
 8011bf6:	4621      	mov	r1, r4
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	f7ff fdec 	bl	80117d6 <SUBGRF_SetTxParams>
}
 8011bfe:	4628      	mov	r0, r5
 8011c00:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8011c02:	2c0f      	cmp	r4, #15
 8011c04:	dc01      	bgt.n	8011c0a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8011c06:	2501      	movs	r5, #1
 8011c08:	e7f4      	b.n	8011bf4 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8011c0a:	2502      	movs	r5, #2
 8011c0c:	e7f2      	b.n	8011bf4 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8011c0e:	2501      	movs	r5, #1
 8011c10:	e7f0      	b.n	8011bf4 <SUBGRF_SetRfTxPower+0x10>

08011c12 <SUBGRF_GetRadioWakeUpTime>:
}
 8011c12:	2001      	movs	r0, #1
 8011c14:	4770      	bx	lr
	...

08011c18 <HAL_SUBGHZ_TxCpltCallback>:
{
 8011c18:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8011c1a:	4b02      	ldr	r3, [pc, #8]	; (8011c24 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	2001      	movs	r0, #1
 8011c20:	4798      	blx	r3
}
 8011c22:	bd08      	pop	{r3, pc}
 8011c24:	200010ec 	.word	0x200010ec

08011c28 <HAL_SUBGHZ_RxCpltCallback>:
{
 8011c28:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8011c2a:	4b02      	ldr	r3, [pc, #8]	; (8011c34 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	2002      	movs	r0, #2
 8011c30:	4798      	blx	r3
}
 8011c32:	bd08      	pop	{r3, pc}
 8011c34:	200010ec 	.word	0x200010ec

08011c38 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8011c38:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8011c3a:	4b02      	ldr	r3, [pc, #8]	; (8011c44 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	2040      	movs	r0, #64	; 0x40
 8011c40:	4798      	blx	r3
}
 8011c42:	bd08      	pop	{r3, pc}
 8011c44:	200010ec 	.word	0x200010ec

08011c48 <HAL_SUBGHZ_CADStatusCallback>:
{
 8011c48:	b508      	push	{r3, lr}
    switch (cadstatus)
 8011c4a:	b111      	cbz	r1, 8011c52 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8011c4c:	2901      	cmp	r1, #1
 8011c4e:	d005      	beq.n	8011c5c <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8011c50:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8011c52:	4b05      	ldr	r3, [pc, #20]	; (8011c68 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	2080      	movs	r0, #128	; 0x80
 8011c58:	4798      	blx	r3
            break;
 8011c5a:	e7f9      	b.n	8011c50 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8011c5c:	4b02      	ldr	r3, [pc, #8]	; (8011c68 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011c64:	4798      	blx	r3
}
 8011c66:	e7f3      	b.n	8011c50 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8011c68:	200010ec 	.word	0x200010ec

08011c6c <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8011c6c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8011c6e:	4b03      	ldr	r3, [pc, #12]	; (8011c7c <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011c76:	4798      	blx	r3
}
 8011c78:	bd08      	pop	{r3, pc}
 8011c7a:	bf00      	nop
 8011c7c:	200010ec 	.word	0x200010ec

08011c80 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8011c80:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8011c82:	4b02      	ldr	r3, [pc, #8]	; (8011c8c <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	2020      	movs	r0, #32
 8011c88:	4798      	blx	r3
}
 8011c8a:	bd08      	pop	{r3, pc}
 8011c8c:	200010ec 	.word	0x200010ec

08011c90 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8011c90:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8011c92:	4b02      	ldr	r3, [pc, #8]	; (8011c9c <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2004      	movs	r0, #4
 8011c98:	4798      	blx	r3
}
 8011c9a:	bd08      	pop	{r3, pc}
 8011c9c:	200010ec 	.word	0x200010ec

08011ca0 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8011ca0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8011ca2:	4b02      	ldr	r3, [pc, #8]	; (8011cac <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	2008      	movs	r0, #8
 8011ca8:	4798      	blx	r3
}
 8011caa:	bd08      	pop	{r3, pc}
 8011cac:	200010ec 	.word	0x200010ec

08011cb0 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8011cb0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8011cb2:	4b02      	ldr	r3, [pc, #8]	; (8011cbc <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	2010      	movs	r0, #16
 8011cb8:	4798      	blx	r3
}
 8011cba:	bd08      	pop	{r3, pc}
 8011cbc:	200010ec 	.word	0x200010ec

08011cc0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8011cc0:	4601      	mov	r1, r0
 8011cc2:	b188      	cbz	r0, 8011ce8 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	2b15      	cmp	r3, #21
 8011cc8:	d80d      	bhi.n	8011ce6 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8011cca:	4618      	mov	r0, r3
 8011ccc:	4a07      	ldr	r2, [pc, #28]	; (8011cec <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011cce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011cd2:	428a      	cmp	r2, r1
 8011cd4:	d802      	bhi.n	8011cdc <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	b2db      	uxtb	r3, r3
 8011cda:	e7f4      	b.n	8011cc6 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8011cdc:	4b03      	ldr	r3, [pc, #12]	; (8011cec <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8011cde:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011ce2:	7900      	ldrb	r0, [r0, #4]
 8011ce4:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8011ce6:	e7fe      	b.n	8011ce6 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8011ce8:	201f      	movs	r0, #31
}
 8011cea:	4770      	bx	lr
 8011cec:	08013a40 	.word	0x08013a40

08011cf0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8011cf0:	b570      	push	{r4, r5, r6, lr}
 8011cf2:	b082      	sub	sp, #8
 8011cf4:	4606      	mov	r6, r0
 8011cf6:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8011cf8:	4b1d      	ldr	r3, [pc, #116]	; (8011d70 <SUBGRF_GetCFO+0x80>)
 8011cfa:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8011cfc:	f640 0007 	movw	r0, #2055	; 0x807
 8011d00:	f7ff fcd6 	bl	80116b0 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8011d04:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8011d08:	3308      	adds	r3, #8
 8011d0a:	446b      	add	r3, sp
 8011d0c:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8011d10:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8011d14:	3b01      	subs	r3, #1
 8011d16:	fa05 f303 	lsl.w	r3, r5, r3
 8011d1a:	4d16      	ldr	r5, [pc, #88]	; (8011d74 <SUBGRF_GetCFO+0x84>)
 8011d1c:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8011d20:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8011d24:	2a07      	cmp	r2, #7
 8011d26:	d921      	bls.n	8011d6c <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8011d28:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8011d2a:	fb00 f202 	mul.w	r2, r0, r2
 8011d2e:	2a03      	cmp	r2, #3
 8011d30:	d800      	bhi.n	8011d34 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8011d32:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8011d34:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8011d38:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8011d3c:	f7ff fcb8 	bl	80116b0 <SUBGRF_ReadRegister>
 8011d40:	0200      	lsls	r0, r0, #8
 8011d42:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8011d46:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8011d4a:	f7ff fcb1 	bl	80116b0 <SUBGRF_ReadRegister>
 8011d4e:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8011d50:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8011d54:	d003      	beq.n	8011d5e <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8011d56:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8011d5a:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8011d5e:	096d      	lsrs	r5, r5, #5
 8011d60:	fb05 f000 	mul.w	r0, r5, r0
 8011d64:	11c0      	asrs	r0, r0, #7
 8011d66:	6020      	str	r0, [r4, #0]
}
 8011d68:	b002      	add	sp, #8
 8011d6a:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8011d6c:	2002      	movs	r0, #2
 8011d6e:	e7dc      	b.n	8011d2a <SUBGRF_GetCFO+0x3a>
 8011d70:	0c0a0804 	.word	0x0c0a0804
 8011d74:	01e84800 	.word	0x01e84800

08011d78 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8011d78:	f04f 30ff 	mov.w	r0, #4294967295
 8011d7c:	4770      	bx	lr

08011d7e <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8011d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d82:	4770      	bx	lr

08011d84 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8011d84:	4770      	bx	lr

08011d86 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8011d86:	2000      	movs	r0, #0
 8011d88:	4770      	bx	lr

08011d8a <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8011d8a:	2000      	movs	r0, #0
 8011d8c:	4770      	bx	lr

08011d8e <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8011d8e:	4770      	bx	lr

08011d90 <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 8011d90:	f04f 30ff 	mov.w	r0, #4294967295
 8011d94:	4770      	bx	lr

08011d96 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8011d96:	f04f 30ff 	mov.w	r0, #4294967295
 8011d9a:	4770      	bx	lr

08011d9c <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8011d9c:	4770      	bx	lr

08011d9e <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8011d9e:	4770      	bx	lr

08011da0 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8011da0:	4770      	bx	lr
	...

08011da4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8011da4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011da6:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011daa:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8011dac:	4b1e      	ldr	r3, [pc, #120]	; (8011e28 <TRACE_AllocateBufer+0x84>)
 8011dae:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8011db2:	8a1a      	ldrh	r2, [r3, #16]
 8011db4:	4594      	cmp	ip, r2
 8011db6:	d011      	beq.n	8011ddc <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011db8:	4594      	cmp	ip, r2
 8011dba:	d921      	bls.n	8011e00 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011dbc:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8011dc0:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8011dc2:	4283      	cmp	r3, r0
 8011dc4:	d81f      	bhi.n	8011e06 <TRACE_AllocateBufer+0x62>
 8011dc6:	4282      	cmp	r2, r0
 8011dc8:	d91d      	bls.n	8011e06 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8011dca:	4b17      	ldr	r3, [pc, #92]	; (8011e28 <TRACE_AllocateBufer+0x84>)
 8011dcc:	2401      	movs	r4, #1
 8011dce:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8011dd0:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8011dd4:	2400      	movs	r4, #0
 8011dd6:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8011dd8:	4613      	mov	r3, r2
 8011dda:	e014      	b.n	8011e06 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8011ddc:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8011de0:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8011de2:	4298      	cmp	r0, r3
 8011de4:	d30f      	bcc.n	8011e06 <TRACE_AllocateBufer+0x62>
 8011de6:	4282      	cmp	r2, r0
 8011de8:	d90d      	bls.n	8011e06 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8011dea:	4b0f      	ldr	r3, [pc, #60]	; (8011e28 <TRACE_AllocateBufer+0x84>)
 8011dec:	2401      	movs	r4, #1
 8011dee:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8011df0:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8011df4:	f04f 0c00 	mov.w	ip, #0
 8011df8:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8011dfc:	4613      	mov	r3, r2
 8011dfe:	e002      	b.n	8011e06 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8011e00:	eba2 030c 	sub.w	r3, r2, ip
 8011e04:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8011e06:	4283      	cmp	r3, r0
 8011e08:	d90a      	bls.n	8011e20 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8011e0a:	4a07      	ldr	r2, [pc, #28]	; (8011e28 <TRACE_AllocateBufer+0x84>)
 8011e0c:	8a53      	ldrh	r3, [r2, #18]
 8011e0e:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8011e10:	4403      	add	r3, r0
 8011e12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011e16:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8011e18:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e1a:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8011e1e:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8011e20:	f04f 30ff 	mov.w	r0, #4294967295
 8011e24:	e7f9      	b.n	8011e1a <TRACE_AllocateBufer+0x76>
 8011e26:	bf00      	nop
 8011e28:	200014f0 	.word	0x200014f0

08011e2c <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e2c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011e30:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8011e32:	4a03      	ldr	r2, [pc, #12]	; (8011e40 <TRACE_Lock+0x14>)
 8011e34:	8ad3      	ldrh	r3, [r2, #22]
 8011e36:	3301      	adds	r3, #1
 8011e38:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e3a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8011e3e:	4770      	bx	lr
 8011e40:	200014f0 	.word	0x200014f0

08011e44 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e44:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011e48:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8011e4a:	4a03      	ldr	r2, [pc, #12]	; (8011e58 <TRACE_UnLock+0x14>)
 8011e4c:	8ad3      	ldrh	r3, [r2, #22]
 8011e4e:	3b01      	subs	r3, #1
 8011e50:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e52:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8011e56:	4770      	bx	lr
 8011e58:	200014f0 	.word	0x200014f0

08011e5c <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8011e5c:	4b02      	ldr	r3, [pc, #8]	; (8011e68 <TRACE_IsLocked+0xc>)
 8011e5e:	8ad8      	ldrh	r0, [r3, #22]
}
 8011e60:	3800      	subs	r0, #0
 8011e62:	bf18      	it	ne
 8011e64:	2001      	movne	r0, #1
 8011e66:	4770      	bx	lr
 8011e68:	200014f0 	.word	0x200014f0

08011e6c <UTIL_ADV_TRACE_Init>:
{
 8011e6c:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8011e6e:	2218      	movs	r2, #24
 8011e70:	2100      	movs	r1, #0
 8011e72:	4807      	ldr	r0, [pc, #28]	; (8011e90 <UTIL_ADV_TRACE_Init+0x24>)
 8011e74:	f000 f98f 	bl	8012196 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8011e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011e7c:	2100      	movs	r1, #0
 8011e7e:	4805      	ldr	r0, [pc, #20]	; (8011e94 <UTIL_ADV_TRACE_Init+0x28>)
 8011e80:	f000 f989 	bl	8012196 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8011e84:	4b04      	ldr	r3, [pc, #16]	; (8011e98 <UTIL_ADV_TRACE_Init+0x2c>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	4804      	ldr	r0, [pc, #16]	; (8011e9c <UTIL_ADV_TRACE_Init+0x30>)
 8011e8a:	4798      	blx	r3
}
 8011e8c:	bd08      	pop	{r3, pc}
 8011e8e:	bf00      	nop
 8011e90:	200014f0 	.word	0x200014f0
 8011e94:	200010f0 	.word	0x200010f0
 8011e98:	08012d4c 	.word	0x08012d4c
 8011e9c:	08012021 	.word	0x08012021

08011ea0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8011ea0:	4b01      	ldr	r3, [pc, #4]	; (8011ea8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8011ea2:	6058      	str	r0, [r3, #4]
}
 8011ea4:	4770      	bx	lr
 8011ea6:	bf00      	nop
 8011ea8:	200014f0 	.word	0x200014f0

08011eac <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8011eac:	4b01      	ldr	r3, [pc, #4]	; (8011eb4 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8011eae:	7218      	strb	r0, [r3, #8]
}
 8011eb0:	4770      	bx	lr
 8011eb2:	bf00      	nop
 8011eb4:	200014f0 	.word	0x200014f0

08011eb8 <TRACE_Send>:
{
 8011eb8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011eba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8011ebe:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8011ec0:	f7ff ffcc 	bl	8011e5c <TRACE_IsLocked>
 8011ec4:	b118      	cbz	r0, 8011ece <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ec6:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8011eca:	2000      	movs	r0, #0
}
 8011ecc:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8011ece:	f7ff ffad 	bl	8011e2c <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8011ed2:	4b1d      	ldr	r3, [pc, #116]	; (8011f48 <TRACE_Send+0x90>)
 8011ed4:	8a1a      	ldrh	r2, [r3, #16]
 8011ed6:	8a5b      	ldrh	r3, [r3, #18]
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	d02e      	beq.n	8011f3a <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8011edc:	491a      	ldr	r1, [pc, #104]	; (8011f48 <TRACE_Send+0x90>)
 8011ede:	7889      	ldrb	r1, [r1, #2]
 8011ee0:	2901      	cmp	r1, #1
 8011ee2:	d017      	beq.n	8011f14 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8011ee4:	4a18      	ldr	r2, [pc, #96]	; (8011f48 <TRACE_Send+0x90>)
 8011ee6:	7892      	ldrb	r2, [r2, #2]
 8011ee8:	b932      	cbnz	r2, 8011ef8 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8011eea:	4a17      	ldr	r2, [pc, #92]	; (8011f48 <TRACE_Send+0x90>)
 8011eec:	8a12      	ldrh	r2, [r2, #16]
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d91e      	bls.n	8011f30 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8011ef2:	1a9b      	subs	r3, r3, r2
 8011ef4:	4a14      	ldr	r2, [pc, #80]	; (8011f48 <TRACE_Send+0x90>)
 8011ef6:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8011ef8:	4e13      	ldr	r6, [pc, #76]	; (8011f48 <TRACE_Send+0x90>)
 8011efa:	8a33      	ldrh	r3, [r6, #16]
 8011efc:	4d13      	ldr	r5, [pc, #76]	; (8011f4c <TRACE_Send+0x94>)
 8011efe:	441d      	add	r5, r3
 8011f00:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8011f04:	f7ef fde4 	bl	8001ad0 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8011f08:	4b11      	ldr	r3, [pc, #68]	; (8011f50 <TRACE_Send+0x98>)
 8011f0a:	68db      	ldr	r3, [r3, #12]
 8011f0c:	8ab1      	ldrh	r1, [r6, #20]
 8011f0e:	4628      	mov	r0, r5
 8011f10:	4798      	blx	r3
 8011f12:	e7db      	b.n	8011ecc <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8011f14:	480c      	ldr	r0, [pc, #48]	; (8011f48 <TRACE_Send+0x90>)
 8011f16:	8801      	ldrh	r1, [r0, #0]
 8011f18:	1a8a      	subs	r2, r1, r2
 8011f1a:	b292      	uxth	r2, r2
 8011f1c:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8011f1e:	2102      	movs	r1, #2
 8011f20:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8011f22:	2100      	movs	r1, #0
 8011f24:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8011f26:	2a00      	cmp	r2, #0
 8011f28:	d1dc      	bne.n	8011ee4 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8011f2a:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8011f2c:	8201      	strh	r1, [r0, #16]
 8011f2e:	e7d9      	b.n	8011ee4 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8011f30:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8011f34:	4a04      	ldr	r2, [pc, #16]	; (8011f48 <TRACE_Send+0x90>)
 8011f36:	8293      	strh	r3, [r2, #20]
 8011f38:	e7de      	b.n	8011ef8 <TRACE_Send+0x40>
      TRACE_UnLock();
 8011f3a:	f7ff ff83 	bl	8011e44 <TRACE_UnLock>
 8011f3e:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8011f42:	2000      	movs	r0, #0
}
 8011f44:	e7c2      	b.n	8011ecc <TRACE_Send+0x14>
 8011f46:	bf00      	nop
 8011f48:	200014f0 	.word	0x200014f0
 8011f4c:	200010f0 	.word	0x200010f0
 8011f50:	08012d4c 	.word	0x08012d4c

08011f54 <UTIL_ADV_TRACE_COND_FSend>:
{
 8011f54:	b408      	push	{r3}
 8011f56:	b530      	push	{r4, r5, lr}
 8011f58:	b086      	sub	sp, #24
 8011f5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8011f62:	4b2c      	ldr	r3, [pc, #176]	; (8012014 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011f64:	7a1b      	ldrb	r3, [r3, #8]
 8011f66:	4283      	cmp	r3, r0
 8011f68:	d34d      	bcc.n	8012006 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8011f6a:	4b2a      	ldr	r3, [pc, #168]	; (8012014 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	ea31 0303 	bics.w	r3, r1, r3
 8011f72:	d14b      	bne.n	801200c <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8011f74:	4b27      	ldr	r3, [pc, #156]	; (8012014 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8011f76:	685b      	ldr	r3, [r3, #4]
 8011f78:	b123      	cbz	r3, 8011f84 <UTIL_ADV_TRACE_COND_FSend+0x30>
 8011f7a:	b11a      	cbz	r2, 8011f84 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8011f7c:	f10d 0102 	add.w	r1, sp, #2
 8011f80:	a801      	add	r0, sp, #4
 8011f82:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 8011f84:	ab0a      	add	r3, sp, #40	; 0x28
 8011f86:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8011f88:	4622      	mov	r2, r4
 8011f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011f8e:	4822      	ldr	r0, [pc, #136]	; (8012018 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8011f90:	f000 fcd0 	bl	8012934 <tiny_vsnprintf_like>
 8011f94:	b285      	uxth	r5, r0
  TRACE_Lock();
 8011f96:	f7ff ff49 	bl	8011e2c <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8011f9a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8011f9e:	4428      	add	r0, r5
 8011fa0:	4669      	mov	r1, sp
 8011fa2:	b280      	uxth	r0, r0
 8011fa4:	f7ff fefe 	bl	8011da4 <TRACE_AllocateBufer>
 8011fa8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011fac:	d026      	beq.n	8011ffc <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 8011fae:	2300      	movs	r3, #0
 8011fb0:	e00d      	b.n	8011fce <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8011fb2:	f8bd 2000 	ldrh.w	r2, [sp]
 8011fb6:	f103 0118 	add.w	r1, r3, #24
 8011fba:	4469      	add	r1, sp
 8011fbc:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8011fc0:	4916      	ldr	r1, [pc, #88]	; (801201c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8011fc2:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8011fc4:	3201      	adds	r2, #1
 8011fc6:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8011fca:	3301      	adds	r3, #1
 8011fcc:	b29b      	uxth	r3, r3
 8011fce:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d8ed      	bhi.n	8011fb2 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8011fd6:	f8bd 0000 	ldrh.w	r0, [sp]
 8011fda:	9b05      	ldr	r3, [sp, #20]
 8011fdc:	4622      	mov	r2, r4
 8011fde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011fe2:	4c0e      	ldr	r4, [pc, #56]	; (801201c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8011fe4:	4420      	add	r0, r4
 8011fe6:	f000 fca5 	bl	8012934 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8011fea:	f7ff ff2b 	bl	8011e44 <TRACE_UnLock>
    return TRACE_Send();
 8011fee:	f7ff ff63 	bl	8011eb8 <TRACE_Send>
}
 8011ff2:	b006      	add	sp, #24
 8011ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ff8:	b001      	add	sp, #4
 8011ffa:	4770      	bx	lr
  TRACE_UnLock();
 8011ffc:	f7ff ff22 	bl	8011e44 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8012000:	f06f 0002 	mvn.w	r0, #2
 8012004:	e7f5      	b.n	8011ff2 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8012006:	f06f 0004 	mvn.w	r0, #4
 801200a:	e7f2      	b.n	8011ff2 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 801200c:	f06f 0005 	mvn.w	r0, #5
 8012010:	e7ef      	b.n	8011ff2 <UTIL_ADV_TRACE_COND_FSend+0x9e>
 8012012:	bf00      	nop
 8012014:	200014f0 	.word	0x200014f0
 8012018:	20001508 	.word	0x20001508
 801201c:	200010f0 	.word	0x200010f0

08012020 <TRACE_TxCpltCallback>:
{
 8012020:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012022:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012026:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8012028:	4b25      	ldr	r3, [pc, #148]	; (80120c0 <TRACE_TxCpltCallback+0xa0>)
 801202a:	789b      	ldrb	r3, [r3, #2]
 801202c:	2b02      	cmp	r3, #2
 801202e:	d016      	beq.n	801205e <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012030:	4a23      	ldr	r2, [pc, #140]	; (80120c0 <TRACE_TxCpltCallback+0xa0>)
 8012032:	8a13      	ldrh	r3, [r2, #16]
 8012034:	8a90      	ldrh	r0, [r2, #20]
 8012036:	4403      	add	r3, r0
 8012038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801203c:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801203e:	4b20      	ldr	r3, [pc, #128]	; (80120c0 <TRACE_TxCpltCallback+0xa0>)
 8012040:	8a1a      	ldrh	r2, [r3, #16]
 8012042:	8a5b      	ldrh	r3, [r3, #18]
 8012044:	429a      	cmp	r2, r3
 8012046:	d003      	beq.n	8012050 <TRACE_TxCpltCallback+0x30>
 8012048:	481d      	ldr	r0, [pc, #116]	; (80120c0 <TRACE_TxCpltCallback+0xa0>)
 801204a:	8ac0      	ldrh	r0, [r0, #22]
 801204c:	2801      	cmp	r0, #1
 801204e:	d00b      	beq.n	8012068 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012050:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8012054:	f7ef fd42 	bl	8001adc <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8012058:	f7ff fef4 	bl	8011e44 <TRACE_UnLock>
}
 801205c:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801205e:	4b18      	ldr	r3, [pc, #96]	; (80120c0 <TRACE_TxCpltCallback+0xa0>)
 8012060:	2200      	movs	r2, #0
 8012062:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012064:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8012066:	e7ea      	b.n	801203e <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012068:	4815      	ldr	r0, [pc, #84]	; (80120c0 <TRACE_TxCpltCallback+0xa0>)
 801206a:	7880      	ldrb	r0, [r0, #2]
 801206c:	2801      	cmp	r0, #1
 801206e:	d014      	beq.n	801209a <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8012070:	4a13      	ldr	r2, [pc, #76]	; (80120c0 <TRACE_TxCpltCallback+0xa0>)
 8012072:	7892      	ldrb	r2, [r2, #2]
 8012074:	b932      	cbnz	r2, 8012084 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012076:	4a12      	ldr	r2, [pc, #72]	; (80120c0 <TRACE_TxCpltCallback+0xa0>)
 8012078:	8a12      	ldrh	r2, [r2, #16]
 801207a:	4293      	cmp	r3, r2
 801207c:	d91b      	bls.n	80120b6 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801207e:	1a9b      	subs	r3, r3, r2
 8012080:	4a0f      	ldr	r2, [pc, #60]	; (80120c0 <TRACE_TxCpltCallback+0xa0>)
 8012082:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012084:	4b0e      	ldr	r3, [pc, #56]	; (80120c0 <TRACE_TxCpltCallback+0xa0>)
 8012086:	8a1a      	ldrh	r2, [r3, #16]
 8012088:	480e      	ldr	r0, [pc, #56]	; (80120c4 <TRACE_TxCpltCallback+0xa4>)
 801208a:	4410      	add	r0, r2
 801208c:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8012090:	4a0d      	ldr	r2, [pc, #52]	; (80120c8 <TRACE_TxCpltCallback+0xa8>)
 8012092:	68d2      	ldr	r2, [r2, #12]
 8012094:	8a99      	ldrh	r1, [r3, #20]
 8012096:	4790      	blx	r2
 8012098:	e7e0      	b.n	801205c <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801209a:	4c09      	ldr	r4, [pc, #36]	; (80120c0 <TRACE_TxCpltCallback+0xa0>)
 801209c:	8820      	ldrh	r0, [r4, #0]
 801209e:	1a82      	subs	r2, r0, r2
 80120a0:	b292      	uxth	r2, r2
 80120a2:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80120a4:	2002      	movs	r0, #2
 80120a6:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80120a8:	2000      	movs	r0, #0
 80120aa:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80120ac:	2a00      	cmp	r2, #0
 80120ae:	d1df      	bne.n	8012070 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80120b0:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80120b2:	8220      	strh	r0, [r4, #16]
 80120b4:	e7dc      	b.n	8012070 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80120b6:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80120ba:	4a01      	ldr	r2, [pc, #4]	; (80120c0 <TRACE_TxCpltCallback+0xa0>)
 80120bc:	8293      	strh	r3, [r2, #20]
 80120be:	e7e1      	b.n	8012084 <TRACE_TxCpltCallback+0x64>
 80120c0:	200014f0 	.word	0x200014f0
 80120c4:	200010f0 	.word	0x200010f0
 80120c8:	08012d4c 	.word	0x08012d4c

080120cc <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80120cc:	2300      	movs	r3, #0
 80120ce:	4a02      	ldr	r2, [pc, #8]	; (80120d8 <UTIL_LPM_Init+0xc>)
 80120d0:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80120d2:	4a02      	ldr	r2, [pc, #8]	; (80120dc <UTIL_LPM_Init+0x10>)
 80120d4:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80120d6:	4770      	bx	lr
 80120d8:	2000170c 	.word	0x2000170c
 80120dc:	20001708 	.word	0x20001708

080120e0 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120e0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80120e4:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80120e6:	b141      	cbz	r1, 80120fa <UTIL_LPM_SetStopMode+0x1a>
 80120e8:	2901      	cmp	r1, #1
 80120ea:	d103      	bne.n	80120f4 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80120ec:	4906      	ldr	r1, [pc, #24]	; (8012108 <UTIL_LPM_SetStopMode+0x28>)
 80120ee:	680a      	ldr	r2, [r1, #0]
 80120f0:	4310      	orrs	r0, r2
 80120f2:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120f4:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80120f8:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80120fa:	4903      	ldr	r1, [pc, #12]	; (8012108 <UTIL_LPM_SetStopMode+0x28>)
 80120fc:	680a      	ldr	r2, [r1, #0]
 80120fe:	ea22 0000 	bic.w	r0, r2, r0
 8012102:	6008      	str	r0, [r1, #0]
      break;
 8012104:	e7f6      	b.n	80120f4 <UTIL_LPM_SetStopMode+0x14>
 8012106:	bf00      	nop
 8012108:	2000170c 	.word	0x2000170c

0801210c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801210c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012110:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8012112:	b141      	cbz	r1, 8012126 <UTIL_LPM_SetOffMode+0x1a>
 8012114:	2901      	cmp	r1, #1
 8012116:	d103      	bne.n	8012120 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8012118:	4906      	ldr	r1, [pc, #24]	; (8012134 <UTIL_LPM_SetOffMode+0x28>)
 801211a:	680a      	ldr	r2, [r1, #0]
 801211c:	4310      	orrs	r0, r2
 801211e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012120:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8012124:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8012126:	4903      	ldr	r1, [pc, #12]	; (8012134 <UTIL_LPM_SetOffMode+0x28>)
 8012128:	680a      	ldr	r2, [r1, #0]
 801212a:	ea22 0000 	bic.w	r0, r2, r0
 801212e:	6008      	str	r0, [r1, #0]
      break;
 8012130:	e7f6      	b.n	8012120 <UTIL_LPM_SetOffMode+0x14>
 8012132:	bf00      	nop
 8012134:	20001708 	.word	0x20001708

08012138 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8012138:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801213a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801213e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8012140:	4b0c      	ldr	r3, [pc, #48]	; (8012174 <UTIL_LPM_EnterLowPower+0x3c>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	b13b      	cbz	r3, 8012156 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8012146:	4d0c      	ldr	r5, [pc, #48]	; (8012178 <UTIL_LPM_EnterLowPower+0x40>)
 8012148:	682b      	ldr	r3, [r5, #0]
 801214a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801214c:	686b      	ldr	r3, [r5, #4]
 801214e:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012150:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8012154:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8012156:	4b09      	ldr	r3, [pc, #36]	; (801217c <UTIL_LPM_EnterLowPower+0x44>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	b12b      	cbz	r3, 8012168 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 801215c:	4d06      	ldr	r5, [pc, #24]	; (8012178 <UTIL_LPM_EnterLowPower+0x40>)
 801215e:	68ab      	ldr	r3, [r5, #8]
 8012160:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8012162:	68eb      	ldr	r3, [r5, #12]
 8012164:	4798      	blx	r3
 8012166:	e7f3      	b.n	8012150 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8012168:	4d03      	ldr	r5, [pc, #12]	; (8012178 <UTIL_LPM_EnterLowPower+0x40>)
 801216a:	692b      	ldr	r3, [r5, #16]
 801216c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801216e:	696b      	ldr	r3, [r5, #20]
 8012170:	4798      	blx	r3
 8012172:	e7ed      	b.n	8012150 <UTIL_LPM_EnterLowPower+0x18>
 8012174:	2000170c 	.word	0x2000170c
 8012178:	08012cc4 	.word	0x08012cc4
 801217c:	20001708 	.word	0x20001708

08012180 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8012180:	e004      	b.n	801218c <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 8012182:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012186:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 801218a:	461a      	mov	r2, r3
 801218c:	1e53      	subs	r3, r2, #1
 801218e:	b29b      	uxth	r3, r3
 8012190:	2a00      	cmp	r2, #0
 8012192:	d1f6      	bne.n	8012182 <UTIL_MEM_cpy_8+0x2>
    }
}
 8012194:	4770      	bx	lr

08012196 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8012196:	e002      	b.n	801219e <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8012198:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 801219c:	461a      	mov	r2, r3
 801219e:	1e53      	subs	r3, r2, #1
 80121a0:	b29b      	uxth	r3, r3
 80121a2:	2a00      	cmp	r2, #0
 80121a4:	d1f8      	bne.n	8012198 <UTIL_MEM_set_8+0x2>
  }
}
 80121a6:	4770      	bx	lr

080121a8 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121a8:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80121ac:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80121ae:	4a06      	ldr	r2, [pc, #24]	; (80121c8 <UTIL_SEQ_SetTask+0x20>)
 80121b0:	6813      	ldr	r3, [r2, #0]
 80121b2:	4303      	orrs	r3, r0
 80121b4:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80121b6:	4a05      	ldr	r2, [pc, #20]	; (80121cc <UTIL_SEQ_SetTask+0x24>)
 80121b8:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80121bc:	4318      	orrs	r0, r3
 80121be:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121c2:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80121c6:	4770      	bx	lr
 80121c8:	20001734 	.word	0x20001734
 80121cc:	2000172c 	.word	0x2000172c

080121d0 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80121d0:	4770      	bx	lr

080121d2 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80121d2:	4770      	bx	lr

080121d4 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80121d4:	0c03      	lsrs	r3, r0, #16
 80121d6:	041b      	lsls	r3, r3, #16
 80121d8:	b9b3      	cbnz	r3, 8012208 <SEQ_BitPosition+0x34>
 80121da:	0400      	lsls	r0, r0, #16
 80121dc:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80121de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80121e2:	d102      	bne.n	80121ea <SEQ_BitPosition+0x16>
 80121e4:	3308      	adds	r3, #8
 80121e6:	b2db      	uxtb	r3, r3
 80121e8:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80121ea:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80121ee:	d102      	bne.n	80121f6 <SEQ_BitPosition+0x22>
 80121f0:	3304      	adds	r3, #4
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80121f6:	0f00      	lsrs	r0, r0, #28
 80121f8:	4a04      	ldr	r2, [pc, #16]	; (801220c <SEQ_BitPosition+0x38>)
 80121fa:	5c10      	ldrb	r0, [r2, r0]
 80121fc:	4418      	add	r0, r3
 80121fe:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8012200:	f1c0 001f 	rsb	r0, r0, #31
}
 8012204:	b2c0      	uxtb	r0, r0
 8012206:	4770      	bx	lr
uint8_t n = 0U;
 8012208:	2300      	movs	r3, #0
 801220a:	e7e8      	b.n	80121de <SEQ_BitPosition+0xa>
 801220c:	08013af0 	.word	0x08013af0

08012210 <UTIL_SEQ_Run>:
{
 8012210:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 8012212:	4b43      	ldr	r3, [pc, #268]	; (8012320 <UTIL_SEQ_Run+0x110>)
 8012214:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8012216:	4020      	ands	r0, r4
 8012218:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 801221a:	4b42      	ldr	r3, [pc, #264]	; (8012324 <UTIL_SEQ_Run+0x114>)
 801221c:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 801221e:	4b42      	ldr	r3, [pc, #264]	; (8012328 <UTIL_SEQ_Run+0x118>)
 8012220:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8012222:	4a42      	ldr	r2, [pc, #264]	; (801232c <UTIL_SEQ_Run+0x11c>)
 8012224:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 8012226:	4a42      	ldr	r2, [pc, #264]	; (8012330 <UTIL_SEQ_Run+0x120>)
 8012228:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801222a:	e030      	b.n	801228e <UTIL_SEQ_Run+0x7e>
      counter++;
 801222c:	3301      	adds	r3, #1
 801222e:	e035      	b.n	801229c <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8012230:	4d40      	ldr	r5, [pc, #256]	; (8012334 <UTIL_SEQ_Run+0x124>)
 8012232:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8012236:	6868      	ldr	r0, [r5, #4]
 8012238:	4010      	ands	r0, r2
 801223a:	f7ff ffcb 	bl	80121d4 <SEQ_BitPosition>
 801223e:	493e      	ldr	r1, [pc, #248]	; (8012338 <UTIL_SEQ_Run+0x128>)
 8012240:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8012242:	686a      	ldr	r2, [r5, #4]
 8012244:	2301      	movs	r3, #1
 8012246:	fa03 f000 	lsl.w	r0, r3, r0
 801224a:	ea22 0000 	bic.w	r0, r2, r0
 801224e:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012250:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012254:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8012256:	680a      	ldr	r2, [r1, #0]
 8012258:	fa03 f202 	lsl.w	r2, r3, r2
 801225c:	ea6f 0c02 	mvn.w	ip, r2
 8012260:	4830      	ldr	r0, [pc, #192]	; (8012324 <UTIL_SEQ_Run+0x114>)
 8012262:	6801      	ldr	r1, [r0, #0]
 8012264:	ea21 0202 	bic.w	r2, r1, r2
 8012268:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801226a:	2b00      	cmp	r3, #0
 801226c:	d12d      	bne.n	80122ca <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801226e:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 8012272:	4b31      	ldr	r3, [pc, #196]	; (8012338 <UTIL_SEQ_Run+0x128>)
 8012274:	681a      	ldr	r2, [r3, #0]
 8012276:	4b31      	ldr	r3, [pc, #196]	; (801233c <UTIL_SEQ_Run+0x12c>)
 8012278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801227c:	4798      	blx	r3
    local_taskset = TaskSet;
 801227e:	4b29      	ldr	r3, [pc, #164]	; (8012324 <UTIL_SEQ_Run+0x114>)
 8012280:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 8012282:	4b29      	ldr	r3, [pc, #164]	; (8012328 <UTIL_SEQ_Run+0x118>)
 8012284:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8012286:	4a29      	ldr	r2, [pc, #164]	; (801232c <UTIL_SEQ_Run+0x11c>)
 8012288:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 801228a:	4a29      	ldr	r2, [pc, #164]	; (8012330 <UTIL_SEQ_Run+0x120>)
 801228c:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801228e:	4001      	ands	r1, r0
 8012290:	4d23      	ldr	r5, [pc, #140]	; (8012320 <UTIL_SEQ_Run+0x110>)
 8012292:	682d      	ldr	r5, [r5, #0]
 8012294:	4229      	tst	r1, r5
 8012296:	d021      	beq.n	80122dc <UTIL_SEQ_Run+0xcc>
 8012298:	4013      	ands	r3, r2
 801229a:	d11f      	bne.n	80122dc <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801229c:	4a25      	ldr	r2, [pc, #148]	; (8012334 <UTIL_SEQ_Run+0x124>)
 801229e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80122a2:	4002      	ands	r2, r0
 80122a4:	422a      	tst	r2, r5
 80122a6:	d0c1      	beq.n	801222c <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80122a8:	4922      	ldr	r1, [pc, #136]	; (8012334 <UTIL_SEQ_Run+0x124>)
 80122aa:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80122ae:	4002      	ands	r2, r0
 80122b0:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80122b2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80122b6:	6849      	ldr	r1, [r1, #4]
 80122b8:	4211      	tst	r1, r2
 80122ba:	d1b9      	bne.n	8012230 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80122bc:	491d      	ldr	r1, [pc, #116]	; (8012334 <UTIL_SEQ_Run+0x124>)
 80122be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80122c2:	f04f 30ff 	mov.w	r0, #4294967295
 80122c6:	6048      	str	r0, [r1, #4]
 80122c8:	e7b2      	b.n	8012230 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80122ca:	3b01      	subs	r3, #1
 80122cc:	4919      	ldr	r1, [pc, #100]	; (8012334 <UTIL_SEQ_Run+0x124>)
 80122ce:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80122d2:	ea0c 0202 	and.w	r2, ip, r2
 80122d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80122da:	e7c6      	b.n	801226a <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80122dc:	4b16      	ldr	r3, [pc, #88]	; (8012338 <UTIL_SEQ_Run+0x128>)
 80122de:	f04f 32ff 	mov.w	r2, #4294967295
 80122e2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80122e4:	f7ff ff74 	bl	80121d0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80122e8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80122ec:	b672      	cpsid	i
  local_taskset = TaskSet;
 80122ee:	4b0d      	ldr	r3, [pc, #52]	; (8012324 <UTIL_SEQ_Run+0x114>)
 80122f0:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 80122f2:	4a0d      	ldr	r2, [pc, #52]	; (8012328 <UTIL_SEQ_Run+0x118>)
 80122f4:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 80122f6:	4a0d      	ldr	r2, [pc, #52]	; (801232c <UTIL_SEQ_Run+0x11c>)
 80122f8:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80122fa:	4013      	ands	r3, r2
 80122fc:	4a08      	ldr	r2, [pc, #32]	; (8012320 <UTIL_SEQ_Run+0x110>)
 80122fe:	6812      	ldr	r2, [r2, #0]
 8012300:	4213      	tst	r3, r2
 8012302:	d103      	bne.n	801230c <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8012304:	4b0a      	ldr	r3, [pc, #40]	; (8012330 <UTIL_SEQ_Run+0x120>)
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	420b      	tst	r3, r1
 801230a:	d006      	beq.n	801231a <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801230c:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8012310:	f7ff ff5f 	bl	80121d2 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8012314:	4b02      	ldr	r3, [pc, #8]	; (8012320 <UTIL_SEQ_Run+0x110>)
 8012316:	601c      	str	r4, [r3, #0]
}
 8012318:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 801231a:	f7ef fb3f 	bl	800199c <UTIL_SEQ_Idle>
 801231e:	e7f5      	b.n	801230c <UTIL_SEQ_Run+0xfc>
 8012320:	20000110 	.word	0x20000110
 8012324:	20001734 	.word	0x20001734
 8012328:	20001714 	.word	0x20001714
 801232c:	20000114 	.word	0x20000114
 8012330:	20001718 	.word	0x20001718
 8012334:	2000172c 	.word	0x2000172c
 8012338:	20001710 	.word	0x20001710
 801233c:	2000171c 	.word	0x2000171c

08012340 <UTIL_SEQ_RegTask>:
{
 8012340:	b538      	push	{r3, r4, r5, lr}
 8012342:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012344:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012348:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801234a:	f7ff ff43 	bl	80121d4 <SEQ_BitPosition>
 801234e:	4b03      	ldr	r3, [pc, #12]	; (801235c <UTIL_SEQ_RegTask+0x1c>)
 8012350:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012354:	f385 8810 	msr	PRIMASK, r5
}
 8012358:	bd38      	pop	{r3, r4, r5, pc}
 801235a:	bf00      	nop
 801235c:	2000171c 	.word	0x2000171c

08012360 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8012360:	b082      	sub	sp, #8
 8012362:	b082      	sub	sp, #8
 8012364:	f10d 0c08 	add.w	ip, sp, #8
 8012368:	e90c 0006 	stmdb	ip, {r1, r2}
 801236c:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801236e:	2200      	movs	r2, #0
 8012370:	6002      	str	r2, [r0, #0]
 8012372:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 8012374:	440b      	add	r3, r1
 8012376:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8012378:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801237c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8012380:	440a      	add	r2, r1
 8012382:	b291      	uxth	r1, r2
 8012384:	b212      	sxth	r2, r2
 8012386:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8012388:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 801238c:	db04      	blt.n	8012398 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 801238e:	3301      	adds	r3, #1
 8012390:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 8012392:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8012396:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8012398:	b002      	add	sp, #8
 801239a:	b002      	add	sp, #8
 801239c:	4770      	bx	lr

0801239e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801239e:	b082      	sub	sp, #8
 80123a0:	b082      	sub	sp, #8
 80123a2:	f10d 0c08 	add.w	ip, sp, #8
 80123a6:	e90c 0006 	stmdb	ip, {r1, r2}
 80123aa:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80123ac:	2200      	movs	r2, #0
 80123ae:	6002      	str	r2, [r0, #0]
 80123b0:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 80123b2:	1acb      	subs	r3, r1, r3
 80123b4:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80123b6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80123ba:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80123be:	1a52      	subs	r2, r2, r1
 80123c0:	b291      	uxth	r1, r2
 80123c2:	b212      	sxth	r2, r2
 80123c4:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 80123c6:	2a00      	cmp	r2, #0
 80123c8:	db02      	blt.n	80123d0 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 80123ca:	b002      	add	sp, #8
 80123cc:	b002      	add	sp, #8
 80123ce:	4770      	bx	lr
    c.Seconds--;
 80123d0:	3b01      	subs	r3, #1
 80123d2:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 80123d4:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80123d8:	8081      	strh	r1, [r0, #4]
  return c;
 80123da:	e7f6      	b.n	80123ca <SysTimeSub+0x2c>

080123dc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 80123dc:	b530      	push	{r4, r5, lr}
 80123de:	b089      	sub	sp, #36	; 0x24
 80123e0:	ac02      	add	r4, sp, #8
 80123e2:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80123e6:	2300      	movs	r3, #0
 80123e8:	9304      	str	r3, [sp, #16]
 80123ea:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80123ee:	4d0b      	ldr	r5, [pc, #44]	; (801241c <SysTimeSet+0x40>)
 80123f0:	692b      	ldr	r3, [r5, #16]
 80123f2:	a805      	add	r0, sp, #20
 80123f4:	4798      	blx	r3
 80123f6:	4603      	mov	r3, r0
 80123f8:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 80123fa:	9a05      	ldr	r2, [sp, #20]
 80123fc:	9200      	str	r2, [sp, #0]
 80123fe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012402:	a806      	add	r0, sp, #24
 8012404:	f7ff ffcb 	bl	801239e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8012408:	682b      	ldr	r3, [r5, #0]
 801240a:	9806      	ldr	r0, [sp, #24]
 801240c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801240e:	68ab      	ldr	r3, [r5, #8]
 8012410:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012414:	4798      	blx	r3
}
 8012416:	b009      	add	sp, #36	; 0x24
 8012418:	bd30      	pop	{r4, r5, pc}
 801241a:	bf00      	nop
 801241c:	08012d0c 	.word	0x08012d0c

08012420 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8012420:	b530      	push	{r4, r5, lr}
 8012422:	b087      	sub	sp, #28
 8012424:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8012426:	2300      	movs	r3, #0
 8012428:	9304      	str	r3, [sp, #16]
 801242a:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801242e:	6003      	str	r3, [r0, #0]
 8012430:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012432:	4d0b      	ldr	r5, [pc, #44]	; (8012460 <SysTimeGet+0x40>)
 8012434:	692b      	ldr	r3, [r5, #16]
 8012436:	a805      	add	r0, sp, #20
 8012438:	4798      	blx	r3
 801243a:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801243c:	68eb      	ldr	r3, [r5, #12]
 801243e:	4798      	blx	r3
 8012440:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012444:	686b      	ldr	r3, [r5, #4]
 8012446:	4798      	blx	r3
 8012448:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801244a:	9b05      	ldr	r3, [sp, #20]
 801244c:	9300      	str	r3, [sp, #0]
 801244e:	9b04      	ldr	r3, [sp, #16]
 8012450:	aa02      	add	r2, sp, #8
 8012452:	ca06      	ldmia	r2, {r1, r2}
 8012454:	4620      	mov	r0, r4
 8012456:	f7ff ff83 	bl	8012360 <SysTimeAdd>

  return sysTime;
}
 801245a:	4620      	mov	r0, r4
 801245c:	b007      	add	sp, #28
 801245e:	bd30      	pop	{r4, r5, pc}
 8012460:	08012d0c 	.word	0x08012d0c

08012464 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8012464:	b530      	push	{r4, r5, lr}
 8012466:	b083      	sub	sp, #12
 8012468:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801246a:	2300      	movs	r3, #0
 801246c:	9300      	str	r3, [sp, #0]
 801246e:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8012472:	4b06      	ldr	r3, [pc, #24]	; (801248c <SysTimeGetMcuTime+0x28>)
 8012474:	691b      	ldr	r3, [r3, #16]
 8012476:	466d      	mov	r5, sp
 8012478:	a801      	add	r0, sp, #4
 801247a:	4798      	blx	r3
 801247c:	9000      	str	r0, [sp, #0]

  return calendarTime;
 801247e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012482:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8012486:	4620      	mov	r0, r4
 8012488:	b003      	add	sp, #12
 801248a:	bd30      	pop	{r4, r5, pc}
 801248c:	08012d0c 	.word	0x08012d0c

08012490 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8012490:	b530      	push	{r4, r5, lr}
 8012492:	b089      	sub	sp, #36	; 0x24
 8012494:	ac02      	add	r4, sp, #8
 8012496:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801249a:	4d0c      	ldr	r5, [pc, #48]	; (80124cc <SysTimeToMs+0x3c>)
 801249c:	68eb      	ldr	r3, [r5, #12]
 801249e:	4798      	blx	r3
 80124a0:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80124a4:	686b      	ldr	r3, [r5, #4]
 80124a6:	4798      	blx	r3
 80124a8:	4603      	mov	r3, r0
 80124aa:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 80124ac:	9a07      	ldr	r2, [sp, #28]
 80124ae:	9200      	str	r2, [sp, #0]
 80124b0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80124b4:	a804      	add	r0, sp, #16
 80124b6:	f7ff ff72 	bl	801239e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80124ba:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 80124be:	9a04      	ldr	r2, [sp, #16]
 80124c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80124c4:	fb00 3002 	mla	r0, r0, r2, r3
 80124c8:	b009      	add	sp, #36	; 0x24
 80124ca:	bd30      	pop	{r4, r5, pc}
 80124cc:	08012d0c 	.word	0x08012d0c

080124d0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 80124d0:	b530      	push	{r4, r5, lr}
 80124d2:	b087      	sub	sp, #28
 80124d4:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 80124d6:	4b12      	ldr	r3, [pc, #72]	; (8012520 <SysTimeFromMs+0x50>)
 80124d8:	fba3 2301 	umull	r2, r3, r3, r1
 80124dc:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 80124de:	9304      	str	r3, [sp, #16]
 80124e0:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80124e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80124e8:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 80124ec:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 80124f0:	2300      	movs	r3, #0
 80124f2:	9302      	str	r3, [sp, #8]
 80124f4:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80124f6:	4d0b      	ldr	r5, [pc, #44]	; (8012524 <SysTimeFromMs+0x54>)
 80124f8:	68eb      	ldr	r3, [r5, #12]
 80124fa:	4798      	blx	r3
 80124fc:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8012500:	686b      	ldr	r3, [r5, #4]
 8012502:	4798      	blx	r3
 8012504:	4603      	mov	r3, r0
 8012506:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8012508:	9a03      	ldr	r2, [sp, #12]
 801250a:	9200      	str	r2, [sp, #0]
 801250c:	aa06      	add	r2, sp, #24
 801250e:	e912 0006 	ldmdb	r2, {r1, r2}
 8012512:	4620      	mov	r0, r4
 8012514:	f7ff ff24 	bl	8012360 <SysTimeAdd>
}
 8012518:	4620      	mov	r0, r4
 801251a:	b007      	add	sp, #28
 801251c:	bd30      	pop	{r4, r5, pc}
 801251e:	bf00      	nop
 8012520:	10624dd3 	.word	0x10624dd3
 8012524:	08012d0c 	.word	0x08012d0c

08012528 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8012528:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801252a:	4b03      	ldr	r3, [pc, #12]	; (8012538 <UTIL_TIMER_Init+0x10>)
 801252c:	2200      	movs	r2, #0
 801252e:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8012530:	4b02      	ldr	r3, [pc, #8]	; (801253c <UTIL_TIMER_Init+0x14>)
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	4798      	blx	r3
}
 8012536:	bd08      	pop	{r3, pc}
 8012538:	20001738 	.word	0x20001738
 801253c:	08012d20 	.word	0x08012d20

08012540 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8012540:	b1a8      	cbz	r0, 801256e <UTIL_TIMER_Create+0x2e>
{
 8012542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012544:	4617      	mov	r7, r2
 8012546:	461e      	mov	r6, r3
 8012548:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 801254a:	b193      	cbz	r3, 8012572 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 801254c:	2500      	movs	r5, #0
 801254e:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8012550:	4b09      	ldr	r3, [pc, #36]	; (8012578 <UTIL_TIMER_Create+0x38>)
 8012552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012554:	4608      	mov	r0, r1
 8012556:	4798      	blx	r3
 8012558:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 801255a:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 801255c:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801255e:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8012560:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8012562:	9b06      	ldr	r3, [sp, #24]
 8012564:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8012566:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8012568:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 801256a:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 801256c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 801256e:	2001      	movs	r0, #1
}
 8012570:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8012572:	2001      	movs	r0, #1
 8012574:	e7fa      	b.n	801256c <UTIL_TIMER_Create+0x2c>
 8012576:	bf00      	nop
 8012578:	08012d20 	.word	0x08012d20

0801257c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801257c:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801257e:	4c03      	ldr	r4, [pc, #12]	; (801258c <UTIL_TIMER_GetCurrentTime+0x10>)
 8012580:	69e3      	ldr	r3, [r4, #28]
 8012582:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8012584:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012586:	4798      	blx	r3
}
 8012588:	bd10      	pop	{r4, pc}
 801258a:	bf00      	nop
 801258c:	08012d20 	.word	0x08012d20

08012590 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8012590:	b570      	push	{r4, r5, r6, lr}
 8012592:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8012594:	4d05      	ldr	r5, [pc, #20]	; (80125ac <UTIL_TIMER_GetElapsedTime+0x1c>)
 8012596:	69eb      	ldr	r3, [r5, #28]
 8012598:	4798      	blx	r3
 801259a:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801259c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801259e:	4630      	mov	r0, r6
 80125a0:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80125a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80125a4:	1a20      	subs	r0, r4, r0
 80125a6:	4798      	blx	r3
}
 80125a8:	bd70      	pop	{r4, r5, r6, pc}
 80125aa:	bf00      	nop
 80125ac:	08012d20 	.word	0x08012d20

080125b0 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80125b0:	4b05      	ldr	r3, [pc, #20]	; (80125c8 <TimerExists+0x18>)
 80125b2:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80125b4:	e000      	b.n	80125b8 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 80125b6:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 80125b8:	b11b      	cbz	r3, 80125c2 <TimerExists+0x12>
    if( cur == TimerObject )
 80125ba:	4283      	cmp	r3, r0
 80125bc:	d1fb      	bne.n	80125b6 <TimerExists+0x6>
      return true;
 80125be:	2001      	movs	r0, #1
  }
  return false;
}
 80125c0:	4770      	bx	lr
  return false;
 80125c2:	2000      	movs	r0, #0
 80125c4:	4770      	bx	lr
 80125c6:	bf00      	nop
 80125c8:	20001738 	.word	0x20001738

080125cc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 80125cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ce:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 80125d0:	4e09      	ldr	r6, [pc, #36]	; (80125f8 <TimerSetTimeout+0x2c>)
 80125d2:	6a33      	ldr	r3, [r6, #32]
 80125d4:	4798      	blx	r3
 80125d6:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 80125d8:	2301      	movs	r3, #1
 80125da:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 80125dc:	6827      	ldr	r7, [r4, #0]
 80125de:	69b6      	ldr	r6, [r6, #24]
 80125e0:	47b0      	blx	r6
 80125e2:	4428      	add	r0, r5
 80125e4:	4287      	cmp	r7, r0
 80125e6:	d202      	bcs.n	80125ee <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80125e8:	47b0      	blx	r6
 80125ea:	4405      	add	r5, r0
 80125ec:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80125ee:	4b02      	ldr	r3, [pc, #8]	; (80125f8 <TimerSetTimeout+0x2c>)
 80125f0:	689b      	ldr	r3, [r3, #8]
 80125f2:	6820      	ldr	r0, [r4, #0]
 80125f4:	4798      	blx	r3
}
 80125f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125f8:	08012d20 	.word	0x08012d20

080125fc <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 80125fc:	b368      	cbz	r0, 801265a <UTIL_TIMER_Stop+0x5e>
{
 80125fe:	b510      	push	{r4, lr}
 8012600:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012602:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012606:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8012608:	4b15      	ldr	r3, [pc, #84]	; (8012660 <UTIL_TIMER_Stop+0x64>)
 801260a:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 801260c:	2301      	movs	r3, #1
 801260e:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8012610:	b1e1      	cbz	r1, 801264c <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8012612:	2300      	movs	r3, #0
 8012614:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8012616:	4288      	cmp	r0, r1
 8012618:	d006      	beq.n	8012628 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801261a:	460b      	mov	r3, r1
        while( cur != NULL )
 801261c:	b1b3      	cbz	r3, 801264c <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 801261e:	4293      	cmp	r3, r2
 8012620:	d011      	beq.n	8012646 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8012622:	4619      	mov	r1, r3
            cur = cur->Next;
 8012624:	695b      	ldr	r3, [r3, #20]
 8012626:	e7f9      	b.n	801261c <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8012628:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 801262a:	6948      	ldr	r0, [r1, #20]
 801262c:	b120      	cbz	r0, 8012638 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 801262e:	4b0c      	ldr	r3, [pc, #48]	; (8012660 <UTIL_TIMER_Stop+0x64>)
 8012630:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8012632:	f7ff ffcb 	bl	80125cc <TimerSetTimeout>
 8012636:	e009      	b.n	801264c <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8012638:	4b0a      	ldr	r3, [pc, #40]	; (8012664 <UTIL_TIMER_Stop+0x68>)
 801263a:	68db      	ldr	r3, [r3, #12]
 801263c:	4798      	blx	r3
            TimerListHead = NULL;
 801263e:	4b08      	ldr	r3, [pc, #32]	; (8012660 <UTIL_TIMER_Stop+0x64>)
 8012640:	2200      	movs	r2, #0
 8012642:	601a      	str	r2, [r3, #0]
 8012644:	e002      	b.n	801264c <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8012646:	695b      	ldr	r3, [r3, #20]
 8012648:	b123      	cbz	r3, 8012654 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 801264a:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801264c:	f384 8810 	msr	PRIMASK, r4
}
 8012650:	2000      	movs	r0, #0
}
 8012652:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8012654:	2300      	movs	r3, #0
 8012656:	614b      	str	r3, [r1, #20]
 8012658:	e7f8      	b.n	801264c <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 801265a:	2001      	movs	r0, #1
}
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop
 8012660:	20001738 	.word	0x20001738
 8012664:	08012d20 	.word	0x08012d20

08012668 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8012668:	4b09      	ldr	r3, [pc, #36]	; (8012690 <TimerInsertTimer+0x28>)
 801266a:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801266c:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 801266e:	e001      	b.n	8012674 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8012670:	461a      	mov	r2, r3
        next = next->Next;
 8012672:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8012674:	6951      	ldr	r1, [r2, #20]
 8012676:	b139      	cbz	r1, 8012688 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8012678:	6819      	ldr	r1, [r3, #0]
 801267a:	f8d0 c000 	ldr.w	ip, [r0]
 801267e:	458c      	cmp	ip, r1
 8012680:	d8f6      	bhi.n	8012670 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8012682:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8012684:	6143      	str	r3, [r0, #20]
        return;
 8012686:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8012688:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 801268a:	2300      	movs	r3, #0
 801268c:	6143      	str	r3, [r0, #20]
}
 801268e:	4770      	bx	lr
 8012690:	20001738 	.word	0x20001738

08012694 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8012694:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8012696:	4b05      	ldr	r3, [pc, #20]	; (80126ac <TimerInsertNewHeadTimer+0x18>)
 8012698:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 801269a:	b10b      	cbz	r3, 80126a0 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 801269c:	2200      	movs	r2, #0
 801269e:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80126a0:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 80126a2:	4b02      	ldr	r3, [pc, #8]	; (80126ac <TimerInsertNewHeadTimer+0x18>)
 80126a4:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80126a6:	f7ff ff91 	bl	80125cc <TimerSetTimeout>
}
 80126aa:	bd08      	pop	{r3, pc}
 80126ac:	20001738 	.word	0x20001738

080126b0 <UTIL_TIMER_Start>:
{
 80126b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 80126b2:	2800      	cmp	r0, #0
 80126b4:	d036      	beq.n	8012724 <UTIL_TIMER_Start+0x74>
 80126b6:	4604      	mov	r4, r0
 80126b8:	f7ff ff7a 	bl	80125b0 <TimerExists>
 80126bc:	2800      	cmp	r0, #0
 80126be:	d134      	bne.n	801272a <UTIL_TIMER_Start+0x7a>
 80126c0:	7a65      	ldrb	r5, [r4, #9]
 80126c2:	2d00      	cmp	r5, #0
 80126c4:	d133      	bne.n	801272e <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126c6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80126ca:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 80126cc:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80126ce:	4b19      	ldr	r3, [pc, #100]	; (8012734 <UTIL_TIMER_Start+0x84>)
 80126d0:	6a1b      	ldr	r3, [r3, #32]
 80126d2:	4798      	blx	r3
    if( ticks < minValue )
 80126d4:	4287      	cmp	r7, r0
 80126d6:	d300      	bcc.n	80126da <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 80126d8:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 80126da:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 80126dc:	2300      	movs	r3, #0
 80126de:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 80126e0:	2201      	movs	r2, #1
 80126e2:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80126e4:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 80126e6:	4b14      	ldr	r3, [pc, #80]	; (8012738 <UTIL_TIMER_Start+0x88>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	b183      	cbz	r3, 801270e <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80126ec:	4b11      	ldr	r3, [pc, #68]	; (8012734 <UTIL_TIMER_Start+0x84>)
 80126ee:	699b      	ldr	r3, [r3, #24]
 80126f0:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 80126f2:	6823      	ldr	r3, [r4, #0]
 80126f4:	4418      	add	r0, r3
 80126f6:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80126f8:	4b0f      	ldr	r3, [pc, #60]	; (8012738 <UTIL_TIMER_Start+0x88>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	4298      	cmp	r0, r3
 8012700:	d20c      	bcs.n	801271c <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8012702:	4620      	mov	r0, r4
 8012704:	f7ff ffc6 	bl	8012694 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012708:	f386 8810 	msr	PRIMASK, r6
}
 801270c:	e00b      	b.n	8012726 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 801270e:	4b09      	ldr	r3, [pc, #36]	; (8012734 <UTIL_TIMER_Start+0x84>)
 8012710:	691b      	ldr	r3, [r3, #16]
 8012712:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8012714:	4620      	mov	r0, r4
 8012716:	f7ff ffbd 	bl	8012694 <TimerInsertNewHeadTimer>
 801271a:	e7f5      	b.n	8012708 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 801271c:	4620      	mov	r0, r4
 801271e:	f7ff ffa3 	bl	8012668 <TimerInsertTimer>
 8012722:	e7f1      	b.n	8012708 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8012724:	2501      	movs	r5, #1
}
 8012726:	4628      	mov	r0, r5
 8012728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 801272a:	2501      	movs	r5, #1
 801272c:	e7fb      	b.n	8012726 <UTIL_TIMER_Start+0x76>
 801272e:	2501      	movs	r5, #1
 8012730:	e7f9      	b.n	8012726 <UTIL_TIMER_Start+0x76>
 8012732:	bf00      	nop
 8012734:	08012d20 	.word	0x08012d20
 8012738:	20001738 	.word	0x20001738

0801273c <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 801273c:	b198      	cbz	r0, 8012766 <UTIL_TIMER_SetPeriod+0x2a>
{
 801273e:	b510      	push	{r4, lr}
 8012740:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8012742:	4b0a      	ldr	r3, [pc, #40]	; (801276c <UTIL_TIMER_SetPeriod+0x30>)
 8012744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012746:	4608      	mov	r0, r1
 8012748:	4798      	blx	r3
 801274a:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 801274c:	4620      	mov	r0, r4
 801274e:	f7ff ff2f 	bl	80125b0 <TimerExists>
 8012752:	b908      	cbnz	r0, 8012758 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8012754:	2000      	movs	r0, #0
}
 8012756:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8012758:	4620      	mov	r0, r4
 801275a:	f7ff ff4f 	bl	80125fc <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801275e:	4620      	mov	r0, r4
 8012760:	f7ff ffa6 	bl	80126b0 <UTIL_TIMER_Start>
 8012764:	e7f7      	b.n	8012756 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8012766:	2001      	movs	r0, #1
}
 8012768:	4770      	bx	lr
 801276a:	bf00      	nop
 801276c:	08012d20 	.word	0x08012d20

08012770 <UTIL_TIMER_IRQ_Handler>:
{
 8012770:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012772:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012776:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8012778:	4c1e      	ldr	r4, [pc, #120]	; (80127f4 <UTIL_TIMER_IRQ_Handler+0x84>)
 801277a:	6963      	ldr	r3, [r4, #20]
 801277c:	4798      	blx	r3
 801277e:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8012780:	6923      	ldr	r3, [r4, #16]
 8012782:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8012784:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8012786:	4b1c      	ldr	r3, [pc, #112]	; (80127f8 <UTIL_TIMER_IRQ_Handler+0x88>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	b923      	cbnz	r3, 8012796 <UTIL_TIMER_IRQ_Handler+0x26>
 801278c:	e018      	b.n	80127c0 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 801278e:	2200      	movs	r2, #0
 8012790:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8012792:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8012794:	b1a3      	cbz	r3, 80127c0 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8012796:	681a      	ldr	r2, [r3, #0]
 8012798:	42a2      	cmp	r2, r4
 801279a:	d9f8      	bls.n	801278e <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 801279c:	1a31      	subs	r1, r6, r0
 801279e:	440a      	add	r2, r1
 80127a0:	601a      	str	r2, [r3, #0]
 80127a2:	e7f6      	b.n	8012792 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 80127a4:	4b14      	ldr	r3, [pc, #80]	; (80127f8 <UTIL_TIMER_IRQ_Handler+0x88>)
 80127a6:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 80127a8:	6962      	ldr	r2, [r4, #20]
 80127aa:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 80127ac:	2300      	movs	r3, #0
 80127ae:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 80127b0:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 80127b2:	68e3      	ldr	r3, [r4, #12]
 80127b4:	6920      	ldr	r0, [r4, #16]
 80127b6:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80127b8:	8963      	ldrh	r3, [r4, #10]
 80127ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127be:	d012      	beq.n	80127e6 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80127c0:	4b0d      	ldr	r3, [pc, #52]	; (80127f8 <UTIL_TIMER_IRQ_Handler+0x88>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	b13b      	cbz	r3, 80127d6 <UTIL_TIMER_IRQ_Handler+0x66>
 80127c6:	681c      	ldr	r4, [r3, #0]
 80127c8:	2c00      	cmp	r4, #0
 80127ca:	d0eb      	beq.n	80127a4 <UTIL_TIMER_IRQ_Handler+0x34>
 80127cc:	4b09      	ldr	r3, [pc, #36]	; (80127f4 <UTIL_TIMER_IRQ_Handler+0x84>)
 80127ce:	699b      	ldr	r3, [r3, #24]
 80127d0:	4798      	blx	r3
 80127d2:	4284      	cmp	r4, r0
 80127d4:	d3e6      	bcc.n	80127a4 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80127d6:	4b08      	ldr	r3, [pc, #32]	; (80127f8 <UTIL_TIMER_IRQ_Handler+0x88>)
 80127d8:	6818      	ldr	r0, [r3, #0]
 80127da:	b108      	cbz	r0, 80127e0 <UTIL_TIMER_IRQ_Handler+0x70>
 80127dc:	7a03      	ldrb	r3, [r0, #8]
 80127de:	b133      	cbz	r3, 80127ee <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127e0:	f385 8810 	msr	PRIMASK, r5
}
 80127e4:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 80127e6:	4620      	mov	r0, r4
 80127e8:	f7ff ff62 	bl	80126b0 <UTIL_TIMER_Start>
 80127ec:	e7e8      	b.n	80127c0 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 80127ee:	f7ff feed 	bl	80125cc <TimerSetTimeout>
 80127f2:	e7f5      	b.n	80127e0 <UTIL_TIMER_IRQ_Handler+0x70>
 80127f4:	08012d20 	.word	0x08012d20
 80127f8:	20001738 	.word	0x20001738

080127fc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80127fc:	4601      	mov	r1, r0
  int i = 0;
 80127fe:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8012800:	e007      	b.n	8012812 <ee_skip_atoi+0x16>
 8012802:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8012806:	1c53      	adds	r3, r2, #1
 8012808:	600b      	str	r3, [r1, #0]
 801280a:	7813      	ldrb	r3, [r2, #0]
 801280c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012810:	3830      	subs	r0, #48	; 0x30
 8012812:	680a      	ldr	r2, [r1, #0]
 8012814:	7813      	ldrb	r3, [r2, #0]
 8012816:	3b30      	subs	r3, #48	; 0x30
 8012818:	b2db      	uxtb	r3, r3
 801281a:	2b09      	cmp	r3, #9
 801281c:	d9f1      	bls.n	8012802 <ee_skip_atoi+0x6>
  return i;
}
 801281e:	4770      	bx	lr

08012820 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8012820:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8012824:	b093      	sub	sp, #76	; 0x4c
 8012826:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012828:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801282a:	f016 0f40 	tst.w	r6, #64	; 0x40
 801282e:	d110      	bne.n	8012852 <ee_number+0x32>
  char *dig = lower_digits;
 8012830:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 801292c <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8012834:	1e9f      	subs	r7, r3, #2
 8012836:	2f22      	cmp	r7, #34	; 0x22
 8012838:	d875      	bhi.n	8012926 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 801283a:	f016 0401 	ands.w	r4, r6, #1
 801283e:	d00b      	beq.n	8012858 <ee_number+0x38>
 8012840:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8012844:	f016 0f02 	tst.w	r6, #2
 8012848:	d00f      	beq.n	801286a <ee_number+0x4a>
  {
    if (num < 0)
 801284a:	2a00      	cmp	r2, #0
 801284c:	db07      	blt.n	801285e <ee_number+0x3e>
  sign = 0;
 801284e:	2700      	movs	r7, #0
 8012850:	e00c      	b.n	801286c <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8012852:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8012930 <ee_number+0x110>
 8012856:	e7ed      	b.n	8012834 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8012858:	f04f 0e20 	mov.w	lr, #32
 801285c:	e7f2      	b.n	8012844 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 801285e:	4252      	negs	r2, r2
      size--;
 8012860:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8012862:	3e01      	subs	r6, #1
 8012864:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8012866:	272d      	movs	r7, #45	; 0x2d
 8012868:	e000      	b.n	801286c <ee_number+0x4c>
  sign = 0;
 801286a:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 801286c:	bb5a      	cbnz	r2, 80128c6 <ee_number+0xa6>
    tmp[i++] = '0';
 801286e:	2330      	movs	r3, #48	; 0x30
 8012870:	f88d 3004 	strb.w	r3, [sp, #4]
 8012874:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8012878:	45ac      	cmp	ip, r5
 801287a:	dd00      	ble.n	801287e <ee_number+0x5e>
 801287c:	4665      	mov	r5, ip
  size -= precision;
 801287e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012880:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8012882:	b31c      	cbz	r4, 80128cc <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8012884:	b11f      	cbz	r7, 801288e <ee_number+0x6e>
 8012886:	f800 7b01 	strb.w	r7, [r0], #1
 801288a:	3901      	subs	r1, #1
 801288c:	d007      	beq.n	801289e <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801288e:	2b00      	cmp	r3, #0
 8012890:	f103 33ff 	add.w	r3, r3, #4294967295
 8012894:	dd24      	ble.n	80128e0 <ee_number+0xc0>
 8012896:	f800 eb01 	strb.w	lr, [r0], #1
 801289a:	3901      	subs	r1, #1
 801289c:	d1f7      	bne.n	801288e <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 801289e:	b013      	add	sp, #76	; 0x4c
 80128a0:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80128a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80128a8:	fb03 2216 	mls	r2, r3, r6, r2
 80128ac:	f81a 8002 	ldrb.w	r8, [sl, r2]
 80128b0:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 80128b4:	446a      	add	r2, sp
 80128b6:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 80128ba:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80128bc:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 80128c0:	2a00      	cmp	r2, #0
 80128c2:	d1ef      	bne.n	80128a4 <ee_number+0x84>
 80128c4:	e7d8      	b.n	8012878 <ee_number+0x58>
  i = 0;
 80128c6:	f04f 0c00 	mov.w	ip, #0
 80128ca:	e7f9      	b.n	80128c0 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80128d2:	ddd7      	ble.n	8012884 <ee_number+0x64>
 80128d4:	2220      	movs	r2, #32
 80128d6:	f800 2b01 	strb.w	r2, [r0], #1
 80128da:	3901      	subs	r1, #1
 80128dc:	d1f6      	bne.n	80128cc <ee_number+0xac>
 80128de:	e7de      	b.n	801289e <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 80128e0:	4565      	cmp	r5, ip
 80128e2:	f105 35ff 	add.w	r5, r5, #4294967295
 80128e6:	dd05      	ble.n	80128f4 <ee_number+0xd4>
 80128e8:	2230      	movs	r2, #48	; 0x30
 80128ea:	f800 2b01 	strb.w	r2, [r0], #1
 80128ee:	3901      	subs	r1, #1
 80128f0:	d1f6      	bne.n	80128e0 <ee_number+0xc0>
 80128f2:	e7d4      	b.n	801289e <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80128f4:	4662      	mov	r2, ip
 80128f6:	2a00      	cmp	r2, #0
 80128f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80128fc:	dd09      	ble.n	8012912 <ee_number+0xf2>
 80128fe:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8012902:	446a      	add	r2, sp
 8012904:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8012908:	f800 2b01 	strb.w	r2, [r0], #1
 801290c:	3901      	subs	r1, #1
 801290e:	d1f1      	bne.n	80128f4 <ee_number+0xd4>
 8012910:	e7c5      	b.n	801289e <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8012912:	2b00      	cmp	r3, #0
 8012914:	f103 33ff 	add.w	r3, r3, #4294967295
 8012918:	ddc1      	ble.n	801289e <ee_number+0x7e>
 801291a:	2220      	movs	r2, #32
 801291c:	f800 2b01 	strb.w	r2, [r0], #1
 8012920:	3901      	subs	r1, #1
 8012922:	d1f6      	bne.n	8012912 <ee_number+0xf2>
 8012924:	e7bb      	b.n	801289e <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8012926:	2000      	movs	r0, #0
 8012928:	e7b9      	b.n	801289e <ee_number+0x7e>
 801292a:	bf00      	nop
 801292c:	08013b28 	.word	0x08013b28
 8012930:	08013b00 	.word	0x08013b00

08012934 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8012934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012938:	b087      	sub	sp, #28
 801293a:	9205      	str	r2, [sp, #20]
 801293c:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801293e:	1e0f      	subs	r7, r1, #0
 8012940:	f340 80b8 	ble.w	8012ab4 <tiny_vsnprintf_like+0x180>
 8012944:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8012946:	4604      	mov	r4, r0
 8012948:	e004      	b.n	8012954 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 801294a:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801294e:	9b05      	ldr	r3, [sp, #20]
 8012950:	3301      	adds	r3, #1
 8012952:	9305      	str	r3, [sp, #20]
 8012954:	9905      	ldr	r1, [sp, #20]
 8012956:	780a      	ldrb	r2, [r1, #0]
 8012958:	b922      	cbnz	r2, 8012964 <tiny_vsnprintf_like+0x30>
 801295a:	1ba3      	subs	r3, r4, r6
 801295c:	1e78      	subs	r0, r7, #1
 801295e:	4283      	cmp	r3, r0
 8012960:	f2c0 80a2 	blt.w	8012aa8 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8012964:	1ba3      	subs	r3, r4, r6
 8012966:	f107 38ff 	add.w	r8, r7, #4294967295
 801296a:	4543      	cmp	r3, r8
 801296c:	f280 809c 	bge.w	8012aa8 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8012970:	2a25      	cmp	r2, #37	; 0x25
 8012972:	d1ea      	bne.n	801294a <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8012974:	1c4b      	adds	r3, r1, #1
 8012976:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8012978:	784b      	ldrb	r3, [r1, #1]
 801297a:	2b30      	cmp	r3, #48	; 0x30
 801297c:	d020      	beq.n	80129c0 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 801297e:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8012982:	3b30      	subs	r3, #48	; 0x30
 8012984:	b2db      	uxtb	r3, r3
 8012986:	2b09      	cmp	r3, #9
 8012988:	d91d      	bls.n	80129c6 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 801298a:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 801298e:	9b05      	ldr	r3, [sp, #20]
 8012990:	781a      	ldrb	r2, [r3, #0]
 8012992:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8012996:	2b20      	cmp	r3, #32
 8012998:	d867      	bhi.n	8012a6a <tiny_vsnprintf_like+0x136>
 801299a:	e8df f003 	tbb	[pc, r3]
 801299e:	664a      	.short	0x664a
 80129a0:	66666666 	.word	0x66666666
 80129a4:	66666666 	.word	0x66666666
 80129a8:	66621e66 	.word	0x66621e66
 80129ac:	62666666 	.word	0x62666666
 80129b0:	66666666 	.word	0x66666666
 80129b4:	66666666 	.word	0x66666666
 80129b8:	19662866 	.word	0x19662866
 80129bc:	6666      	.short	0x6666
 80129be:	7c          	.byte	0x7c
 80129bf:	00          	.byte	0x00
      flags |= ZEROPAD;
 80129c0:	f04f 0901 	mov.w	r9, #1
 80129c4:	e7dd      	b.n	8012982 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 80129c6:	a805      	add	r0, sp, #20
 80129c8:	f7ff ff18 	bl	80127fc <ee_skip_atoi>
 80129cc:	4605      	mov	r5, r0
 80129ce:	e7de      	b.n	801298e <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 80129d0:	230a      	movs	r3, #10
 80129d2:	e031      	b.n	8012a38 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 80129d4:	2320      	movs	r3, #32
 80129d6:	f804 3b01 	strb.w	r3, [r4], #1
 80129da:	3d01      	subs	r5, #1
 80129dc:	2d00      	cmp	r5, #0
 80129de:	dcf9      	bgt.n	80129d4 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 80129e0:	9b04      	ldr	r3, [sp, #16]
 80129e2:	1d1a      	adds	r2, r3, #4
 80129e4:	9204      	str	r2, [sp, #16]
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 80129ec:	e7af      	b.n	801294e <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 80129ee:	9b04      	ldr	r3, [sp, #16]
 80129f0:	1d1a      	adds	r2, r3, #4
 80129f2:	9204      	str	r2, [sp, #16]
 80129f4:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 80129f8:	f1b8 0f00 	cmp.w	r8, #0
 80129fc:	d003      	beq.n	8012a06 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 80129fe:	4640      	mov	r0, r8
 8012a00:	f7ed fbba 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8012a04:	e006      	b.n	8012a14 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8012a06:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8012ab8 <tiny_vsnprintf_like+0x184>
 8012a0a:	e7f8      	b.n	80129fe <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8012a0c:	2220      	movs	r2, #32
 8012a0e:	f804 2b01 	strb.w	r2, [r4], #1
 8012a12:	461d      	mov	r5, r3
 8012a14:	1e6b      	subs	r3, r5, #1
 8012a16:	4285      	cmp	r5, r0
 8012a18:	dcf8      	bgt.n	8012a0c <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	e006      	b.n	8012a2c <tiny_vsnprintf_like+0xf8>
 8012a1e:	4643      	mov	r3, r8
 8012a20:	f813 1b01 	ldrb.w	r1, [r3], #1
 8012a24:	f804 1b01 	strb.w	r1, [r4], #1
 8012a28:	3201      	adds	r2, #1
 8012a2a:	4698      	mov	r8, r3
 8012a2c:	4282      	cmp	r2, r0
 8012a2e:	dbf6      	blt.n	8012a1e <tiny_vsnprintf_like+0xea>
 8012a30:	e78d      	b.n	801294e <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8012a32:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8012a36:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8012a38:	f019 0f02 	tst.w	r9, #2
 8012a3c:	d02f      	beq.n	8012a9e <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8012a3e:	9a04      	ldr	r2, [sp, #16]
 8012a40:	1d11      	adds	r1, r2, #4
 8012a42:	9104      	str	r1, [sp, #16]
 8012a44:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8012a46:	1ba1      	subs	r1, r4, r6
 8012a48:	f8cd 9008 	str.w	r9, [sp, #8]
 8012a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8012a50:	9001      	str	r0, [sp, #4]
 8012a52:	9500      	str	r5, [sp, #0]
 8012a54:	eba8 0101 	sub.w	r1, r8, r1
 8012a58:	4620      	mov	r0, r4
 8012a5a:	f7ff fee1 	bl	8012820 <ee_number>
 8012a5e:	4604      	mov	r4, r0
 8012a60:	e775      	b.n	801294e <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8012a62:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8012a66:	230a      	movs	r3, #10
 8012a68:	e7e6      	b.n	8012a38 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8012a6a:	2a25      	cmp	r2, #37	; 0x25
 8012a6c:	d002      	beq.n	8012a74 <tiny_vsnprintf_like+0x140>
 8012a6e:	2325      	movs	r3, #37	; 0x25
 8012a70:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8012a74:	1ba3      	subs	r3, r4, r6
 8012a76:	4598      	cmp	r8, r3
 8012a78:	dd0f      	ble.n	8012a9a <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8012a7a:	9b05      	ldr	r3, [sp, #20]
 8012a7c:	781a      	ldrb	r2, [r3, #0]
 8012a7e:	b13a      	cbz	r2, 8012a90 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8012a80:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8012a84:	1ba3      	subs	r3, r4, r6
 8012a86:	4598      	cmp	r8, r3
 8012a88:	f73f af61 	bgt.w	801294e <tiny_vsnprintf_like+0x1a>
    base = 10;
 8012a8c:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8012a8e:	e7d3      	b.n	8012a38 <tiny_vsnprintf_like+0x104>
          --fmt;
 8012a90:	3b01      	subs	r3, #1
 8012a92:	9305      	str	r3, [sp, #20]
 8012a94:	e7f6      	b.n	8012a84 <tiny_vsnprintf_like+0x150>
        base = 16;
 8012a96:	2310      	movs	r3, #16
 8012a98:	e7ce      	b.n	8012a38 <tiny_vsnprintf_like+0x104>
    base = 10;
 8012a9a:	230a      	movs	r3, #10
 8012a9c:	e7cc      	b.n	8012a38 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8012a9e:	9a04      	ldr	r2, [sp, #16]
 8012aa0:	1d11      	adds	r1, r2, #4
 8012aa2:	9104      	str	r1, [sp, #16]
 8012aa4:	6812      	ldr	r2, [r2, #0]
 8012aa6:	e7ce      	b.n	8012a46 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8012aac:	1ba0      	subs	r0, r4, r6
}
 8012aae:	b007      	add	sp, #28
 8012ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8012ab4:	2000      	movs	r0, #0
 8012ab6:	e7fa      	b.n	8012aae <tiny_vsnprintf_like+0x17a>
 8012ab8:	08013b50 	.word	0x08013b50

08012abc <__libc_init_array>:
 8012abc:	b570      	push	{r4, r5, r6, lr}
 8012abe:	4d0d      	ldr	r5, [pc, #52]	; (8012af4 <__libc_init_array+0x38>)
 8012ac0:	4c0d      	ldr	r4, [pc, #52]	; (8012af8 <__libc_init_array+0x3c>)
 8012ac2:	1b64      	subs	r4, r4, r5
 8012ac4:	10a4      	asrs	r4, r4, #2
 8012ac6:	2600      	movs	r6, #0
 8012ac8:	42a6      	cmp	r6, r4
 8012aca:	d109      	bne.n	8012ae0 <__libc_init_array+0x24>
 8012acc:	4d0b      	ldr	r5, [pc, #44]	; (8012afc <__libc_init_array+0x40>)
 8012ace:	4c0c      	ldr	r4, [pc, #48]	; (8012b00 <__libc_init_array+0x44>)
 8012ad0:	f000 f8a2 	bl	8012c18 <_init>
 8012ad4:	1b64      	subs	r4, r4, r5
 8012ad6:	10a4      	asrs	r4, r4, #2
 8012ad8:	2600      	movs	r6, #0
 8012ada:	42a6      	cmp	r6, r4
 8012adc:	d105      	bne.n	8012aea <__libc_init_array+0x2e>
 8012ade:	bd70      	pop	{r4, r5, r6, pc}
 8012ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ae4:	4798      	blx	r3
 8012ae6:	3601      	adds	r6, #1
 8012ae8:	e7ee      	b.n	8012ac8 <__libc_init_array+0xc>
 8012aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8012aee:	4798      	blx	r3
 8012af0:	3601      	adds	r6, #1
 8012af2:	e7f2      	b.n	8012ada <__libc_init_array+0x1e>
 8012af4:	08013b60 	.word	0x08013b60
 8012af8:	08013b60 	.word	0x08013b60
 8012afc:	08013b60 	.word	0x08013b60
 8012b00:	08013b64 	.word	0x08013b64

08012b04 <memset>:
 8012b04:	4402      	add	r2, r0
 8012b06:	4603      	mov	r3, r0
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	d100      	bne.n	8012b0e <memset+0xa>
 8012b0c:	4770      	bx	lr
 8012b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8012b12:	e7f9      	b.n	8012b08 <memset+0x4>
 8012b14:	0000      	movs	r0, r0
	...

08012b18 <floor>:
 8012b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b1c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8012b20:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8012b24:	2e13      	cmp	r6, #19
 8012b26:	4602      	mov	r2, r0
 8012b28:	460b      	mov	r3, r1
 8012b2a:	4607      	mov	r7, r0
 8012b2c:	460c      	mov	r4, r1
 8012b2e:	4605      	mov	r5, r0
 8012b30:	dc33      	bgt.n	8012b9a <floor+0x82>
 8012b32:	2e00      	cmp	r6, #0
 8012b34:	da14      	bge.n	8012b60 <floor+0x48>
 8012b36:	a334      	add	r3, pc, #208	; (adr r3, 8012c08 <floor+0xf0>)
 8012b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b3c:	f7ed fb2a 	bl	8000194 <__adddf3>
 8012b40:	2200      	movs	r2, #0
 8012b42:	2300      	movs	r3, #0
 8012b44:	f7ed fd5a 	bl	80005fc <__aeabi_dcmpgt>
 8012b48:	b138      	cbz	r0, 8012b5a <floor+0x42>
 8012b4a:	2c00      	cmp	r4, #0
 8012b4c:	da58      	bge.n	8012c00 <floor+0xe8>
 8012b4e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012b52:	431d      	orrs	r5, r3
 8012b54:	d001      	beq.n	8012b5a <floor+0x42>
 8012b56:	4c2e      	ldr	r4, [pc, #184]	; (8012c10 <floor+0xf8>)
 8012b58:	2500      	movs	r5, #0
 8012b5a:	4623      	mov	r3, r4
 8012b5c:	462f      	mov	r7, r5
 8012b5e:	e025      	b.n	8012bac <floor+0x94>
 8012b60:	4a2c      	ldr	r2, [pc, #176]	; (8012c14 <floor+0xfc>)
 8012b62:	fa42 f806 	asr.w	r8, r2, r6
 8012b66:	ea01 0208 	and.w	r2, r1, r8
 8012b6a:	4302      	orrs	r2, r0
 8012b6c:	d01e      	beq.n	8012bac <floor+0x94>
 8012b6e:	a326      	add	r3, pc, #152	; (adr r3, 8012c08 <floor+0xf0>)
 8012b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b74:	f7ed fb0e 	bl	8000194 <__adddf3>
 8012b78:	2200      	movs	r2, #0
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	f7ed fd3e 	bl	80005fc <__aeabi_dcmpgt>
 8012b80:	2800      	cmp	r0, #0
 8012b82:	d0ea      	beq.n	8012b5a <floor+0x42>
 8012b84:	2c00      	cmp	r4, #0
 8012b86:	bfbe      	ittt	lt
 8012b88:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012b8c:	fa43 f606 	asrlt.w	r6, r3, r6
 8012b90:	19a4      	addlt	r4, r4, r6
 8012b92:	ea24 0408 	bic.w	r4, r4, r8
 8012b96:	2500      	movs	r5, #0
 8012b98:	e7df      	b.n	8012b5a <floor+0x42>
 8012b9a:	2e33      	cmp	r6, #51	; 0x33
 8012b9c:	dd0a      	ble.n	8012bb4 <floor+0x9c>
 8012b9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012ba2:	d103      	bne.n	8012bac <floor+0x94>
 8012ba4:	f7ed faf6 	bl	8000194 <__adddf3>
 8012ba8:	4607      	mov	r7, r0
 8012baa:	460b      	mov	r3, r1
 8012bac:	4638      	mov	r0, r7
 8012bae:	4619      	mov	r1, r3
 8012bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bb4:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8012bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8012bbc:	fa22 f808 	lsr.w	r8, r2, r8
 8012bc0:	ea18 0f00 	tst.w	r8, r0
 8012bc4:	d0f2      	beq.n	8012bac <floor+0x94>
 8012bc6:	a310      	add	r3, pc, #64	; (adr r3, 8012c08 <floor+0xf0>)
 8012bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bcc:	f7ed fae2 	bl	8000194 <__adddf3>
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	f7ed fd12 	bl	80005fc <__aeabi_dcmpgt>
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	d0be      	beq.n	8012b5a <floor+0x42>
 8012bdc:	2c00      	cmp	r4, #0
 8012bde:	da02      	bge.n	8012be6 <floor+0xce>
 8012be0:	2e14      	cmp	r6, #20
 8012be2:	d103      	bne.n	8012bec <floor+0xd4>
 8012be4:	3401      	adds	r4, #1
 8012be6:	ea25 0508 	bic.w	r5, r5, r8
 8012bea:	e7b6      	b.n	8012b5a <floor+0x42>
 8012bec:	2301      	movs	r3, #1
 8012bee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012bf2:	fa03 f606 	lsl.w	r6, r3, r6
 8012bf6:	4435      	add	r5, r6
 8012bf8:	42bd      	cmp	r5, r7
 8012bfa:	bf38      	it	cc
 8012bfc:	18e4      	addcc	r4, r4, r3
 8012bfe:	e7f2      	b.n	8012be6 <floor+0xce>
 8012c00:	2500      	movs	r5, #0
 8012c02:	462c      	mov	r4, r5
 8012c04:	e7a9      	b.n	8012b5a <floor+0x42>
 8012c06:	bf00      	nop
 8012c08:	8800759c 	.word	0x8800759c
 8012c0c:	7e37e43c 	.word	0x7e37e43c
 8012c10:	bff00000 	.word	0xbff00000
 8012c14:	000fffff 	.word	0x000fffff

08012c18 <_init>:
 8012c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c1a:	bf00      	nop
 8012c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c1e:	bc08      	pop	{r3}
 8012c20:	469e      	mov	lr, r3
 8012c22:	4770      	bx	lr

08012c24 <_fini>:
 8012c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c26:	bf00      	nop
 8012c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c2a:	bc08      	pop	{r3}
 8012c2c:	469e      	mov	lr, r3
 8012c2e:	4770      	bx	lr
