
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f30  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef0  08011068  08011068  00021068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f58  08011f58  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  08011f58  08011f58  00021f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f60  08011f60  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011f60  08011f60  00021f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08011f68  08011f68  00021f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000118  20000000  08011f70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000af8  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00001508  20000118  20000118  00040118  2**2
                  ALLOC
 12 RAM1_region   00000000  20001620  20001620  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001620  20001620  00040118  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   000546b3  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000b4ed  00000000  00000000  00092c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0002319e  00000000  00000000  0009e18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002b38  00000000  00000000  000c1328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002cf0  00000000  00000000  000c3e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002a79f  00000000  00000000  000c6b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00048a6e  00000000  00000000  000f12ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000dd850  00000000  00000000  00139d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  002175ad  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000779c  00000000  00000000  00217600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000118 	.word	0x20000118
 8000154:	00000000 	.word	0x00000000
 8000158:	08011050 	.word	0x08011050

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000011c 	.word	0x2000011c
 8000174:	08011050 	.word	0x08011050

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_f2iz>:
 800087c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000880:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000884:	d30f      	bcc.n	80008a6 <__aeabi_f2iz+0x2a>
 8000886:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800088a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800088e:	d90d      	bls.n	80008ac <__aeabi_f2iz+0x30>
 8000890:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000898:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800089c:	fa23 f002 	lsr.w	r0, r3, r2
 80008a0:	bf18      	it	ne
 80008a2:	4240      	negne	r0, r0
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr
 80008ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80008b0:	d101      	bne.n	80008b6 <__aeabi_f2iz+0x3a>
 80008b2:	0242      	lsls	r2, r0, #9
 80008b4:	d105      	bne.n	80008c2 <__aeabi_f2iz+0x46>
 80008b6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80008ba:	bf08      	it	eq
 80008bc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008c0:	4770      	bx	lr
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_f2uiz>:
 80008c8:	0042      	lsls	r2, r0, #1
 80008ca:	d20e      	bcs.n	80008ea <__aeabi_f2uiz+0x22>
 80008cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80008d0:	d30b      	bcc.n	80008ea <__aeabi_f2uiz+0x22>
 80008d2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80008d6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80008da:	d409      	bmi.n	80008f0 <__aeabi_f2uiz+0x28>
 80008dc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80008e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008e4:	fa23 f002 	lsr.w	r0, r3, r2
 80008e8:	4770      	bx	lr
 80008ea:	f04f 0000 	mov.w	r0, #0
 80008ee:	4770      	bx	lr
 80008f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80008f4:	d101      	bne.n	80008fa <__aeabi_f2uiz+0x32>
 80008f6:	0242      	lsls	r2, r0, #9
 80008f8:	d102      	bne.n	8000900 <__aeabi_f2uiz+0x38>
 80008fa:	f04f 30ff 	mov.w	r0, #4294967295
 80008fe:	4770      	bx	lr
 8000900:	f04f 0000 	mov.w	r0, #0
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop

08000908 <__aeabi_uldivmod>:
 8000908:	b953      	cbnz	r3, 8000920 <__aeabi_uldivmod+0x18>
 800090a:	b94a      	cbnz	r2, 8000920 <__aeabi_uldivmod+0x18>
 800090c:	2900      	cmp	r1, #0
 800090e:	bf08      	it	eq
 8000910:	2800      	cmpeq	r0, #0
 8000912:	bf1c      	itt	ne
 8000914:	f04f 31ff 	movne.w	r1, #4294967295
 8000918:	f04f 30ff 	movne.w	r0, #4294967295
 800091c:	f000 b974 	b.w	8000c08 <__aeabi_idiv0>
 8000920:	f1ad 0c08 	sub.w	ip, sp, #8
 8000924:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000928:	f000 f806 	bl	8000938 <__udivmoddi4>
 800092c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000934:	b004      	add	sp, #16
 8000936:	4770      	bx	lr

08000938 <__udivmoddi4>:
 8000938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800093c:	9e08      	ldr	r6, [sp, #32]
 800093e:	460d      	mov	r5, r1
 8000940:	4604      	mov	r4, r0
 8000942:	4688      	mov	r8, r1
 8000944:	2b00      	cmp	r3, #0
 8000946:	d14d      	bne.n	80009e4 <__udivmoddi4+0xac>
 8000948:	428a      	cmp	r2, r1
 800094a:	4694      	mov	ip, r2
 800094c:	d968      	bls.n	8000a20 <__udivmoddi4+0xe8>
 800094e:	fab2 f282 	clz	r2, r2
 8000952:	b152      	cbz	r2, 800096a <__udivmoddi4+0x32>
 8000954:	fa01 f302 	lsl.w	r3, r1, r2
 8000958:	f1c2 0120 	rsb	r1, r2, #32
 800095c:	fa20 f101 	lsr.w	r1, r0, r1
 8000960:	fa0c fc02 	lsl.w	ip, ip, r2
 8000964:	ea41 0803 	orr.w	r8, r1, r3
 8000968:	4094      	lsls	r4, r2
 800096a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800096e:	0c21      	lsrs	r1, r4, #16
 8000970:	fbb8 fef5 	udiv	lr, r8, r5
 8000974:	fa1f f78c 	uxth.w	r7, ip
 8000978:	fb05 831e 	mls	r3, r5, lr, r8
 800097c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000980:	fb0e f107 	mul.w	r1, lr, r7
 8000984:	4299      	cmp	r1, r3
 8000986:	d90b      	bls.n	80009a0 <__udivmoddi4+0x68>
 8000988:	eb1c 0303 	adds.w	r3, ip, r3
 800098c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000990:	f080 811e 	bcs.w	8000bd0 <__udivmoddi4+0x298>
 8000994:	4299      	cmp	r1, r3
 8000996:	f240 811b 	bls.w	8000bd0 <__udivmoddi4+0x298>
 800099a:	f1ae 0e02 	sub.w	lr, lr, #2
 800099e:	4463      	add	r3, ip
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb3 f0f5 	udiv	r0, r3, r5
 80009a8:	fb05 3310 	mls	r3, r5, r0, r3
 80009ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009b0:	fb00 f707 	mul.w	r7, r0, r7
 80009b4:	42a7      	cmp	r7, r4
 80009b6:	d90a      	bls.n	80009ce <__udivmoddi4+0x96>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80009c0:	f080 8108 	bcs.w	8000bd4 <__udivmoddi4+0x29c>
 80009c4:	42a7      	cmp	r7, r4
 80009c6:	f240 8105 	bls.w	8000bd4 <__udivmoddi4+0x29c>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	1be4      	subs	r4, r4, r7
 80009d0:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80009d4:	2100      	movs	r1, #0
 80009d6:	b11e      	cbz	r6, 80009e0 <__udivmoddi4+0xa8>
 80009d8:	40d4      	lsrs	r4, r2
 80009da:	2300      	movs	r3, #0
 80009dc:	e9c6 4300 	strd	r4, r3, [r6]
 80009e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e4:	428b      	cmp	r3, r1
 80009e6:	d908      	bls.n	80009fa <__udivmoddi4+0xc2>
 80009e8:	2e00      	cmp	r6, #0
 80009ea:	f000 80ee 	beq.w	8000bca <__udivmoddi4+0x292>
 80009ee:	2100      	movs	r1, #0
 80009f0:	e9c6 0500 	strd	r0, r5, [r6]
 80009f4:	4608      	mov	r0, r1
 80009f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fa:	fab3 f183 	clz	r1, r3
 80009fe:	2900      	cmp	r1, #0
 8000a00:	d14a      	bne.n	8000a98 <__udivmoddi4+0x160>
 8000a02:	42ab      	cmp	r3, r5
 8000a04:	d302      	bcc.n	8000a0c <__udivmoddi4+0xd4>
 8000a06:	4282      	cmp	r2, r0
 8000a08:	f200 80f9 	bhi.w	8000bfe <__udivmoddi4+0x2c6>
 8000a0c:	1a84      	subs	r4, r0, r2
 8000a0e:	eb65 0303 	sbc.w	r3, r5, r3
 8000a12:	2001      	movs	r0, #1
 8000a14:	4698      	mov	r8, r3
 8000a16:	2e00      	cmp	r6, #0
 8000a18:	d0e2      	beq.n	80009e0 <__udivmoddi4+0xa8>
 8000a1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000a1e:	e7df      	b.n	80009e0 <__udivmoddi4+0xa8>
 8000a20:	b902      	cbnz	r2, 8000a24 <__udivmoddi4+0xec>
 8000a22:	deff      	udf	#255	; 0xff
 8000a24:	fab2 f282 	clz	r2, r2
 8000a28:	2a00      	cmp	r2, #0
 8000a2a:	f040 8091 	bne.w	8000b50 <__udivmoddi4+0x218>
 8000a2e:	eba1 050c 	sub.w	r5, r1, ip
 8000a32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a36:	fa1f fe8c 	uxth.w	lr, ip
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000a40:	fb07 5013 	mls	r0, r7, r3, r5
 8000a44:	0c25      	lsrs	r5, r4, #16
 8000a46:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a4a:	fb0e f003 	mul.w	r0, lr, r3
 8000a4e:	42a8      	cmp	r0, r5
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x12c>
 8000a52:	eb1c 0505 	adds.w	r5, ip, r5
 8000a56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a5a:	d202      	bcs.n	8000a62 <__udivmoddi4+0x12a>
 8000a5c:	42a8      	cmp	r0, r5
 8000a5e:	f200 80cb 	bhi.w	8000bf8 <__udivmoddi4+0x2c0>
 8000a62:	4643      	mov	r3, r8
 8000a64:	1a2d      	subs	r5, r5, r0
 8000a66:	b2a4      	uxth	r4, r4
 8000a68:	fbb5 f0f7 	udiv	r0, r5, r7
 8000a6c:	fb07 5510 	mls	r5, r7, r0, r5
 8000a70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a74:	fb0e fe00 	mul.w	lr, lr, r0
 8000a78:	45a6      	cmp	lr, r4
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x156>
 8000a7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a80:	f100 35ff 	add.w	r5, r0, #4294967295
 8000a84:	d202      	bcs.n	8000a8c <__udivmoddi4+0x154>
 8000a86:	45a6      	cmp	lr, r4
 8000a88:	f200 80bb 	bhi.w	8000c02 <__udivmoddi4+0x2ca>
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	eba4 040e 	sub.w	r4, r4, lr
 8000a92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a96:	e79e      	b.n	80009d6 <__udivmoddi4+0x9e>
 8000a98:	f1c1 0720 	rsb	r7, r1, #32
 8000a9c:	408b      	lsls	r3, r1
 8000a9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aa2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aa6:	fa20 f407 	lsr.w	r4, r0, r7
 8000aaa:	fa05 f301 	lsl.w	r3, r5, r1
 8000aae:	431c      	orrs	r4, r3
 8000ab0:	40fd      	lsrs	r5, r7
 8000ab2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ab6:	fa00 f301 	lsl.w	r3, r0, r1
 8000aba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000abe:	0c20      	lsrs	r0, r4, #16
 8000ac0:	fa1f fe8c 	uxth.w	lr, ip
 8000ac4:	fb09 5518 	mls	r5, r9, r8, r5
 8000ac8:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000acc:	fb08 f00e 	mul.w	r0, r8, lr
 8000ad0:	42a8      	cmp	r0, r5
 8000ad2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ad6:	d90b      	bls.n	8000af0 <__udivmoddi4+0x1b8>
 8000ad8:	eb1c 0505 	adds.w	r5, ip, r5
 8000adc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ae0:	f080 8088 	bcs.w	8000bf4 <__udivmoddi4+0x2bc>
 8000ae4:	42a8      	cmp	r0, r5
 8000ae6:	f240 8085 	bls.w	8000bf4 <__udivmoddi4+0x2bc>
 8000aea:	f1a8 0802 	sub.w	r8, r8, #2
 8000aee:	4465      	add	r5, ip
 8000af0:	1a2d      	subs	r5, r5, r0
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb5 f0f9 	udiv	r0, r5, r9
 8000af8:	fb09 5510 	mls	r5, r9, r0, r5
 8000afc:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000b00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b04:	45ae      	cmp	lr, r5
 8000b06:	d908      	bls.n	8000b1a <__udivmoddi4+0x1e2>
 8000b08:	eb1c 0505 	adds.w	r5, ip, r5
 8000b0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b10:	d26c      	bcs.n	8000bec <__udivmoddi4+0x2b4>
 8000b12:	45ae      	cmp	lr, r5
 8000b14:	d96a      	bls.n	8000bec <__udivmoddi4+0x2b4>
 8000b16:	3802      	subs	r0, #2
 8000b18:	4465      	add	r5, ip
 8000b1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000b22:	eba5 050e 	sub.w	r5, r5, lr
 8000b26:	42a5      	cmp	r5, r4
 8000b28:	46c8      	mov	r8, r9
 8000b2a:	46a6      	mov	lr, r4
 8000b2c:	d356      	bcc.n	8000bdc <__udivmoddi4+0x2a4>
 8000b2e:	d053      	beq.n	8000bd8 <__udivmoddi4+0x2a0>
 8000b30:	b15e      	cbz	r6, 8000b4a <__udivmoddi4+0x212>
 8000b32:	ebb3 0208 	subs.w	r2, r3, r8
 8000b36:	eb65 050e 	sbc.w	r5, r5, lr
 8000b3a:	fa05 f707 	lsl.w	r7, r5, r7
 8000b3e:	fa22 f301 	lsr.w	r3, r2, r1
 8000b42:	40cd      	lsrs	r5, r1
 8000b44:	431f      	orrs	r7, r3
 8000b46:	e9c6 7500 	strd	r7, r5, [r6]
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b50:	f1c2 0320 	rsb	r3, r2, #32
 8000b54:	fa20 f103 	lsr.w	r1, r0, r3
 8000b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5c:	fa25 f303 	lsr.w	r3, r5, r3
 8000b60:	4095      	lsls	r5, r2
 8000b62:	430d      	orrs	r5, r1
 8000b64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b68:	fa1f fe8c 	uxth.w	lr, ip
 8000b6c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000b70:	fb07 3011 	mls	r0, r7, r1, r3
 8000b74:	0c2b      	lsrs	r3, r5, #16
 8000b76:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000b7a:	fb01 f00e 	mul.w	r0, r1, lr
 8000b7e:	4298      	cmp	r0, r3
 8000b80:	fa04 f402 	lsl.w	r4, r4, r2
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x260>
 8000b86:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000b8e:	d22f      	bcs.n	8000bf0 <__udivmoddi4+0x2b8>
 8000b90:	4298      	cmp	r0, r3
 8000b92:	d92d      	bls.n	8000bf0 <__udivmoddi4+0x2b8>
 8000b94:	3902      	subs	r1, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a1b      	subs	r3, r3, r0
 8000b9a:	b2ad      	uxth	r5, r5
 8000b9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ba0:	fb07 3310 	mls	r3, r7, r0, r3
 8000ba4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ba8:	fb00 f30e 	mul.w	r3, r0, lr
 8000bac:	42ab      	cmp	r3, r5
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x28a>
 8000bb0:	eb1c 0505 	adds.w	r5, ip, r5
 8000bb4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bb8:	d216      	bcs.n	8000be8 <__udivmoddi4+0x2b0>
 8000bba:	42ab      	cmp	r3, r5
 8000bbc:	d914      	bls.n	8000be8 <__udivmoddi4+0x2b0>
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	4465      	add	r5, ip
 8000bc2:	1aed      	subs	r5, r5, r3
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	e738      	b.n	8000a3c <__udivmoddi4+0x104>
 8000bca:	4631      	mov	r1, r6
 8000bcc:	4630      	mov	r0, r6
 8000bce:	e707      	b.n	80009e0 <__udivmoddi4+0xa8>
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	e6e5      	b.n	80009a0 <__udivmoddi4+0x68>
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	e6fa      	b.n	80009ce <__udivmoddi4+0x96>
 8000bd8:	454b      	cmp	r3, r9
 8000bda:	d2a9      	bcs.n	8000b30 <__udivmoddi4+0x1f8>
 8000bdc:	ebb9 0802 	subs.w	r8, r9, r2
 8000be0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000be4:	3801      	subs	r0, #1
 8000be6:	e7a3      	b.n	8000b30 <__udivmoddi4+0x1f8>
 8000be8:	4640      	mov	r0, r8
 8000bea:	e7ea      	b.n	8000bc2 <__udivmoddi4+0x28a>
 8000bec:	4620      	mov	r0, r4
 8000bee:	e794      	b.n	8000b1a <__udivmoddi4+0x1e2>
 8000bf0:	4641      	mov	r1, r8
 8000bf2:	e7d1      	b.n	8000b98 <__udivmoddi4+0x260>
 8000bf4:	46d0      	mov	r8, sl
 8000bf6:	e77b      	b.n	8000af0 <__udivmoddi4+0x1b8>
 8000bf8:	3b02      	subs	r3, #2
 8000bfa:	4465      	add	r5, ip
 8000bfc:	e732      	b.n	8000a64 <__udivmoddi4+0x12c>
 8000bfe:	4608      	mov	r0, r1
 8000c00:	e709      	b.n	8000a16 <__udivmoddi4+0xde>
 8000c02:	4464      	add	r4, ip
 8000c04:	3802      	subs	r0, #2
 8000c06:	e742      	b.n	8000a8e <__udivmoddi4+0x156>

08000c08 <__aeabi_idiv0>:
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000c0c:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000c0e:	4813      	ldr	r0, [pc, #76]	; (8000c5c <MX_ADC_Init+0x50>)
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_ADC_Init+0x54>)
 8000c12:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000c18:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c1e:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c20:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c22:	2204      	movs	r2, #4
 8000c24:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c26:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c28:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c2a:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c30:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c34:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c36:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c38:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c40:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000c42:	2207      	movs	r2, #7
 8000c44:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000c46:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000c48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c4c:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c4e:	f001 ff77 	bl	8002b40 <HAL_ADC_Init>
 8000c52:	b900      	cbnz	r0, 8000c56 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c54:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000c56:	f000 fadd 	bl	8001214 <Error_Handler>
}
 8000c5a:	e7fb      	b.n	8000c54 <MX_ADC_Init+0x48>
 8000c5c:	20000134 	.word	0x20000134
 8000c60:	40012400 	.word	0x40012400

08000c64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c64:	b500      	push	{lr}
 8000c66:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	2300      	movs	r3, #0
 8000c6a:	9303      	str	r3, [sp, #12]
 8000c6c:	9304      	str	r3, [sp, #16]
 8000c6e:	9305      	str	r3, [sp, #20]
 8000c70:	9306      	str	r3, [sp, #24]
 8000c72:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC)
 8000c74:	6802      	ldr	r2, [r0, #0]
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_ADC_MspInit+0x58>)
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d002      	beq.n	8000c82 <HAL_ADC_MspInit+0x1e>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000c7c:	b009      	add	sp, #36	; 0x24
 8000c7e:	f85d fb04 	ldr.w	pc, [sp], #4
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c8c:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c90:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000c94:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000c96:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c9a:	f042 0202 	orr.w	r2, r2, #2
 8000c9e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ca8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LDR_Pin;
 8000caa:	2310      	movs	r3, #16
 8000cac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(LDR_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	a903      	add	r1, sp, #12
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <HAL_ADC_MspInit+0x5c>)
 8000cb6:	f003 f899 	bl	8003dec <HAL_GPIO_Init>
}
 8000cba:	e7df      	b.n	8000c7c <HAL_ADC_MspInit+0x18>
 8000cbc:	40012400 	.word	0x40012400
 8000cc0:	48000400 	.word	0x48000400

08000cc4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000cc4:	b508      	push	{r3, lr}

  if(adcHandle->Instance==ADC)
 8000cc6:	6802      	ldr	r2, [r0, #0]
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <HAL_ADC_MspDeInit+0x24>)
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d000      	beq.n	8000cd0 <HAL_ADC_MspDeInit+0xc>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000cce:	bd08      	pop	{r3, pc}
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cd4:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000cd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cda:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(LDR_GPIO_Port, LDR_Pin);
 8000cdc:	2110      	movs	r1, #16
 8000cde:	4803      	ldr	r0, [pc, #12]	; (8000cec <HAL_ADC_MspDeInit+0x28>)
 8000ce0:	f003 f956 	bl	8003f90 <HAL_GPIO_DeInit>
}
 8000ce4:	e7f3      	b.n	8000cce <HAL_ADC_MspDeInit+0xa>
 8000ce6:	bf00      	nop
 8000ce8:	40012400 	.word	0x40012400
 8000cec:	48000400 	.word	0x48000400

08000cf0 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000cf0:	b530      	push	{r4, r5, lr}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9301      	str	r3, [sp, #4]
 8000cfa:	9302      	str	r3, [sp, #8]
 8000cfc:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000cfe:	f7ff ff85 	bl	8000c0c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000d02:	4816      	ldr	r0, [pc, #88]	; (8000d5c <ADC_ReadChannels+0x6c>)
 8000d04:	f002 fb60 	bl	80033c8 <HAL_ADCEx_Calibration_Start>
 8000d08:	b9f8      	cbnz	r0, 8000d4a <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000d0a:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000d10:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d12:	a901      	add	r1, sp, #4
 8000d14:	4811      	ldr	r0, [pc, #68]	; (8000d5c <ADC_ReadChannels+0x6c>)
 8000d16:	f002 f8a1 	bl	8002e5c <HAL_ADC_ConfigChannel>
 8000d1a:	b9c8      	cbnz	r0, 8000d50 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000d1c:	480f      	ldr	r0, [pc, #60]	; (8000d5c <ADC_ReadChannels+0x6c>)
 8000d1e:	f002 fa61 	bl	80031e4 <HAL_ADC_Start>
 8000d22:	b9c0      	cbnz	r0, 8000d56 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000d24:	4c0d      	ldr	r4, [pc, #52]	; (8000d5c <ADC_ReadChannels+0x6c>)
 8000d26:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f002 f834 	bl	8002d98 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000d30:	4620      	mov	r0, r4
 8000d32:	f002 fb29 	bl	8003388 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000d36:	4620      	mov	r0, r4
 8000d38:	f002 f88d 	bl	8002e56 <HAL_ADC_GetValue>
 8000d3c:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f002 facc 	bl	80032dc <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000d44:	4628      	mov	r0, r5
 8000d46:	b005      	add	sp, #20
 8000d48:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000d4a:	f000 fa63 	bl	8001214 <Error_Handler>
 8000d4e:	e7dc      	b.n	8000d0a <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000d50:	f000 fa60 	bl	8001214 <Error_Handler>
 8000d54:	e7e2      	b.n	8000d1c <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000d56:	f000 fa5d 	bl	8001214 <Error_Handler>
 8000d5a:	e7e3      	b.n	8000d24 <ADC_ReadChannels+0x34>
 8000d5c:	20000134 	.word	0x20000134

08000d60 <Get_ADC_Measurement>:
void Get_ADC_Measurement(uint32_t channel, uint8_t *v){
 8000d60:	b510      	push	{r4, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	460c      	mov	r4, r1
	a = ADC_ReadChannels(channel);
 8000d66:	f7ff ffc3 	bl	8000cf0 <ADC_ReadChannels>
	v[0] = a;
 8000d6a:	7020      	strb	r0, [r4, #0]
	v[1] = a >>  8;
 8000d6c:	0a03      	lsrs	r3, r0, #8
 8000d6e:	7063      	strb	r3, [r4, #1]
	APP_LOG(TS_ON, VLEVEL_M, "LDR: %d\r\n", a);
 8000d70:	9000      	str	r0, [sp, #0]
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <Get_ADC_Measurement+0x24>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	2100      	movs	r1, #0
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f00f fb09 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 8000d7e:	b002      	add	sp, #8
 8000d80:	bd10      	pop	{r4, pc}
 8000d82:	bf00      	nop
 8000d84:	080110f0 	.word	0x080110f0

08000d88 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000d88:	4b01      	ldr	r3, [pc, #4]	; (8000d90 <SYS_InitMeasurement+0x8>)
 8000d8a:	4a02      	ldr	r2, [pc, #8]	; (8000d94 <SYS_InitMeasurement+0xc>)
 8000d8c:	601a      	str	r2, [r3, #0]
}
 8000d8e:	4770      	bx	lr
 8000d90:	20000134 	.word	0x20000134
 8000d94:	40012400 	.word	0x40012400

08000d98 <SYS_GetBatteryLevel>:
{
 8000d98:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <SYS_GetBatteryLevel+0x38>)
 8000d9c:	f7ff ffa8 	bl	8000cf0 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000da0:	b1a0      	cbz	r0, 8000dcc <SYS_GetBatteryLevel+0x34>
 8000da2:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <SYS_GetBatteryLevel+0x3c>)
 8000da6:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000daa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d007      	beq.n	8000dc2 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000db2:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000db6:	fb03 f000 	mul.w	r0, r3, r0
 8000dba:	fbb0 f0f2 	udiv	r0, r0, r2
 8000dbe:	b280      	uxth	r0, r0
 8000dc0:	e005      	b.n	8000dce <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <SYS_GetBatteryLevel+0x40>)
 8000dc4:	fbb0 f0f2 	udiv	r0, r0, r2
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	e000      	b.n	8000dce <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8000dcc:	2000      	movs	r0, #0
}
 8000dce:	bd08      	pop	{r3, pc}
 8000dd0:	b4002000 	.word	0xb4002000
 8000dd4:	1fff7500 	.word	0x1fff7500
 8000dd8:	004c08d8 	.word	0x004c08d8

08000ddc <SYS_GetTemperatureLevel>:
{
 8000ddc:	b510      	push	{r4, lr}
 8000dde:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000de6:	f7ff ffd7 	bl	8000d98 <SYS_GetBatteryLevel>
 8000dea:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000dec:	4821      	ldr	r0, [pc, #132]	; (8000e74 <SYS_GetTemperatureLevel+0x98>)
 8000dee:	f7ff ff7f 	bl	8000cf0 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <SYS_GetTemperatureLevel+0x9c>)
 8000df4:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8000df8:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8000dfc:	428a      	cmp	r2, r1
 8000dfe:	d01d      	beq.n	8000e3c <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000e00:	fb00 f304 	mul.w	r3, r0, r4
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	4c1d      	ldr	r4, [pc, #116]	; (8000e7c <SYS_GetTemperatureLevel+0xa0>)
 8000e08:	fba4 0303 	umull	r0, r3, r4, r3
 8000e0c:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8000e10:	2064      	movs	r0, #100	; 0x64
 8000e12:	fb00 f303 	mul.w	r3, r0, r3
 8000e16:	1a52      	subs	r2, r2, r1
 8000e18:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e1c:	331e      	adds	r3, #30
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8000e24:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8000e32:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8000e36:	b200      	sxth	r0, r0
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000e3c:	fb00 f404 	mul.w	r4, r0, r4
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <SYS_GetTemperatureLevel+0xa4>)
 8000e42:	fba3 2304 	umull	r2, r3, r3, r4
 8000e46:	1ae4      	subs	r4, r4, r3
 8000e48:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8000e4c:	0ae4      	lsrs	r4, r4, #11
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fb03 f404 	mul.w	r4, r3, r4
 8000e56:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 8000e5a:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <SYS_GetTemperatureLevel+0xa8>)
 8000e60:	fb83 2304 	smull	r2, r3, r3, r4
 8000e64:	17e4      	asrs	r4, r4, #31
 8000e66:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 8000e6a:	341e      	adds	r4, #30
 8000e6c:	b224      	sxth	r4, r4
 8000e6e:	f8ad 4006 	strh.w	r4, [sp, #6]
 8000e72:	e7d7      	b.n	8000e24 <SYS_GetTemperatureLevel+0x48>
 8000e74:	b0001000 	.word	0xb0001000
 8000e78:	1fff7500 	.word	0x1fff7500
 8000e7c:	09ee009f 	.word	0x09ee009f
 8000e80:	00100101 	.word	0x00100101
 8000e84:	68db8bad 	.word	0x68db8bad

08000e88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e88:	b500      	push	{lr}
 8000e8a:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e92:	f042 0204 	orr.w	r2, r2, #4
 8000e96:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e9a:	f002 0204 	and.w	r2, r2, #4
 8000e9e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000ea0:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000ea2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000ea4:	f042 0201 	orr.w	r2, r2, #1
 8000ea8:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000eb2:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	200f      	movs	r0, #15
 8000eba:	f002 fb37 	bl	800352c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	f002 fb6c 	bl	800359c <HAL_NVIC_EnableIRQ>

}
 8000ec4:	b003      	add	sp, #12
 8000ec6:	f85d fb04 	ldr.w	pc, [sp], #4

08000eca <FLASH_IF_IsEmpty>:
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8000eca:	e000      	b.n	8000ece <FLASH_IF_IsEmpty+0x4>
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8000ecc:	3901      	subs	r1, #1
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8000ece:	f010 0307 	ands.w	r3, r0, #7
 8000ed2:	d012      	beq.n	8000efa <FLASH_IF_IsEmpty+0x30>
    if (*addr++ != UINT8_MAX)
 8000ed4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000ed8:	2bff      	cmp	r3, #255	; 0xff
 8000eda:	d0f7      	beq.n	8000ecc <FLASH_IF_IsEmpty+0x2>
      return FLASH_NOT_EMPTY;
 8000edc:	2001      	movs	r0, #1
 8000ede:	4770      	bx	lr
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8000ee0:	3901      	subs	r1, #1
  while (size != 0)
 8000ee2:	b129      	cbz	r1, 8000ef0 <FLASH_IF_IsEmpty+0x26>
    if (*addr++ != UINT8_MAX)
 8000ee4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000ee8:	2bff      	cmp	r3, #255	; 0xff
 8000eea:	d0f9      	beq.n	8000ee0 <FLASH_IF_IsEmpty+0x16>
      return FLASH_NOT_EMPTY;
 8000eec:	2001      	movs	r0, #1
 8000eee:	e002      	b.n	8000ef6 <FLASH_IF_IsEmpty+0x2c>
  }
  return FLASH_EMPTY;
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	e000      	b.n	8000ef6 <FLASH_IF_IsEmpty+0x2c>
      return FLASH_NOT_EMPTY;
 8000ef4:	2001      	movs	r0, #1
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8000ef6:	bc10      	pop	{r4}
 8000ef8:	4770      	bx	lr
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8000efa:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efe:	d212      	bcs.n	8000f26 <FLASH_IF_IsEmpty+0x5c>
{
 8000f00:	b410      	push	{r4}
    if (*addr64++ != UINT64_MAX)
 8000f02:	4602      	mov	r2, r0
 8000f04:	f852 4b08 	ldr.w	r4, [r2], #8
 8000f08:	6840      	ldr	r0, [r0, #4]
 8000f0a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000f0e:	bf08      	it	eq
 8000f10:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8000f14:	d1ee      	bne.n	8000ef4 <FLASH_IF_IsEmpty+0x2a>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8000f16:	3301      	adds	r3, #1
    if (*addr64++ != UINT64_MAX)
 8000f18:	4610      	mov	r0, r2
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8000f1a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1e:	d3f0      	bcc.n	8000f02 <FLASH_IF_IsEmpty+0x38>
  size -= sizeof(uint64_t) * i;
 8000f20:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 8000f24:	e7dd      	b.n	8000ee2 <FLASH_IF_IsEmpty+0x18>
  size -= sizeof(uint64_t) * i;
 8000f26:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 8000f2a:	b129      	cbz	r1, 8000f38 <FLASH_IF_IsEmpty+0x6e>
    if (*addr++ != UINT8_MAX)
 8000f2c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000f30:	2bff      	cmp	r3, #255	; 0xff
 8000f32:	d103      	bne.n	8000f3c <FLASH_IF_IsEmpty+0x72>
    size--;
 8000f34:	3901      	subs	r1, #1
 8000f36:	e7f8      	b.n	8000f2a <FLASH_IF_IsEmpty+0x60>
  return FLASH_EMPTY;
 8000f38:	2000      	movs	r0, #0
 8000f3a:	4770      	bx	lr
      return FLASH_NOT_EMPTY;
 8000f3c:	2001      	movs	r0, #1
}
 8000f3e:	4770      	bx	lr

08000f40 <FLASH_IF_Write64>:
{
 8000f40:	b570      	push	{r4, r5, r6, lr}
 8000f42:	4604      	mov	r4, r0
 8000f44:	4616      	mov	r6, r2
 8000f46:	461d      	mov	r5, r3
  while (*(uint64_t *)address != data)
 8000f48:	e005      	b.n	8000f56 <FLASH_IF_Write64+0x16>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8000f4a:	4632      	mov	r2, r6
 8000f4c:	462b      	mov	r3, r5
 8000f4e:	4621      	mov	r1, r4
 8000f50:	2001      	movs	r0, #1
 8000f52:	f002 fe4f 	bl	8003bf4 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8000f56:	6822      	ldr	r2, [r4, #0]
 8000f58:	6863      	ldr	r3, [r4, #4]
 8000f5a:	42ab      	cmp	r3, r5
 8000f5c:	bf08      	it	eq
 8000f5e:	42b2      	cmpeq	r2, r6
 8000f60:	d005      	beq.n	8000f6e <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8000f62:	4904      	ldr	r1, [pc, #16]	; (8000f74 <FLASH_IF_Write64+0x34>)
 8000f64:	6909      	ldr	r1, [r1, #16]
 8000f66:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 8000f6a:	d1fa      	bne.n	8000f62 <FLASH_IF_Write64+0x22>
 8000f6c:	e7ed      	b.n	8000f4a <FLASH_IF_Write64+0xa>
}
 8000f6e:	2000      	movs	r0, #0
 8000f70:	bd70      	pop	{r4, r5, r6, pc}
 8000f72:	bf00      	nop
 8000f74:	58004000 	.word	0x58004000

08000f78 <FLASH_IF_Write_Buffer>:
{
 8000f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	4606      	mov	r6, r0
 8000f80:	460c      	mov	r4, r1
 8000f82:	4690      	mov	r8, r2
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8000f84:	2500      	movs	r5, #0
  int32_t status = FLASH_OK;
 8000f86:	462f      	mov	r7, r5
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8000f88:	e003      	b.n	8000f92 <FLASH_IF_Write_Buffer+0x1a>
    pDestination += sizeof(uint64_t);
 8000f8a:	3608      	adds	r6, #8
    pSrc += sizeof(uint64_t);
 8000f8c:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 8000f8e:	b9af      	cbnz	r7, 8000fbc <FLASH_IF_Write_Buffer+0x44>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8000f90:	3501      	adds	r5, #1
 8000f92:	ebb5 0fd8 	cmp.w	r5, r8, lsr #3
 8000f96:	d211      	bcs.n	8000fbc <FLASH_IF_Write_Buffer+0x44>
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8000f98:	2208      	movs	r2, #8
 8000f9a:	4621      	mov	r1, r4
 8000f9c:	4668      	mov	r0, sp
 8000f9e:	f00f fb0d 	bl	80105bc <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 8000fa2:	9a00      	ldr	r2, [sp, #0]
 8000fa4:	9b01      	ldr	r3, [sp, #4]
 8000fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000faa:	bf08      	it	eq
 8000fac:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8000fb0:	d0eb      	beq.n	8000f8a <FLASH_IF_Write_Buffer+0x12>
      status = FLASH_IF_Write64(pDestination, src_value);
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	f7ff ffc4 	bl	8000f40 <FLASH_IF_Write64>
 8000fb8:	4607      	mov	r7, r0
 8000fba:	e7e6      	b.n	8000f8a <FLASH_IF_Write_Buffer+0x12>
}
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000fc4 <FLASH_IF_EraseByPages>:
{
 8000fc4:	b500      	push	{lr}
 8000fc6:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 8000fcc:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 8000fce:	9103      	str	r1, [sp, #12]
  if (interrupt)
 8000fd0:	b13a      	cbz	r2, 8000fe2 <FLASH_IF_EraseByPages+0x1e>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8000fd2:	a801      	add	r0, sp, #4
 8000fd4:	f002 fed6 	bl	8003d84 <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8000fd8:	b140      	cbz	r0, 8000fec <FLASH_IF_EraseByPages+0x28>
 8000fda:	2802      	cmp	r0, #2
 8000fdc:	d10a      	bne.n	8000ff4 <FLASH_IF_EraseByPages+0x30>
 8000fde:	2001      	movs	r0, #1
 8000fe0:	e005      	b.n	8000fee <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8000fe2:	4669      	mov	r1, sp
 8000fe4:	a801      	add	r0, sp, #4
 8000fe6:	f002 fe8d 	bl	8003d04 <HAL_FLASHEx_Erase>
 8000fea:	e7f5      	b.n	8000fd8 <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8000fec:	2000      	movs	r0, #0
}
 8000fee:	b005      	add	sp, #20
 8000ff0:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8000ff4:	f06f 0001 	mvn.w	r0, #1
 8000ff8:	e7f9      	b.n	8000fee <FLASH_IF_EraseByPages+0x2a>
	...

08000ffc <FLASH_IF_Write>:
{
 8000ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001000:	4693      	mov	fp, r2
 8001002:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 8001004:	f100 4578 	add.w	r5, r0, #4160749568	; 0xf8000000
 8001008:	4b3e      	ldr	r3, [pc, #248]	; (8001104 <FLASH_IF_Write+0x108>)
 800100a:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800100e:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <FLASH_IF_Write+0x10c>)
 8001010:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001014:	fbb5 f2f3 	udiv	r2, r5, r3
 8001018:	fb03 5512 	mls	r5, r3, r2, r5
  uint32_t page_end_index = PAGE(address + size - 1);
 800101c:	eb00 0a0b 	add.w	sl, r0, fp
 8001020:	f10a 4a78 	add.w	sl, sl, #4160749568	; 0xf8000000
 8001024:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001028:	fbba f2f3 	udiv	r2, sl, r3
 800102c:	fb03 aa12 	mls	sl, r3, r2, sl
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001030:	2900      	cmp	r1, #0
 8001032:	d052      	beq.n	80010da <FLASH_IF_Write+0xde>
 8001034:	4606      	mov	r6, r0
 8001036:	0aed      	lsrs	r5, r5, #11
 8001038:	ea4f 2ada 	mov.w	sl, sl, lsr #11
 800103c:	4688      	mov	r8, r1
 800103e:	f01b 0f07 	tst.w	fp, #7
 8001042:	d14d      	bne.n	80010e0 <FLASH_IF_Write+0xe4>
 8001044:	f010 0f07 	tst.w	r0, #7
 8001048:	d14d      	bne.n	80010e6 <FLASH_IF_Write+0xea>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800104a:	4b30      	ldr	r3, [pc, #192]	; (800110c <FLASH_IF_Write+0x110>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db4c      	blt.n	80010ec <FLASH_IF_Write+0xf0>
  if (page_start_index != page_end_index)
 8001052:	4555      	cmp	r5, sl
 8001054:	d004      	beq.n	8001060 <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8001056:	f3c0 040a 	ubfx	r4, r0, #0, #11
 800105a:	f5c4 6400 	rsb	r4, r4, #2048	; 0x800
 800105e:	e00d      	b.n	800107c <FLASH_IF_Write+0x80>
  uint32_t curr_size = size;
 8001060:	465c      	mov	r4, fp
 8001062:	e00b      	b.n	800107c <FLASH_IF_Write+0x80>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001064:	4622      	mov	r2, r4
 8001066:	4641      	mov	r1, r8
 8001068:	4630      	mov	r0, r6
 800106a:	f7ff ff85 	bl	8000f78 <FLASH_IF_Write_Buffer>
 800106e:	2800      	cmp	r0, #0
 8001070:	d145      	bne.n	80010fe <FLASH_IF_Write+0x102>
    curr_dest_addr += curr_size;
 8001072:	4426      	add	r6, r4
    curr_src_addr += curr_size;
 8001074:	44a0      	add	r8, r4
    curr_size = size - curr_size;
 8001076:	ebab 0404 	sub.w	r4, fp, r4
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800107a:	3501      	adds	r5, #1
 800107c:	4555      	cmp	r5, sl
 800107e:	d829      	bhi.n	80010d4 <FLASH_IF_Write+0xd8>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001080:	4621      	mov	r1, r4
 8001082:	4630      	mov	r0, r6
 8001084:	f7ff ff21 	bl	8000eca <FLASH_IF_IsEmpty>
 8001088:	2800      	cmp	r0, #0
 800108a:	d0eb      	beq.n	8001064 <FLASH_IF_Write+0x68>
      if (dataTempPage == NULL)
 800108c:	f1b9 0f00 	cmp.w	r9, #0
 8001090:	d02f      	beq.n	80010f2 <FLASH_IF_Write+0xf6>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001092:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 8001096:	02ff      	lsls	r7, r7, #11
 8001098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800109c:	4639      	mov	r1, r7
 800109e:	4648      	mov	r0, r9
 80010a0:	f00f fa8c 	bl	80105bc <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80010a4:	f3c6 000a 	ubfx	r0, r6, #0, #11
 80010a8:	b2a2      	uxth	r2, r4
 80010aa:	4641      	mov	r1, r8
 80010ac:	4448      	add	r0, r9
 80010ae:	f00f fa85 	bl	80105bc <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80010b2:	2200      	movs	r2, #0
 80010b4:	2101      	movs	r1, #1
 80010b6:	4628      	mov	r0, r5
 80010b8:	f7ff ff84 	bl	8000fc4 <FLASH_IF_EraseByPages>
 80010bc:	b9e0      	cbnz	r0, 80010f8 <FLASH_IF_Write+0xfc>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80010be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010c2:	4649      	mov	r1, r9
 80010c4:	4638      	mov	r0, r7
 80010c6:	f7ff ff57 	bl	8000f78 <FLASH_IF_Write_Buffer>
 80010ca:	2800      	cmp	r0, #0
 80010cc:	d0d1      	beq.n	8001072 <FLASH_IF_Write+0x76>
          status = FLASH_WRITE_ERROR;
 80010ce:	f06f 0002 	mvn.w	r0, #2
 80010d2:	e000      	b.n	80010d6 <FLASH_IF_Write+0xda>
  int32_t status = FLASH_OK;
 80010d4:	2000      	movs	r0, #0
}
 80010d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 80010da:	f06f 0004 	mvn.w	r0, #4
 80010de:	e7fa      	b.n	80010d6 <FLASH_IF_Write+0xda>
 80010e0:	f06f 0004 	mvn.w	r0, #4
 80010e4:	e7f7      	b.n	80010d6 <FLASH_IF_Write+0xda>
 80010e6:	f06f 0004 	mvn.w	r0, #4
 80010ea:	e7f4      	b.n	80010d6 <FLASH_IF_Write+0xda>
    return FLASH_LOCK_ERROR;
 80010ec:	f06f 0003 	mvn.w	r0, #3
 80010f0:	e7f1      	b.n	80010d6 <FLASH_IF_Write+0xda>
        return FLASH_PARAM_ERROR;
 80010f2:	f06f 0004 	mvn.w	r0, #4
 80010f6:	e7ee      	b.n	80010d6 <FLASH_IF_Write+0xda>
        status = FLASH_ERASE_ERROR;
 80010f8:	f06f 0001 	mvn.w	r0, #1
 80010fc:	e7eb      	b.n	80010d6 <FLASH_IF_Write+0xda>
        status = FLASH_WRITE_ERROR;
 80010fe:	f06f 0002 	mvn.w	r0, #2
 8001102:	e7e8      	b.n	80010d6 <FLASH_IF_Write+0xda>
 8001104:	1fff7000 	.word	0x1fff7000
 8001108:	03fffc00 	.word	0x03fffc00
 800110c:	58004000 	.word	0x58004000

08001110 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001114:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	2400      	movs	r4, #0
 8001118:	9403      	str	r4, [sp, #12]
 800111a:	9404      	str	r4, [sp, #16]
 800111c:	9405      	str	r4, [sp, #20]
 800111e:	9406      	str	r4, [sp, #24]
 8001120:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001128:	f042 0202 	orr.w	r2, r2, #2
 800112c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800112e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001130:	f002 0202 	and.w	r2, r2, #2
 8001134:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001136:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800113a:	f042 0204 	orr.w	r2, r2, #4
 800113e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001140:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001142:	f002 0204 	and.w	r2, r2, #4
 8001146:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001148:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800114a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800114c:	f042 0201 	orr.w	r2, r2, #1
 8001150:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800115a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|GPIO_PIN_3|LED2_Pin|PROB2_Pin
 800115c:	4e2b      	ldr	r6, [pc, #172]	; (800120c <MX_GPIO_Init+0xfc>)
 800115e:	4622      	mov	r2, r4
 8001160:	f64b 2108 	movw	r1, #47624	; 0xba08
 8001164:	4630      	mov	r0, r6
 8001166:	f002 ff98 	bl	800409a <HAL_GPIO_WritePin>
                          |PROB1_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800116a:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 800116e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2501      	movs	r5, #1
 8001172:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001176:	2302      	movs	r3, #2
 8001178:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	a903      	add	r1, sp, #12
 800117c:	4630      	mov	r0, r6
 800117e:	f002 fe35 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001182:	2308      	movs	r3, #8
 8001184:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	a903      	add	r1, sp, #12
 800118e:	4630      	mov	r0, r6
 8001190:	f002 fe2c 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8001194:	f04f 0803 	mov.w	r8, #3
 8001198:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800119c:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80011a0:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	a903      	add	r1, sp, #12
 80011a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011aa:	f002 fe1f 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80011ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011b2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011bc:	a903      	add	r1, sp, #12
 80011be:	4630      	mov	r0, r6
 80011c0:	f002 fe14 	bl	8003dec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80011c4:	2340      	movs	r3, #64	; 0x40
 80011c6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c8:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ca:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80011cc:	a903      	add	r1, sp, #12
 80011ce:	4810      	ldr	r0, [pc, #64]	; (8001210 <MX_GPIO_Init+0x100>)
 80011d0:	f002 fe0c 	bl	8003dec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011d4:	4622      	mov	r2, r4
 80011d6:	4621      	mov	r1, r4
 80011d8:	2006      	movs	r0, #6
 80011da:	f002 f9a7 	bl	800352c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011de:	2006      	movs	r0, #6
 80011e0:	f002 f9dc 	bl	800359c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011e4:	4622      	mov	r2, r4
 80011e6:	4621      	mov	r1, r4
 80011e8:	2007      	movs	r0, #7
 80011ea:	f002 f99f 	bl	800352c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011ee:	2007      	movs	r0, #7
 80011f0:	f002 f9d4 	bl	800359c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011f4:	4622      	mov	r2, r4
 80011f6:	4621      	mov	r1, r4
 80011f8:	2016      	movs	r0, #22
 80011fa:	f002 f997 	bl	800352c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011fe:	2016      	movs	r0, #22
 8001200:	f002 f9cc 	bl	800359c <HAL_NVIC_EnableIRQ>

}
 8001204:	b008      	add	sp, #32
 8001206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800120a:	bf00      	nop
 800120c:	48000400 	.word	0x48000400
 8001210:	48000800 	.word	0x48000800

08001214 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001216:	e7fe      	b.n	8001216 <Error_Handler+0x2>

08001218 <SystemClock_Config>:
{
 8001218:	b510      	push	{r4, lr}
 800121a:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121c:	2248      	movs	r2, #72	; 0x48
 800121e:	2100      	movs	r1, #0
 8001220:	a808      	add	r0, sp, #32
 8001222:	f00f fe8d 	bl	8010f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001226:	2400      	movs	r4, #0
 8001228:	9401      	str	r4, [sp, #4]
 800122a:	9402      	str	r4, [sp, #8]
 800122c:	9403      	str	r4, [sp, #12]
 800122e:	9404      	str	r4, [sp, #16]
 8001230:	9405      	str	r4, [sp, #20]
 8001232:	9406      	str	r4, [sp, #24]
 8001234:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001236:	f002 ff4d 	bl	80040d4 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800123a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800123e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001242:	f023 0318 	bic.w	r3, r3, #24
 8001246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800124a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800124e:	6813      	ldr	r3, [r2, #0]
 8001250:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	6813      	ldr	r3, [r2, #0]
 800125c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001264:	2324      	movs	r3, #36	; 0x24
 8001266:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001268:	2381      	movs	r3, #129	; 0x81
 800126a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800126c:	2301      	movs	r3, #1
 800126e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001270:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001272:	23b0      	movs	r3, #176	; 0xb0
 8001274:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001276:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	a808      	add	r0, sp, #32
 800127a:	f003 f8c5 	bl	8004408 <HAL_RCC_OscConfig>
 800127e:	b970      	cbnz	r0, 800129e <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001280:	234f      	movs	r3, #79	; 0x4f
 8001282:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001284:	2300      	movs	r3, #0
 8001286:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001288:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800128a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800128e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001290:	2102      	movs	r1, #2
 8001292:	a801      	add	r0, sp, #4
 8001294:	f003 fbf4 	bl	8004a80 <HAL_RCC_ClockConfig>
 8001298:	b918      	cbnz	r0, 80012a2 <SystemClock_Config+0x8a>
}
 800129a:	b01a      	add	sp, #104	; 0x68
 800129c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800129e:	f7ff ffb9 	bl	8001214 <Error_Handler>
    Error_Handler();
 80012a2:	f7ff ffb7 	bl	8001214 <Error_Handler>

080012a6 <main>:
{
 80012a6:	b508      	push	{r3, lr}
  HAL_Init();
 80012a8:	f001 fbfc 	bl	8002aa4 <HAL_Init>
  SystemClock_Config();
 80012ac:	f7ff ffb4 	bl	8001218 <SystemClock_Config>
  MX_GPIO_Init();
 80012b0:	f7ff ff2e 	bl	8001110 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80012b4:	f000 fe74 	bl	8001fa0 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 80012b8:	f000 fe78 	bl	8001fac <MX_LoRaWAN_Process>
  while (1)
 80012bc:	e7fc      	b.n	80012b8 <main+0x12>
	...

080012c0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012c0:	b500      	push	{lr}
 80012c2:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80012c4:	222c      	movs	r2, #44	; 0x2c
 80012c6:	2100      	movs	r1, #0
 80012c8:	a801      	add	r0, sp, #4
 80012ca:	f00f fe39 	bl	8010f40 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012ce:	4819      	ldr	r0, [pc, #100]	; (8001334 <MX_RTC_Init+0x74>)
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <MX_RTC_Init+0x78>)
 80012d2:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80012d4:	231f      	movs	r3, #31
 80012d6:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012dc:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012de:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e4:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80012e6:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80012e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ec:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012ee:	f003 ff2d 	bl	800514c <HAL_RTC_Init>
 80012f2:	b9a8      	cbnz	r0, 8001320 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80012f4:	480f      	ldr	r0, [pc, #60]	; (8001334 <MX_RTC_Init+0x74>)
 80012f6:	f004 f863 	bl	80053c0 <HAL_RTCEx_SetSSRU_IT>
 80012fa:	b9a0      	cbnz	r0, 8001326 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80012fc:	2200      	movs	r2, #0
 80012fe:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001300:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001302:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001304:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001308:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800130a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800130e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001310:	a901      	add	r1, sp, #4
 8001312:	4808      	ldr	r0, [pc, #32]	; (8001334 <MX_RTC_Init+0x74>)
 8001314:	f003 ff78 	bl	8005208 <HAL_RTC_SetAlarm_IT>
 8001318:	b940      	cbnz	r0, 800132c <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800131a:	b00d      	add	sp, #52	; 0x34
 800131c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001320:	f7ff ff78 	bl	8001214 <Error_Handler>
 8001324:	e7e6      	b.n	80012f4 <MX_RTC_Init+0x34>
    Error_Handler();
 8001326:	f7ff ff75 	bl	8001214 <Error_Handler>
 800132a:	e7e7      	b.n	80012fc <MX_RTC_Init+0x3c>
    Error_Handler();
 800132c:	f7ff ff72 	bl	8001214 <Error_Handler>
}
 8001330:	e7f3      	b.n	800131a <MX_RTC_Init+0x5a>
 8001332:	bf00      	nop
 8001334:	20000198 	.word	0x20000198
 8001338:	40002800 	.word	0x40002800

0800133c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800133c:	b510      	push	{r4, lr}
 800133e:	b090      	sub	sp, #64	; 0x40
 8001340:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001342:	2238      	movs	r2, #56	; 0x38
 8001344:	2100      	movs	r1, #0
 8001346:	a802      	add	r0, sp, #8
 8001348:	f00f fdfa 	bl	8010f40 <memset>
  if(rtcHandle->Instance==RTC)
 800134c:	6822      	ldr	r2, [r4, #0]
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_RTC_MspInit+0x7c>)
 8001350:	429a      	cmp	r2, r3
 8001352:	d001      	beq.n	8001358 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001354:	b010      	add	sp, #64	; 0x40
 8001356:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800135c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800135e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001362:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001364:	a802      	add	r0, sp, #8
 8001366:	f003 fcdf 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 800136a:	bb08      	cbnz	r0, 80013b0 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800136c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001370:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001374:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 800137c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800137e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001382:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800138c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	4611      	mov	r1, r2
 8001392:	2002      	movs	r0, #2
 8001394:	f002 f8ca 	bl	800352c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001398:	2002      	movs	r0, #2
 800139a:	f002 f8ff 	bl	800359c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	4611      	mov	r1, r2
 80013a2:	202a      	movs	r0, #42	; 0x2a
 80013a4:	f002 f8c2 	bl	800352c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80013a8:	202a      	movs	r0, #42	; 0x2a
 80013aa:	f002 f8f7 	bl	800359c <HAL_NVIC_EnableIRQ>
}
 80013ae:	e7d1      	b.n	8001354 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80013b0:	f7ff ff30 	bl	8001214 <Error_Handler>
 80013b4:	e7da      	b.n	800136c <HAL_RTC_MspInit+0x30>
 80013b6:	bf00      	nop
 80013b8:	40002800 	.word	0x40002800

080013bc <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80013bc:	4770      	bx	lr

080013be <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80013be:	4770      	bx	lr

080013c0 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80013c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80013c2:	f001 fb85 	bl	8002ad0 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80013c6:	2001      	movs	r0, #1
 80013c8:	4b02      	ldr	r3, [pc, #8]	; (80013d4 <PWR_EnterStopMode+0x14>)
 80013ca:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80013ce:	f002 fee5 	bl	800419c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80013d2:	bd08      	pop	{r3, pc}
 80013d4:	58000400 	.word	0x58000400

080013d8 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80013d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80013da:	f001 fb80 	bl	8002ade <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80013de:	bd08      	pop	{r3, pc}

080013e0 <PWR_ExitStopMode>:
{
 80013e0:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 80013e2:	f001 fb7c 	bl	8002ade <HAL_ResumeTick>
  vcom_Resume();
 80013e6:	f000 fc59 	bl	8001c9c <vcom_Resume>
}
 80013ea:	bd08      	pop	{r3, pc}

080013ec <PWR_EnterSleepMode>:
{
 80013ec:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 80013ee:	f001 fb6f 	bl	8002ad0 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80013f2:	2101      	movs	r1, #1
 80013f4:	2000      	movs	r0, #0
 80013f6:	f002 fe75 	bl	80040e4 <HAL_PWR_EnterSLEEPMode>
}
 80013fa:	bd08      	pop	{r3, pc}

080013fc <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fc:	4770      	bx	lr

080013fe <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <NMI_Handler>

08001400 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <HardFault_Handler>

08001402 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <MemManage_Handler>

08001404 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <BusFault_Handler>

08001406 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <UsageFault_Handler>

08001408 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001408:	4770      	bx	lr

0800140a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140a:	4770      	bx	lr

0800140c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140c:	4770      	bx	lr

0800140e <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140e:	4770      	bx	lr

08001410 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001410:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001412:	4802      	ldr	r0, [pc, #8]	; (800141c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001414:	f004 f800 	bl	8005418 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001418:	bd08      	pop	{r3, pc}
 800141a:	bf00      	nop
 800141c:	20000198 	.word	0x20000198

08001420 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001420:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001422:	2001      	movs	r0, #1
 8001424:	f002 fe48 	bl	80040b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001428:	bd08      	pop	{r3, pc}

0800142a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800142a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 800142c:	2002      	movs	r0, #2
 800142e:	f002 fe43 	bl	80040b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001432:	bd08      	pop	{r3, pc}

08001434 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001434:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001436:	4802      	ldr	r0, [pc, #8]	; (8001440 <DMA1_Channel5_IRQHandler+0xc>)
 8001438:	f002 face 	bl	80039d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800143c:	bd08      	pop	{r3, pc}
 800143e:	bf00      	nop
 8001440:	200001e4 	.word	0x200001e4

08001444 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001444:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001446:	2040      	movs	r0, #64	; 0x40
 8001448:	f002 fe36 	bl	80040b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800144c:	bd08      	pop	{r3, pc}
	...

08001450 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001450:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001452:	4802      	ldr	r0, [pc, #8]	; (800145c <USART2_IRQHandler+0xc>)
 8001454:	f004 fc9c 	bl	8005d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001458:	bd08      	pop	{r3, pc}
 800145a:	bf00      	nop
 800145c:	20000244 	.word	0x20000244

08001460 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001460:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001462:	4802      	ldr	r0, [pc, #8]	; (800146c <RTC_Alarm_IRQHandler+0xc>)
 8001464:	f003 fdea 	bl	800503c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001468:	bd08      	pop	{r3, pc}
 800146a:	bf00      	nop
 800146c:	20000198 	.word	0x20000198

08001470 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001470:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001472:	4802      	ldr	r0, [pc, #8]	; (800147c <SUBGHZ_Radio_IRQHandler+0xc>)
 8001474:	f004 fa7a 	bl	800596c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001478:	bd08      	pop	{r3, pc}
 800147a:	bf00      	nop
 800147c:	200001d0 	.word	0x200001d0

08001480 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001480:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001482:	4805      	ldr	r0, [pc, #20]	; (8001498 <MX_SUBGHZ_Init+0x18>)
 8001484:	2308      	movs	r3, #8
 8001486:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001488:	f003 fffc 	bl	8005484 <HAL_SUBGHZ_Init>
 800148c:	b900      	cbnz	r0, 8001490 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800148e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001490:	f7ff fec0 	bl	8001214 <Error_Handler>
}
 8001494:	e7fb      	b.n	800148e <MX_SUBGHZ_Init+0xe>
 8001496:	bf00      	nop
 8001498:	200001d0 	.word	0x200001d0

0800149c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800149c:	b500      	push	{lr}
 800149e:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80014a6:	f042 0201 	orr.w	r2, r2, #1
 80014aa:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80014ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80014b4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	4611      	mov	r1, r2
 80014ba:	2032      	movs	r0, #50	; 0x32
 80014bc:	f002 f836 	bl	800352c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80014c0:	2032      	movs	r0, #50	; 0x32
 80014c2:	f002 f86b 	bl	800359c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80014c6:	b003      	add	sp, #12
 80014c8:	f85d fb04 	ldr.w	pc, [sp], #4

080014cc <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80014cc:	b40c      	push	{r2, r3}
 80014ce:	b500      	push	{lr}
 80014d0:	b083      	sub	sp, #12
 80014d2:	ab04      	add	r3, sp, #16
 80014d4:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80014d8:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80014da:	f00f fc49 	bl	8010d70 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80014de:	b003      	add	sp, #12
 80014e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80014e4:	b002      	add	sp, #8
 80014e6:	4770      	bx	lr

080014e8 <TimestampNow>:
{
 80014e8:	b530      	push	{r4, r5, lr}
 80014ea:	b085      	sub	sp, #20
 80014ec:	4604      	mov	r4, r0
 80014ee:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 80014f0:	a802      	add	r0, sp, #8
 80014f2:	f00f f9b3 	bl	801085c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80014f6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	9b02      	ldr	r3, [sp, #8]
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <TimestampNow+0x2c>)
 8001500:	2110      	movs	r1, #16
 8001502:	4620      	mov	r0, r4
 8001504:	f7ff ffe2 	bl	80014cc <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001508:	4620      	mov	r0, r4
 800150a:	f7fe fe35 	bl	8000178 <strlen>
 800150e:	8028      	strh	r0, [r5, #0]
}
 8001510:	b005      	add	sp, #20
 8001512:	bd30      	pop	{r4, r5, pc}
 8001514:	08011114 	.word	0x08011114

08001518 <SystemApp_Init>:
{
 8001518:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800151a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151e:	6893      	ldr	r3, [r2, #8]
 8001520:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001524:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001526:	f00f fa1d 	bl	8010964 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800152a:	2401      	movs	r4, #1
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <SystemApp_Init+0x4c>)
 800152e:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001530:	f000 f8c4 	bl	80016bc <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001534:	f00e feb8 	bl	80102a8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <SystemApp_Init+0x50>)
 800153a:	f00e fecf 	bl	80102dc <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <SystemApp_Init+0x54>)
 8001540:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001544:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001546:	2002      	movs	r0, #2
 8001548:	f00e fece 	bl	80102e8 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 800154c:	f7ff fc1c 	bl	8000d88 <SYS_InitMeasurement>
  EnvSensors_Init();
 8001550:	f000 f942 	bl	80017d8 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001554:	f00e ffd8 	bl	8010508 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001558:	4621      	mov	r1, r4
 800155a:	4620      	mov	r0, r4
 800155c:	f00e fff4 	bl	8010548 <UTIL_LPM_SetOffMode>
}
 8001560:	bd10      	pop	{r4, pc}
 8001562:	bf00      	nop
 8001564:	200001dc 	.word	0x200001dc
 8001568:	080014e9 	.word	0x080014e9
 800156c:	58004000 	.word	0x58004000

08001570 <UTIL_SEQ_Idle>:
{
 8001570:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001572:	f00e ffff 	bl	8010574 <UTIL_LPM_EnterLowPower>
}
 8001576:	bd08      	pop	{r3, pc}

08001578 <GetBatteryLevel>:
    if (batteryLevelmV > VDD_BAT)
 8001578:	2200      	movs	r2, #0
}
 800157a:	4610      	mov	r0, r2
 800157c:	4770      	bx	lr

0800157e <GetTemperatureLevel>:
{
 800157e:	b500      	push	{lr}
 8001580:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001582:	4668      	mov	r0, sp
 8001584:	f000 f90c 	bl	80017a0 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001588:	9801      	ldr	r0, [sp, #4]
 800158a:	f7ff f977 	bl	800087c <__aeabi_f2iz>
}
 800158e:	b200      	sxth	r0, r0
 8001590:	b007      	add	sp, #28
 8001592:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001598 <GetUniqueId>:
{
 8001598:	b538      	push	{r3, r4, r5, lr}
 800159a:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <GetUniqueId+0x68>)
 800159e:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80015a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a6:	d013      	beq.n	80015d0 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 80015a8:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 80015aa:	0a1a      	lsrs	r2, r3, #8
 80015ac:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 80015ae:	0c1a      	lsrs	r2, r3, #16
 80015b0:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 80015b2:	0e1b      	lsrs	r3, r3, #24
 80015b4:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80015b6:	4b12      	ldr	r3, [pc, #72]	; (8001600 <GetUniqueId+0x68>)
 80015b8:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 80015bc:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80015be:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 80015c2:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 80015c4:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 80015c6:	0c1a      	lsrs	r2, r3, #16
 80015c8:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 80015ca:	0e1b      	lsrs	r3, r3, #24
 80015cc:	7003      	strb	r3, [r0, #0]
}
 80015ce:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80015d0:	f001 fa8c 	bl	8002aec <HAL_GetUIDw0>
 80015d4:	4605      	mov	r5, r0
 80015d6:	f001 fa95 	bl	8002b04 <HAL_GetUIDw2>
 80015da:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 80015dc:	f001 fa8c 	bl	8002af8 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 80015e0:	0e2b      	lsrs	r3, r5, #24
 80015e2:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 80015e4:	0c2b      	lsrs	r3, r5, #16
 80015e6:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 80015e8:	0a2b      	lsrs	r3, r5, #8
 80015ea:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 80015ec:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 80015ee:	0e03      	lsrs	r3, r0, #24
 80015f0:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 80015f2:	0c03      	lsrs	r3, r0, #16
 80015f4:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 80015f6:	0a03      	lsrs	r3, r0, #8
 80015f8:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 80015fa:	7020      	strb	r0, [r4, #0]
 80015fc:	e7e7      	b.n	80015ce <GetUniqueId+0x36>
 80015fe:	bf00      	nop
 8001600:	1fff7000 	.word	0x1fff7000

08001604 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <GetDevAddr+0x24>)
 8001606:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 800160a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800160e:	d000      	beq.n	8001612 <GetDevAddr+0xe>
}
 8001610:	4770      	bx	lr
{
 8001612:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001614:	f001 fa6a 	bl	8002aec <HAL_GetUIDw0>
 8001618:	4604      	mov	r4, r0
 800161a:	f001 fa6d 	bl	8002af8 <HAL_GetUIDw1>
 800161e:	4044      	eors	r4, r0
 8001620:	f001 fa70 	bl	8002b04 <HAL_GetUIDw2>
 8001624:	4060      	eors	r0, r4
}
 8001626:	bd10      	pop	{r4, pc}
 8001628:	1fff7000 	.word	0x1fff7000

0800162c <GetTemperatureAndhumidityLevel>:
void GetTemperatureAndhumidityLevel(uint16_t *Hum, int16_t *Temp){
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	b085      	sub	sp, #20
 8001630:	4605      	mov	r5, r0
 8001632:	460c      	mov	r4, r1
	DHT_GetData(&DHT11_Data);
 8001634:	a802      	add	r0, sp, #8
 8001636:	f000 fc71 	bl	8001f1c <DHT_GetData>
	h = DHT11_Data.Humidity;
 800163a:	9f03      	ldr	r7, [sp, #12]
	t = DHT11_Data.Temperature;
 800163c:	9e02      	ldr	r6, [sp, #8]
	APP_LOG(TS_ON, VLEVEL_M, "DHT11 Temp: %d\r\nDHT11 Humid: %d\r\n",(int)t, (int)h);
 800163e:	4638      	mov	r0, r7
 8001640:	f7ff f91c 	bl	800087c <__aeabi_f2iz>
 8001644:	9001      	str	r0, [sp, #4]
 8001646:	4630      	mov	r0, r6
 8001648:	f7ff f918 	bl	800087c <__aeabi_f2iz>
 800164c:	9000      	str	r0, [sp, #0]
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <GetTemperatureAndhumidityLevel+0x44>)
 8001650:	2201      	movs	r2, #1
 8001652:	2100      	movs	r1, #0
 8001654:	2002      	movs	r0, #2
 8001656:	f00e fe9b 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
	*Hum = (uint16_t)h;
 800165a:	4638      	mov	r0, r7
 800165c:	f7ff f934 	bl	80008c8 <__aeabi_f2uiz>
 8001660:	8028      	strh	r0, [r5, #0]
	*Temp = (int16_t)t;
 8001662:	4630      	mov	r0, r6
 8001664:	f7ff f90a 	bl	800087c <__aeabi_f2iz>
 8001668:	8020      	strh	r0, [r4, #0]
}
 800166a:	b005      	add	sp, #20
 800166c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166e:	bf00      	nop
 8001670:	08011120 	.word	0x08011120

08001674 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001674:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001676:	2101      	movs	r1, #1
 8001678:	2002      	movs	r0, #2
 800167a:	f00e ff4f 	bl	801051c <UTIL_LPM_SetStopMode>
}
 800167e:	bd08      	pop	{r3, pc}

08001680 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001680:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001682:	2100      	movs	r1, #0
 8001684:	2002      	movs	r0, #2
 8001686:	f00e ff49 	bl	801051c <UTIL_LPM_SetStopMode>
}
 800168a:	bd08      	pop	{r3, pc}

0800168c <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800168c:	2000      	movs	r0, #0
 800168e:	4770      	bx	lr

08001690 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001690:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HAL_GetTick+0x14>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b90b      	cbnz	r3, 800169c <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001698:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 800169a:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 800169c:	f000 f8c8 	bl	8001830 <TIMER_IF_GetTimerValue>
 80016a0:	e7fb      	b.n	800169a <HAL_GetTick+0xa>
 80016a2:	bf00      	nop
 80016a4:	200001dc 	.word	0x200001dc

080016a8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80016a8:	b500      	push	{lr}
 80016aa:	b083      	sub	sp, #12
 80016ac:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80016ae:	9801      	ldr	r0, [sp, #4]
 80016b0:	f000 f9a4 	bl	80019fc <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80016b4:	b003      	add	sp, #12
 80016b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080016bc <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80016bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016c0:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80016c2:	f001 fa25 	bl	8002b10 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80016c6:	f001 fa2b 	bl	8002b20 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80016ca:	f001 fa31 	bl	8002b30 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80016ce:	2400      	movs	r4, #0
 80016d0:	9405      	str	r4, [sp, #20]
 80016d2:	9406      	str	r4, [sp, #24]
 80016d4:	9407      	str	r4, [sp, #28]
 80016d6:	9408      	str	r4, [sp, #32]
 80016d8:	9409      	str	r4, [sp, #36]	; 0x24

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80016de:	2303      	movs	r3, #3
 80016e0:	9308      	str	r3, [sp, #32]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e8:	f042 0202 	orr.w	r2, r2, #2
 80016ec:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016f0:	f002 0202 	and.w	r2, r2, #2
 80016f4:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 80016f6:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016fa:	f042 0202 	orr.w	r2, r2, #2
 80016fe:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001702:	f002 0202 	and.w	r2, r2, #2
 8001706:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001708:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800170a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800170c:	f042 0202 	orr.w	r2, r2, #2
 8001710:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001714:	f002 0202 	and.w	r2, r2, #2
 8001718:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800171a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800171c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800171e:	f042 0202 	orr.w	r2, r2, #2
 8001722:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800172c:	9b01      	ldr	r3, [sp, #4]
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();
  PROBE_LINE3_CLK_ENABLE();
  PROBE_LINE4_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 800172e:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8001732:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001736:	4d19      	ldr	r5, [pc, #100]	; (800179c <DBG_Init+0xe0>)
 8001738:	a905      	add	r1, sp, #20
 800173a:	4628      	mov	r0, r5
 800173c:	f002 fb56 	bl	8003dec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001740:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 8001744:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001748:	a905      	add	r1, sp, #20
 800174a:	4628      	mov	r0, r5
 800174c:	f002 fb4e 	bl	8003dec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001750:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001754:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001756:	a905      	add	r1, sp, #20
 8001758:	4628      	mov	r0, r5
 800175a:	f002 fb47 	bl	8003dec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 800175e:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8001762:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001764:	a905      	add	r1, sp, #20
 8001766:	4628      	mov	r0, r5
 8001768:	f002 fb40 	bl	8003dec <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800176c:	4622      	mov	r2, r4
 800176e:	4649      	mov	r1, r9
 8001770:	4628      	mov	r0, r5
 8001772:	f002 fc92 	bl	800409a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001776:	4622      	mov	r2, r4
 8001778:	4641      	mov	r1, r8
 800177a:	4628      	mov	r0, r5
 800177c:	f002 fc8d 	bl	800409a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001780:	4622      	mov	r2, r4
 8001782:	4639      	mov	r1, r7
 8001784:	4628      	mov	r0, r5
 8001786:	f002 fc88 	bl	800409a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 800178a:	4622      	mov	r2, r4
 800178c:	4631      	mov	r1, r6
 800178e:	4628      	mov	r0, r5
 8001790:	f002 fc83 	bl	800409a <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001794:	b00b      	add	sp, #44	; 0x2c
 8001796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800179a:	bf00      	nop
 800179c:	48000400 	.word	0x48000400

080017a0 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80017a0:	b510      	push	{r4, lr}
 80017a2:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 80017a4:	f7ff fb1a 	bl	8000ddc <SYS_GetTemperatureLevel>
 80017a8:	f340 200f 	sbfx	r0, r0, #8, #16
 80017ac:	f7ff f812 	bl	80007d4 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <EnvSensors_Read+0x28>)
 80017b2:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80017b4:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <EnvSensors_Read+0x2c>)
 80017b8:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <EnvSensors_Read+0x30>)
 80017bc:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80017be:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <EnvSensors_Read+0x34>)
 80017c0:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 80017c2:	2000      	movs	r0, #0
 80017c4:	bd10      	pop	{r4, pc}
 80017c6:	bf00      	nop
 80017c8:	42480000 	.word	0x42480000
 80017cc:	447a0000 	.word	0x447a0000
 80017d0:	003e090d 	.word	0x003e090d
 80017d4:	000503ab 	.word	0x000503ab

080017d8 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80017d8:	2000      	movs	r0, #0
 80017da:	4770      	bx	lr

080017dc <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <TIMER_IF_SetTimerContext+0x1c>)
 80017de:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80017e0:	e001      	b.n	80017e6 <TIMER_IF_SetTimerContext+0xa>
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <TIMER_IF_SetTimerContext+0x1c>)
 80017e4:	6898      	ldr	r0, [r3, #8]
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <TIMER_IF_SetTimerContext+0x1c>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	4283      	cmp	r3, r0
 80017ec:	d1f9      	bne.n	80017e2 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 80017ee:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <TIMER_IF_SetTimerContext+0x20>)
 80017f2:	6018      	str	r0, [r3, #0]
}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40002800 	.word	0x40002800
 80017fc:	200001e0 	.word	0x200001e0

08001800 <TIMER_IF_GetTimerContext>:
}
 8001800:	4b01      	ldr	r3, [pc, #4]	; (8001808 <TIMER_IF_GetTimerContext+0x8>)
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	200001e0 	.word	0x200001e0

0800180c <TIMER_IF_GetTimerElapsedTime>:
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800180e:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001810:	e001      	b.n	8001816 <TIMER_IF_GetTimerElapsedTime+0xa>
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001814:	6898      	ldr	r0, [r3, #8]
 8001816:	4b04      	ldr	r3, [pc, #16]	; (8001828 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	4283      	cmp	r3, r0
 800181c:	d1f9      	bne.n	8001812 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 800181e:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001820:	4b02      	ldr	r3, [pc, #8]	; (800182c <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	1ac0      	subs	r0, r0, r3
 8001826:	4770      	bx	lr
 8001828:	40002800 	.word	0x40002800
 800182c:	200001e0 	.word	0x200001e0

08001830 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001830:	4b07      	ldr	r3, [pc, #28]	; (8001850 <TIMER_IF_GetTimerValue+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b153      	cbz	r3, 800184c <TIMER_IF_GetTimerValue+0x1c>
 8001836:	4b07      	ldr	r3, [pc, #28]	; (8001854 <TIMER_IF_GetTimerValue+0x24>)
 8001838:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800183a:	e001      	b.n	8001840 <TIMER_IF_GetTimerValue+0x10>
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <TIMER_IF_GetTimerValue+0x24>)
 800183e:	6898      	ldr	r0, [r3, #8]
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <TIMER_IF_GetTimerValue+0x24>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4283      	cmp	r3, r0
 8001846:	d1f9      	bne.n	800183c <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001848:	43c0      	mvns	r0, r0
 800184a:	4770      	bx	lr
  uint32_t ret = 0;
 800184c:	2000      	movs	r0, #0
}
 800184e:	4770      	bx	lr
 8001850:	200001dd 	.word	0x200001dd
 8001854:	40002800 	.word	0x40002800

08001858 <TIMER_IF_GetMinimumTimeout>:
}
 8001858:	2003      	movs	r0, #3
 800185a:	4770      	bx	lr

0800185c <TIMER_IF_Convert_ms2Tick>:
{
 800185c:	b508      	push	{r3, lr}
 800185e:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001860:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001864:	2300      	movs	r3, #0
 8001866:	0280      	lsls	r0, r0, #10
 8001868:	0d89      	lsrs	r1, r1, #22
 800186a:	f7ff f84d 	bl	8000908 <__aeabi_uldivmod>
}
 800186e:	bd08      	pop	{r3, pc}

08001870 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001870:	0ec2      	lsrs	r2, r0, #27
 8001872:	0143      	lsls	r3, r0, #5
 8001874:	1a1b      	subs	r3, r3, r0
 8001876:	f162 0200 	sbc.w	r2, r2, #0
 800187a:	0092      	lsls	r2, r2, #2
 800187c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	181b      	adds	r3, r3, r0
 8001884:	f142 0000 	adc.w	r0, r2, #0
 8001888:	00c0      	lsls	r0, r0, #3
 800188a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800188e:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001892:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001896:	4770      	bx	lr

08001898 <TIMER_IF_StopTimer>:
{
 8001898:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <TIMER_IF_StopTimer+0x20>)
 800189c:	2201      	movs	r2, #1
 800189e:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80018a0:	4c06      	ldr	r4, [pc, #24]	; (80018bc <TIMER_IF_StopTimer+0x24>)
 80018a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a6:	4620      	mov	r0, r4
 80018a8:	f003 fb88 	bl	8004fbc <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295
 80018b0:	6323      	str	r3, [r4, #48]	; 0x30
}
 80018b2:	2000      	movs	r0, #0
 80018b4:	bd10      	pop	{r4, pc}
 80018b6:	bf00      	nop
 80018b8:	40002800 	.word	0x40002800
 80018bc:	20000198 	.word	0x20000198

080018c0 <TIMER_IF_BkUp_Write_MSBticks>:
{
 80018c0:	b508      	push	{r3, lr}
 80018c2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80018c4:	2102      	movs	r1, #2
 80018c6:	4802      	ldr	r0, [pc, #8]	; (80018d0 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 80018c8:	f003 fdbb 	bl	8005442 <HAL_RTCEx_BKUPWrite>
}
 80018cc:	bd08      	pop	{r3, pc}
 80018ce:	bf00      	nop
 80018d0:	20000198 	.word	0x20000198

080018d4 <TIMER_IF_Init>:
{
 80018d4:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <TIMER_IF_Init+0x40>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b10b      	cbz	r3, 80018e0 <TIMER_IF_Init+0xc>
}
 80018dc:	2000      	movs	r0, #0
 80018de:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80018e0:	4c0d      	ldr	r4, [pc, #52]	; (8001918 <TIMER_IF_Init+0x44>)
 80018e2:	f04f 35ff 	mov.w	r5, #4294967295
 80018e6:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 80018e8:	f7ff fcea 	bl	80012c0 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 80018ec:	f7ff ffd4 	bl	8001898 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80018f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f4:	4620      	mov	r0, r4
 80018f6:	f003 fb61 	bl	8004fbc <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80018fa:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80018fc:	4620      	mov	r0, r4
 80018fe:	f003 fd3f 	bl	8005380 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff ffdc 	bl	80018c0 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001908:	f7ff ff68 	bl	80017dc <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 800190c:	4b01      	ldr	r3, [pc, #4]	; (8001914 <TIMER_IF_Init+0x40>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	e7e3      	b.n	80018dc <TIMER_IF_Init+0x8>
 8001914:	200001dd 	.word	0x200001dd
 8001918:	20000198 	.word	0x20000198

0800191c <TIMER_IF_BkUp_Write_Seconds>:
{
 800191c:	b508      	push	{r3, lr}
 800191e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001920:	2100      	movs	r1, #0
 8001922:	4802      	ldr	r0, [pc, #8]	; (800192c <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001924:	f003 fd8d 	bl	8005442 <HAL_RTCEx_BKUPWrite>
}
 8001928:	bd08      	pop	{r3, pc}
 800192a:	bf00      	nop
 800192c:	20000198 	.word	0x20000198

08001930 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001930:	b508      	push	{r3, lr}
 8001932:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001934:	2101      	movs	r1, #1
 8001936:	4802      	ldr	r0, [pc, #8]	; (8001940 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001938:	f003 fd83 	bl	8005442 <HAL_RTCEx_BKUPWrite>
}
 800193c:	bd08      	pop	{r3, pc}
 800193e:	bf00      	nop
 8001940:	20000198 	.word	0x20000198

08001944 <TIMER_IF_StartTimer>:
{
 8001944:	b510      	push	{r4, lr}
 8001946:	b08c      	sub	sp, #48	; 0x30
 8001948:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 800194a:	222c      	movs	r2, #44	; 0x2c
 800194c:	2100      	movs	r1, #0
 800194e:	a801      	add	r0, sp, #4
 8001950:	f00f faf6 	bl	8010f40 <memset>
  TIMER_IF_StopTimer();
 8001954:	f7ff ffa0 	bl	8001898 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <TIMER_IF_StartTimer+0x48>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800195e:	2300      	movs	r3, #0
 8001960:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001962:	43e4      	mvns	r4, r4
 8001964:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001966:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001968:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800196c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800196e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001972:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001974:	2201      	movs	r2, #1
 8001976:	a901      	add	r1, sp, #4
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <TIMER_IF_StartTimer+0x4c>)
 800197a:	f003 fc45 	bl	8005208 <HAL_RTC_SetAlarm_IT>
 800197e:	b910      	cbnz	r0, 8001986 <TIMER_IF_StartTimer+0x42>
}
 8001980:	2000      	movs	r0, #0
 8001982:	b00c      	add	sp, #48	; 0x30
 8001984:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001986:	f7ff fc45 	bl	8001214 <Error_Handler>
 800198a:	e7f9      	b.n	8001980 <TIMER_IF_StartTimer+0x3c>
 800198c:	200001e0 	.word	0x200001e0
 8001990:	20000198 	.word	0x20000198

08001994 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001994:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001996:	2102      	movs	r1, #2
 8001998:	4801      	ldr	r0, [pc, #4]	; (80019a0 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 800199a:	f003 fd59 	bl	8005450 <HAL_RTCEx_BKUPRead>
}
 800199e:	bd08      	pop	{r3, pc}
 80019a0:	20000198 	.word	0x20000198

080019a4 <TIMER_IF_GetTime>:
{
 80019a4:	b538      	push	{r3, r4, r5, lr}
 80019a6:	4605      	mov	r5, r0
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <TIMER_IF_GetTime+0x34>)
 80019aa:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80019ac:	e001      	b.n	80019b2 <TIMER_IF_GetTime+0xe>
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <TIMER_IF_GetTime+0x34>)
 80019b0:	689c      	ldr	r4, [r3, #8]
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <TIMER_IF_GetTime+0x34>)
 80019b4:	6892      	ldr	r2, [r2, #8]
 80019b6:	42a2      	cmp	r2, r4
 80019b8:	d1f9      	bne.n	80019ae <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 80019ba:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80019bc:	f7ff ffea 	bl	8001994 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80019c0:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80019c2:	0aa4      	lsrs	r4, r4, #10
 80019c4:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80019c8:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80019cc:	f7ff ff50 	bl	8001870 <TIMER_IF_Convert_Tick2ms>
 80019d0:	8028      	strh	r0, [r5, #0]
}
 80019d2:	4620      	mov	r0, r4
 80019d4:	bd38      	pop	{r3, r4, r5, pc}
 80019d6:	bf00      	nop
 80019d8:	40002800 	.word	0x40002800

080019dc <TIMER_IF_BkUp_Read_Seconds>:
{
 80019dc:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80019de:	2100      	movs	r1, #0
 80019e0:	4801      	ldr	r0, [pc, #4]	; (80019e8 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 80019e2:	f003 fd35 	bl	8005450 <HAL_RTCEx_BKUPRead>
}
 80019e6:	bd08      	pop	{r3, pc}
 80019e8:	20000198 	.word	0x20000198

080019ec <TIMER_IF_BkUp_Read_SubSeconds>:
{
 80019ec:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80019ee:	2101      	movs	r1, #1
 80019f0:	4801      	ldr	r0, [pc, #4]	; (80019f8 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 80019f2:	f003 fd2d 	bl	8005450 <HAL_RTCEx_BKUPRead>
}
 80019f6:	bd08      	pop	{r3, pc}
 80019f8:	20000198 	.word	0x20000198

080019fc <TIMER_IF_DelayMs>:
{
 80019fc:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80019fe:	f7ff ff2d 	bl	800185c <TIMER_IF_Convert_ms2Tick>
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <TIMER_IF_DelayMs+0x3c>)
 8001a04:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001a06:	e001      	b.n	8001a0c <TIMER_IF_DelayMs+0x10>
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <TIMER_IF_DelayMs+0x3c>)
 8001a0a:	6899      	ldr	r1, [r3, #8]
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <TIMER_IF_DelayMs+0x3c>)
 8001a0e:	6892      	ldr	r2, [r2, #8]
 8001a10:	428a      	cmp	r2, r1
 8001a12:	d1f9      	bne.n	8001a08 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001a14:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001a16:	e00a      	b.n	8001a2e <TIMER_IF_DelayMs+0x32>
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <TIMER_IF_DelayMs+0x3c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <TIMER_IF_DelayMs+0x3c>)
 8001a1e:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1f9      	bne.n	8001a18 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001a24:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001a26:	1a5b      	subs	r3, r3, r1
 8001a28:	4283      	cmp	r3, r0
 8001a2a:	d203      	bcs.n	8001a34 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001a2c:	bf00      	nop
 8001a2e:	4b02      	ldr	r3, [pc, #8]	; (8001a38 <TIMER_IF_DelayMs+0x3c>)
 8001a30:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001a32:	e7f3      	b.n	8001a1c <TIMER_IF_DelayMs+0x20>
}
 8001a34:	bd08      	pop	{r3, pc}
 8001a36:	bf00      	nop
 8001a38:	40002800 	.word	0x40002800

08001a3c <HAL_RTC_AlarmAEventCallback>:
{
 8001a3c:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001a3e:	f00f f8b5 	bl	8010bac <UTIL_TIMER_IRQ_Handler>
}
 8001a42:	bd08      	pop	{r3, pc}

08001a44 <HAL_RTCEx_SSRUEventCallback>:
{
 8001a44:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001a46:	f7ff ffa5 	bl	8001994 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001a4a:	3001      	adds	r0, #1
 8001a4c:	f7ff ff38 	bl	80018c0 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001a50:	bd08      	pop	{r3, pc}
	...

08001a54 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a54:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a56:	4817      	ldr	r0, [pc, #92]	; (8001ab4 <MX_USART2_UART_Init+0x60>)
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_USART2_UART_Init+0x64>)
 8001a5a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001a5c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001a60:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a62:	2300      	movs	r3, #0
 8001a64:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a66:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a68:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a72:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a74:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a76:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a78:	f004 ffe9 	bl	8006a4e <HAL_UART_Init>
 8001a7c:	b970      	cbnz	r0, 8001a9c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a7e:	2100      	movs	r1, #0
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <MX_USART2_UART_Init+0x60>)
 8001a82:	f005 f9a6 	bl	8006dd2 <HAL_UARTEx_SetTxFifoThreshold>
 8001a86:	b960      	cbnz	r0, 8001aa2 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	480a      	ldr	r0, [pc, #40]	; (8001ab4 <MX_USART2_UART_Init+0x60>)
 8001a8c:	f005 f9c6 	bl	8006e1c <HAL_UARTEx_SetRxFifoThreshold>
 8001a90:	b950      	cbnz	r0, 8001aa8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001a92:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <MX_USART2_UART_Init+0x60>)
 8001a94:	f005 f979 	bl	8006d8a <HAL_UARTEx_EnableFifoMode>
 8001a98:	b948      	cbnz	r0, 8001aae <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a9a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a9c:	f7ff fbba 	bl	8001214 <Error_Handler>
 8001aa0:	e7ed      	b.n	8001a7e <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8001aa2:	f7ff fbb7 	bl	8001214 <Error_Handler>
 8001aa6:	e7ef      	b.n	8001a88 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001aa8:	f7ff fbb4 	bl	8001214 <Error_Handler>
 8001aac:	e7f1      	b.n	8001a92 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001aae:	f7ff fbb1 	bl	8001214 <Error_Handler>
}
 8001ab2:	e7f2      	b.n	8001a9a <MX_USART2_UART_Init+0x46>
 8001ab4:	20000244 	.word	0x20000244
 8001ab8:	40004400 	.word	0x40004400

08001abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001abc:	b530      	push	{r4, r5, lr}
 8001abe:	b097      	sub	sp, #92	; 0x5c
 8001ac0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	9111      	str	r1, [sp, #68]	; 0x44
 8001ac6:	9112      	str	r1, [sp, #72]	; 0x48
 8001ac8:	9113      	str	r1, [sp, #76]	; 0x4c
 8001aca:	9114      	str	r1, [sp, #80]	; 0x50
 8001acc:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ace:	2238      	movs	r2, #56	; 0x38
 8001ad0:	a803      	add	r0, sp, #12
 8001ad2:	f00f fa35 	bl	8010f40 <memset>
  if(uartHandle->Instance==USART2)
 8001ad6:	6822      	ldr	r2, [r4, #0]
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_UART_MspInit+0xd4>)
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d001      	beq.n	8001ae2 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ade:	b017      	add	sp, #92	; 0x5c
 8001ae0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_UART_MspInit+0xd8>)
 8001ae8:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aea:	a803      	add	r0, sp, #12
 8001aec:	f003 f91c 	bl	8004d28 <HAL_RCCEx_PeriphCLKConfig>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d144      	bne.n	8001b7e <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001afa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001afe:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b02:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b06:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001b08:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b0c:	f042 0201 	orr.w	r2, r2, #1
 8001b10:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001b1a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001b1c:	230c      	movs	r3, #12
 8001b1e:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2500      	movs	r5, #0
 8001b26:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b2c:	2307      	movs	r3, #7
 8001b2e:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	a911      	add	r1, sp, #68	; 0x44
 8001b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b36:	f002 f959 	bl	8003dec <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001b3a:	4817      	ldr	r0, [pc, #92]	; (8001b98 <HAL_UART_MspInit+0xdc>)
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <HAL_UART_MspInit+0xe0>)
 8001b3e:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001b40:	2314      	movs	r3, #20
 8001b42:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b44:	2310      	movs	r3, #16
 8001b46:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b48:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b4e:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b50:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001b52:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b54:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b56:	f001 fdb1 	bl	80036bc <HAL_DMA_Init>
 8001b5a:	b998      	cbnz	r0, 8001b84 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b5c:	2110      	movs	r1, #16
 8001b5e:	480e      	ldr	r0, [pc, #56]	; (8001b98 <HAL_UART_MspInit+0xdc>)
 8001b60:	f001 ffae 	bl	8003ac0 <HAL_DMA_ConfigChannelAttributes>
 8001b64:	b988      	cbnz	r0, 8001b8a <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <HAL_UART_MspInit+0xdc>)
 8001b68:	67a3      	str	r3, [r4, #120]	; 0x78
 8001b6a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2102      	movs	r1, #2
 8001b70:	2025      	movs	r0, #37	; 0x25
 8001b72:	f001 fcdb 	bl	800352c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b76:	2025      	movs	r0, #37	; 0x25
 8001b78:	f001 fd10 	bl	800359c <HAL_NVIC_EnableIRQ>
}
 8001b7c:	e7af      	b.n	8001ade <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001b7e:	f7ff fb49 	bl	8001214 <Error_Handler>
 8001b82:	e7b7      	b.n	8001af4 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001b84:	f7ff fb46 	bl	8001214 <Error_Handler>
 8001b88:	e7e8      	b.n	8001b5c <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001b8a:	f7ff fb43 	bl	8001214 <Error_Handler>
 8001b8e:	e7ea      	b.n	8001b66 <HAL_UART_MspInit+0xaa>
 8001b90:	40004400 	.word	0x40004400
 8001b94:	000c0004 	.word	0x000c0004
 8001b98:	200001e4 	.word	0x200001e4
 8001b9c:	40020058 	.word	0x40020058

08001ba0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001ba0:	6802      	ldr	r2, [r0, #0]
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_UART_MspDeInit+0x34>)
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d000      	beq.n	8001baa <HAL_UART_MspDeInit+0xa>
 8001ba8:	4770      	bx	lr
{
 8001baa:	b510      	push	{r4, lr}
 8001bac:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001bae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001bb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001bb8:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001bba:	210c      	movs	r1, #12
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc0:	f002 f9e6 	bl	8003f90 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001bc4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001bc6:	f001 fdeb 	bl	80037a0 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001bca:	2025      	movs	r0, #37	; 0x25
 8001bcc:	f001 fcf4 	bl	80035b8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001bd0:	bd10      	pop	{r4, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40004400 	.word	0x40004400

08001bd8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001bd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <vcom_Init+0x20>)
 8001bdc:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001bde:	f7ff f953 	bl	8000e88 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001be2:	f7ff ff37 	bl	8001a54 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <vcom_Init+0x24>)
 8001be8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001bec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	bd08      	pop	{r3, pc}
 8001bf8:	200002d8 	.word	0x200002d8
 8001bfc:	58000800 	.word	0x58000800

08001c00 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001c00:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c08:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c0c:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c10:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001c14:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001c16:	4804      	ldr	r0, [pc, #16]	; (8001c28 <vcom_DeInit+0x28>)
 8001c18:	f7ff ffc2 	bl	8001ba0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001c1c:	200f      	movs	r0, #15
 8001c1e:	f001 fccb 	bl	80035b8 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001c22:	2000      	movs	r0, #0
 8001c24:	bd08      	pop	{r3, pc}
 8001c26:	bf00      	nop
 8001c28:	20000244 	.word	0x20000244

08001c2c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001c2c:	b508      	push	{r3, lr}
 8001c2e:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001c30:	4601      	mov	r1, r0
 8001c32:	4802      	ldr	r0, [pc, #8]	; (8001c3c <vcom_Trace_DMA+0x10>)
 8001c34:	f003 ffd8 	bl	8005be8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001c38:	2000      	movs	r0, #0
 8001c3a:	bd08      	pop	{r3, pc}
 8001c3c:	20000244 	.word	0x20000244

08001c40 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001c40:	b510      	push	{r4, lr}
 8001c42:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <vcom_ReceiveInit+0x50>)
 8001c46:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001c48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c4c:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001c4e:	ab02      	add	r3, sp, #8
 8001c50:	e913 0006 	ldmdb	r3, {r1, r2}
 8001c54:	480f      	ldr	r0, [pc, #60]	; (8001c94 <vcom_ReceiveInit+0x54>)
 8001c56:	f005 f840 	bl	8006cda <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <vcom_ReceiveInit+0x54>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001c64:	d1f9      	bne.n	8001c5a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001c66:	69da      	ldr	r2, [r3, #28]
 8001c68:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001c6c:	d0fb      	beq.n	8001c66 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c74:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001c76:	4c07      	ldr	r4, [pc, #28]	; (8001c94 <vcom_ReceiveInit+0x54>)
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f005 f86f 	bl	8006d5c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4905      	ldr	r1, [pc, #20]	; (8001c98 <vcom_ReceiveInit+0x58>)
 8001c82:	4620      	mov	r0, r4
 8001c84:	f004 ffba 	bl	8006bfc <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001c88:	2000      	movs	r0, #0
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd10      	pop	{r4, pc}
 8001c8e:	bf00      	nop
 8001c90:	200002d4 	.word	0x200002d4
 8001c94:	20000244 	.word	0x20000244
 8001c98:	200002dc 	.word	0x200002dc

08001c9c <vcom_Resume>:

void vcom_Resume(void)
{
 8001c9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c9e:	4807      	ldr	r0, [pc, #28]	; (8001cbc <vcom_Resume+0x20>)
 8001ca0:	f004 fed5 	bl	8006a4e <HAL_UART_Init>
 8001ca4:	b920      	cbnz	r0, 8001cb0 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <vcom_Resume+0x24>)
 8001ca8:	f001 fd08 	bl	80036bc <HAL_DMA_Init>
 8001cac:	b918      	cbnz	r0, 8001cb6 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001cae:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001cb0:	f7ff fab0 	bl	8001214 <Error_Handler>
 8001cb4:	e7f7      	b.n	8001ca6 <vcom_Resume+0xa>
    Error_Handler();
 8001cb6:	f7ff faad 	bl	8001214 <Error_Handler>
}
 8001cba:	e7f8      	b.n	8001cae <vcom_Resume+0x12>
 8001cbc:	20000244 	.word	0x20000244
 8001cc0:	200001e4 	.word	0x200001e4

08001cc4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cc4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001cc6:	6802      	ldr	r2, [r0, #0]
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <HAL_UART_TxCpltCallback+0x18>)
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d000      	beq.n	8001cd0 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001cce:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_UART_TxCpltCallback+0x1c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	4798      	blx	r3
}
 8001cd8:	e7f9      	b.n	8001cce <HAL_UART_TxCpltCallback+0xa>
 8001cda:	bf00      	nop
 8001cdc:	40004400 	.word	0x40004400
 8001ce0:	200002d8 	.word	0x200002d8

08001ce4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001ce4:	6802      	ldr	r2, [r0, #0]
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <HAL_UART_RxCpltCallback+0x2c>)
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d000      	beq.n	8001cee <HAL_UART_RxCpltCallback+0xa>
 8001cec:	4770      	bx	lr
{
 8001cee:	b510      	push	{r4, lr}
 8001cf0:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_UART_RxCpltCallback+0x30>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b12b      	cbz	r3, 8001d04 <HAL_UART_RxCpltCallback+0x20>
 8001cf8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001cfc:	b912      	cbnz	r2, 8001d04 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <HAL_UART_RxCpltCallback+0x34>)
 8001d02:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001d04:	2201      	movs	r2, #1
 8001d06:	4904      	ldr	r1, [pc, #16]	; (8001d18 <HAL_UART_RxCpltCallback+0x34>)
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f004 ff77 	bl	8006bfc <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001d0e:	bd10      	pop	{r4, pc}
 8001d10:	40004400 	.word	0x40004400
 8001d14:	200002d4 	.word	0x200002d4
 8001d18:	200002dc 	.word	0x200002dc

08001d1c <DWT_Delay_Init>:
#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <DWT_Delay_Init+0x44>)
 8001d1e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8001d22:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001d26:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001d2a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8001d2e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001d32:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001d36:	f5a3 435d 	sub.w	r3, r3, #56576	; 0xdd00
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	f022 0201 	bic.w	r2, r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	f042 0201 	orr.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001d4e:	bf00      	nop
     __ASM volatile ("NOP");
 8001d50:	bf00      	nop
  __ASM volatile ("NOP");
 8001d52:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	b10b      	cbz	r3, 8001d5c <DWT_Delay_Init+0x40>
     {
       return 0; /*clock cycle counter started*/
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4770      	bx	lr
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001d5c:	2001      	movs	r0, #1
  }
}
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <Set_Pin_Output>:
  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
}

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d64:	b500      	push	{lr}
 8001d66:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	9302      	str	r3, [sp, #8]
 8001d6e:	9303      	str	r3, [sp, #12]
 8001d70:	9304      	str	r3, [sp, #16]
 8001d72:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001d74:	9101      	str	r1, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001d7a:	a901      	add	r1, sp, #4
 8001d7c:	f002 f836 	bl	8003dec <HAL_GPIO_Init>
}
 8001d80:	b007      	add	sp, #28
 8001d82:	f85d fb04 	ldr.w	pc, [sp], #4

08001d86 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d86:	b500      	push	{lr}
 8001d88:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	9302      	str	r3, [sp, #8]
 8001d90:	9303      	str	r3, [sp, #12]
 8001d92:	9304      	str	r3, [sp, #16]
 8001d94:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001d96:	9101      	str	r1, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001d98:	a901      	add	r1, sp, #4
 8001d9a:	f002 f827 	bl	8003dec <HAL_GPIO_Init>
}
 8001d9e:	b007      	add	sp, #28
 8001da0:	f85d fb04 	ldr.w	pc, [sp], #4

08001da4 <DHT_Start>:


void DHT_Start (void)
{
 8001da4:	b538      	push	{r3, r4, r5, lr}
	DWT_Delay_Init();
 8001da6:	f7ff ffb9 	bl	8001d1c <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8001daa:	4c1a      	ldr	r4, [pc, #104]	; (8001e14 <DHT_Start+0x70>)
 8001dac:	2108      	movs	r1, #8
 8001dae:	4620      	mov	r0, r4
 8001db0:	f7ff ffd8 	bl	8001d64 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8001db4:	2200      	movs	r2, #0
 8001db6:	2108      	movs	r1, #8
 8001db8:	4620      	mov	r0, r4
 8001dba:	f002 f96e 	bl	800409a <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8001dbe:	f244 6450 	movw	r4, #18000	; 0x4650
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001dc2:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <DHT_Start+0x74>)
 8001dc4:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001dc6:	f002 fb0f 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <DHT_Start+0x78>)
 8001dcc:	fba3 2300 	umull	r2, r3, r3, r0
 8001dd0:	0c9b      	lsrs	r3, r3, #18
 8001dd2:	fb03 f404 	mul.w	r4, r3, r4
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <DHT_Start+0x74>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	1b5b      	subs	r3, r3, r5
 8001ddc:	42a3      	cmp	r3, r4
 8001dde:	d3fa      	bcc.n	8001dd6 <DHT_Start+0x32>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8001de0:	2201      	movs	r2, #1
 8001de2:	2108      	movs	r1, #8
 8001de4:	480b      	ldr	r0, [pc, #44]	; (8001e14 <DHT_Start+0x70>)
 8001de6:	f002 f958 	bl	800409a <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8001dea:	2414      	movs	r4, #20
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <DHT_Start+0x74>)
 8001dee:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001df0:	f002 fafa 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <DHT_Start+0x78>)
 8001df6:	fba3 2300 	umull	r2, r3, r3, r0
 8001dfa:	0c9b      	lsrs	r3, r3, #18
 8001dfc:	fb03 f404 	mul.w	r4, r3, r4
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <DHT_Start+0x74>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	1b5b      	subs	r3, r3, r5
 8001e06:	42a3      	cmp	r3, r4
 8001e08:	d3fa      	bcc.n	8001e00 <DHT_Start+0x5c>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8001e0a:	2108      	movs	r1, #8
 8001e0c:	4801      	ldr	r0, [pc, #4]	; (8001e14 <DHT_Start+0x70>)
 8001e0e:	f7ff ffba 	bl	8001d86 <Set_Pin_Input>
}
 8001e12:	bd38      	pop	{r3, r4, r5, pc}
 8001e14:	48000400 	.word	0x48000400
 8001e18:	e0001000 	.word	0xe0001000
 8001e1c:	431bde83 	.word	0x431bde83

08001e20 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8001e20:	b538      	push	{r3, r4, r5, lr}
	uint8_t Response = 0;
	delay (40);
 8001e22:	2428      	movs	r4, #40	; 0x28
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <DHT_Check_Response+0x70>)
 8001e26:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001e28:	f002 fade 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <DHT_Check_Response+0x74>)
 8001e2e:	fba3 2300 	umull	r2, r3, r3, r0
 8001e32:	0c9b      	lsrs	r3, r3, #18
 8001e34:	fb03 f404 	mul.w	r4, r3, r4
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001e38:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <DHT_Check_Response+0x70>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	1b5b      	subs	r3, r3, r5
 8001e3e:	42a3      	cmp	r3, r4
 8001e40:	d3fa      	bcc.n	8001e38 <DHT_Check_Response+0x18>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8001e42:	2108      	movs	r1, #8
 8001e44:	4814      	ldr	r0, [pc, #80]	; (8001e98 <DHT_Check_Response+0x78>)
 8001e46:	f002 f921 	bl	800408c <HAL_GPIO_ReadPin>
 8001e4a:	b140      	cbz	r0, 8001e5e <DHT_Check_Response+0x3e>
	uint8_t Response = 0;
 8001e4c:	2400      	movs	r4, #0
	{
		delay (80);
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
		else Response = -1;
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001e4e:	2108      	movs	r1, #8
 8001e50:	4811      	ldr	r0, [pc, #68]	; (8001e98 <DHT_Check_Response+0x78>)
 8001e52:	f002 f91b 	bl	800408c <HAL_GPIO_ReadPin>
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d1f9      	bne.n	8001e4e <DHT_Check_Response+0x2e>

	return Response;
}
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	bd38      	pop	{r3, r4, r5, pc}
		delay (80);
 8001e5e:	2450      	movs	r4, #80	; 0x50
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <DHT_Check_Response+0x70>)
 8001e62:	685d      	ldr	r5, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001e64:	f002 fac0 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <DHT_Check_Response+0x74>)
 8001e6a:	fba3 2300 	umull	r2, r3, r3, r0
 8001e6e:	0c9b      	lsrs	r3, r3, #18
 8001e70:	fb03 f404 	mul.w	r4, r3, r4
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <DHT_Check_Response+0x70>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	1b5b      	subs	r3, r3, r5
 8001e7a:	42a3      	cmp	r3, r4
 8001e7c:	d3fa      	bcc.n	8001e74 <DHT_Check_Response+0x54>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8001e7e:	2108      	movs	r1, #8
 8001e80:	4805      	ldr	r0, [pc, #20]	; (8001e98 <DHT_Check_Response+0x78>)
 8001e82:	f002 f903 	bl	800408c <HAL_GPIO_ReadPin>
 8001e86:	b108      	cbz	r0, 8001e8c <DHT_Check_Response+0x6c>
 8001e88:	2401      	movs	r4, #1
 8001e8a:	e7e0      	b.n	8001e4e <DHT_Check_Response+0x2e>
		else Response = -1;
 8001e8c:	24ff      	movs	r4, #255	; 0xff
 8001e8e:	e7de      	b.n	8001e4e <DHT_Check_Response+0x2e>
 8001e90:	e0001000 	.word	0xe0001000
 8001e94:	431bde83 	.word	0x431bde83
 8001e98:	48000400 	.word	0x48000400

08001e9c <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9e:	2600      	movs	r6, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001ea0:	4635      	mov	r5, r6
 8001ea2:	e00d      	b.n	8001ec0 <DHT_Read+0x24>
		delay (40);   // wait for 40 us
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
		{
			i&= ~(1<<(7-j));   // write 0
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001ea4:	f1c5 0207 	rsb	r2, r5, #7
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	4093      	lsls	r3, r2
 8001eac:	431e      	orrs	r6, r3
 8001eae:	b2f6      	uxtb	r6, r6
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001eb0:	2108      	movs	r1, #8
 8001eb2:	4817      	ldr	r0, [pc, #92]	; (8001f10 <DHT_Read+0x74>)
 8001eb4:	f002 f8ea 	bl	800408c <HAL_GPIO_ReadPin>
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	d1f9      	bne.n	8001eb0 <DHT_Read+0x14>
	for (j=0;j<8;j++)
 8001ebc:	3501      	adds	r5, #1
 8001ebe:	b2ed      	uxtb	r5, r5
 8001ec0:	2d07      	cmp	r5, #7
 8001ec2:	d822      	bhi.n	8001f0a <DHT_Read+0x6e>
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001ec4:	2108      	movs	r1, #8
 8001ec6:	4812      	ldr	r0, [pc, #72]	; (8001f10 <DHT_Read+0x74>)
 8001ec8:	f002 f8e0 	bl	800408c <HAL_GPIO_ReadPin>
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	d0f9      	beq.n	8001ec4 <DHT_Read+0x28>
		delay (40);   // wait for 40 us
 8001ed0:	2428      	movs	r4, #40	; 0x28
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <DHT_Read+0x78>)
 8001ed4:	685f      	ldr	r7, [r3, #4]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001ed6:	f002 fa87 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <DHT_Read+0x7c>)
 8001edc:	fba3 2300 	umull	r2, r3, r3, r0
 8001ee0:	0c9b      	lsrs	r3, r3, #18
 8001ee2:	fb03 f404 	mul.w	r4, r3, r4
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <DHT_Read+0x78>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	1bdb      	subs	r3, r3, r7
 8001eec:	42a3      	cmp	r3, r4
 8001eee:	d3fa      	bcc.n	8001ee6 <DHT_Read+0x4a>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8001ef0:	2108      	movs	r1, #8
 8001ef2:	4807      	ldr	r0, [pc, #28]	; (8001f10 <DHT_Read+0x74>)
 8001ef4:	f002 f8ca 	bl	800408c <HAL_GPIO_ReadPin>
 8001ef8:	2800      	cmp	r0, #0
 8001efa:	d1d3      	bne.n	8001ea4 <DHT_Read+0x8>
			i&= ~(1<<(7-j));   // write 0
 8001efc:	f1c5 0207 	rsb	r2, r5, #7
 8001f00:	2301      	movs	r3, #1
 8001f02:	4093      	lsls	r3, r2
 8001f04:	ea26 0603 	bic.w	r6, r6, r3
 8001f08:	e7d2      	b.n	8001eb0 <DHT_Read+0x14>
	}
	return i;
}
 8001f0a:	4630      	mov	r0, r6
 8001f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	48000400 	.word	0x48000400
 8001f14:	e0001000 	.word	0xe0001000
 8001f18:	431bde83 	.word	0x431bde83

08001f1c <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f20:	4604      	mov	r4, r0
    DHT_Start ();
 8001f22:	f7ff ff3f 	bl	8001da4 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001f26:	f7ff ff7b 	bl	8001e20 <DHT_Check_Response>
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <DHT_GetData+0x6c>)
 8001f2c:	7018      	strb	r0, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001f2e:	f7ff ffb5 	bl	8001e9c <DHT_Read>
 8001f32:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8001f8c <DHT_GetData+0x70>
 8001f36:	f888 0000 	strb.w	r0, [r8]
	Rh_byte2 = DHT_Read ();
 8001f3a:	f7ff ffaf 	bl	8001e9c <DHT_Read>
 8001f3e:	4f14      	ldr	r7, [pc, #80]	; (8001f90 <DHT_GetData+0x74>)
 8001f40:	7038      	strb	r0, [r7, #0]
	Temp_byte1 = DHT_Read ();
 8001f42:	f7ff ffab 	bl	8001e9c <DHT_Read>
 8001f46:	4e13      	ldr	r6, [pc, #76]	; (8001f94 <DHT_GetData+0x78>)
 8001f48:	7030      	strb	r0, [r6, #0]
	Temp_byte2 = DHT_Read ();
 8001f4a:	f7ff ffa7 	bl	8001e9c <DHT_Read>
 8001f4e:	4d12      	ldr	r5, [pc, #72]	; (8001f98 <DHT_GetData+0x7c>)
 8001f50:	7028      	strb	r0, [r5, #0]
	SUM = DHT_Read();
 8001f52:	f7ff ffa3 	bl	8001e9c <DHT_Read>
 8001f56:	b282      	uxth	r2, r0
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <DHT_GetData+0x80>)
 8001f5a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001f5c:	f898 3000 	ldrb.w	r3, [r8]
 8001f60:	7839      	ldrb	r1, [r7, #0]
 8001f62:	440b      	add	r3, r1
 8001f64:	7830      	ldrb	r0, [r6, #0]
 8001f66:	4403      	add	r3, r0
 8001f68:	7829      	ldrb	r1, [r5, #0]
 8001f6a:	440b      	add	r3, r1
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <DHT_GetData+0x58>
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8001f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			DHT_Data->Temperature = Temp_byte1;
 8001f74:	f7fe fc2a 	bl	80007cc <__aeabi_ui2f>
 8001f78:	6020      	str	r0, [r4, #0]
			DHT_Data->Humidity = Rh_byte1;
 8001f7a:	f898 0000 	ldrb.w	r0, [r8]
 8001f7e:	f7fe fc25 	bl	80007cc <__aeabi_ui2f>
 8001f82:	6060      	str	r0, [r4, #4]
}
 8001f84:	e7f4      	b.n	8001f70 <DHT_GetData+0x54>
 8001f86:	bf00      	nop
 8001f88:	200002dd 	.word	0x200002dd
 8001f8c:	200002de 	.word	0x200002de
 8001f90:	200002df 	.word	0x200002df
 8001f94:	200002e2 	.word	0x200002e2
 8001f98:	200002e3 	.word	0x200002e3
 8001f9c:	200002e0 	.word	0x200002e0

08001fa0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001fa0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001fa2:	f7ff fab9 	bl	8001518 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001fa6:	f000 fba5 	bl	80026f4 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001faa:	bd08      	pop	{r3, pc}

08001fac <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8001fac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001fae:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb2:	f00e fb4b 	bl	801064c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001fb6:	bd08      	pop	{r3, pc}

08001fb8 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8001fb8:	4b01      	ldr	r3, [pc, #4]	; (8001fc0 <OnTxFrameCtrlChanged+0x8>)
 8001fba:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000058 	.word	0x20000058

08001fc4 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8001fc4:	4b01      	ldr	r3, [pc, #4]	; (8001fcc <OnPingSlotPeriodicityChanged+0x8>)
 8001fc6:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000058 	.word	0x20000058

08001fd0 <OnBeaconStatusChange>:
  if (params != NULL)
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	d03f      	beq.n	8002054 <OnBeaconStatusChange+0x84>
{
 8001fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd8:	b08c      	sub	sp, #48	; 0x30
 8001fda:	4603      	mov	r3, r0
    switch (params->State)
 8001fdc:	7842      	ldrb	r2, [r0, #1]
 8001fde:	2a02      	cmp	r2, #2
 8001fe0:	d00a      	beq.n	8001ff8 <OnBeaconStatusChange+0x28>
 8001fe2:	2a03      	cmp	r2, #3
 8001fe4:	d02f      	beq.n	8002046 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <OnBeaconStatusChange+0x88>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	4611      	mov	r1, r2
 8001fec:	2002      	movs	r0, #2
 8001fee:	f00e f9cf 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 8001ff2:	b00c      	add	sp, #48	; 0x30
 8001ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8001ff8:	7c02      	ldrb	r2, [r0, #16]
 8001ffa:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 8001ffe:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002002:	7d9c      	ldrb	r4, [r3, #22]
 8002004:	7ddd      	ldrb	r5, [r3, #23]
 8002006:	7e1e      	ldrb	r6, [r3, #24]
 8002008:	7e5f      	ldrb	r7, [r3, #25]
 800200a:	f893 c01a 	ldrb.w	ip, [r3, #26]
 800200e:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8002012:	f893 801c 	ldrb.w	r8, [r3, #28]
 8002016:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800201a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800201e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002022:	9708      	str	r7, [sp, #32]
 8002024:	9607      	str	r6, [sp, #28]
 8002026:	9506      	str	r5, [sp, #24]
 8002028:	9405      	str	r4, [sp, #20]
 800202a:	685c      	ldr	r4, [r3, #4]
 800202c:	9404      	str	r4, [sp, #16]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	9303      	str	r3, [sp, #12]
 8002032:	9002      	str	r0, [sp, #8]
 8002034:	9101      	str	r1, [sp, #4]
 8002036:	9200      	str	r2, [sp, #0]
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <OnBeaconStatusChange+0x8c>)
 800203a:	2200      	movs	r2, #0
 800203c:	4611      	mov	r1, r2
 800203e:	2002      	movs	r0, #2
 8002040:	f00e f9a6 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002044:	e7d5      	b.n	8001ff2 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <OnBeaconStatusChange+0x90>)
 8002048:	2200      	movs	r2, #0
 800204a:	4611      	mov	r1, r2
 800204c:	2002      	movs	r0, #2
 800204e:	f00e f99f 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 8002052:	e7ce      	b.n	8001ff2 <OnBeaconStatusChange+0x22>
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	08011194 	.word	0x08011194
 800205c:	080111ac 	.word	0x080111ac
 8002060:	08011220 	.word	0x08011220

08002064 <OnClassChange>:
{
 8002064:	b500      	push	{lr}
 8002066:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <OnClassChange+0x1c>)
 800206a:	5c1b      	ldrb	r3, [r3, r0]
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <OnClassChange+0x20>)
 8002070:	2200      	movs	r2, #0
 8002072:	4611      	mov	r1, r2
 8002074:	2002      	movs	r0, #2
 8002076:	f00e f98b 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 800207a:	b003      	add	sp, #12
 800207c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002080:	0801125c 	.word	0x0801125c
 8002084:	08011240 	.word	0x08011240

08002088 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8002088:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800208a:	2801      	cmp	r0, #1
 800208c:	d006      	beq.n	800209c <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <OnNvmDataChange+0x24>)
 8002090:	2200      	movs	r2, #0
 8002092:	4611      	mov	r1, r2
 8002094:	2002      	movs	r0, #2
 8002096:	f00e f97b 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800209a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <OnNvmDataChange+0x28>)
 800209e:	2200      	movs	r2, #0
 80020a0:	4611      	mov	r1, r2
 80020a2:	2002      	movs	r0, #2
 80020a4:	f00e f974 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 80020a8:	e7f7      	b.n	800209a <OnNvmDataChange+0x12>
 80020aa:	bf00      	nop
 80020ac:	08011274 	.word	0x08011274
 80020b0:	08011260 	.word	0x08011260

080020b4 <OnTxTimerEvent>:
{
 80020b4:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80020b6:	2100      	movs	r1, #0
 80020b8:	2002      	movs	r0, #2
 80020ba:	f00e fa93 	bl	80105e4 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 80020be:	4802      	ldr	r0, [pc, #8]	; (80020c8 <OnTxTimerEvent+0x14>)
 80020c0:	f00e fd14 	bl	8010aec <UTIL_TIMER_Start>
}
 80020c4:	bd08      	pop	{r3, pc}
 80020c6:	bf00      	nop
 80020c8:	2000043c 	.word	0x2000043c

080020cc <OnMacProcessNotify>:
{
 80020cc:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80020ce:	2100      	movs	r1, #0
 80020d0:	2001      	movs	r0, #1
 80020d2:	f00e fa87 	bl	80105e4 <UTIL_SEQ_SetTask>
}
 80020d6:	bd08      	pop	{r3, pc}

080020d8 <OnSystemReset>:
{
 80020d8:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80020da:	f005 fb89 	bl	80077f0 <LmHandlerHalt>
 80020de:	b100      	cbz	r0, 80020e2 <OnSystemReset+0xa>
}
 80020e0:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80020e2:	f005 f807 	bl	80070f4 <LmHandlerJoinStatus>
 80020e6:	2801      	cmp	r0, #1
 80020e8:	d1fa      	bne.n	80020e0 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020ea:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80020ee:	4905      	ldr	r1, [pc, #20]	; (8002104 <OnSystemReset+0x2c>)
 80020f0:	68ca      	ldr	r2, [r1, #12]
 80020f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80020f6:	4b04      	ldr	r3, [pc, #16]	; (8002108 <OnSystemReset+0x30>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60cb      	str	r3, [r1, #12]
 80020fc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002100:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002102:	e7fd      	b.n	8002100 <OnSystemReset+0x28>
 8002104:	e000ed00 	.word	0xe000ed00
 8002108:	05fa0004 	.word	0x05fa0004

0800210c <OnTxPeriodicityChanged>:
{
 800210c:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <OnTxPeriodicityChanged+0x28>)
 8002110:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 8002112:	b908      	cbnz	r0, 8002118 <OnTxPeriodicityChanged+0xc>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002114:	4a08      	ldr	r2, [pc, #32]	; (8002138 <OnTxPeriodicityChanged+0x2c>)
 8002116:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002118:	4c08      	ldr	r4, [pc, #32]	; (800213c <OnTxPeriodicityChanged+0x30>)
 800211a:	4620      	mov	r0, r4
 800211c:	f00e fc8c 	bl	8010a38 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <OnTxPeriodicityChanged+0x28>)
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	4620      	mov	r0, r4
 8002126:	f00e fd27 	bl	8010b78 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800212a:	4620      	mov	r0, r4
 800212c:	f00e fcde 	bl	8010aec <UTIL_TIMER_Start>
}
 8002130:	bd10      	pop	{r4, pc}
 8002132:	bf00      	nop
 8002134:	2000006c 	.word	0x2000006c
 8002138:	0036ee80 	.word	0x0036ee80
 800213c:	2000043c 	.word	0x2000043c

08002140 <OnTxData>:
  if ((params != NULL))
 8002140:	2800      	cmp	r0, #0
 8002142:	d042      	beq.n	80021ca <OnTxData+0x8a>
{
 8002144:	b510      	push	{r4, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800214a:	7803      	ldrb	r3, [r0, #0]
 800214c:	b90b      	cbnz	r3, 8002152 <OnTxData+0x12>
}
 800214e:	b004      	add	sp, #16
 8002150:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002152:	2201      	movs	r2, #1
 8002154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002158:	481c      	ldr	r0, [pc, #112]	; (80021cc <OnTxData+0x8c>)
 800215a:	f001 ff9e 	bl	800409a <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800215e:	481c      	ldr	r0, [pc, #112]	; (80021d0 <OnTxData+0x90>)
 8002160:	f00e fcc4 	bl	8010aec <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <OnTxData+0x94>)
 8002166:	2200      	movs	r2, #0
 8002168:	4611      	mov	r1, r2
 800216a:	2002      	movs	r0, #2
 800216c:	f00e f910 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8002170:	7c23      	ldrb	r3, [r4, #16]
 8002172:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8002176:	f994 1018 	ldrsb.w	r1, [r4, #24]
 800217a:	9103      	str	r1, [sp, #12]
 800217c:	9202      	str	r2, [sp, #8]
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	68e3      	ldr	r3, [r4, #12]
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <OnTxData+0x98>)
 8002186:	2200      	movs	r2, #0
 8002188:	4611      	mov	r1, r2
 800218a:	2003      	movs	r0, #3
 800218c:	f00e f900 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <OnTxData+0x9c>)
 8002192:	2200      	movs	r2, #0
 8002194:	4611      	mov	r1, r2
 8002196:	2003      	movs	r0, #3
 8002198:	f00e f8fa 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800219c:	7a23      	ldrb	r3, [r4, #8]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d10c      	bne.n	80021bc <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80021a2:	7a63      	ldrb	r3, [r4, #9]
 80021a4:	b143      	cbz	r3, 80021b8 <OnTxData+0x78>
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <OnTxData+0xa0>)
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <OnTxData+0xa4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	4611      	mov	r1, r2
 80021b0:	2003      	movs	r0, #3
 80021b2:	f00e f8ed 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 80021b6:	e7ca      	b.n	800214e <OnTxData+0xe>
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <OnTxData+0xa8>)
 80021ba:	e7f5      	b.n	80021a8 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <OnTxData+0xac>)
 80021be:	2200      	movs	r2, #0
 80021c0:	4611      	mov	r1, r2
 80021c2:	2003      	movs	r0, #3
 80021c4:	f00e f8e4 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 80021c8:	e7c1      	b.n	800214e <OnTxData+0xe>
 80021ca:	4770      	bx	lr
 80021cc:	48000400 	.word	0x48000400
 80021d0:	20000424 	.word	0x20000424
 80021d4:	08011294 	.word	0x08011294
 80021d8:	080112c8 	.word	0x080112c8
 80021dc:	080112fc 	.word	0x080112fc
 80021e0:	08011290 	.word	0x08011290
 80021e4:	0801130c 	.word	0x0801130c
 80021e8:	08011288 	.word	0x08011288
 80021ec:	08011320 	.word	0x08011320

080021f0 <OnJoinRequest>:
  if (joinParams != NULL)
 80021f0:	b358      	cbz	r0, 800224a <OnJoinRequest+0x5a>
{
 80021f2:	b510      	push	{r4, lr}
 80021f4:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80021f6:	f990 3005 	ldrsb.w	r3, [r0, #5]
 80021fa:	b9fb      	cbnz	r3, 800223c <OnJoinRequest+0x4c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 80021fc:	4813      	ldr	r0, [pc, #76]	; (800224c <OnJoinRequest+0x5c>)
 80021fe:	f00e fc1b 	bl	8010a38 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002208:	4811      	ldr	r0, [pc, #68]	; (8002250 <OnJoinRequest+0x60>)
 800220a:	f001 ff46 	bl	800409a <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <OnJoinRequest+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	4611      	mov	r1, r2
 8002214:	2002      	movs	r0, #2
 8002216:	f00e f8bb 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800221a:	79a3      	ldrb	r3, [r4, #6]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d006      	beq.n	800222e <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <OnJoinRequest+0x68>)
 8002222:	2200      	movs	r2, #0
 8002224:	4611      	mov	r1, r2
 8002226:	2002      	movs	r0, #2
 8002228:	f00e f8b2 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 800222c:	e00c      	b.n	8002248 <OnJoinRequest+0x58>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <OnJoinRequest+0x6c>)
 8002230:	2200      	movs	r2, #0
 8002232:	4611      	mov	r1, r2
 8002234:	2002      	movs	r0, #2
 8002236:	f00e f8ab 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 800223a:	e005      	b.n	8002248 <OnJoinRequest+0x58>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <OnJoinRequest+0x70>)
 800223e:	2200      	movs	r2, #0
 8002240:	4611      	mov	r1, r2
 8002242:	2002      	movs	r0, #2
 8002244:	f00e f8a4 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 8002248:	bd10      	pop	{r4, pc}
 800224a:	4770      	bx	lr
 800224c:	200003d8 	.word	0x200003d8
 8002250:	48000400 	.word	0x48000400
 8002254:	08011330 	.word	0x08011330
 8002258:	08011368 	.word	0x08011368
 800225c:	08011348 	.word	0x08011348
 8002260:	08011388 	.word	0x08011388

08002264 <OnStopJoinTimerEvent>:
{
 8002264:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <OnStopJoinTimerEvent+0x3c>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d013      	beq.n	8002296 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 800226e:	4c0d      	ldr	r4, [pc, #52]	; (80022a4 <OnStopJoinTimerEvent+0x40>)
 8002270:	2200      	movs	r2, #0
 8002272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002276:	4620      	mov	r0, r4
 8002278:	f001 ff0f 	bl	800409a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800227c:	2200      	movs	r2, #0
 800227e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002282:	4620      	mov	r0, r4
 8002284:	f001 ff09 	bl	800409a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002288:	2200      	movs	r2, #0
 800228a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800228e:	4620      	mov	r0, r4
 8002290:	f001 ff03 	bl	800409a <HAL_GPIO_WritePin>
}
 8002294:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8002296:	2100      	movs	r1, #0
 8002298:	2008      	movs	r0, #8
 800229a:	f00e f9a3 	bl	80105e4 <UTIL_SEQ_SetTask>
 800229e:	e7e6      	b.n	800226e <OnStopJoinTimerEvent+0xa>
 80022a0:	20000000 	.word	0x20000000
 80022a4:	48000400 	.word	0x48000400

080022a8 <OnRxTimerLedEvent>:
{
 80022a8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022b0:	4801      	ldr	r0, [pc, #4]	; (80022b8 <OnRxTimerLedEvent+0x10>)
 80022b2:	f001 fef2 	bl	800409a <HAL_GPIO_WritePin>
}
 80022b6:	bd08      	pop	{r3, pc}
 80022b8:	48000400 	.word	0x48000400

080022bc <OnTxTimerLedEvent>:
{
 80022bc:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80022be:	2200      	movs	r2, #0
 80022c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022c4:	4801      	ldr	r0, [pc, #4]	; (80022cc <OnTxTimerLedEvent+0x10>)
 80022c6:	f001 fee8 	bl	800409a <HAL_GPIO_WritePin>
}
 80022ca:	bd08      	pop	{r3, pc}
 80022cc:	48000400 	.word	0x48000400

080022d0 <OnRxData>:
  if (params != NULL)
 80022d0:	2900      	cmp	r1, #0
 80022d2:	f000 8095 	beq.w	8002400 <OnRxData+0x130>
{
 80022d6:	b570      	push	{r4, r5, r6, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	4604      	mov	r4, r0
 80022dc:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 80022de:	2201      	movs	r2, #1
 80022e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022e4:	4847      	ldr	r0, [pc, #284]	; (8002404 <OnRxData+0x134>)
 80022e6:	f001 fed8 	bl	800409a <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 80022ea:	4847      	ldr	r0, [pc, #284]	; (8002408 <OnRxData+0x138>)
 80022ec:	f00e fbfe 	bl	8010aec <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 80022f0:	782e      	ldrb	r6, [r5, #0]
 80022f2:	2e00      	cmp	r6, #0
 80022f4:	d068      	beq.n	80023c8 <OnRxData+0xf8>
      if (appData != NULL)
 80022f6:	2c00      	cmp	r4, #0
 80022f8:	d065      	beq.n	80023c6 <OnRxData+0xf6>
        RxPort = appData->Port;
 80022fa:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 80022fc:	6863      	ldr	r3, [r4, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d062      	beq.n	80023c8 <OnRxData+0xf8>
          switch (appData->Port)
 8002302:	2e03      	cmp	r6, #3
 8002304:	d00a      	beq.n	800231c <OnRxData+0x4c>
 8002306:	2e04      	cmp	r6, #4
 8002308:	d035      	beq.n	8002376 <OnRxData+0xa6>
 800230a:	2e02      	cmp	r6, #2
 800230c:	d01c      	beq.n	8002348 <OnRxData+0x78>
            	APP_LOG(TS_OFF, VLEVEL_M, "DOWNLINK FPORT ERROR\r\n");
 800230e:	4b3f      	ldr	r3, [pc, #252]	; (800240c <OnRxData+0x13c>)
 8002310:	2200      	movs	r2, #0
 8002312:	4611      	mov	r1, r2
 8002314:	2002      	movs	r0, #2
 8002316:	f00e f83b 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
            break;
 800231a:	e055      	b.n	80023c8 <OnRxData+0xf8>
              if (appData->BufferSize == 1)
 800231c:	7862      	ldrb	r2, [r4, #1]
 800231e:	2a01      	cmp	r2, #1
 8002320:	d152      	bne.n	80023c8 <OnRxData+0xf8>
                switch (appData->Buffer[0])
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d007      	beq.n	8002338 <OnRxData+0x68>
 8002328:	2b02      	cmp	r3, #2
 800232a:	d009      	beq.n	8002340 <OnRxData+0x70>
 800232c:	2b00      	cmp	r3, #0
 800232e:	d14b      	bne.n	80023c8 <OnRxData+0xf8>
                    LmHandlerRequestClass(CLASS_A);
 8002330:	2000      	movs	r0, #0
 8002332:	f004 ff93 	bl	800725c <LmHandlerRequestClass>
                    break;
 8002336:	e047      	b.n	80023c8 <OnRxData+0xf8>
                    LmHandlerRequestClass(CLASS_B);
 8002338:	2001      	movs	r0, #1
 800233a:	f004 ff8f 	bl	800725c <LmHandlerRequestClass>
                    break;
 800233e:	e043      	b.n	80023c8 <OnRxData+0xf8>
                    LmHandlerRequestClass(CLASS_C);
 8002340:	2002      	movs	r0, #2
 8002342:	f004 ff8b 	bl	800725c <LmHandlerRequestClass>
                    break;
 8002346:	e03f      	b.n	80023c8 <OnRxData+0xf8>
              if (appData->BufferSize == 1)
 8002348:	7862      	ldrb	r2, [r4, #1]
 800234a:	2a01      	cmp	r2, #1
 800234c:	d13c      	bne.n	80023c8 <OnRxData+0xf8>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	4a2e      	ldr	r2, [pc, #184]	; (8002410 <OnRxData+0x140>)
 8002356:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002358:	b933      	cbnz	r3, 8002368 <OnRxData+0x98>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800235a:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <OnRxData+0x144>)
 800235c:	2200      	movs	r2, #0
 800235e:	4611      	mov	r1, r2
 8002360:	2003      	movs	r0, #3
 8002362:	f00e f815 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 8002366:	e02f      	b.n	80023c8 <OnRxData+0xf8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002368:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <OnRxData+0x148>)
 800236a:	2200      	movs	r2, #0
 800236c:	4611      	mov	r1, r2
 800236e:	2003      	movs	r0, #3
 8002370:	f00e f80e 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 8002374:	e028      	b.n	80023c8 <OnRxData+0xf8>
			if (appData->BufferSize == 1)
 8002376:	7862      	ldrb	r2, [r4, #1]
 8002378:	2a01      	cmp	r2, #1
 800237a:	d1c8      	bne.n	800230e <OnRxData+0x3e>
				switch (appData->Buffer[0])
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d00d      	beq.n	800239e <OnRxData+0xce>
 8002382:	2b02      	cmp	r3, #2
 8002384:	d015      	beq.n	80023b2 <OnRxData+0xe2>
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1c1      	bne.n	800230e <OnRxData+0x3e>
					APP_LOG(TS_OFF, VLEVEL_M, "SWITCHED TO MSG CONTENT 1\r\n");
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <OnRxData+0x14c>)
 800238c:	2200      	movs	r2, #0
 800238e:	4611      	mov	r1, r2
 8002390:	2002      	movs	r0, #2
 8002392:	f00d fffd 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
					MsgContent = MSG_CONTENT_0;
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <OnRxData+0x150>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
				break;
 800239c:	e7b7      	b.n	800230e <OnRxData+0x3e>
					APP_LOG(TS_OFF, VLEVEL_M, "SWITCHED TO MSG CONTENT 2\r\n");
 800239e:	4b21      	ldr	r3, [pc, #132]	; (8002424 <OnRxData+0x154>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	4611      	mov	r1, r2
 80023a4:	2002      	movs	r0, #2
 80023a6:	f00d fff3 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
					MsgContent = MSG_CONTENT_1;
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <OnRxData+0x150>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
				break;
 80023b0:	e7ad      	b.n	800230e <OnRxData+0x3e>
					APP_LOG(TS_OFF, VLEVEL_M, "SWITCHED TO MSG CONTENT 3\r\n");
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <OnRxData+0x158>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	4611      	mov	r1, r2
 80023b8:	2002      	movs	r0, #2
 80023ba:	f00d ffe9 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
					MsgContent = MSG_CONTENT_2;
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <OnRxData+0x150>)
 80023c0:	2202      	movs	r2, #2
 80023c2:	701a      	strb	r2, [r3, #0]
				break;
 80023c4:	e7a3      	b.n	800230e <OnRxData+0x3e>
  uint8_t RxPort = 0;
 80023c6:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80023c8:	7c2b      	ldrb	r3, [r5, #16]
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	d901      	bls.n	80023d2 <OnRxData+0x102>
}
 80023ce:	b006      	add	sp, #24
 80023d0:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80023d2:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80023d6:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80023da:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80023de:	9005      	str	r0, [sp, #20]
 80023e0:	9104      	str	r1, [sp, #16]
 80023e2:	4912      	ldr	r1, [pc, #72]	; (800242c <OnRxData+0x15c>)
 80023e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023e8:	9303      	str	r3, [sp, #12]
 80023ea:	9202      	str	r2, [sp, #8]
 80023ec:	9601      	str	r6, [sp, #4]
 80023ee:	68eb      	ldr	r3, [r5, #12]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <OnRxData+0x160>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	4611      	mov	r1, r2
 80023f8:	2003      	movs	r0, #3
 80023fa:	f00d ffc9 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 80023fe:	e7e6      	b.n	80023ce <OnRxData+0xfe>
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	48000400 	.word	0x48000400
 8002408:	200003f4 	.word	0x200003f4
 800240c:	08011410 	.word	0x08011410
 8002410:	200003d6 	.word	0x200003d6
 8002414:	080113a4 	.word	0x080113a4
 8002418:	080113b0 	.word	0x080113b0
 800241c:	080113bc 	.word	0x080113bc
 8002420:	200003f0 	.word	0x200003f0
 8002424:	080113d8 	.word	0x080113d8
 8002428:	080113f4 	.word	0x080113f4
 800242c:	080115f8 	.word	0x080115f8
 8002430:	08011428 	.word	0x08011428

08002434 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002434:	b538      	push	{r3, r4, r5, lr}
 8002436:	4605      	mov	r5, r0
 8002438:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800243a:	f001 fb7f 	bl	8003b3c <HAL_FLASH_Unlock>
 800243e:	b100      	cbz	r0, 8002442 <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002440:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <OnStoreContextRequest+0x4c>)
 8002444:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8002448:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <OnStoreContextRequest+0x50>)
 800244a:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 800244e:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8002452:	fbb3 f3f0 	udiv	r3, r3, r0
 8002456:	fb00 f303 	mul.w	r3, r0, r3
 800245a:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 800245e:	2200      	movs	r2, #0
 8002460:	2101      	movs	r1, #1
 8002462:	0ad8      	lsrs	r0, r3, #11
 8002464:	f7fe fdae 	bl	8000fc4 <FLASH_IF_EraseByPages>
 8002468:	b110      	cbz	r0, 8002470 <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 800246a:	f001 fb7f 	bl	8003b6c <HAL_FLASH_Lock>
}
 800246e:	e7e7      	b.n	8002440 <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 8002470:	2300      	movs	r3, #0
 8002472:	4622      	mov	r2, r4
 8002474:	4629      	mov	r1, r5
 8002476:	4804      	ldr	r0, [pc, #16]	; (8002488 <OnStoreContextRequest+0x54>)
 8002478:	f7fe fdc0 	bl	8000ffc <FLASH_IF_Write>
 800247c:	e7f5      	b.n	800246a <OnStoreContextRequest+0x36>
 800247e:	bf00      	nop
 8002480:	1fff7000 	.word	0x1fff7000
 8002484:	03fffc00 	.word	0x03fffc00
 8002488:	0803f000 	.word	0x0803f000

0800248c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800248c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800248e:	b28a      	uxth	r2, r1
 8002490:	4901      	ldr	r1, [pc, #4]	; (8002498 <OnRestoreContextRequest+0xc>)
 8002492:	f00e f893 	bl	80105bc <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002496:	bd08      	pop	{r3, pc}
 8002498:	0803f000 	.word	0x0803f000

0800249c <StopJoin>:
{
 800249c:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800249e:	4c1e      	ldr	r4, [pc, #120]	; (8002518 <StopJoin+0x7c>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024a6:	4620      	mov	r0, r4
 80024a8:	f001 fdf7 	bl	800409a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80024ac:	2201      	movs	r2, #1
 80024ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024b2:	4620      	mov	r0, r4
 80024b4:	f001 fdf1 	bl	800409a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80024b8:	2201      	movs	r2, #1
 80024ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024be:	4620      	mov	r0, r4
 80024c0:	f001 fdeb 	bl	800409a <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 80024c4:	4815      	ldr	r0, [pc, #84]	; (800251c <StopJoin+0x80>)
 80024c6:	f00e fab7 	bl	8010a38 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80024ca:	f005 f989 	bl	80077e0 <LmHandlerStop>
 80024ce:	b148      	cbz	r0, 80024e4 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <StopJoin+0x84>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	4611      	mov	r1, r2
 80024d6:	2002      	movs	r0, #2
 80024d8:	f00d ff5a 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80024dc:	4811      	ldr	r0, [pc, #68]	; (8002524 <StopJoin+0x88>)
 80024de:	f00e fb05 	bl	8010aec <UTIL_TIMER_Start>
}
 80024e2:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80024e4:	4b10      	ldr	r3, [pc, #64]	; (8002528 <StopJoin+0x8c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	4611      	mov	r1, r2
 80024ea:	2002      	movs	r0, #2
 80024ec:	f00d ff50 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80024f0:	4c0e      	ldr	r4, [pc, #56]	; (800252c <StopJoin+0x90>)
 80024f2:	2501      	movs	r5, #1
 80024f4:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <StopJoin+0x94>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	4611      	mov	r1, r2
 80024fc:	2002      	movs	r0, #2
 80024fe:	f00d ff47 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 8002502:	480c      	ldr	r0, [pc, #48]	; (8002534 <StopJoin+0x98>)
 8002504:	f004 ffe8 	bl	80074d8 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8002508:	4629      	mov	r1, r5
 800250a:	7820      	ldrb	r0, [r4, #0]
 800250c:	f004 fd7a 	bl	8007004 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8002510:	4802      	ldr	r0, [pc, #8]	; (800251c <StopJoin+0x80>)
 8002512:	f00e faeb 	bl	8010aec <UTIL_TIMER_Start>
 8002516:	e7e1      	b.n	80024dc <StopJoin+0x40>
 8002518:	48000400 	.word	0x48000400
 800251c:	2000043c 	.word	0x2000043c
 8002520:	08011470 	.word	0x08011470
 8002524:	2000040c 	.word	0x2000040c
 8002528:	08011490 	.word	0x08011490
 800252c:	20000000 	.word	0x20000000
 8002530:	080114a4 	.word	0x080114a4
 8002534:	20000058 	.word	0x20000058

08002538 <StoreContext>:
{
 8002538:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 800253a:	f005 f961 	bl	8007800 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800253e:	f110 0f08 	cmn.w	r0, #8
 8002542:	d003      	beq.n	800254c <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002544:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002548:	d007      	beq.n	800255a <StoreContext+0x22>
}
 800254a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <StoreContext+0x30>)
 800254e:	2200      	movs	r2, #0
 8002550:	4611      	mov	r1, r2
 8002552:	2002      	movs	r0, #2
 8002554:	f00d ff1c 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 8002558:	e7f7      	b.n	800254a <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800255a:	4b04      	ldr	r3, [pc, #16]	; (800256c <StoreContext+0x34>)
 800255c:	2200      	movs	r2, #0
 800255e:	4611      	mov	r1, r2
 8002560:	2002      	movs	r0, #2
 8002562:	f00d ff15 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 8002566:	e7f0      	b.n	800254a <StoreContext+0x12>
 8002568:	080114c4 	.word	0x080114c4
 800256c:	080114dc 	.word	0x080114dc

08002570 <SendTxData>:
{
 8002570:	b530      	push	{r4, r5, lr}
 8002572:	b085      	sub	sp, #20
  switch (MsgContent){
 8002574:	4b4f      	ldr	r3, [pc, #316]	; (80026b4 <SendTxData+0x144>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d04c      	beq.n	8002616 <SendTxData+0xa6>
 800257c:	2b02      	cmp	r3, #2
 800257e:	d05b      	beq.n	8002638 <SendTxData+0xc8>
 8002580:	b343      	cbz	r3, 80025d4 <SendTxData+0x64>
 8002582:	2400      	movs	r4, #0
  BatteryLevel = GetBatteryLevel();
 8002584:	f7fe fff8 	bl	8001578 <GetBatteryLevel>
  AppData.Buffer[i++] = (uint8_t)(BatteryLevel);
 8002588:	4b4b      	ldr	r3, [pc, #300]	; (80026b8 <SendTxData+0x148>)
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	1c62      	adds	r2, r4, #1
 800258e:	5508      	strb	r0, [r1, r4]
  AppData.BufferSize = i;
 8002590:	705a      	strb	r2, [r3, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002592:	4b4a      	ldr	r3, [pc, #296]	; (80026bc <SendTxData+0x14c>)
 8002594:	7a5b      	ldrb	r3, [r3, #9]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d165      	bne.n	8002666 <SendTxData+0xf6>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800259a:	2200      	movs	r2, #0
 800259c:	4b48      	ldr	r3, [pc, #288]	; (80026c0 <SendTxData+0x150>)
 800259e:	78d9      	ldrb	r1, [r3, #3]
 80025a0:	4845      	ldr	r0, [pc, #276]	; (80026b8 <SendTxData+0x148>)
 80025a2:	f004 fdb9 	bl	8007118 <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d06b      	beq.n	8002682 <SendTxData+0x112>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status) //Checking if Tx needs to wait
 80025aa:	f110 0f06 	cmn.w	r0, #6
 80025ae:	d070      	beq.n	8002692 <SendTxData+0x122>
  UTIL_TIMER_Time_t nextTxIn = 0;
 80025b0:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 80025b2:	4c44      	ldr	r4, [pc, #272]	; (80026c4 <SendTxData+0x154>)
 80025b4:	4620      	mov	r0, r4
 80025b6:	f00e fa3f 	bl	8010a38 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 80025ba:	4b43      	ldr	r3, [pc, #268]	; (80026c8 <SendTxData+0x158>)
 80025bc:	6819      	ldr	r1, [r3, #0]
 80025be:	42a9      	cmp	r1, r5
 80025c0:	bf38      	it	cc
 80025c2:	4629      	movcc	r1, r5
 80025c4:	4620      	mov	r0, r4
 80025c6:	f00e fad7 	bl	8010b78 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 80025ca:	4620      	mov	r0, r4
 80025cc:	f00e fa8e 	bl	8010aec <UTIL_TIMER_Start>
}
 80025d0:	b005      	add	sp, #20
 80025d2:	bd30      	pop	{r4, r5, pc}
		  Get_ADC_Measurement(ADC_CHANNEL_3, photoresistance);
 80025d4:	a902      	add	r1, sp, #8
 80025d6:	483d      	ldr	r0, [pc, #244]	; (80026cc <SendTxData+0x15c>)
 80025d8:	f7fe fbc2 	bl	8000d60 <Get_ADC_Measurement>
		  AppData.Buffer[i++] = photoresistance[0];
 80025dc:	4c36      	ldr	r4, [pc, #216]	; (80026b8 <SendTxData+0x148>)
 80025de:	6863      	ldr	r3, [r4, #4]
 80025e0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80025e4:	701a      	strb	r2, [r3, #0]
		  AppData.Buffer[i++] = photoresistance[1];
 80025e6:	6863      	ldr	r3, [r4, #4]
 80025e8:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80025ec:	705a      	strb	r2, [r3, #1]
		  GetTemperatureAndhumidityLevel(&Humidity, &Temperature);
 80025ee:	f10d 010a 	add.w	r1, sp, #10
 80025f2:	a803      	add	r0, sp, #12
 80025f4:	f7ff f81a 	bl	800162c <GetTemperatureAndhumidityLevel>
		  AppData.Buffer[i++] = (uint8_t)((Humidity >> 8) & 0xFF);
 80025f8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80025fc:	6862      	ldr	r2, [r4, #4]
 80025fe:	0a19      	lsrs	r1, r3, #8
 8002600:	7091      	strb	r1, [r2, #2]
		  AppData.Buffer[i++] = (uint8_t)(Humidity & 0xFF);
 8002602:	6862      	ldr	r2, [r4, #4]
 8002604:	70d3      	strb	r3, [r2, #3]
		  AppData.Buffer[i++] = (uint8_t)(Temperature & 0xFF);
 8002606:	6863      	ldr	r3, [r4, #4]
 8002608:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800260c:	711a      	strb	r2, [r3, #4]
		  AppData.Port = LORAWAN_USER_APP_PORT; //	2
 800260e:	2302      	movs	r3, #2
 8002610:	7023      	strb	r3, [r4, #0]
		  AppData.Buffer[i++] = (uint8_t)(Temperature & 0xFF);
 8002612:	2405      	movs	r4, #5
 8002614:	e7b6      	b.n	8002584 <SendTxData+0x14>
		  Get_ADC_Measurement(ADC_CHANNEL_3, photoresistance);
 8002616:	a903      	add	r1, sp, #12
 8002618:	482c      	ldr	r0, [pc, #176]	; (80026cc <SendTxData+0x15c>)
 800261a:	f7fe fba1 	bl	8000d60 <Get_ADC_Measurement>
		  AppData.Buffer[i++] = photoresistance[0];
 800261e:	4b26      	ldr	r3, [pc, #152]	; (80026b8 <SendTxData+0x148>)
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002626:	7011      	strb	r1, [r2, #0]
		  AppData.Buffer[i++] = photoresistance[1];
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800262e:	7051      	strb	r1, [r2, #1]
		  AppData.Port = 4;
 8002630:	2204      	movs	r2, #4
 8002632:	701a      	strb	r2, [r3, #0]
		  AppData.Buffer[i++] = photoresistance[1];
 8002634:	2402      	movs	r4, #2
 8002636:	e7a5      	b.n	8002584 <SendTxData+0x14>
		  GetTemperatureAndhumidityLevel(&Humidity, &Temperature);
 8002638:	f10d 010a 	add.w	r1, sp, #10
 800263c:	a803      	add	r0, sp, #12
 800263e:	f7fe fff5 	bl	800162c <GetTemperatureAndhumidityLevel>
		  AppData.Buffer[i++] = (uint8_t)((Humidity >> 8) & 0xFF);
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <SendTxData+0x148>)
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800264a:	0a12      	lsrs	r2, r2, #8
 800264c:	700a      	strb	r2, [r1, #0]
		  AppData.Buffer[i++] = (uint8_t)(Humidity & 0xFF);
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002654:	7051      	strb	r1, [r2, #1]
		  AppData.Buffer[i++] = (uint8_t)(Temperature & 0xFF);
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800265c:	7091      	strb	r1, [r2, #2]
		  AppData.Port = 5;
 800265e:	2205      	movs	r2, #5
 8002660:	701a      	strb	r2, [r3, #0]
		  AppData.Buffer[i++] = (uint8_t)(Temperature & 0xFF);
 8002662:	2403      	movs	r4, #3
 8002664:	e78e      	b.n	8002584 <SendTxData+0x14>
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002666:	f004 fd45 	bl	80070f4 <LmHandlerJoinStatus>
 800266a:	2801      	cmp	r0, #1
 800266c:	d195      	bne.n	800259a <SendTxData+0x2a>
    UTIL_TIMER_Stop(&JoinLedTimer);
 800266e:	4813      	ldr	r0, [pc, #76]	; (80026bc <SendTxData+0x14c>)
 8002670:	f00e f9e2 	bl	8010a38 <UTIL_TIMER_Stop>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002674:	2200      	movs	r2, #0
 8002676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800267a:	4815      	ldr	r0, [pc, #84]	; (80026d0 <SendTxData+0x160>)
 800267c:	f001 fd0d 	bl	800409a <HAL_GPIO_WritePin>
 8002680:	e78b      	b.n	800259a <SendTxData+0x2a>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <SendTxData+0x164>)
 8002684:	2201      	movs	r2, #1
 8002686:	2100      	movs	r1, #0
 8002688:	4610      	mov	r0, r2
 800268a:	f00d fe81 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 800268e:	2500      	movs	r5, #0
 8002690:	e78f      	b.n	80025b2 <SendTxData+0x42>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002692:	f004 fd29 	bl	80070e8 <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8002696:	4605      	mov	r5, r0
 8002698:	2800      	cmp	r0, #0
 800269a:	d08a      	beq.n	80025b2 <SendTxData+0x42>
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <SendTxData+0x168>)
 800269e:	fba3 2300 	umull	r2, r3, r3, r0
 80026a2:	099b      	lsrs	r3, r3, #6
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <SendTxData+0x16c>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	2100      	movs	r1, #0
 80026ac:	4610      	mov	r0, r2
 80026ae:	f00d fe6f 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 80026b2:	e77e      	b.n	80025b2 <SendTxData+0x42>
 80026b4:	200003f0 	.word	0x200003f0
 80026b8:	20000004 	.word	0x20000004
 80026bc:	200003d8 	.word	0x200003d8
 80026c0:	20000058 	.word	0x20000058
 80026c4:	2000043c 	.word	0x2000043c
 80026c8:	2000006c 	.word	0x2000006c
 80026cc:	0c000008 	.word	0x0c000008
 80026d0:	48000400 	.word	0x48000400
 80026d4:	080114f4 	.word	0x080114f4
 80026d8:	10624dd3 	.word	0x10624dd3
 80026dc:	08011504 	.word	0x08011504

080026e0 <OnJoinTimerLedEvent>:
{
 80026e0:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 80026e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026e6:	4802      	ldr	r0, [pc, #8]	; (80026f0 <OnJoinTimerLedEvent+0x10>)
 80026e8:	f001 fcdc 	bl	80040a4 <HAL_GPIO_TogglePin>
}
 80026ec:	bd08      	pop	{r3, pc}
 80026ee:	bf00      	nop
 80026f0:	48000400 	.word	0x48000400

080026f4 <LoRaWAN_Init>:
{
 80026f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026f8:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 80026fa:	2400      	movs	r4, #0
 80026fc:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80026fe:	9402      	str	r4, [sp, #8]
 8002700:	2502      	movs	r5, #2
 8002702:	9501      	str	r5, [sp, #4]
 8002704:	2601      	movs	r6, #1
 8002706:	9600      	str	r6, [sp, #0]
 8002708:	4b4b      	ldr	r3, [pc, #300]	; (8002838 <LoRaWAN_Init+0x144>)
 800270a:	4622      	mov	r2, r4
 800270c:	4621      	mov	r1, r4
 800270e:	4628      	mov	r0, r5
 8002710:	f00d fe3e 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002714:	9402      	str	r4, [sp, #8]
 8002716:	2704      	movs	r7, #4
 8002718:	9701      	str	r7, [sp, #4]
 800271a:	9500      	str	r5, [sp, #0]
 800271c:	4b47      	ldr	r3, [pc, #284]	; (800283c <LoRaWAN_Init+0x148>)
 800271e:	4622      	mov	r2, r4
 8002720:	4621      	mov	r1, r4
 8002722:	4628      	mov	r0, r5
 8002724:	f00d fe34 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002728:	9402      	str	r4, [sp, #8]
 800272a:	9501      	str	r5, [sp, #4]
 800272c:	9600      	str	r6, [sp, #0]
 800272e:	4b44      	ldr	r3, [pc, #272]	; (8002840 <LoRaWAN_Init+0x14c>)
 8002730:	4622      	mov	r2, r4
 8002732:	4621      	mov	r1, r4
 8002734:	4628      	mov	r0, r5
 8002736:	f00d fe2b 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800273a:	a905      	add	r1, sp, #20
 800273c:	4620      	mov	r0, r4
 800273e:	f005 f839 	bl	80077b4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002742:	9b05      	ldr	r3, [sp, #20]
 8002744:	0e1a      	lsrs	r2, r3, #24
 8002746:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800274a:	9102      	str	r1, [sp, #8]
 800274c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	9200      	str	r2, [sp, #0]
 8002754:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <LoRaWAN_Init+0x150>)
 8002756:	4622      	mov	r2, r4
 8002758:	4621      	mov	r1, r4
 800275a:	4628      	mov	r0, r5
 800275c:	f00d fe18 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002760:	a905      	add	r1, sp, #20
 8002762:	4630      	mov	r0, r6
 8002764:	f005 f826 	bl	80077b4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002768:	9b05      	ldr	r3, [sp, #20]
 800276a:	0e1a      	lsrs	r2, r3, #24
 800276c:	b2d9      	uxtb	r1, r3
 800276e:	9103      	str	r1, [sp, #12]
 8002770:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002774:	9102      	str	r1, [sp, #8]
 8002776:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	9200      	str	r2, [sp, #0]
 800277e:	4b32      	ldr	r3, [pc, #200]	; (8002848 <LoRaWAN_Init+0x154>)
 8002780:	4622      	mov	r2, r4
 8002782:	4621      	mov	r1, r4
 8002784:	4628      	mov	r0, r5
 8002786:	f00d fe03 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800278a:	9400      	str	r4, [sp, #0]
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <LoRaWAN_Init+0x158>)
 800278e:	4622      	mov	r2, r4
 8002790:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002794:	482e      	ldr	r0, [pc, #184]	; (8002850 <LoRaWAN_Init+0x15c>)
 8002796:	f00e f8f1 	bl	801097c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800279a:	9400      	str	r4, [sp, #0]
 800279c:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <LoRaWAN_Init+0x160>)
 800279e:	4622      	mov	r2, r4
 80027a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027a4:	482c      	ldr	r0, [pc, #176]	; (8002858 <LoRaWAN_Init+0x164>)
 80027a6:	f00e f8e9 	bl	801097c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80027aa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800285c <LoRaWAN_Init+0x168>
 80027ae:	9400      	str	r4, [sp, #0]
 80027b0:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <LoRaWAN_Init+0x16c>)
 80027b2:	4632      	mov	r2, r6
 80027b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80027b8:	4640      	mov	r0, r8
 80027ba:	f00e f8df 	bl	801097c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 80027be:	9400      	str	r4, [sp, #0]
 80027c0:	4b28      	ldr	r3, [pc, #160]	; (8002864 <LoRaWAN_Init+0x170>)
 80027c2:	4622      	mov	r2, r4
 80027c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80027c8:	4827      	ldr	r0, [pc, #156]	; (8002868 <LoRaWAN_Init+0x174>)
 80027ca:	f00e f8d7 	bl	801097c <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80027ce:	4a27      	ldr	r2, [pc, #156]	; (800286c <LoRaWAN_Init+0x178>)
 80027d0:	4621      	mov	r1, r4
 80027d2:	4630      	mov	r0, r6
 80027d4:	f00d ffd2 	bl	801077c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80027d8:	4a25      	ldr	r2, [pc, #148]	; (8002870 <LoRaWAN_Init+0x17c>)
 80027da:	4621      	mov	r1, r4
 80027dc:	4628      	mov	r0, r5
 80027de:	f00d ffcd 	bl	801077c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80027e2:	4a24      	ldr	r2, [pc, #144]	; (8002874 <LoRaWAN_Init+0x180>)
 80027e4:	4621      	mov	r1, r4
 80027e6:	4638      	mov	r0, r7
 80027e8:	f00d ffc8 	bl	801077c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80027ec:	4a22      	ldr	r2, [pc, #136]	; (8002878 <LoRaWAN_Init+0x184>)
 80027ee:	4621      	mov	r1, r4
 80027f0:	2008      	movs	r0, #8
 80027f2:	f00d ffc3 	bl	801077c <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 80027f6:	f000 f865 	bl	80028c4 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80027fa:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 80027fe:	481f      	ldr	r0, [pc, #124]	; (800287c <LoRaWAN_Init+0x188>)
 8002800:	f004 ff9e 	bl	8007740 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002804:	481e      	ldr	r0, [pc, #120]	; (8002880 <LoRaWAN_Init+0x18c>)
 8002806:	f004 fe67 	bl	80074d8 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 800280a:	4640      	mov	r0, r8
 800280c:	f00e f96e 	bl	8010aec <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002810:	4631      	mov	r1, r6
 8002812:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <LoRaWAN_Init+0x190>)
 8002814:	7818      	ldrb	r0, [r3, #0]
 8002816:	f004 fbf5 	bl	8007004 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800281a:	4d1b      	ldr	r5, [pc, #108]	; (8002888 <LoRaWAN_Init+0x194>)
 800281c:	9400      	str	r4, [sp, #0]
 800281e:	4b1b      	ldr	r3, [pc, #108]	; (800288c <LoRaWAN_Init+0x198>)
 8002820:	4622      	mov	r2, r4
 8002822:	491b      	ldr	r1, [pc, #108]	; (8002890 <LoRaWAN_Init+0x19c>)
 8002824:	6809      	ldr	r1, [r1, #0]
 8002826:	4628      	mov	r0, r5
 8002828:	f00e f8a8 	bl	801097c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800282c:	4628      	mov	r0, r5
 800282e:	f00e f95d 	bl	8010aec <UTIL_TIMER_Start>
}
 8002832:	b006      	add	sp, #24
 8002834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002838:	08011524 	.word	0x08011524
 800283c:	08011548 	.word	0x08011548
 8002840:	0801156c 	.word	0x0801156c
 8002844:	08011590 	.word	0x08011590
 8002848:	080115b4 	.word	0x080115b4
 800284c:	080022bd 	.word	0x080022bd
 8002850:	20000424 	.word	0x20000424
 8002854:	080022a9 	.word	0x080022a9
 8002858:	200003f4 	.word	0x200003f4
 800285c:	200003d8 	.word	0x200003d8
 8002860:	080026e1 	.word	0x080026e1
 8002864:	08002265 	.word	0x08002265
 8002868:	2000040c 	.word	0x2000040c
 800286c:	08007215 	.word	0x08007215
 8002870:	08002571 	.word	0x08002571
 8002874:	08002539 	.word	0x08002539
 8002878:	0800249d 	.word	0x0800249d
 800287c:	2000000c 	.word	0x2000000c
 8002880:	20000058 	.word	0x20000058
 8002884:	20000000 	.word	0x20000000
 8002888:	2000043c 	.word	0x2000043c
 800288c:	080020b5 	.word	0x080020b5
 8002890:	2000006c 	.word	0x2000006c

08002894 <HAL_GPIO_EXTI_Callback>:
{
 8002894:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8002896:	2802      	cmp	r0, #2
 8002898:	d009      	beq.n	80028ae <HAL_GPIO_EXTI_Callback+0x1a>
 800289a:	2840      	cmp	r0, #64	; 0x40
 800289c:	d00c      	beq.n	80028b8 <HAL_GPIO_EXTI_Callback+0x24>
 800289e:	2801      	cmp	r0, #1
 80028a0:	d000      	beq.n	80028a4 <HAL_GPIO_EXTI_Callback+0x10>
}
 80028a2:	bd08      	pop	{r3, pc}
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80028a4:	2100      	movs	r1, #0
 80028a6:	2002      	movs	r0, #2
 80028a8:	f00d fe9c 	bl	80105e4 <UTIL_SEQ_SetTask>
 80028ac:	e7f9      	b.n	80028a2 <HAL_GPIO_EXTI_Callback+0xe>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80028ae:	2100      	movs	r1, #0
 80028b0:	2008      	movs	r0, #8
 80028b2:	f00d fe97 	bl	80105e4 <UTIL_SEQ_SetTask>
      break;
 80028b6:	e7f4      	b.n	80028a2 <HAL_GPIO_EXTI_Callback+0xe>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 80028b8:	2100      	movs	r1, #0
 80028ba:	2004      	movs	r0, #4
 80028bc:	f00d fe92 	bl	80105e4 <UTIL_SEQ_SetTask>
}
 80028c0:	e7ef      	b.n	80028a2 <HAL_GPIO_EXTI_Callback+0xe>
	...

080028c4 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <LoraInfo_Init+0x18>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80028ca:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80028cc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80028ce:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 80028d0:	2220      	movs	r2, #32
 80028d2:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 80028d4:	2203      	movs	r2, #3
 80028d6:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000454 	.word	0x20000454

080028e0 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 80028e0:	4800      	ldr	r0, [pc, #0]	; (80028e4 <LoraInfo_GetPtr+0x4>)
 80028e2:	4770      	bx	lr
 80028e4:	20000454 	.word	0x20000454

080028e8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80028e8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80028ea:	f000 f83f 	bl	800296c <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80028ee:	bd08      	pop	{r3, pc}

080028f0 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80028f0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80028f2:	f000 f87d 	bl	80029f0 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80028f6:	bd08      	pop	{r3, pc}

080028f8 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80028f8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80028fa:	f000 f8c7 	bl	8002a8c <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80028fe:	bd08      	pop	{r3, pc}

08002900 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002900:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002902:	f000 f8c5 	bl	8002a90 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002906:	bd08      	pop	{r3, pc}

08002908 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002908:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800290a:	f000 f8c3 	bl	8002a94 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800290e:	bd08      	pop	{r3, pc}

08002910 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002910:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002912:	f000 f8c1 	bl	8002a98 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002916:	bd08      	pop	{r3, pc}

08002918 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002918:	480d      	ldr	r0, [pc, #52]	; (8002950 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800291a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800291c:	f000 f8c1 	bl	8002aa2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002920:	480c      	ldr	r0, [pc, #48]	; (8002954 <LoopForever+0x6>)
  ldr r1, =_edata
 8002922:	490d      	ldr	r1, [pc, #52]	; (8002958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002924:	4a0d      	ldr	r2, [pc, #52]	; (800295c <LoopForever+0xe>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002928:	e002      	b.n	8002930 <LoopCopyDataInit>

0800292a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800292c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292e:	3304      	adds	r3, #4

08002930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002934:	d3f9      	bcc.n	800292a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002938:	4c0a      	ldr	r4, [pc, #40]	; (8002964 <LoopForever+0x16>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800293c:	e001      	b.n	8002942 <LoopFillZerobss>

0800293e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002940:	3204      	adds	r2, #4

08002942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002944:	d3fb      	bcc.n	800293e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002946:	f00e fad7 	bl	8010ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800294a:	f7fe fcac 	bl	80012a6 <main>

0800294e <LoopForever>:

LoopForever:
    b LoopForever
 800294e:	e7fe      	b.n	800294e <LoopForever>
  ldr   r0, =_estack
 8002950:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002958:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 800295c:	08011f70 	.word	0x08011f70
  ldr r2, =_sbss
 8002960:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002964:	20001620 	.word	0x20001620

08002968 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002968:	e7fe      	b.n	8002968 <ADC_IRQHandler>
	...

0800296c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002970:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002972:	2400      	movs	r4, #0
 8002974:	9401      	str	r4, [sp, #4]
 8002976:	9402      	str	r4, [sp, #8]
 8002978:	9403      	str	r4, [sp, #12]
 800297a:	9404      	str	r4, [sp, #16]
 800297c:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002984:	f042 0204 	orr.w	r2, r2, #4
 8002988:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800298a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002992:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002994:	2710      	movs	r7, #16
 8002996:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002998:	2301      	movs	r3, #1
 800299a:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80029a0:	4d12      	ldr	r5, [pc, #72]	; (80029ec <BSP_RADIO_Init+0x80>)
 80029a2:	a901      	add	r1, sp, #4
 80029a4:	4628      	mov	r0, r5
 80029a6:	f001 fa21 	bl	8003dec <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80029aa:	f04f 0820 	mov.w	r8, #32
 80029ae:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80029b2:	a901      	add	r1, sp, #4
 80029b4:	4628      	mov	r0, r5
 80029b6:	f001 fa19 	bl	8003dec <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80029ba:	2608      	movs	r6, #8
 80029bc:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80029be:	a901      	add	r1, sp, #4
 80029c0:	4628      	mov	r0, r5
 80029c2:	f001 fa13 	bl	8003dec <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80029c6:	4622      	mov	r2, r4
 80029c8:	4641      	mov	r1, r8
 80029ca:	4628      	mov	r0, r5
 80029cc:	f001 fb65 	bl	800409a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80029d0:	4622      	mov	r2, r4
 80029d2:	4639      	mov	r1, r7
 80029d4:	4628      	mov	r0, r5
 80029d6:	f001 fb60 	bl	800409a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80029da:	4622      	mov	r2, r4
 80029dc:	4631      	mov	r1, r6
 80029de:	4628      	mov	r0, r5
 80029e0:	f001 fb5b 	bl	800409a <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80029e4:	4620      	mov	r0, r4
 80029e6:	b006      	add	sp, #24
 80029e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029ec:	48000800 	.word	0x48000800

080029f0 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80029f0:	b510      	push	{r4, lr}
  switch (Config)
 80029f2:	2803      	cmp	r0, #3
 80029f4:	d813      	bhi.n	8002a1e <BSP_RADIO_ConfigRFSwitch+0x2e>
 80029f6:	e8df f000 	tbb	[pc, r0]
 80029fa:	1402      	.short	0x1402
 80029fc:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80029fe:	4c22      	ldr	r4, [pc, #136]	; (8002a88 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	2108      	movs	r1, #8
 8002a04:	4620      	mov	r0, r4
 8002a06:	f001 fb48 	bl	800409a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2110      	movs	r1, #16
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f001 fb43 	bl	800409a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002a14:	2200      	movs	r2, #0
 8002a16:	2120      	movs	r1, #32
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f001 fb3e 	bl	800409a <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002a1e:	2000      	movs	r0, #0
 8002a20:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002a22:	4c19      	ldr	r4, [pc, #100]	; (8002a88 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	2108      	movs	r1, #8
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f001 fb36 	bl	800409a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002a2e:	2201      	movs	r2, #1
 8002a30:	2110      	movs	r1, #16
 8002a32:	4620      	mov	r0, r4
 8002a34:	f001 fb31 	bl	800409a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f001 fb2c 	bl	800409a <HAL_GPIO_WritePin>
      break;
 8002a42:	e7ec      	b.n	8002a1e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002a44:	4c10      	ldr	r4, [pc, #64]	; (8002a88 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	2108      	movs	r1, #8
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f001 fb25 	bl	800409a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002a50:	2201      	movs	r2, #1
 8002a52:	2110      	movs	r1, #16
 8002a54:	4620      	mov	r0, r4
 8002a56:	f001 fb20 	bl	800409a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	2120      	movs	r1, #32
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f001 fb1b 	bl	800409a <HAL_GPIO_WritePin>
      break;
 8002a64:	e7db      	b.n	8002a1e <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002a66:	4c08      	ldr	r4, [pc, #32]	; (8002a88 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	2108      	movs	r1, #8
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f001 fb14 	bl	800409a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002a72:	2200      	movs	r2, #0
 8002a74:	2110      	movs	r1, #16
 8002a76:	4620      	mov	r0, r4
 8002a78:	f001 fb0f 	bl	800409a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	2120      	movs	r1, #32
 8002a80:	4620      	mov	r0, r4
 8002a82:	f001 fb0a 	bl	800409a <HAL_GPIO_WritePin>
      break;
 8002a86:	e7ca      	b.n	8002a1e <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002a88:	48000800 	.word	0x48000800

08002a8c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	4770      	bx	lr

08002a90 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002a90:	2001      	movs	r0, #1
 8002a92:	4770      	bx	lr

08002a94 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002a94:	2001      	movs	r0, #1
 8002a96:	4770      	bx	lr

08002a98 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002a98:	b908      	cbnz	r0, 8002a9e <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002a9a:	200f      	movs	r0, #15
 8002a9c:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002a9e:	2016      	movs	r0, #22
  }

  return ret;
}
 8002aa0:	4770      	bx	lr

08002aa2 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa4:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa6:	2003      	movs	r0, #3
 8002aa8:	f000 fd2e 	bl	8003508 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002aac:	f001 fc9c 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_Init+0x28>)
 8002ab2:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ab4:	200f      	movs	r0, #15
 8002ab6:	f7fe fde9 	bl	800168c <HAL_InitTick>
 8002aba:	b110      	cbz	r0, 8002ac2 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002abc:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002abe:	4620      	mov	r0, r4
 8002ac0:	bd10      	pop	{r4, pc}
 8002ac2:	4604      	mov	r4, r0
    HAL_MspInit();
 8002ac4:	f7fe fc9a 	bl	80013fc <HAL_MspInit>
 8002ac8:	e7f9      	b.n	8002abe <HAL_Init+0x1a>
 8002aca:	bf00      	nop
 8002acc:	20000070 	.word	0x20000070

08002ad0 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002ad0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002ad4:	6913      	ldr	r3, [r2, #16]
 8002ad6:	f023 0302 	bic.w	r3, r3, #2
 8002ada:	6113      	str	r3, [r2, #16]
}
 8002adc:	4770      	bx	lr

08002ade <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002ade:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002ae2:	6913      	ldr	r3, [r2, #16]
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	6113      	str	r3, [r2, #16]
}
 8002aea:	4770      	bx	lr

08002aec <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002aec:	4b01      	ldr	r3, [pc, #4]	; (8002af4 <HAL_GetUIDw0+0x8>)
 8002aee:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8002af2:	4770      	bx	lr
 8002af4:	1fff7000 	.word	0x1fff7000

08002af8 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002af8:	4b01      	ldr	r3, [pc, #4]	; (8002b00 <HAL_GetUIDw1+0x8>)
 8002afa:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8002afe:	4770      	bx	lr
 8002b00:	1fff7000 	.word	0x1fff7000

08002b04 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002b04:	4b01      	ldr	r3, [pc, #4]	; (8002b0c <HAL_GetUIDw2+0x8>)
 8002b06:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8002b0a:	4770      	bx	lr
 8002b0c:	1fff7000 	.word	0x1fff7000

08002b10 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002b10:	4a02      	ldr	r2, [pc, #8]	; (8002b1c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002b12:	6853      	ldr	r3, [r2, #4]
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8002b1a:	4770      	bx	lr
 8002b1c:	e0042000 	.word	0xe0042000

08002b20 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002b20:	4a02      	ldr	r2, [pc, #8]	; (8002b2c <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002b22:	6853      	ldr	r3, [r2, #4]
 8002b24:	f023 0302 	bic.w	r3, r3, #2
 8002b28:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8002b2a:	4770      	bx	lr
 8002b2c:	e0042000 	.word	0xe0042000

08002b30 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002b30:	4a02      	ldr	r2, [pc, #8]	; (8002b3c <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002b32:	6853      	ldr	r3, [r2, #4]
 8002b34:	f023 0304 	bic.w	r3, r3, #4
 8002b38:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8002b3a:	4770      	bx	lr
 8002b3c:	e0042000 	.word	0xe0042000

08002b40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	f000 811b 	beq.w	8002d84 <HAL_ADC_Init+0x244>
 8002b4e:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b50:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002b52:	b1bb      	cbz	r3, 8002b84 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b54:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b56:	6893      	ldr	r3, [r2, #8]
 8002b58:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002b5c:	d11f      	bne.n	8002b9e <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8002b5e:	6893      	ldr	r3, [r2, #8]
 8002b60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b64:	f023 0317 	bic.w	r3, r3, #23
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b6e:	4b86      	ldr	r3, [pc, #536]	; (8002d88 <HAL_ADC_Init+0x248>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	099b      	lsrs	r3, r3, #6
 8002b74:	4a85      	ldr	r2, [pc, #532]	; (8002d8c <HAL_ADC_Init+0x24c>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002b82:	e009      	b.n	8002b98 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8002b84:	f7fe f86e 	bl	8000c64 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b88:	2300      	movs	r3, #0
 8002b8a:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002b8c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8002b90:	e7e0      	b.n	8002b54 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8002b92:	9b01      	ldr	r3, [sp, #4]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002b98:	9b01      	ldr	r3, [sp, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f9      	bne.n	8002b92 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b9e:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ba0:	6893      	ldr	r3, [r2, #8]
 8002ba2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002ba6:	f040 809c 	bne.w	8002ce2 <HAL_ADC_Init+0x1a2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002baa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002bac:	f043 0310 	orr.w	r3, r3, #16
 8002bb0:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bba:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bbc:	6893      	ldr	r3, [r2, #8]
 8002bbe:	f013 0304 	ands.w	r3, r3, #4
 8002bc2:	d000      	beq.n	8002bc6 <HAL_ADC_Init+0x86>
 8002bc4:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bc6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002bc8:	f011 0f10 	tst.w	r1, #16
 8002bcc:	f040 80d3 	bne.w	8002d76 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f040 80d0 	bne.w	8002d76 <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8002bd8:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002bdc:	f041 0102 	orr.w	r1, r1, #2
 8002be0:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002be2:	6891      	ldr	r1, [r2, #8]
 8002be4:	f011 0f01 	tst.w	r1, #1
 8002be8:	d151      	bne.n	8002c8e <HAL_ADC_Init+0x14e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002bea:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002bec:	7e25      	ldrb	r5, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002bee:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002bf2:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002bf4:	ea41 31c5 	orr.w	r1, r1, r5, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002bf8:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002bfa:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002bfe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002c00:	b10d      	cbz	r5, 8002c06 <HAL_ADC_Init+0xc6>
 8002c02:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c06:	4329      	orrs	r1, r5
                   hadc->Init.DataAlign                                           |
 8002c08:	68e5      	ldr	r5, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c0a:	4329      	orrs	r1, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c0c:	6925      	ldr	r5, [r4, #16]
 8002c0e:	2d00      	cmp	r5, #0
 8002c10:	db69      	blt.n	8002ce6 <HAL_ADC_Init+0x1a6>
 8002c12:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002c16:	4329      	orrs	r1, r5
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c18:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c1c:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c20:	f894 5020 	ldrb.w	r5, [r4, #32]
 8002c24:	2d01      	cmp	r5, #1
 8002c26:	d061      	beq.n	8002cec <HAL_ADC_Init+0x1ac>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c28:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002c2a:	b125      	cbz	r5, 8002c36 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c2c:	f405 75e0 	and.w	r5, r5, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002c30:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c32:	4335      	orrs	r5, r6
 8002c34:	4329      	orrs	r1, r5
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c36:	68d5      	ldr	r5, [r2, #12]
 8002c38:	f425 3cfe 	bic.w	ip, r5, #130048	; 0x1fc00
 8002c3c:	f42c 7cff 	bic.w	ip, ip, #510	; 0x1fe
 8002c40:	ea4c 0101 	orr.w	r1, ip, r1
 8002c44:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c46:	6862      	ldr	r2, [r4, #4]
 8002c48:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002c4c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c4e:	ea42 0501 	orr.w	r5, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c52:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8002c56:	2901      	cmp	r1, #1
 8002c58:	d055      	beq.n	8002d06 <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002c5a:	6822      	ldr	r2, [r4, #0]
 8002c5c:	6916      	ldr	r6, [r2, #16]
 8002c5e:	494c      	ldr	r1, [pc, #304]	; (8002d90 <HAL_ADC_Init+0x250>)
 8002c60:	4031      	ands	r1, r6
 8002c62:	4329      	orrs	r1, r5
 8002c64:	6111      	str	r1, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002c66:	6862      	ldr	r2, [r4, #4]
 8002c68:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8002c6c:	d00f      	beq.n	8002c8e <HAL_ADC_Init+0x14e>
 8002c6e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002c72:	d00c      	beq.n	8002c8e <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002c74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002c78:	d009      	beq.n	8002c8e <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002c7a:	4d46      	ldr	r5, [pc, #280]	; (8002d94 <HAL_ADC_Init+0x254>)
 8002c7c:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 8002c80:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8002c84:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002c8e:	6825      	ldr	r5, [r4, #0]
 8002c90:	6b62      	ldr	r2, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8002c92:	6969      	ldr	r1, [r5, #20]
 8002c94:	f021 0107 	bic.w	r1, r1, #7
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	616a      	str	r2, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002c9c:	6821      	ldr	r1, [r4, #0]
 8002c9e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002ca0:	694a      	ldr	r2, [r1, #20]
 8002ca2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ca6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002caa:	614a      	str	r2, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002cac:	6922      	ldr	r2, [r4, #16]
 8002cae:	2a00      	cmp	r2, #0
 8002cb0:	d133      	bne.n	8002d1a <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002cb2:	6822      	ldr	r2, [r4, #0]
 8002cb4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002cb6:	f063 030f 	orn	r3, r3, #15
 8002cba:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002cbc:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8002cc4:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d04c      	beq.n	8002d64 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002cca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ccc:	f023 0312 	bic.w	r3, r3, #18
 8002cd0:	f043 0310 	orr.w	r3, r3, #16
 8002cd4:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002cde:	2001      	movs	r0, #1
 8002ce0:	e04e      	b.n	8002d80 <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	e76a      	b.n	8002bbc <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ce6:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 8002cea:	e794      	b.n	8002c16 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cec:	b916      	cbnz	r6, 8002cf4 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002cee:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002cf2:	e799      	b.n	8002c28 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf4:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8002cf6:	f045 0520 	orr.w	r5, r5, #32
 8002cfa:	65a5      	str	r5, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfc:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 8002cfe:	f045 0501 	orr.w	r5, r5, #1
 8002d02:	65e5      	str	r5, [r4, #92]	; 0x5c
 8002d04:	e790      	b.n	8002c28 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8002d06:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d08:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 8002d0a:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002d0c:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 8002d0e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002d10:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002d12:	432a      	orrs	r2, r5
 8002d14:	f042 0501 	orr.w	r5, r2, #1
 8002d18:	e79f      	b.n	8002c5a <HAL_ADC_Init+0x11a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d1a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8002d1e:	d1cd      	bne.n	8002cbc <HAL_ADC_Init+0x17c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002d20:	2b07      	cmp	r3, #7
 8002d22:	d808      	bhi.n	8002d36 <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002d24:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002d26:	0099      	lsls	r1, r3, #2
 8002d28:	40ca      	lsrs	r2, r1
 8002d2a:	f002 020f 	and.w	r2, r2, #15
 8002d2e:	2a0f      	cmp	r2, #15
 8002d30:	d001      	beq.n	8002d36 <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002d32:	3301      	adds	r3, #1
 8002d34:	e7f4      	b.n	8002d20 <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d00e      	beq.n	8002d58 <HAL_ADC_Init+0x218>
        MODIFY_REG(hadc->Instance->CHSELR,
 8002d3a:	6821      	ldr	r1, [r4, #0]
 8002d3c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002d3e:	69e3      	ldr	r3, [r4, #28]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	f003 031c 	and.w	r3, r3, #28
 8002d48:	f06f 020f 	mvn.w	r2, #15
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002d52:	4313      	orrs	r3, r2
 8002d54:	628b      	str	r3, [r1, #40]	; 0x28
 8002d56:	e7b1      	b.n	8002cbc <HAL_ADC_Init+0x17c>
        SET_BIT(hadc->Instance->CHSELR,
 8002d58:	6822      	ldr	r2, [r4, #0]
 8002d5a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002d5c:	f063 030f 	orn	r3, r3, #15
 8002d60:	6293      	str	r3, [r2, #40]	; 0x28
 8002d62:	e7ab      	b.n	8002cbc <HAL_ADC_Init+0x17c>
      ADC_CLEAR_ERRORCODE(hadc);
 8002d64:	2300      	movs	r3, #0
 8002d66:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002d68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d6a:	f023 0303 	bic.w	r3, r3, #3
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d74:	e004      	b.n	8002d80 <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d78:	f043 0310 	orr.w	r3, r3, #16
 8002d7c:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d7e:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002d80:	b002      	add	sp, #8
 8002d82:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002d84:	2001      	movs	r0, #1
 8002d86:	e7fb      	b.n	8002d80 <HAL_ADC_Init+0x240>
 8002d88:	20000070 	.word	0x20000070
 8002d8c:	053e2d63 	.word	0x053e2d63
 8002d90:	1ffffc02 	.word	0x1ffffc02
 8002d94:	40012000 	.word	0x40012000

08002d98 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d9e:	6946      	ldr	r6, [r0, #20]
 8002da0:	2e08      	cmp	r6, #8
 8002da2:	d005      	beq.n	8002db0 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002da4:	6803      	ldr	r3, [r0, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f013 0f01 	tst.w	r3, #1
 8002dac:	d11e      	bne.n	8002dec <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002dae:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002db0:	f7fe fc6e 	bl	8001690 <HAL_GetTick>
 8002db4:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4232      	tst	r2, r6
 8002dbc:	d11c      	bne.n	8002df8 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002dc2:	d0f8      	beq.n	8002db6 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002dc4:	f7fe fc64 	bl	8001690 <HAL_GetTick>
 8002dc8:	1bc3      	subs	r3, r0, r7
 8002dca:	42ab      	cmp	r3, r5
 8002dcc:	d801      	bhi.n	8002dd2 <HAL_ADC_PollForConversion+0x3a>
 8002dce:	2d00      	cmp	r5, #0
 8002dd0:	d1f1      	bne.n	8002db6 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4233      	tst	r3, r6
 8002dd8:	d1ed      	bne.n	8002db6 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002dda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002de2:	2300      	movs	r3, #0
 8002de4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8002de8:	2003      	movs	r0, #3
 8002dea:	e028      	b.n	8002e3e <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dec:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002dee:	f043 0320 	orr.w	r3, r3, #32
 8002df2:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002df4:	2001      	movs	r0, #1
 8002df6:	e022      	b.n	8002e3e <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002df8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfe:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002e06:	d115      	bne.n	8002e34 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e08:	7ea2      	ldrb	r2, [r4, #26]
 8002e0a:	b99a      	cbnz	r2, 8002e34 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	f012 0f08 	tst.w	r2, #8
 8002e12:	d00f      	beq.n	8002e34 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	f012 0f04 	tst.w	r2, #4
 8002e1a:	d111      	bne.n	8002e40 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	f022 020c 	bic.w	r2, r2, #12
 8002e22:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002e24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002e34:	7e20      	ldrb	r0, [r4, #24]
 8002e36:	b960      	cbnz	r0, 8002e52 <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e42:	f043 0320 	orr.w	r3, r3, #32
 8002e46:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002e50:	e7f0      	b.n	8002e34 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8002e52:	2000      	movs	r0, #0
 8002e54:	e7f3      	b.n	8002e3e <HAL_ADC_PollForConversion+0xa6>

08002e56 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e56:	6803      	ldr	r3, [r0, #0]
 8002e58:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002e5a:	4770      	bx	lr

08002e5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002e5c:	b470      	push	{r4, r5, r6}
 8002e5e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e60:	2200      	movs	r2, #0
 8002e62:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e64:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002e66:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8002e6a:	2a01      	cmp	r2, #1
 8002e6c:	f000 8105 	beq.w	800307a <HAL_ADC_ConfigChannel+0x21e>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2201      	movs	r2, #1
 8002e74:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e78:	6802      	ldr	r2, [r0, #0]
 8002e7a:	6890      	ldr	r0, [r2, #8]
 8002e7c:	f010 0f04 	tst.w	r0, #4
 8002e80:	d00a      	beq.n	8002e98 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e82:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e84:	f042 0220 	orr.w	r2, r2, #32
 8002e88:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e8a:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8002e92:	b003      	add	sp, #12
 8002e94:	bc70      	pop	{r4, r5, r6}
 8002e96:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8002e98:	6848      	ldr	r0, [r1, #4]
 8002e9a:	2802      	cmp	r0, #2
 8002e9c:	f000 809e 	beq.w	8002fdc <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ea0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002ea4:	d029      	beq.n	8002efa <HAL_ADC_ConfigChannel+0x9e>
 8002ea6:	4d76      	ldr	r5, [pc, #472]	; (8003080 <HAL_ADC_ConfigChannel+0x224>)
 8002ea8:	42ac      	cmp	r4, r5
 8002eaa:	d026      	beq.n	8002efa <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002eac:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002eae:	f000 001f 	and.w	r0, r0, #31
 8002eb2:	250f      	movs	r5, #15
 8002eb4:	4085      	lsls	r5, r0
 8002eb6:	ea24 0505 	bic.w	r5, r4, r5
 8002eba:	680c      	ldr	r4, [r1, #0]
 8002ebc:	f3c4 0611 	ubfx	r6, r4, #0, #18
 8002ec0:	2e00      	cmp	r6, #0
 8002ec2:	d133      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0xd0>
 8002ec4:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8002ec8:	fa04 f000 	lsl.w	r0, r4, r0
 8002ecc:	4328      	orrs	r0, r5
 8002ece:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002ed0:	684c      	ldr	r4, [r1, #4]
 8002ed2:	08a0      	lsrs	r0, r4, #2
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	69dd      	ldr	r5, [r3, #28]
 8002ed8:	42a8      	cmp	r0, r5
 8002eda:	d814      	bhi.n	8002f06 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002edc:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8002ede:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002ee0:	f004 041f 	and.w	r4, r4, #31
 8002ee4:	260f      	movs	r6, #15
 8002ee6:	40a6      	lsls	r6, r4
 8002ee8:	ea20 0006 	bic.w	r0, r0, r6
 8002eec:	f3c5 6583 	ubfx	r5, r5, #26, #4
 8002ef0:	fa05 f404 	lsl.w	r4, r5, r4
 8002ef4:	4304      	orrs	r4, r0
 8002ef6:	6294      	str	r4, [r2, #40]	; 0x28
}
 8002ef8:	e005      	b.n	8002f06 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002efa:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002efc:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002efe:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002f02:	4320      	orrs	r0, r4
 8002f04:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f06:	681c      	ldr	r4, [r3, #0]
 8002f08:	680d      	ldr	r5, [r1, #0]
 8002f0a:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8002f0c:	6960      	ldr	r0, [r4, #20]
 8002f0e:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 8002f12:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8002f16:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8002f1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f1e:	4302      	orrs	r2, r0
 8002f20:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f22:	680a      	ldr	r2, [r1, #0]
 8002f24:	2a00      	cmp	r2, #0
 8002f26:	db09      	blt.n	8002f3c <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f28:	2000      	movs	r0, #0
 8002f2a:	e7af      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f30:	b114      	cbz	r4, 8002f38 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002f32:	fab4 f484 	clz	r4, r4
 8002f36:	e7c7      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8002f38:	2420      	movs	r4, #32
 8002f3a:	e7c5      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f3c:	4951      	ldr	r1, [pc, #324]	; (8003084 <HAL_ADC_ConfigChannel+0x228>)
 8002f3e:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 8002f42:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f46:	4c50      	ldr	r4, [pc, #320]	; (8003088 <HAL_ADC_ConfigChannel+0x22c>)
 8002f48:	42a2      	cmp	r2, r4
 8002f4a:	d007      	beq.n	8002f5c <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f4c:	4c4f      	ldr	r4, [pc, #316]	; (800308c <HAL_ADC_ConfigChannel+0x230>)
 8002f4e:	42a2      	cmp	r2, r4
 8002f50:	d026      	beq.n	8002fa0 <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f52:	4c4f      	ldr	r4, [pc, #316]	; (8003090 <HAL_ADC_ConfigChannel+0x234>)
 8002f54:	42a2      	cmp	r2, r4
 8002f56:	d032      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f58:	2000      	movs	r0, #0
 8002f5a:	e797      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f5c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8002f60:	d1f4      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f62:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f66:	4847      	ldr	r0, [pc, #284]	; (8003084 <HAL_ADC_ConfigChannel+0x228>)
 8002f68:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002f6c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002f70:	4311      	orrs	r1, r2
 8002f72:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f76:	4a47      	ldr	r2, [pc, #284]	; (8003094 <HAL_ADC_ConfigChannel+0x238>)
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	0992      	lsrs	r2, r2, #6
 8002f7c:	4946      	ldr	r1, [pc, #280]	; (8003098 <HAL_ADC_ConfigChannel+0x23c>)
 8002f7e:	fba1 1202 	umull	r1, r2, r1, r2
 8002f82:	0992      	lsrs	r2, r2, #6
 8002f84:	3201      	adds	r2, #1
 8002f86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002f8a:	0092      	lsls	r2, r2, #2
 8002f8c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002f8e:	e002      	b.n	8002f96 <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 8002f90:	9a01      	ldr	r2, [sp, #4]
 8002f92:	3a01      	subs	r2, #1
 8002f94:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002f96:	9a01      	ldr	r2, [sp, #4]
 8002f98:	2a00      	cmp	r2, #0
 8002f9a:	d1f9      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	e775      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fa0:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002fa4:	d1d5      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8002faa:	4836      	ldr	r0, [pc, #216]	; (8003084 <HAL_ADC_ConfigChannel+0x228>)
 8002fac:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8002fb0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002fb4:	4311      	orrs	r1, r2
 8002fb6:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fba:	2000      	movs	r0, #0
}
 8002fbc:	e766      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002fbe:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8002fc2:	d158      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc4:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fc8:	482e      	ldr	r0, [pc, #184]	; (8003084 <HAL_ADC_ConfigChannel+0x228>)
 8002fca:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8002fce:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd8:	2000      	movs	r0, #0
}
 8002fda:	e757      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fdc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002fe0:	d002      	beq.n	8002fe8 <HAL_ADC_ConfigChannel+0x18c>
 8002fe2:	4827      	ldr	r0, [pc, #156]	; (8003080 <HAL_ADC_ConfigChannel+0x224>)
 8002fe4:	4284      	cmp	r4, r0
 8002fe6:	d106      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002fe8:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002fea:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002fec:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002ff0:	ea20 0004 	bic.w	r0, r0, r4
 8002ff4:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ff6:	680a      	ldr	r2, [r1, #0]
 8002ff8:	2a00      	cmp	r2, #0
 8002ffa:	db01      	blt.n	8003000 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	e745      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003000:	4920      	ldr	r1, [pc, #128]	; (8003084 <HAL_ADC_ConfigChannel+0x228>)
 8003002:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003006:	4820      	ldr	r0, [pc, #128]	; (8003088 <HAL_ADC_ConfigChannel+0x22c>)
 8003008:	4282      	cmp	r2, r0
 800300a:	d007      	beq.n	800301c <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800300c:	481f      	ldr	r0, [pc, #124]	; (800308c <HAL_ADC_ConfigChannel+0x230>)
 800300e:	4282      	cmp	r2, r0
 8003010:	d013      	beq.n	800303a <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003012:	481f      	ldr	r0, [pc, #124]	; (8003090 <HAL_ADC_ConfigChannel+0x234>)
 8003014:	4282      	cmp	r2, r0
 8003016:	d01f      	beq.n	8003058 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003018:	2000      	movs	r0, #0
 800301a:	e737      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800301c:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003020:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8003024:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8003028:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 800302c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003030:	4311      	orrs	r1, r2
 8003032:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003036:	2000      	movs	r0, #0
}
 8003038:	e728      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800303a:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800303e:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 8003042:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8003046:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800304a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800304e:	430a      	orrs	r2, r1
 8003050:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003054:	2000      	movs	r0, #0
}
 8003056:	e719      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003058:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800305c:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 8003060:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003064:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003068:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800306c:	430a      	orrs	r2, r1
 800306e:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003072:	2000      	movs	r0, #0
}
 8003074:	e70a      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x30>
 8003076:	2000      	movs	r0, #0
 8003078:	e708      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800307a:	2002      	movs	r0, #2
 800307c:	e709      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x36>
 800307e:	bf00      	nop
 8003080:	80000004 	.word	0x80000004
 8003084:	40012000 	.word	0x40012000
 8003088:	b0001000 	.word	0xb0001000
 800308c:	b8004000 	.word	0xb8004000
 8003090:	b4002000 	.word	0xb4002000
 8003094:	20000070 	.word	0x20000070
 8003098:	053e2d63 	.word	0x053e2d63

0800309c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800309c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800309e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	f012 0f04 	tst.w	r2, #4
 80030a6:	d02a      	beq.n	80030fe <ADC_ConversionStop+0x62>
 80030a8:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	f012 0f02 	tst.w	r2, #2
 80030b0:	d107      	bne.n	80030c2 <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030b8:	f022 0217 	bic.w	r2, r2, #23
 80030bc:	f042 0210 	orr.w	r2, r2, #16
 80030c0:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030c2:	f7fe fae5 	bl	8001690 <HAL_GetTick>
 80030c6:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f013 0f04 	tst.w	r3, #4
 80030d0:	d013      	beq.n	80030fa <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030d2:	f7fe fadd 	bl	8001690 <HAL_GetTick>
 80030d6:	1b43      	subs	r3, r0, r5
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d9f5      	bls.n	80030c8 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f013 0f04 	tst.w	r3, #4
 80030e4:	d0f0      	beq.n	80030c8 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030e8:	f043 0310 	orr.w	r3, r3, #16
 80030ec:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80030f6:	2001      	movs	r0, #1
 80030f8:	e002      	b.n	8003100 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80030fa:	2000      	movs	r0, #0
 80030fc:	e000      	b.n	8003100 <ADC_ConversionStop+0x64>
 80030fe:	2000      	movs	r0, #0
}
 8003100:	bd38      	pop	{r3, r4, r5, pc}
	...

08003104 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003104:	b530      	push	{r4, r5, lr}
 8003106:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003108:	2300      	movs	r3, #0
 800310a:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800310c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	f012 0f01 	tst.w	r2, #1
 8003114:	d15b      	bne.n	80031ce <ADC_Enable+0xca>
 8003116:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003118:	6899      	ldr	r1, [r3, #8]
 800311a:	4a2e      	ldr	r2, [pc, #184]	; (80031d4 <ADC_Enable+0xd0>)
 800311c:	4211      	tst	r1, r2
 800311e:	d117      	bne.n	8003150 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003126:	f022 0217 	bic.w	r2, r2, #23
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <ADC_Enable+0xd4>)
 8003132:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003136:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800313a:	d019      	beq.n	8003170 <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800313c:	4b27      	ldr	r3, [pc, #156]	; (80031dc <ADC_Enable+0xd8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	099b      	lsrs	r3, r3, #6
 8003142:	4a27      	ldr	r2, [pc, #156]	; (80031e0 <ADC_Enable+0xdc>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	099b      	lsrs	r3, r3, #6
 800314a:	3301      	adds	r3, #1
 800314c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800314e:	e00c      	b.n	800316a <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003150:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003152:	f043 0310 	orr.w	r3, r3, #16
 8003156:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003158:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8003160:	2001      	movs	r0, #1
 8003162:	e035      	b.n	80031d0 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8003164:	9b01      	ldr	r3, [sp, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800316a:	9b01      	ldr	r3, [sp, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f9      	bne.n	8003164 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003170:	7e63      	ldrb	r3, [r4, #25]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003176:	2000      	movs	r0, #0
 8003178:	e02a      	b.n	80031d0 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 800317a:	f7fe fa89 	bl	8001690 <HAL_GetTick>
 800317e:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	f012 0f01 	tst.w	r2, #1
 8003188:	d11f      	bne.n	80031ca <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	f012 0f01 	tst.w	r2, #1
 8003190:	d107      	bne.n	80031a2 <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003198:	f022 0217 	bic.w	r2, r2, #23
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031a2:	f7fe fa75 	bl	8001690 <HAL_GetTick>
 80031a6:	1b40      	subs	r0, r0, r5
 80031a8:	2802      	cmp	r0, #2
 80031aa:	d9e9      	bls.n	8003180 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f013 0f01 	tst.w	r3, #1
 80031b4:	d1e4      	bne.n	8003180 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031b8:	f043 0310 	orr.w	r3, r3, #16
 80031bc:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80031c6:	2001      	movs	r0, #1
 80031c8:	e002      	b.n	80031d0 <ADC_Enable+0xcc>
  return HAL_OK;
 80031ca:	2000      	movs	r0, #0
 80031cc:	e000      	b.n	80031d0 <ADC_Enable+0xcc>
 80031ce:	2000      	movs	r0, #0
}
 80031d0:	b003      	add	sp, #12
 80031d2:	bd30      	pop	{r4, r5, pc}
 80031d4:	80000017 	.word	0x80000017
 80031d8:	40012000 	.word	0x40012000
 80031dc:	20000070 	.word	0x20000070
 80031e0:	053e2d63 	.word	0x053e2d63

080031e4 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031e4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f013 0f04 	tst.w	r3, #4
 80031ec:	d128      	bne.n	8003240 <HAL_ADC_Start+0x5c>
{
 80031ee:	b510      	push	{r4, lr}
 80031f0:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 80031f2:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d024      	beq.n	8003244 <HAL_ADC_Start+0x60>
 80031fa:	2301      	movs	r3, #1
 80031fc:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003200:	f7ff ff80 	bl	8003104 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003204:	b9c0      	cbnz	r0, 8003238 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003206:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003208:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003216:	2300      	movs	r3, #0
 8003218:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800321a:	6822      	ldr	r2, [r4, #0]
 800321c:	211c      	movs	r1, #28
 800321e:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003220:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003224:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003226:	6893      	ldr	r3, [r2, #8]
 8003228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800322c:	f023 0317 	bic.w	r3, r3, #23
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	6093      	str	r3, [r2, #8]
}
 8003236:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003238:	2300      	movs	r3, #0
 800323a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800323e:	e7fa      	b.n	8003236 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8003240:	2002      	movs	r0, #2
}
 8003242:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003244:	2002      	movs	r0, #2
 8003246:	e7f6      	b.n	8003236 <HAL_ADC_Start+0x52>

08003248 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003248:	b538      	push	{r3, r4, r5, lr}
 800324a:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800324c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800324e:	6893      	ldr	r3, [r2, #8]
 8003250:	f013 0302 	ands.w	r3, r3, #2
 8003254:	d000      	beq.n	8003258 <ADC_Disable+0x10>
 8003256:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003258:	6891      	ldr	r1, [r2, #8]
 800325a:	f011 0f01 	tst.w	r1, #1
 800325e:	d039      	beq.n	80032d4 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003260:	2b00      	cmp	r3, #0
 8003262:	d139      	bne.n	80032d8 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003264:	6893      	ldr	r3, [r2, #8]
 8003266:	f003 0305 	and.w	r3, r3, #5
 800326a:	2b01      	cmp	r3, #1
 800326c:	d009      	beq.n	8003282 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800326e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003270:	f043 0310 	orr.w	r3, r3, #16
 8003274:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003276:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 800327e:	2001      	movs	r0, #1
 8003280:	e029      	b.n	80032d6 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8003282:	6893      	ldr	r3, [r2, #8]
 8003284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003288:	f023 0317 	bic.w	r3, r3, #23
 800328c:	f043 0302 	orr.w	r3, r3, #2
 8003290:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	2203      	movs	r2, #3
 8003296:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003298:	f7fe f9fa 	bl	8001690 <HAL_GetTick>
 800329c:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f013 0f01 	tst.w	r3, #1
 80032a6:	d013      	beq.n	80032d0 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032a8:	f7fe f9f2 	bl	8001690 <HAL_GetTick>
 80032ac:	1b40      	subs	r0, r0, r5
 80032ae:	2802      	cmp	r0, #2
 80032b0:	d9f5      	bls.n	800329e <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f013 0f01 	tst.w	r3, #1
 80032ba:	d0f0      	beq.n	800329e <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032be:	f043 0310 	orr.w	r3, r3, #16
 80032c2:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80032cc:	2001      	movs	r0, #1
 80032ce:	e002      	b.n	80032d6 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032d0:	2000      	movs	r0, #0
 80032d2:	e000      	b.n	80032d6 <ADC_Disable+0x8e>
 80032d4:	2000      	movs	r0, #0
}
 80032d6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80032d8:	2000      	movs	r0, #0
 80032da:	e7fc      	b.n	80032d6 <ADC_Disable+0x8e>

080032dc <HAL_ADC_DeInit>:
{
 80032dc:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80032de:	2800      	cmp	r0, #0
 80032e0:	d04c      	beq.n	800337c <HAL_ADC_DeInit+0xa0>
 80032e2:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80032e4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80032e6:	f043 0302 	orr.w	r3, r3, #2
 80032ea:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 80032ec:	f7ff fed6 	bl	800309c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80032f0:	4606      	mov	r6, r0
 80032f2:	2800      	cmp	r0, #0
 80032f4:	d033      	beq.n	800335e <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80032f6:	6822      	ldr	r2, [r4, #0]
 80032f8:	6853      	ldr	r3, [r2, #4]
 80032fa:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80032fe:	f023 0303 	bic.w	r3, r3, #3
 8003302:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	f240 329f 	movw	r2, #927	; 0x39f
 800330a:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800330c:	6822      	ldr	r2, [r4, #0]
 800330e:	68d1      	ldr	r1, [r2, #12]
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_ADC_DeInit+0xa4>)
 8003312:	400b      	ands	r3, r1
 8003314:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	6913      	ldr	r3, [r2, #16]
 800331a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800331e:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003320:	6822      	ldr	r2, [r4, #0]
 8003322:	6953      	ldr	r3, [r2, #20]
 8003324:	f023 0307 	bic.w	r3, r3, #7
 8003328:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	6a13      	ldr	r3, [r2, #32]
 800332e:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003332:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003334:	6823      	ldr	r3, [r4, #0]
 8003336:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003338:	2500      	movs	r5, #0
 800333a:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800333c:	4a11      	ldr	r2, [pc, #68]	; (8003384 <HAL_ADC_DeInit+0xa8>)
 800333e:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 8003342:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003346:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 800334a:	4620      	mov	r0, r4
 800334c:	f7fd fcba 	bl	8000cc4 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003350:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8003352:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003354:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8003356:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 800335a:	4630      	mov	r0, r6
 800335c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800335e:	4620      	mov	r0, r4
 8003360:	f7ff ff72 	bl	8003248 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003364:	4606      	mov	r6, r0
 8003366:	b908      	cbnz	r0, 800336c <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 8003368:	2301      	movs	r3, #1
 800336a:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 800336c:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800336e:	6893      	ldr	r3, [r2, #8]
 8003370:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003374:	f023 0317 	bic.w	r3, r3, #23
 8003378:	6093      	str	r3, [r2, #8]
}
 800337a:	e7bc      	b.n	80032f6 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 800337c:	2601      	movs	r6, #1
 800337e:	e7ec      	b.n	800335a <HAL_ADC_DeInit+0x7e>
 8003380:	833e0200 	.word	0x833e0200
 8003384:	40012000 	.word	0x40012000

08003388 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003388:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800338c:	2b01      	cmp	r3, #1
 800338e:	d019      	beq.n	80033c4 <HAL_ADC_Stop+0x3c>
{
 8003390:	b510      	push	{r4, lr}
 8003392:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003394:	2301      	movs	r3, #1
 8003396:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 800339a:	f7ff fe7f 	bl	800309c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800339e:	b118      	cbz	r0, 80033a8 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80033a0:	2300      	movs	r3, #0
 80033a2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 80033a6:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80033a8:	4620      	mov	r0, r4
 80033aa:	f7ff ff4d 	bl	8003248 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d1f6      	bne.n	80033a0 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80033b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	65a3      	str	r3, [r4, #88]	; 0x58
 80033c2:	e7ed      	b.n	80033a0 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80033c4:	2002      	movs	r0, #2
}
 80033c6:	4770      	bx	lr

080033c8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80033c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ca:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80033d0:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f000 8094 	beq.w	8003502 <HAL_ADCEx_Calibration_Start+0x13a>
 80033da:	4604      	mov	r4, r0
 80033dc:	2301      	movs	r3, #1
 80033de:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033e2:	f7ff ff31 	bl	8003248 <ADC_Disable>
 80033e6:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	f012 0201 	ands.w	r2, r2, #1
 80033f0:	d009      	beq.n	8003406 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033f4:	f043 0310 	orr.w	r3, r3, #16
 80033f8:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80033fa:	2300      	movs	r3, #0
 80033fc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8003400:	4628      	mov	r0, r5
 8003402:	b003      	add	sp, #12
 8003404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003406:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003408:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 800340c:	f041 0102 	orr.w	r1, r1, #2
 8003410:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003412:	68de      	ldr	r6, [r3, #12]
 8003414:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8003418:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 800341c:	0436      	lsls	r6, r6, #16
 800341e:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003420:	68d9      	ldr	r1, [r3, #12]
 8003422:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003426:	f021 0103 	bic.w	r1, r1, #3
 800342a:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 800342c:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800342e:	e005      	b.n	800343c <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003430:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003438:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800343a:	3201      	adds	r2, #1
 800343c:	2a07      	cmp	r2, #7
 800343e:	d81e      	bhi.n	800347e <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8003440:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003442:	688b      	ldr	r3, [r1, #8]
 8003444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003448:	f023 0317 	bic.w	r3, r3, #23
 800344c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003450:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003452:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003454:	6899      	ldr	r1, [r3, #8]
 8003456:	2900      	cmp	r1, #0
 8003458:	daea      	bge.n	8003430 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 800345a:	9b01      	ldr	r3, [sp, #4]
 800345c:	3301      	adds	r3, #1
 800345e:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003460:	9b01      	ldr	r3, [sp, #4]
 8003462:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003466:	d3f4      	bcc.n	8003452 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003468:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800346a:	f023 0312 	bic.w	r3, r3, #18
 800346e:	f043 0310 	orr.w	r3, r3, #16
 8003472:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003474:	2300      	movs	r3, #0
 8003476:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 800347a:	2501      	movs	r5, #1
 800347c:	e7c0      	b.n	8003400 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 800347e:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8003482:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003484:	688b      	ldr	r3, [r1, #8]
 8003486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800348a:	f023 0317 	bic.w	r3, r3, #23
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003494:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003496:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800349a:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 800349e:	4302      	orrs	r2, r0
 80034a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 80034a4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80034a6:	6893      	ldr	r3, [r2, #8]
 80034a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034ac:	f023 0317 	bic.w	r3, r3, #23
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80034b6:	f7fe f8eb 	bl	8001690 <HAL_GetTick>
 80034ba:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034bc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	f012 0f01 	tst.w	r2, #1
 80034c4:	d109      	bne.n	80034da <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	4316      	orrs	r6, r2
 80034ca:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80034cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80034d8:	e78f      	b.n	80033fa <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034da:	f7fe f8d9 	bl	8001690 <HAL_GetTick>
 80034de:	1bc3      	subs	r3, r0, r7
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d9eb      	bls.n	80034bc <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f013 0f01 	tst.w	r3, #1
 80034ec:	d0e6      	beq.n	80034bc <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034f0:	f043 0310 	orr.w	r3, r3, #16
 80034f4:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80034fe:	2501      	movs	r5, #1
 8003500:	e77e      	b.n	8003400 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8003502:	2502      	movs	r5, #2
 8003504:	e77c      	b.n	8003400 <HAL_ADCEx_Calibration_Start+0x38>
	...

08003508 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003508:	4a07      	ldr	r2, [pc, #28]	; (8003528 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800350a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003510:	041b      	lsls	r3, r3, #16
 8003512:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003514:	0200      	lsls	r0, r0, #8
 8003516:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800351a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800351c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003524:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003526:	4770      	bx	lr
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800352e:	4b19      	ldr	r3, [pc, #100]	; (8003594 <HAL_NVIC_SetPriority+0x68>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003536:	f1c3 0c07 	rsb	ip, r3, #7
 800353a:	f1bc 0f04 	cmp.w	ip, #4
 800353e:	bf28      	it	cs
 8003540:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003544:	f103 0e04 	add.w	lr, r3, #4
 8003548:	f1be 0f06 	cmp.w	lr, #6
 800354c:	d918      	bls.n	8003580 <HAL_NVIC_SetPriority+0x54>
 800354e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	f04f 3eff 	mov.w	lr, #4294967295
 8003554:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003558:	ea21 010c 	bic.w	r1, r1, ip
 800355c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800355e:	fa0e f303 	lsl.w	r3, lr, r3
 8003562:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003566:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003568:	2800      	cmp	r0, #0
 800356a:	db0b      	blt.n	8003584 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356c:	0109      	lsls	r1, r1, #4
 800356e:	b2c9      	uxtb	r1, r1
 8003570:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003574:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003578:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800357c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003580:	2300      	movs	r3, #0
 8003582:	e7e5      	b.n	8003550 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003584:	f000 000f 	and.w	r0, r0, #15
 8003588:	0109      	lsls	r1, r1, #4
 800358a:	b2c9      	uxtb	r1, r1
 800358c:	4b02      	ldr	r3, [pc, #8]	; (8003598 <HAL_NVIC_SetPriority+0x6c>)
 800358e:	5419      	strb	r1, [r3, r0]
 8003590:	e7f4      	b.n	800357c <HAL_NVIC_SetPriority+0x50>
 8003592:	bf00      	nop
 8003594:	e000ed00 	.word	0xe000ed00
 8003598:	e000ed14 	.word	0xe000ed14

0800359c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800359c:	2800      	cmp	r0, #0
 800359e:	db07      	blt.n	80035b0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a0:	f000 021f 	and.w	r2, r0, #31
 80035a4:	0940      	lsrs	r0, r0, #5
 80035a6:	2301      	movs	r3, #1
 80035a8:	4093      	lsls	r3, r2
 80035aa:	4a02      	ldr	r2, [pc, #8]	; (80035b4 <HAL_NVIC_EnableIRQ+0x18>)
 80035ac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	e000e100 	.word	0xe000e100

080035b8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80035b8:	2800      	cmp	r0, #0
 80035ba:	db0c      	blt.n	80035d6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035bc:	f000 021f 	and.w	r2, r0, #31
 80035c0:	0940      	lsrs	r0, r0, #5
 80035c2:	2301      	movs	r3, #1
 80035c4:	4093      	lsls	r3, r2
 80035c6:	3020      	adds	r0, #32
 80035c8:	4a03      	ldr	r2, [pc, #12]	; (80035d8 <HAL_NVIC_DisableIRQ+0x20>)
 80035ca:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80035ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80035d2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80035d6:	4770      	bx	lr
 80035d8:	e000e100 	.word	0xe000e100

080035dc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035dc:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035de:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80035e0:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 80035e4:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80035e8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80035ea:	b124      	cbz	r4, 80035f6 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035ec:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80035ee:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 80035f2:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035f6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80035f8:	f004 0c1c 	and.w	ip, r4, #28
 80035fc:	2401      	movs	r4, #1
 80035fe:	fa04 f40c 	lsl.w	r4, r4, ip
 8003602:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8003606:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800360a:	6804      	ldr	r4, [r0, #0]
 800360c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800360e:	6883      	ldr	r3, [r0, #8]
 8003610:	2b10      	cmp	r3, #16
 8003612:	d005      	beq.n	8003620 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003614:	6803      	ldr	r3, [r0, #0]
 8003616:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003618:	6803      	ldr	r3, [r0, #0]
 800361a:	60da      	str	r2, [r3, #12]
  }
}
 800361c:	bc10      	pop	{r4}
 800361e:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003620:	6803      	ldr	r3, [r0, #0]
 8003622:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003624:	6803      	ldr	r3, [r0, #0]
 8003626:	60d9      	str	r1, [r3, #12]
 8003628:	e7f8      	b.n	800361c <DMA_SetConfig+0x40>
	...

0800362c <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800362c:	6803      	ldr	r3, [r0, #0]
 800362e:	4a14      	ldr	r2, [pc, #80]	; (8003680 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d816      	bhi.n	8003662 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003636:	f022 0203 	bic.w	r2, r2, #3
 800363a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800363e:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8003642:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003644:	b2db      	uxtb	r3, r3
 8003646:	3b08      	subs	r3, #8
 8003648:	4a0e      	ldr	r2, [pc, #56]	; (8003684 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003650:	4a0d      	ldr	r2, [pc, #52]	; (8003688 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8003652:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003654:	f003 031f 	and.w	r3, r3, #31
 8003658:	2201      	movs	r2, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003660:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003662:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003664:	f022 0103 	bic.w	r1, r2, #3
 8003668:	4a08      	ldr	r2, [pc, #32]	; (800368c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 800366a:	440a      	add	r2, r1
 800366c:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3b08      	subs	r3, #8
 8003672:	4a04      	ldr	r2, [pc, #16]	; (8003684 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	3307      	adds	r3, #7
 800367c:	e7e8      	b.n	8003650 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800367e:	bf00      	nop
 8003680:	40020407 	.word	0x40020407
 8003684:	cccccccd 	.word	0xcccccccd
 8003688:	40020880 	.word	0x40020880
 800368c:	4002081c 	.word	0x4002081c

08003690 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003690:	6843      	ldr	r3, [r0, #4]
 8003692:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003696:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003698:	441a      	add	r2, r3
 800369a:	0092      	lsls	r2, r2, #2
 800369c:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800369e:	4a06      	ldr	r2, [pc, #24]	; (80036b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 80036a0:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80036a2:	3b01      	subs	r3, #1
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2201      	movs	r2, #1
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	1000823f 	.word	0x1000823f
 80036b8:	40020940 	.word	0x40020940

080036bc <HAL_DMA_Init>:
  if (hdma == NULL)
 80036bc:	2800      	cmp	r0, #0
 80036be:	d060      	beq.n	8003782 <HAL_DMA_Init+0xc6>
{
 80036c0:	b510      	push	{r4, lr}
 80036c2:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036c4:	6802      	ldr	r2, [r0, #0]
 80036c6:	4b30      	ldr	r3, [pc, #192]	; (8003788 <HAL_DMA_Init+0xcc>)
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d842      	bhi.n	8003752 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036cc:	4b2f      	ldr	r3, [pc, #188]	; (800378c <HAL_DMA_Init+0xd0>)
 80036ce:	4413      	add	r3, r2
 80036d0:	492f      	ldr	r1, [pc, #188]	; (8003790 <HAL_DMA_Init+0xd4>)
 80036d2:	fba1 1303 	umull	r1, r3, r1, r3
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_DMA_Init+0xd8>)
 80036de:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80036e0:	2302      	movs	r3, #2
 80036e2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036e6:	6813      	ldr	r3, [r2, #0]
 80036e8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f0:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80036f2:	6821      	ldr	r1, [r4, #0]
 80036f4:	680a      	ldr	r2, [r1, #0]
 80036f6:	68a3      	ldr	r3, [r4, #8]
 80036f8:	68e0      	ldr	r0, [r4, #12]
 80036fa:	4303      	orrs	r3, r0
 80036fc:	6920      	ldr	r0, [r4, #16]
 80036fe:	4303      	orrs	r3, r0
 8003700:	6960      	ldr	r0, [r4, #20]
 8003702:	4303      	orrs	r3, r0
 8003704:	69a0      	ldr	r0, [r4, #24]
 8003706:	4303      	orrs	r3, r0
 8003708:	69e0      	ldr	r0, [r4, #28]
 800370a:	4303      	orrs	r3, r0
 800370c:	6a20      	ldr	r0, [r4, #32]
 800370e:	4303      	orrs	r3, r0
 8003710:	4313      	orrs	r3, r2
 8003712:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003714:	4620      	mov	r0, r4
 8003716:	f7ff ff89 	bl	800362c <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003720:	d022      	beq.n	8003768 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003722:	6863      	ldr	r3, [r4, #4]
 8003724:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800372a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800372c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800372e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003730:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003732:	6863      	ldr	r3, [r4, #4]
 8003734:	3b01      	subs	r3, #1
 8003736:	2b03      	cmp	r3, #3
 8003738:	d919      	bls.n	800376e <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800373e:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003740:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003742:	2000      	movs	r0, #0
 8003744:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003746:	2301      	movs	r3, #1
 8003748:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800374c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003750:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003752:	4b11      	ldr	r3, [pc, #68]	; (8003798 <HAL_DMA_Init+0xdc>)
 8003754:	4413      	add	r3, r2
 8003756:	490e      	ldr	r1, [pc, #56]	; (8003790 <HAL_DMA_Init+0xd4>)
 8003758:	fba1 1303 	umull	r1, r3, r1, r3
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <HAL_DMA_Init+0xe0>)
 8003764:	6403      	str	r3, [r0, #64]	; 0x40
 8003766:	e7bb      	b.n	80036e0 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003768:	2300      	movs	r3, #0
 800376a:	6063      	str	r3, [r4, #4]
 800376c:	e7d9      	b.n	8003722 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800376e:	4620      	mov	r0, r4
 8003770:	f7ff ff8e 	bl	8003690 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003774:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800377a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800377c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	e7df      	b.n	8003742 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8003782:	2001      	movs	r0, #1
}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40020407 	.word	0x40020407
 800378c:	bffdfff8 	.word	0xbffdfff8
 8003790:	cccccccd 	.word	0xcccccccd
 8003794:	40020000 	.word	0x40020000
 8003798:	bffdfbf8 	.word	0xbffdfbf8
 800379c:	40020400 	.word	0x40020400

080037a0 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80037a0:	2800      	cmp	r0, #0
 80037a2:	d04b      	beq.n	800383c <HAL_DMA_DeInit+0x9c>
{
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80037a8:	6802      	ldr	r2, [r0, #0]
 80037aa:	6813      	ldr	r3, [r2, #0]
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037b2:	6802      	ldr	r2, [r0, #0]
 80037b4:	4b22      	ldr	r3, [pc, #136]	; (8003840 <HAL_DMA_DeInit+0xa0>)
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d82c      	bhi.n	8003814 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037ba:	4b22      	ldr	r3, [pc, #136]	; (8003844 <HAL_DMA_DeInit+0xa4>)
 80037bc:	4413      	add	r3, r2
 80037be:	4922      	ldr	r1, [pc, #136]	; (8003848 <HAL_DMA_DeInit+0xa8>)
 80037c0:	fba1 1303 	umull	r1, r3, r1, r3
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037ca:	4b20      	ldr	r3, [pc, #128]	; (800384c <HAL_DMA_DeInit+0xac>)
 80037cc:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80037ce:	2500      	movs	r5, #0
 80037d0:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80037d4:	f003 021c 	and.w	r2, r3, #28
 80037d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80037da:	2301      	movs	r3, #1
 80037dc:	4093      	lsls	r3, r2
 80037de:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037e0:	4620      	mov	r0, r4
 80037e2:	f7ff ff23 	bl	800362c <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80037e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80037e8:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80037ec:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80037ee:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037f0:	6863      	ldr	r3, [r4, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	2b03      	cmp	r3, #3
 80037f6:	d918      	bls.n	800382a <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 80037f8:	2000      	movs	r0, #0
 80037fa:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80037fc:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80037fe:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8003800:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003802:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003804:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003806:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003808:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800380a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800380e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003812:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003814:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <HAL_DMA_DeInit+0xb0>)
 8003816:	4413      	add	r3, r2
 8003818:	490b      	ldr	r1, [pc, #44]	; (8003848 <HAL_DMA_DeInit+0xa8>)
 800381a:	fba1 1303 	umull	r1, r3, r1, r3
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_DMA_DeInit+0xb4>)
 8003826:	6403      	str	r3, [r0, #64]	; 0x40
 8003828:	e7d1      	b.n	80037ce <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800382a:	4620      	mov	r0, r4
 800382c:	f7ff ff30 	bl	8003690 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003830:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003832:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003834:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003836:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	e7dd      	b.n	80037f8 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 800383c:	2001      	movs	r0, #1
}
 800383e:	4770      	bx	lr
 8003840:	40020407 	.word	0x40020407
 8003844:	bffdfff8 	.word	0xbffdfff8
 8003848:	cccccccd 	.word	0xcccccccd
 800384c:	40020000 	.word	0x40020000
 8003850:	bffdfbf8 	.word	0xbffdfbf8
 8003854:	40020400 	.word	0x40020400

08003858 <HAL_DMA_Start_IT>:
{
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800385c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8003860:	2801      	cmp	r0, #1
 8003862:	d043      	beq.n	80038ec <HAL_DMA_Start_IT+0x94>
 8003864:	2001      	movs	r0, #1
 8003866:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 800386a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800386e:	b2c0      	uxtb	r0, r0
 8003870:	2801      	cmp	r0, #1
 8003872:	d006      	beq.n	8003882 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003874:	2380      	movs	r3, #128	; 0x80
 8003876:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003878:	2300      	movs	r3, #0
 800387a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 800387e:	2001      	movs	r0, #1
}
 8003880:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003882:	2002      	movs	r0, #2
 8003884:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003888:	2000      	movs	r0, #0
 800388a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800388c:	6825      	ldr	r5, [r4, #0]
 800388e:	6828      	ldr	r0, [r5, #0]
 8003890:	f020 0001 	bic.w	r0, r0, #1
 8003894:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003896:	4620      	mov	r0, r4
 8003898:	f7ff fea0 	bl	80035dc <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800389c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800389e:	b1d3      	cbz	r3, 80038d6 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a0:	6822      	ldr	r2, [r4, #0]
 80038a2:	6813      	ldr	r3, [r2, #0]
 80038a4:	f043 030e 	orr.w	r3, r3, #14
 80038a8:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80038aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80038b2:	d003      	beq.n	80038bc <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ba:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80038bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80038be:	b11b      	cbz	r3, 80038c8 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038c6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80038c8:	6822      	ldr	r2, [r4, #0]
 80038ca:	6813      	ldr	r3, [r2, #0]
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038d2:	2000      	movs	r0, #0
 80038d4:	e7d4      	b.n	8003880 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038d6:	6822      	ldr	r2, [r4, #0]
 80038d8:	6813      	ldr	r3, [r2, #0]
 80038da:	f023 0304 	bic.w	r3, r3, #4
 80038de:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038e0:	6822      	ldr	r2, [r4, #0]
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	f043 030a 	orr.w	r3, r3, #10
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e7de      	b.n	80038aa <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80038ec:	2002      	movs	r0, #2
 80038ee:	e7c7      	b.n	8003880 <HAL_DMA_Start_IT+0x28>

080038f0 <HAL_DMA_Abort>:
  if (NULL == hdma)
 80038f0:	4603      	mov	r3, r0
 80038f2:	2800      	cmp	r0, #0
 80038f4:	d034      	beq.n	8003960 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038f6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	2a02      	cmp	r2, #2
 80038fe:	d006      	beq.n	800390e <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003900:	2204      	movs	r2, #4
 8003902:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003904:	2200      	movs	r2, #0
 8003906:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 800390a:	2001      	movs	r0, #1
 800390c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800390e:	6801      	ldr	r1, [r0, #0]
 8003910:	680a      	ldr	r2, [r1, #0]
 8003912:	f022 020e 	bic.w	r2, r2, #14
 8003916:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003918:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800391a:	680a      	ldr	r2, [r1, #0]
 800391c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003920:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003922:	6801      	ldr	r1, [r0, #0]
 8003924:	680a      	ldr	r2, [r1, #0]
 8003926:	f022 0201 	bic.w	r2, r2, #1
 800392a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800392c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800392e:	f002 011c 	and.w	r1, r2, #28
 8003932:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003934:	2201      	movs	r2, #1
 8003936:	408a      	lsls	r2, r1
 8003938:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800393a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800393c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800393e:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003942:	b132      	cbz	r2, 8003952 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003944:	6811      	ldr	r1, [r2, #0]
 8003946:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800394a:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800394c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800394e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003950:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003958:	2000      	movs	r0, #0
 800395a:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 800395e:	4770      	bx	lr
    return HAL_ERROR;
 8003960:	2001      	movs	r0, #1
}
 8003962:	4770      	bx	lr

08003964 <HAL_DMA_Abort_IT>:
{
 8003964:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003966:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d003      	beq.n	8003978 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003970:	2304      	movs	r3, #4
 8003972:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003974:	2001      	movs	r0, #1
}
 8003976:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003978:	6802      	ldr	r2, [r0, #0]
 800397a:	6813      	ldr	r3, [r2, #0]
 800397c:	f023 030e 	bic.w	r3, r3, #14
 8003980:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003982:	6802      	ldr	r2, [r0, #0]
 8003984:	6813      	ldr	r3, [r2, #0]
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800398c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800398e:	6813      	ldr	r3, [r2, #0]
 8003990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003994:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003996:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003998:	f003 021c 	and.w	r2, r3, #28
 800399c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800399e:	2301      	movs	r3, #1
 80039a0:	4093      	lsls	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80039a6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80039a8:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80039aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80039ac:	b133      	cbz	r3, 80039bc <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039b4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039b6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80039b8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80039ba:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80039bc:	2301      	movs	r3, #1
 80039be:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80039c2:	2300      	movs	r3, #0
 80039c4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80039c8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039ca:	b113      	cbz	r3, 80039d2 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80039cc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2000      	movs	r0, #0
 80039d0:	e7d1      	b.n	8003976 <HAL_DMA_Abort_IT+0x12>
 80039d2:	2000      	movs	r0, #0
 80039d4:	e7cf      	b.n	8003976 <HAL_DMA_Abort_IT+0x12>
	...

080039d8 <HAL_DMA_IRQHandler>:
{
 80039d8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80039dc:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80039de:	6804      	ldr	r4, [r0, #0]
 80039e0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80039e4:	f003 031c 	and.w	r3, r3, #28
 80039e8:	2204      	movs	r2, #4
 80039ea:	409a      	lsls	r2, r3
 80039ec:	420a      	tst	r2, r1
 80039ee:	d015      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x44>
 80039f0:	f015 0f04 	tst.w	r5, #4
 80039f4:	d012      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	f013 0f20 	tst.w	r3, #32
 80039fc:	d103      	bne.n	8003a06 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	f023 0304 	bic.w	r3, r3, #4
 8003a04:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a06:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a08:	f003 021c 	and.w	r2, r3, #28
 8003a0c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003a0e:	2304      	movs	r3, #4
 8003a10:	4093      	lsls	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003a14:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003a16:	b103      	cbz	r3, 8003a1a <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003a18:	4798      	blx	r3
}
 8003a1a:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	420a      	tst	r2, r1
 8003a22:	d028      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x9e>
 8003a24:	f015 0f02 	tst.w	r5, #2
 8003a28:	d025      	beq.n	8003a76 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	f013 0f20 	tst.w	r3, #32
 8003a30:	d106      	bne.n	8003a40 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	f023 030a 	bic.w	r3, r3, #10
 8003a38:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a40:	6802      	ldr	r2, [r0, #0]
 8003a42:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <HAL_DMA_IRQHandler+0xdc>)
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d90e      	bls.n	8003a66 <HAL_DMA_IRQHandler+0x8e>
 8003a48:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a4a:	f003 021c 	and.w	r2, r3, #28
 8003a4e:	2302      	movs	r3, #2
 8003a50:	4093      	lsls	r3, r2
 8003a52:	4a19      	ldr	r2, [pc, #100]	; (8003ab8 <HAL_DMA_IRQHandler+0xe0>)
 8003a54:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003a56:	2300      	movs	r3, #0
 8003a58:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8003a5c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0db      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003a62:	4798      	blx	r3
 8003a64:	e7d9      	b.n	8003a1a <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a66:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a68:	f003 021c 	and.w	r2, r3, #28
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	4093      	lsls	r3, r2
 8003a70:	4a12      	ldr	r2, [pc, #72]	; (8003abc <HAL_DMA_IRQHandler+0xe4>)
 8003a72:	6053      	str	r3, [r2, #4]
 8003a74:	e7ef      	b.n	8003a56 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a76:	2208      	movs	r2, #8
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	420b      	tst	r3, r1
 8003a7e:	d0cc      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x42>
 8003a80:	f015 0f08 	tst.w	r5, #8
 8003a84:	d0c9      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	f023 030e 	bic.w	r3, r3, #14
 8003a8c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a90:	f003 031c 	and.w	r3, r3, #28
 8003a94:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003a96:	2201      	movs	r2, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a9e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003aa0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003aaa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0b4      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003ab0:	4798      	blx	r3
  return;
 8003ab2:	e7b2      	b.n	8003a1a <HAL_DMA_IRQHandler+0x42>
 8003ab4:	40020080 	.word	0x40020080
 8003ab8:	40020400 	.word	0x40020400
 8003abc:	40020000 	.word	0x40020000

08003ac0 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003ac0:	b178      	cbz	r0, 8003ae2 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003ac2:	6803      	ldr	r3, [r0, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003ac6:	f011 0f10 	tst.w	r1, #16
 8003aca:	d004      	beq.n	8003ad6 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003acc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003ad0:	d004      	beq.n	8003adc <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003ad2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003ad6:	601a      	str	r2, [r3, #0]
  return status;
 8003ad8:	2000      	movs	r0, #0
 8003ada:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003adc:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003ae0:	e7f9      	b.n	8003ad6 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003ae2:	2001      	movs	r0, #1
}
 8003ae4:	4770      	bx	lr
	...

08003ae8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003ae8:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003aea:	4c05      	ldr	r4, [pc, #20]	; (8003b00 <FLASH_Program_DoubleWord+0x18>)
 8003aec:	6961      	ldr	r1, [r4, #20]
 8003aee:	f041 0101 	orr.w	r1, r1, #1
 8003af2:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003af4:	6002      	str	r2, [r0, #0]
 8003af6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003afa:	6043      	str	r3, [r0, #4]
}
 8003afc:	bc10      	pop	{r4}
 8003afe:	4770      	bx	lr
 8003b00:	58004000 	.word	0x58004000

08003b04 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003b04:	4a0c      	ldr	r2, [pc, #48]	; (8003b38 <FLASH_Program_Fast+0x34>)
 8003b06:	6953      	ldr	r3, [r2, #20]
 8003b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b0c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003b12:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003b14:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003b16:	f851 2b04 	ldr.w	r2, [r1], #4
 8003b1a:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8003b1e:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8003b20:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003b24:	d1f7      	bne.n	8003b16 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8003b26:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <FLASH_Program_Fast+0x34>)
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003b2e:	d1fa      	bne.n	8003b26 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b30:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	58004000 	.word	0x58004000

08003b3c <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <HAL_FLASH_Unlock+0x28>)
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	db01      	blt.n	8003b48 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8003b44:	2000      	movs	r0, #0
 8003b46:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_FLASH_Unlock+0x28>)
 8003b4a:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <HAL_FLASH_Unlock+0x2c>)
 8003b4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003b4e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8003b52:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	db01      	blt.n	8003b5e <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	4770      	bx	lr
      status = HAL_ERROR;
 8003b5e:	2001      	movs	r0, #1
}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	58004000 	.word	0x58004000
 8003b68:	45670123 	.word	0x45670123

08003b6c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_FLASH_Lock+0x18>)
 8003b6e:	695a      	ldr	r2, [r3, #20]
 8003b70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b74:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	db01      	blt.n	8003b80 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8003b7c:	2001      	movs	r0, #1
}
 8003b7e:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2000      	movs	r0, #0
 8003b82:	4770      	bx	lr
 8003b84:	58004000 	.word	0x58004000

08003b88 <FLASH_WaitForLastOperation>:
{
 8003b88:	b538      	push	{r3, r4, r5, lr}
 8003b8a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8003b8c:	f7fd fd80 	bl	8001690 <HAL_GetTick>
 8003b90:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003b92:	4b16      	ldr	r3, [pc, #88]	; (8003bec <FLASH_WaitForLastOperation+0x64>)
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003b9a:	d006      	beq.n	8003baa <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003b9c:	f7fd fd78 	bl	8001690 <HAL_GetTick>
 8003ba0:	1b00      	subs	r0, r0, r4
 8003ba2:	42a8      	cmp	r0, r5
 8003ba4:	d3f5      	bcc.n	8003b92 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8003ba6:	2003      	movs	r0, #3
}
 8003ba8:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8003baa:	4b10      	ldr	r3, [pc, #64]	; (8003bec <FLASH_WaitForLastOperation+0x64>)
 8003bac:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003bae:	f013 0f01 	tst.w	r3, #1
 8003bb2:	d002      	beq.n	8003bba <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003bb4:	4a0d      	ldr	r2, [pc, #52]	; (8003bec <FLASH_WaitForLastOperation+0x64>)
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8003bba:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d001      	beq.n	8003bc6 <FLASH_WaitForLastOperation+0x3e>
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <FLASH_WaitForLastOperation+0x64>)
 8003bc4:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8003bc6:	b95b      	cbnz	r3, 8003be0 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003bc8:	4b08      	ldr	r3, [pc, #32]	; (8003bec <FLASH_WaitForLastOperation+0x64>)
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003bd0:	d00a      	beq.n	8003be8 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003bd2:	f7fd fd5d 	bl	8001690 <HAL_GetTick>
 8003bd6:	1b00      	subs	r0, r0, r4
 8003bd8:	42a8      	cmp	r0, r5
 8003bda:	d3f5      	bcc.n	8003bc8 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8003bdc:	2003      	movs	r0, #3
 8003bde:	e7e3      	b.n	8003ba8 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8003be0:	4a03      	ldr	r2, [pc, #12]	; (8003bf0 <FLASH_WaitForLastOperation+0x68>)
 8003be2:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8003be4:	2001      	movs	r0, #1
 8003be6:	e7df      	b.n	8003ba8 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8003be8:	2000      	movs	r0, #0
 8003bea:	e7dd      	b.n	8003ba8 <FLASH_WaitForLastOperation+0x20>
 8003bec:	58004000 	.word	0x58004000
 8003bf0:	20000464 	.word	0x20000464

08003bf4 <HAL_FLASH_Program>:
{
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8003bf8:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <HAL_FLASH_Program+0x5c>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d025      	beq.n	8003c4c <HAL_FLASH_Program+0x58>
 8003c00:	4604      	mov	r4, r0
 8003c02:	460d      	mov	r5, r1
 8003c04:	4616      	mov	r6, r2
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <HAL_FLASH_Program+0x5c>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c14:	f7ff ffb8 	bl	8003b88 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003c18:	b970      	cbnz	r0, 8003c38 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003c1a:	2c01      	cmp	r4, #1
 8003c1c:	d010      	beq.n	8003c40 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003c1e:	4631      	mov	r1, r6
 8003c20:	4628      	mov	r0, r5
 8003c22:	f7ff ff6f 	bl	8003b04 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c2a:	f7ff ffad 	bl	8003b88 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003c2e:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <HAL_FLASH_Program+0x60>)
 8003c30:	6953      	ldr	r3, [r2, #20]
 8003c32:	ea23 0404 	bic.w	r4, r3, r4
 8003c36:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_FLASH_Program+0x5c>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
}
 8003c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8003c40:	4632      	mov	r2, r6
 8003c42:	463b      	mov	r3, r7
 8003c44:	4628      	mov	r0, r5
 8003c46:	f7ff ff4f 	bl	8003ae8 <FLASH_Program_DoubleWord>
 8003c4a:	e7ec      	b.n	8003c26 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8003c4c:	2002      	movs	r0, #2
 8003c4e:	e7f6      	b.n	8003c3e <HAL_FLASH_Program+0x4a>
 8003c50:	20000464 	.word	0x20000464
 8003c54:	58004000 	.word	0x58004000

08003c58 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8003c58:	4a03      	ldr	r2, [pc, #12]	; (8003c68 <FLASH_MassErase+0x10>)
 8003c5a:	6953      	ldr	r3, [r2, #20]
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c60:	f043 0304 	orr.w	r3, r3, #4
 8003c64:	6153      	str	r3, [r2, #20]
#endif
}
 8003c66:	4770      	bx	lr
 8003c68:	58004000 	.word	0x58004000

08003c6c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8003c6c:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <FLASH_FlushCaches+0x64>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d006      	beq.n	8003c86 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8003c78:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <FLASH_FlushCaches+0x64>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d012      	beq.n	8003caa <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8003c84:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <FLASH_FlushCaches+0x64>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c8e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c9e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	e7e6      	b.n	8003c78 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003caa:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <FLASH_FlushCaches+0x64>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cc2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cca:	601a      	str	r2, [r3, #0]
}
 8003ccc:	e7da      	b.n	8003c84 <FLASH_FlushCaches+0x18>
 8003cce:	bf00      	nop
 8003cd0:	58004000 	.word	0x58004000

08003cd4 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003cd4:	4a03      	ldr	r2, [pc, #12]	; (8003ce4 <FLASH_AcknowledgePageErase+0x10>)
 8003cd6:	6953      	ldr	r3, [r2, #20]
 8003cd8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003cdc:	f023 0302 	bic.w	r3, r3, #2
 8003ce0:	6153      	str	r3, [r2, #20]
#endif
}
 8003ce2:	4770      	bx	lr
 8003ce4:	58004000 	.word	0x58004000

08003ce8 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003ce8:	4a05      	ldr	r2, [pc, #20]	; (8003d00 <FLASH_PageErase+0x18>)
 8003cea:	6953      	ldr	r3, [r2, #20]
 8003cec:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8003cf0:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8003cf4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003cf8:	f040 0002 	orr.w	r0, r0, #2
 8003cfc:	6150      	str	r0, [r2, #20]
}
 8003cfe:	4770      	bx	lr
 8003d00:	58004000 	.word	0x58004000

08003d04 <HAL_FLASHEx_Erase>:
{
 8003d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8003d06:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <HAL_FLASHEx_Erase+0x7c>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d035      	beq.n	8003d7a <HAL_FLASHEx_Erase+0x76>
 8003d0e:	4605      	mov	r5, r0
 8003d10:	460f      	mov	r7, r1
 8003d12:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <HAL_FLASHEx_Erase+0x7c>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d18:	2200      	movs	r2, #0
 8003d1a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d20:	f7ff ff32 	bl	8003b88 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8003d24:	4606      	mov	r6, r0
 8003d26:	bb18      	cbnz	r0, 8003d70 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003d28:	682b      	ldr	r3, [r5, #0]
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d013      	beq.n	8003d56 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003d34:	686c      	ldr	r4, [r5, #4]
 8003d36:	686b      	ldr	r3, [r5, #4]
 8003d38:	68aa      	ldr	r2, [r5, #8]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	42a3      	cmp	r3, r4
 8003d3e:	d913      	bls.n	8003d68 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8003d40:	4620      	mov	r0, r4
 8003d42:	f7ff ffd1 	bl	8003ce8 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d4a:	f7ff ff1d 	bl	8003b88 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8003d4e:	4606      	mov	r6, r0
 8003d50:	b948      	cbnz	r0, 8003d66 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003d52:	3401      	adds	r4, #1
 8003d54:	e7ef      	b.n	8003d36 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8003d56:	f7ff ff7f 	bl	8003c58 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d5e:	f7ff ff13 	bl	8003b88 <FLASH_WaitForLastOperation>
 8003d62:	4606      	mov	r6, r0
 8003d64:	e002      	b.n	8003d6c <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8003d66:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8003d68:	f7ff ffb4 	bl	8003cd4 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8003d6c:	f7ff ff7e 	bl	8003c6c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8003d70:	4b03      	ldr	r3, [pc, #12]	; (8003d80 <HAL_FLASHEx_Erase+0x7c>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
}
 8003d76:	4630      	mov	r0, r6
 8003d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8003d7a:	2602      	movs	r6, #2
 8003d7c:	e7fb      	b.n	8003d76 <HAL_FLASHEx_Erase+0x72>
 8003d7e:	bf00      	nop
 8003d80:	20000464 	.word	0x20000464

08003d84 <HAL_FLASHEx_Erase_IT>:
{
 8003d84:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 8003d86:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <HAL_FLASHEx_Erase_IT+0x60>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d028      	beq.n	8003de0 <HAL_FLASHEx_Erase_IT+0x5c>
 8003d8e:	4604      	mov	r4, r0
 8003d90:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <HAL_FLASHEx_Erase_IT+0x60>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d96:	2200      	movs	r2, #0
 8003d98:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8003d9a:	6802      	ldr	r2, [r0, #0]
 8003d9c:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003da2:	f7ff fef1 	bl	8003b88 <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 8003da6:	4605      	mov	r5, r0
 8003da8:	b120      	cbz	r0, 8003db4 <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 8003daa:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <HAL_FLASHEx_Erase_IT+0x60>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	701a      	strb	r2, [r3, #0]
}
 8003db0:	4628      	mov	r0, r5
 8003db2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8003db4:	4a0c      	ldr	r2, [pc, #48]	; (8003de8 <HAL_FLASHEx_Erase_IT+0x64>)
 8003db6:	6953      	ldr	r3, [r2, #20]
 8003db8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8003dbc:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d007      	beq.n	8003dd4 <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8003dc4:	68a2      	ldr	r2, [r4, #8]
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <HAL_FLASHEx_Erase_IT+0x60>)
 8003dc8:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 8003dca:	6860      	ldr	r0, [r4, #4]
 8003dcc:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 8003dce:	f7ff ff8b 	bl	8003ce8 <FLASH_PageErase>
 8003dd2:	e7ed      	b.n	8003db0 <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <HAL_FLASHEx_Erase_IT+0x60>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 8003dda:	f7ff ff3d 	bl	8003c58 <FLASH_MassErase>
 8003dde:	e7e7      	b.n	8003db0 <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 8003de0:	2502      	movs	r5, #2
 8003de2:	e7e5      	b.n	8003db0 <HAL_FLASHEx_Erase_IT+0x2c>
 8003de4:	20000464 	.word	0x20000464
 8003de8:	58004000 	.word	0x58004000

08003dec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dec:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8003dee:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003df0:	e069      	b.n	8003ec6 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003df2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003df4:	005e      	lsls	r6, r3, #1
 8003df6:	2403      	movs	r4, #3
 8003df8:	40b4      	lsls	r4, r6
 8003dfa:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dfe:	68cc      	ldr	r4, [r1, #12]
 8003e00:	40b4      	lsls	r4, r6
 8003e02:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003e04:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e06:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e08:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e0c:	684c      	ldr	r4, [r1, #4]
 8003e0e:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003e12:	409c      	lsls	r4, r3
 8003e14:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8003e18:	6044      	str	r4, [r0, #4]
 8003e1a:	e065      	b.n	8003ee8 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e1c:	08dd      	lsrs	r5, r3, #3
 8003e1e:	3508      	adds	r5, #8
 8003e20:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e24:	f003 0407 	and.w	r4, r3, #7
 8003e28:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003e2c:	240f      	movs	r4, #15
 8003e2e:	fa04 f40c 	lsl.w	r4, r4, ip
 8003e32:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e36:	690c      	ldr	r4, [r1, #16]
 8003e38:	fa04 f40c 	lsl.w	r4, r4, ip
 8003e3c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003e40:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003e44:	e067      	b.n	8003f16 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e46:	2402      	movs	r4, #2
 8003e48:	e000      	b.n	8003e4c <HAL_GPIO_Init+0x60>
 8003e4a:	2400      	movs	r4, #0
 8003e4c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e50:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e52:	f10c 0c02 	add.w	ip, ip, #2
 8003e56:	4d4b      	ldr	r5, [pc, #300]	; (8003f84 <HAL_GPIO_Init+0x198>)
 8003e58:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e5c:	4c4a      	ldr	r4, [pc, #296]	; (8003f88 <HAL_GPIO_Init+0x19c>)
 8003e5e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003e60:	43d4      	mvns	r4, r2
 8003e62:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e66:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003e6a:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8003e6e:	d001      	beq.n	8003e74 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003e70:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003e74:	4d44      	ldr	r5, [pc, #272]	; (8003f88 <HAL_GPIO_Init+0x19c>)
 8003e76:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003e78:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003e7a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e7e:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003e82:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8003e86:	d001      	beq.n	8003e8c <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8003e88:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003e8c:	4d3e      	ldr	r5, [pc, #248]	; (8003f88 <HAL_GPIO_Init+0x19c>)
 8003e8e:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003e90:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003e94:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e98:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003e9c:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8003ea0:	d001      	beq.n	8003ea6 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8003ea2:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003ea6:	4d38      	ldr	r5, [pc, #224]	; (8003f88 <HAL_GPIO_Init+0x19c>)
 8003ea8:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003eac:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003eb0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003eb2:	684e      	ldr	r6, [r1, #4]
 8003eb4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8003eb8:	d001      	beq.n	8003ebe <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8003eba:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003ebe:	4a32      	ldr	r2, [pc, #200]	; (8003f88 <HAL_GPIO_Init+0x19c>)
 8003ec0:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003ec4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ec6:	680a      	ldr	r2, [r1, #0]
 8003ec8:	fa32 f403 	lsrs.w	r4, r2, r3
 8003ecc:	d058      	beq.n	8003f80 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ece:	f04f 0c01 	mov.w	ip, #1
 8003ed2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003ed6:	ea1c 0202 	ands.w	r2, ip, r2
 8003eda:	d0f3      	beq.n	8003ec4 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003edc:	684c      	ldr	r4, [r1, #4]
 8003ede:	f004 0403 	and.w	r4, r4, #3
 8003ee2:	3c01      	subs	r4, #1
 8003ee4:	2c01      	cmp	r4, #1
 8003ee6:	d984      	bls.n	8003df2 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ee8:	684c      	ldr	r4, [r1, #4]
 8003eea:	f004 0403 	and.w	r4, r4, #3
 8003eee:	2c03      	cmp	r4, #3
 8003ef0:	d00c      	beq.n	8003f0c <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8003ef2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ef4:	005d      	lsls	r5, r3, #1
 8003ef6:	f04f 0c03 	mov.w	ip, #3
 8003efa:	fa0c fc05 	lsl.w	ip, ip, r5
 8003efe:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f02:	688c      	ldr	r4, [r1, #8]
 8003f04:	40ac      	lsls	r4, r5
 8003f06:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8003f0a:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f0c:	684c      	ldr	r4, [r1, #4]
 8003f0e:	f004 0403 	and.w	r4, r4, #3
 8003f12:	2c02      	cmp	r4, #2
 8003f14:	d082      	beq.n	8003e1c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8003f16:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f18:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003f1c:	f04f 0c03 	mov.w	ip, #3
 8003f20:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003f24:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f28:	684c      	ldr	r4, [r1, #4]
 8003f2a:	f004 0403 	and.w	r4, r4, #3
 8003f2e:	fa04 f40e 	lsl.w	r4, r4, lr
 8003f32:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003f36:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f38:	684c      	ldr	r4, [r1, #4]
 8003f3a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8003f3e:	d0c1      	beq.n	8003ec4 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f40:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003f44:	f10c 0502 	add.w	r5, ip, #2
 8003f48:	4c0e      	ldr	r4, [pc, #56]	; (8003f84 <HAL_GPIO_Init+0x198>)
 8003f4a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003f4e:	f003 0403 	and.w	r4, r3, #3
 8003f52:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003f56:	2407      	movs	r4, #7
 8003f58:	fa04 f40e 	lsl.w	r4, r4, lr
 8003f5c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f60:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8003f64:	f43f af71 	beq.w	8003e4a <HAL_GPIO_Init+0x5e>
 8003f68:	4c08      	ldr	r4, [pc, #32]	; (8003f8c <HAL_GPIO_Init+0x1a0>)
 8003f6a:	42a0      	cmp	r0, r4
 8003f6c:	d006      	beq.n	8003f7c <HAL_GPIO_Init+0x190>
 8003f6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003f72:	42a0      	cmp	r0, r4
 8003f74:	f43f af67 	beq.w	8003e46 <HAL_GPIO_Init+0x5a>
 8003f78:	2407      	movs	r4, #7
 8003f7a:	e767      	b.n	8003e4c <HAL_GPIO_Init+0x60>
 8003f7c:	2401      	movs	r4, #1
 8003f7e:	e765      	b.n	8003e4c <HAL_GPIO_Init+0x60>
  }
}
 8003f80:	bd70      	pop	{r4, r5, r6, pc}
 8003f82:	bf00      	nop
 8003f84:	40010000 	.word	0x40010000
 8003f88:	58000800 	.word	0x58000800
 8003f8c:	48000400 	.word	0x48000400

08003f90 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003f90:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003f92:	fa31 f203 	lsrs.w	r2, r1, r3
 8003f96:	d071      	beq.n	800407c <HAL_GPIO_DeInit+0xec>
{
 8003f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f9a:	e02e      	b.n	8003ffa <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003f9c:	2502      	movs	r5, #2
 8003f9e:	e000      	b.n	8003fa2 <HAL_GPIO_DeInit+0x12>
 8003fa0:	2500      	movs	r5, #0
 8003fa2:	fa05 fc0c 	lsl.w	ip, r5, ip
 8003fa6:	45a4      	cmp	ip, r4
 8003fa8:	d049      	beq.n	800403e <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003faa:	6804      	ldr	r4, [r0, #0]
 8003fac:	005d      	lsls	r5, r3, #1
 8003fae:	f04f 0c03 	mov.w	ip, #3
 8003fb2:	fa0c fc05 	lsl.w	ip, ip, r5
 8003fb6:	ea44 040c 	orr.w	r4, r4, ip
 8003fba:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003fbc:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003fc0:	f10e 0e08 	add.w	lr, lr, #8
 8003fc4:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8003fc8:	f003 0507 	and.w	r5, r3, #7
 8003fcc:	00ae      	lsls	r6, r5, #2
 8003fce:	250f      	movs	r5, #15
 8003fd0:	40b5      	lsls	r5, r6
 8003fd2:	ea24 0405 	bic.w	r4, r4, r5
 8003fd6:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fda:	6884      	ldr	r4, [r0, #8]
 8003fdc:	ea24 040c 	bic.w	r4, r4, ip
 8003fe0:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fe2:	6844      	ldr	r4, [r0, #4]
 8003fe4:	ea24 0202 	bic.w	r2, r4, r2
 8003fe8:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fea:	68c2      	ldr	r2, [r0, #12]
 8003fec:	ea22 020c 	bic.w	r2, r2, ip
 8003ff0:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8003ff2:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003ff4:	fa31 f203 	lsrs.w	r2, r1, r3
 8003ff8:	d03f      	beq.n	800407a <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003ffe:	ea12 0701 	ands.w	r7, r2, r1
 8004002:	d0f6      	beq.n	8003ff2 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004004:	089e      	lsrs	r6, r3, #2
 8004006:	1cb5      	adds	r5, r6, #2
 8004008:	4c1d      	ldr	r4, [pc, #116]	; (8004080 <HAL_GPIO_DeInit+0xf0>)
 800400a:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800400e:	f003 0c03 	and.w	ip, r3, #3
 8004012:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004016:	f04f 0e07 	mov.w	lr, #7
 800401a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800401e:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004022:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004026:	d0bb      	beq.n	8003fa0 <HAL_GPIO_DeInit+0x10>
 8004028:	4d16      	ldr	r5, [pc, #88]	; (8004084 <HAL_GPIO_DeInit+0xf4>)
 800402a:	42a8      	cmp	r0, r5
 800402c:	d005      	beq.n	800403a <HAL_GPIO_DeInit+0xaa>
 800402e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004032:	42a8      	cmp	r0, r5
 8004034:	d0b2      	beq.n	8003f9c <HAL_GPIO_DeInit+0xc>
 8004036:	2507      	movs	r5, #7
 8004038:	e7b3      	b.n	8003fa2 <HAL_GPIO_DeInit+0x12>
 800403a:	2501      	movs	r5, #1
 800403c:	e7b1      	b.n	8003fa2 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800403e:	4c12      	ldr	r4, [pc, #72]	; (8004088 <HAL_GPIO_DeInit+0xf8>)
 8004040:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004044:	ea25 0507 	bic.w	r5, r5, r7
 8004048:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800404c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8004050:	ea25 0507 	bic.w	r5, r5, r7
 8004054:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8004058:	6825      	ldr	r5, [r4, #0]
 800405a:	ea25 0507 	bic.w	r5, r5, r7
 800405e:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004060:	6865      	ldr	r5, [r4, #4]
 8004062:	ea25 0707 	bic.w	r7, r5, r7
 8004066:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004068:	4d05      	ldr	r5, [pc, #20]	; (8004080 <HAL_GPIO_DeInit+0xf0>)
 800406a:	3602      	adds	r6, #2
 800406c:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8004070:	ea24 040e 	bic.w	r4, r4, lr
 8004074:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8004078:	e797      	b.n	8003faa <HAL_GPIO_DeInit+0x1a>
  }
}
 800407a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40010000 	.word	0x40010000
 8004084:	48000400 	.word	0x48000400
 8004088:	58000800 	.word	0x58000800

0800408c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800408c:	6903      	ldr	r3, [r0, #16]
 800408e:	4219      	tst	r1, r3
 8004090:	d001      	beq.n	8004096 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004092:	2001      	movs	r0, #1
 8004094:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004096:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004098:	4770      	bx	lr

0800409a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800409a:	b10a      	cbz	r2, 80040a0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800409c:	6181      	str	r1, [r0, #24]
 800409e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040a0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80040a2:	4770      	bx	lr

080040a4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040a4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040a6:	ea01 0203 	and.w	r2, r1, r3
 80040aa:	ea21 0103 	bic.w	r1, r1, r3
 80040ae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80040b2:	6181      	str	r1, [r0, #24]
}
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040b8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	4203      	tst	r3, r0
 80040c0:	d100      	bne.n	80040c4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80040c2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040c4:	4b02      	ldr	r3, [pc, #8]	; (80040d0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80040c6:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040c8:	f7fe fbe4 	bl	8002894 <HAL_GPIO_EXTI_Callback>
}
 80040cc:	e7f9      	b.n	80040c2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80040ce:	bf00      	nop
 80040d0:	58000800 	.word	0x58000800

080040d4 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d4:	4a02      	ldr	r2, [pc, #8]	; (80040e0 <HAL_PWR_EnableBkUpAccess+0xc>)
 80040d6:	6813      	ldr	r3, [r2, #0]
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	6013      	str	r3, [r2, #0]
}
 80040de:	4770      	bx	lr
 80040e0:	58000400 	.word	0x58000400

080040e4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80040e4:	b510      	push	{r4, lr}
 80040e6:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80040e8:	b9a0      	cbnz	r0, 8004114 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80040ea:	4b0f      	ldr	r3, [pc, #60]	; (8004128 <HAL_PWR_EnterSLEEPMode+0x44>)
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80040f2:	d10a      	bne.n	800410a <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040f4:	4a0d      	ldr	r2, [pc, #52]	; (800412c <HAL_PWR_EnterSLEEPMode+0x48>)
 80040f6:	6913      	ldr	r3, [r2, #16]
 80040f8:	f023 0304 	bic.w	r3, r3, #4
 80040fc:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80040fe:	2c01      	cmp	r4, #1
 8004100:	d010      	beq.n	8004124 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004102:	bf40      	sev
    __WFE();
 8004104:	bf20      	wfe
    __WFE();
 8004106:	bf20      	wfe
  }
}
 8004108:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800410a:	f000 f821 	bl	8004150 <HAL_PWREx_DisableLowPowerRunMode>
 800410e:	2800      	cmp	r0, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_PWR_EnterSLEEPMode+0x10>
 8004112:	e7f9      	b.n	8004108 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	f413 7f00 	tst.w	r3, #512	; 0x200
 800411c:	d1ea      	bne.n	80040f4 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800411e:	f000 f80f 	bl	8004140 <HAL_PWREx_EnableLowPowerRunMode>
 8004122:	e7e7      	b.n	80040f4 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004124:	bf30      	wfi
 8004126:	e7ef      	b.n	8004108 <HAL_PWR_EnterSLEEPMode+0x24>
 8004128:	58000400 	.word	0x58000400
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8004130:	4b02      	ldr	r3, [pc, #8]	; (800413c <HAL_PWREx_GetVoltageRange+0xc>)
 8004132:	6818      	ldr	r0, [r3, #0]
}
 8004134:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	58000400 	.word	0x58000400

08004140 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004140:	4a02      	ldr	r2, [pc, #8]	; (800414c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8004142:	6813      	ldr	r3, [r2, #0]
 8004144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004148:	6013      	str	r3, [r2, #0]
}
 800414a:	4770      	bx	lr
 800414c:	58000400 	.word	0x58000400

08004150 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004150:	4a0f      	ldr	r2, [pc, #60]	; (8004190 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004152:	6813      	ldr	r3, [r2, #0]
 8004154:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004158:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800415a:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2232      	movs	r2, #50	; 0x32
 8004160:	fb02 f303 	mul.w	r3, r2, r3
 8004164:	4a0c      	ldr	r2, [pc, #48]	; (8004198 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800416c:	e000      	b.n	8004170 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 800416e:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004170:	4a07      	ldr	r2, [pc, #28]	; (8004190 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004172:	6952      	ldr	r2, [r2, #20]
 8004174:	f412 7f00 	tst.w	r2, #512	; 0x200
 8004178:	d001      	beq.n	800417e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f7      	bne.n	800416e <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800417e:	4b04      	ldr	r3, [pc, #16]	; (8004190 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004186:	d101      	bne.n	800418c <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8004188:	2000      	movs	r0, #0
 800418a:	4770      	bx	lr
    return HAL_TIMEOUT;
 800418c:	2003      	movs	r0, #3
}
 800418e:	4770      	bx	lr
 8004190:	58000400 	.word	0x58000400
 8004194:	20000070 	.word	0x20000070
 8004198:	431bde83 	.word	0x431bde83

0800419c <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800419c:	4a0c      	ldr	r2, [pc, #48]	; (80041d0 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 800419e:	6813      	ldr	r3, [r2, #0]
 80041a0:	f023 0307 	bic.w	r3, r3, #7
 80041a4:	f043 0302 	orr.w	r3, r3, #2
 80041a8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80041ac:	6913      	ldr	r3, [r2, #16]
 80041ae:	f043 0304 	orr.w	r3, r3, #4
 80041b2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80041b4:	2801      	cmp	r0, #1
 80041b6:	d008      	beq.n	80041ca <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80041b8:	bf40      	sev
    __WFE();
 80041ba:	bf20      	wfe
    __WFE();
 80041bc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80041be:	4a05      	ldr	r2, [pc, #20]	; (80041d4 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80041c0:	6913      	ldr	r3, [r2, #16]
 80041c2:	f023 0304 	bic.w	r3, r3, #4
 80041c6:	6113      	str	r3, [r2, #16]
}
 80041c8:	4770      	bx	lr
    __WFI();
 80041ca:	bf30      	wfi
 80041cc:	e7f7      	b.n	80041be <HAL_PWREx_EnterSTOP2Mode+0x22>
 80041ce:	bf00      	nop
 80041d0:	58000400 	.word	0x58000400
 80041d4:	e000ed00 	.word	0xe000ed00

080041d8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80041d8:	b530      	push	{r4, r5, lr}
 80041da:	b089      	sub	sp, #36	; 0x24
 80041dc:	4604      	mov	r4, r0
 80041de:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80041e0:	4b2a      	ldr	r3, [pc, #168]	; (800428c <RCC_SetFlashLatency+0xb4>)
 80041e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80041e6:	9006      	str	r0, [sp, #24]
 80041e8:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80041ec:	f103 0208 	add.w	r2, r3, #8
 80041f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041f4:	9004      	str	r0, [sp, #16]
 80041f6:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80041fa:	ad01      	add	r5, sp, #4
 80041fc:	3310      	adds	r3, #16
 80041fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004202:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004206:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800420a:	d007      	beq.n	800421c <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800420c:	2300      	movs	r3, #0
 800420e:	e014      	b.n	800423a <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8004210:	aa08      	add	r2, sp, #32
 8004212:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004216:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800421a:	e01e      	b.n	800425a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800421c:	2300      	movs	r3, #0
 800421e:	2b02      	cmp	r3, #2
 8004220:	d808      	bhi.n	8004234 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004222:	aa08      	add	r2, sp, #32
 8004224:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004228:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 800422c:	42a2      	cmp	r2, r4
 800422e:	d2ef      	bcs.n	8004210 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004230:	3301      	adds	r3, #1
 8004232:	e7f4      	b.n	800421e <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004234:	2500      	movs	r5, #0
 8004236:	e010      	b.n	800425a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004238:	3301      	adds	r3, #1
 800423a:	2b02      	cmp	r3, #2
 800423c:	d80c      	bhi.n	8004258 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800423e:	aa08      	add	r2, sp, #32
 8004240:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004244:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8004248:	42a2      	cmp	r2, r4
 800424a:	d3f5      	bcc.n	8004238 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800424c:	aa08      	add	r2, sp, #32
 800424e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004252:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004256:	e000      	b.n	800425a <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004258:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800425a:	4a0d      	ldr	r2, [pc, #52]	; (8004290 <RCC_SetFlashLatency+0xb8>)
 800425c:	6813      	ldr	r3, [r2, #0]
 800425e:	f023 0307 	bic.w	r3, r3, #7
 8004262:	432b      	orrs	r3, r5
 8004264:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004266:	f7fd fa13 	bl	8001690 <HAL_GetTick>
 800426a:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800426c:	4b08      	ldr	r3, [pc, #32]	; (8004290 <RCC_SetFlashLatency+0xb8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	42ab      	cmp	r3, r5
 8004276:	d006      	beq.n	8004286 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004278:	f7fd fa0a 	bl	8001690 <HAL_GetTick>
 800427c:	1b00      	subs	r0, r0, r4
 800427e:	2802      	cmp	r0, #2
 8004280:	d9f4      	bls.n	800426c <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8004282:	2003      	movs	r0, #3
 8004284:	e000      	b.n	8004288 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8004286:	2000      	movs	r0, #0
}
 8004288:	b009      	add	sp, #36	; 0x24
 800428a:	bd30      	pop	{r4, r5, pc}
 800428c:	08011068 	.word	0x08011068
 8004290:	58004000 	.word	0x58004000

08004294 <RCC_SetFlashLatencyFromMSIRange>:
{
 8004294:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8004296:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <RCC_SetFlashLatencyFromMSIRange+0x38>)
 800429c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80042a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80042ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80042b2:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80042b6:	f7ff ff3b 	bl	8004130 <HAL_PWREx_GetVoltageRange>
 80042ba:	4601      	mov	r1, r0
 80042bc:	4805      	ldr	r0, [pc, #20]	; (80042d4 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80042be:	fba0 3004 	umull	r3, r0, r0, r4
 80042c2:	0c80      	lsrs	r0, r0, #18
 80042c4:	f7ff ff88 	bl	80041d8 <RCC_SetFlashLatency>
}
 80042c8:	bd10      	pop	{r4, pc}
 80042ca:	bf00      	nop
 80042cc:	08011670 	.word	0x08011670
 80042d0:	08011610 	.word	0x08011610
 80042d4:	431bde83 	.word	0x431bde83

080042d8 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80042d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042dc:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80042e4:	f011 010c 	ands.w	r1, r1, #12
 80042e8:	d00a      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x28>
 80042ea:	290c      	cmp	r1, #12
 80042ec:	d006      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042ee:	2904      	cmp	r1, #4
 80042f0:	d047      	beq.n	8004382 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042f2:	2908      	cmp	r1, #8
 80042f4:	d03b      	beq.n	800436e <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80042f6:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80042f8:	4610      	mov	r0, r2
 80042fa:	e026      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d1f6      	bne.n	80042ee <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f013 0308 	ands.w	r3, r3, #8
 800430a:	d00d      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x50>
 800430c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f013 0308 	ands.w	r3, r3, #8
 8004316:	d124      	bne.n	8004362 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800431c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004320:	4a2e      	ldr	r2, [pc, #184]	; (80043dc <HAL_RCC_GetSysClockFreq+0x104>)
 8004322:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004326:	e00e      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	f012 0f08 	tst.w	r2, #8
 8004332:	d112      	bne.n	800435a <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800433c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004340:	4a26      	ldr	r2, [pc, #152]	; (80043dc <HAL_RCC_GetSysClockFreq+0x104>)
 8004342:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004346:	b1d1      	cbz	r1, 800437e <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004348:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800434a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d01a      	beq.n	800438e <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004358:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800435a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	e7ee      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x68>
 8004362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004366:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004368:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800436c:	e7d8      	b.n	8004320 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800436e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8004378:	d106      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 800437a:	4819      	ldr	r0, [pc, #100]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800437c:	e7e5      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 800437e:	4610      	mov	r0, r2
 8004380:	e7e3      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004382:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8004384:	4817      	ldr	r0, [pc, #92]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004386:	e7e0      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004388:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 800438a:	4816      	ldr	r0, [pc, #88]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800438c:	e7dd      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800438e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004398:	2b02      	cmp	r3, #2
 800439a:	d009      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0xd8>
 800439c:	2b03      	cmp	r3, #3
 800439e:	d108      	bne.n	80043b2 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80043a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80043aa:	d115      	bne.n	80043d8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80043ac:	4a0c      	ldr	r2, [pc, #48]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80043b0:	4a0c      	ldr	r2, [pc, #48]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80043b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b6:	68d8      	ldr	r0, [r3, #12]
 80043b8:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80043bc:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80043c0:	68d8      	ldr	r0, [r3, #12]
 80043c2:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80043c6:	3001      	adds	r0, #1
 80043c8:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80043cc:	68d8      	ldr	r0, [r3, #12]
 80043ce:	0f40      	lsrs	r0, r0, #29
 80043d0:	3001      	adds	r0, #1
 80043d2:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80043d6:	e7bf      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80043d8:	4a02      	ldr	r2, [pc, #8]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043da:	e7ea      	b.n	80043b2 <HAL_RCC_GetSysClockFreq+0xda>
 80043dc:	08011670 	.word	0x08011670
 80043e0:	01e84800 	.word	0x01e84800
 80043e4:	00f42400 	.word	0x00f42400

080043e8 <HAL_RCC_GetHCLKFreq>:
{
 80043e8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80043ea:	f7ff ff75 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80043ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80043f8:	4a02      	ldr	r2, [pc, #8]	; (8004404 <HAL_RCC_GetHCLKFreq+0x1c>)
 80043fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80043fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8004402:	bd08      	pop	{r3, pc}
 8004404:	08011610 	.word	0x08011610

08004408 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004408:	2800      	cmp	r0, #0
 800440a:	f000 8319 	beq.w	8004a40 <HAL_RCC_OscConfig+0x638>
{
 800440e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004410:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004416:	689d      	ldr	r5, [r3, #8]
 8004418:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800441c:	68de      	ldr	r6, [r3, #12]
 800441e:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004422:	6803      	ldr	r3, [r0, #0]
 8004424:	f013 0f20 	tst.w	r3, #32
 8004428:	f000 808f 	beq.w	800454a <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800442c:	b1ed      	cbz	r5, 800446a <HAL_RCC_OscConfig+0x62>
 800442e:	2d0c      	cmp	r5, #12
 8004430:	d019      	beq.n	8004466 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004432:	6a23      	ldr	r3, [r4, #32]
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80bc 	beq.w	80045b2 <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800443a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800443e:	6813      	ldr	r3, [r2, #0]
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004446:	f7fd f923 	bl	8001690 <HAL_GetTick>
 800444a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800444c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f013 0f02 	tst.w	r3, #2
 8004456:	d165      	bne.n	8004524 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004458:	f7fd f91a 	bl	8001690 <HAL_GetTick>
 800445c:	1bc0      	subs	r0, r0, r7
 800445e:	2802      	cmp	r0, #2
 8004460:	d9f4      	bls.n	800444c <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8004462:	2003      	movs	r0, #3
 8004464:	e2f9      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004466:	2e01      	cmp	r6, #1
 8004468:	d1e3      	bne.n	8004432 <HAL_RCC_OscConfig+0x2a>
 800446a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f013 0f02 	tst.w	r3, #2
 8004474:	d003      	beq.n	800447e <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004476:	6a23      	ldr	r3, [r4, #32]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 82e3 	beq.w	8004a44 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800447e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f013 0f08 	tst.w	r3, #8
 800448a:	d029      	beq.n	80044e0 <HAL_RCC_OscConfig+0xd8>
 800448c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004496:	4298      	cmp	r0, r3
 8004498:	d92a      	bls.n	80044f0 <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800449a:	f7ff fefb 	bl	8004294 <RCC_SetFlashLatencyFromMSIRange>
 800449e:	2800      	cmp	r0, #0
 80044a0:	f040 82d2 	bne.w	8004a48 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	f042 0208 	orr.w	r2, r2, #8
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80044b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80044b8:	430a      	orrs	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80044c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80044c8:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80044ca:	f7ff ff8d 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 80044ce:	4bb0      	ldr	r3, [pc, #704]	; (8004790 <HAL_RCC_OscConfig+0x388>)
 80044d0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80044d2:	4bb0      	ldr	r3, [pc, #704]	; (8004794 <HAL_RCC_OscConfig+0x38c>)
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	f7fd f8d9 	bl	800168c <HAL_InitTick>
        if (status != HAL_OK)
 80044da:	2800      	cmp	r0, #0
 80044dc:	d035      	beq.n	800454a <HAL_RCC_OscConfig+0x142>
 80044de:	e2bc      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044ee:	e7d2      	b.n	8004496 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	f042 0208 	orr.w	r2, r2, #8
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004502:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004504:	430a      	orrs	r2, r1
 8004506:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004508:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004510:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004514:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004516:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004518:	f7ff febc 	bl	8004294 <RCC_SetFlashLatencyFromMSIRange>
 800451c:	2800      	cmp	r0, #0
 800451e:	d0d4      	beq.n	80044ca <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8004520:	2001      	movs	r0, #1
 8004522:	e29a      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	f042 0208 	orr.w	r2, r2, #8
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004536:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004538:	430a      	orrs	r2, r1
 800453a:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800453c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004544:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004548:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	f013 0f01 	tst.w	r3, #1
 8004550:	d051      	beq.n	80045f6 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004552:	2d08      	cmp	r5, #8
 8004554:	d045      	beq.n	80045e2 <HAL_RCC_OscConfig+0x1da>
 8004556:	2d0c      	cmp	r5, #12
 8004558:	d041      	beq.n	80045de <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800455a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004564:	68a1      	ldr	r1, [r4, #8]
 8004566:	430b      	orrs	r3, r1
 8004568:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800456a:	6863      	ldr	r3, [r4, #4]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d063      	beq.n	800463a <HAL_RCC_OscConfig+0x232>
 8004572:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004576:	d065      	beq.n	8004644 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004582:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800458a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800458c:	6863      	ldr	r3, [r4, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d063      	beq.n	800465a <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8004592:	f7fd f87d 	bl	8001690 <HAL_GetTick>
 8004596:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045a2:	d128      	bne.n	80045f6 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fd f874 	bl	8001690 <HAL_GetTick>
 80045a8:	1bc0      	subs	r0, r0, r7
 80045aa:	2864      	cmp	r0, #100	; 0x64
 80045ac:	d9f4      	bls.n	8004598 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 80045ae:	2003      	movs	r0, #3
 80045b0:	e253      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80045b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b6:	6813      	ldr	r3, [r2, #0]
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80045be:	f7fd f867 	bl	8001690 <HAL_GetTick>
 80045c2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80045c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f013 0f02 	tst.w	r3, #2
 80045ce:	d0bc      	beq.n	800454a <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045d0:	f7fd f85e 	bl	8001690 <HAL_GetTick>
 80045d4:	1bc0      	subs	r0, r0, r7
 80045d6:	2802      	cmp	r0, #2
 80045d8:	d9f4      	bls.n	80045c4 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 80045da:	2003      	movs	r0, #3
 80045dc:	e23d      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045de:	2e03      	cmp	r6, #3
 80045e0:	d1bb      	bne.n	800455a <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80045e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045ec:	d003      	beq.n	80045f6 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ee:	6863      	ldr	r3, [r4, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 822b 	beq.w	8004a4c <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	f013 0f02 	tst.w	r3, #2
 80045fc:	d052      	beq.n	80046a4 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80045fe:	2d04      	cmp	r5, #4
 8004600:	d03d      	beq.n	800467e <HAL_RCC_OscConfig+0x276>
 8004602:	2d0c      	cmp	r5, #12
 8004604:	d039      	beq.n	800467a <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004606:	6923      	ldr	r3, [r4, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8091 	beq.w	8004730 <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800460e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004618:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800461a:	f7fd f839 	bl	8001690 <HAL_GetTick>
 800461e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800462a:	d177      	bne.n	800471c <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800462c:	f7fd f830 	bl	8001690 <HAL_GetTick>
 8004630:	1b80      	subs	r0, r0, r6
 8004632:	2802      	cmp	r0, #2
 8004634:	d9f4      	bls.n	8004620 <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8004636:	2003      	movs	r0, #3
 8004638:	e20f      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800463a:	6813      	ldr	r3, [r2, #0]
 800463c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004640:	6013      	str	r3, [r2, #0]
}
 8004642:	e7a3      	b.n	800458c <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800464e:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004656:	601a      	str	r2, [r3, #0]
}
 8004658:	e798      	b.n	800458c <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 800465a:	f7fd f819 	bl	8001690 <HAL_GetTick>
 800465e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800466a:	d0c4      	beq.n	80045f6 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800466c:	f7fd f810 	bl	8001690 <HAL_GetTick>
 8004670:	1bc0      	subs	r0, r0, r7
 8004672:	2864      	cmp	r0, #100	; 0x64
 8004674:	d9f4      	bls.n	8004660 <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8004676:	2003      	movs	r0, #3
 8004678:	e1ef      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800467a:	2e02      	cmp	r6, #2
 800467c:	d1c3      	bne.n	8004606 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800467e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004688:	d003      	beq.n	8004692 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800468a:	6923      	ldr	r3, [r4, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 81df 	beq.w	8004a50 <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004692:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004698:	6853      	ldr	r3, [r2, #4]
 800469a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800469e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80046a2:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	f013 0f08 	tst.w	r3, #8
 80046aa:	f000 808e 	beq.w	80047ca <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ae:	69a3      	ldr	r3, [r4, #24]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d071      	beq.n	8004798 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 80046b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80046bc:	69e1      	ldr	r1, [r4, #28]
 80046be:	f003 0210 	and.w	r2, r3, #16
 80046c2:	4291      	cmp	r1, r2
 80046c4:	d011      	beq.n	80046ea <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80046c6:	f003 0203 	and.w	r2, r3, #3
 80046ca:	2a02      	cmp	r2, #2
 80046cc:	f000 81c2 	beq.w	8004a54 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80046d0:	f013 0f01 	tst.w	r3, #1
 80046d4:	d142      	bne.n	800475c <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80046d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046da:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80046de:	f023 0310 	bic.w	r3, r3, #16
 80046e2:	69e1      	ldr	r1, [r4, #28]
 80046e4:	430b      	orrs	r3, r1
 80046e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80046ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ee:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80046fa:	f7fc ffc9 	bl	8001690 <HAL_GetTick>
 80046fe:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004708:	f013 0f02 	tst.w	r3, #2
 800470c:	d15d      	bne.n	80047ca <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470e:	f7fc ffbf 	bl	8001690 <HAL_GetTick>
 8004712:	1b80      	subs	r0, r0, r6
 8004714:	2811      	cmp	r0, #17
 8004716:	d9f3      	bls.n	8004700 <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8004718:	2003      	movs	r0, #3
 800471a:	e19e      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800471c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800471e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004722:	6853      	ldr	r3, [r2, #4]
 8004724:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004728:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800472c:	6053      	str	r3, [r2, #4]
}
 800472e:	e7b9      	b.n	80046a4 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004734:	6813      	ldr	r3, [r2, #0]
 8004736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800473a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800473c:	f7fc ffa8 	bl	8001690 <HAL_GetTick>
 8004740:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800474c:	d0aa      	beq.n	80046a4 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474e:	f7fc ff9f 	bl	8001690 <HAL_GetTick>
 8004752:	1b80      	subs	r0, r0, r6
 8004754:	2802      	cmp	r0, #2
 8004756:	d9f4      	bls.n	8004742 <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8004758:	2003      	movs	r0, #3
 800475a:	e17e      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800475c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004760:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 800476c:	f7fc ff90 	bl	8001690 <HAL_GetTick>
 8004770:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477a:	f013 0f02 	tst.w	r3, #2
 800477e:	d0aa      	beq.n	80046d6 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004780:	f7fc ff86 	bl	8001690 <HAL_GetTick>
 8004784:	1b80      	subs	r0, r0, r6
 8004786:	2811      	cmp	r0, #17
 8004788:	d9f3      	bls.n	8004772 <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 800478a:	2003      	movs	r0, #3
 800478c:	e165      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
 800478e:	bf00      	nop
 8004790:	20000070 	.word	0x20000070
 8004794:	20000074 	.word	0x20000074
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800479c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80047a0:	f023 0301 	bic.w	r3, r3, #1
 80047a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80047a8:	f7fc ff72 	bl	8001690 <HAL_GetTick>
 80047ac:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80047ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b6:	f013 0f02 	tst.w	r3, #2
 80047ba:	d006      	beq.n	80047ca <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047bc:	f7fc ff68 	bl	8001690 <HAL_GetTick>
 80047c0:	1b80      	subs	r0, r0, r6
 80047c2:	2811      	cmp	r0, #17
 80047c4:	d9f3      	bls.n	80047ae <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 80047c6:	2003      	movs	r0, #3
 80047c8:	e147      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	f013 0f04 	tst.w	r3, #4
 80047d0:	f000 80b1 	beq.w	8004936 <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80047d4:	4ba8      	ldr	r3, [pc, #672]	; (8004a78 <HAL_RCC_OscConfig+0x670>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80047dc:	d110      	bne.n	8004800 <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 80047de:	f7ff fc79 	bl	80040d4 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80047e2:	f7fc ff55 	bl	8001690 <HAL_GetTick>
 80047e6:	4606      	mov	r6, r0
 80047e8:	4ba3      	ldr	r3, [pc, #652]	; (8004a78 <HAL_RCC_OscConfig+0x670>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80047f0:	d106      	bne.n	8004800 <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f2:	f7fc ff4d 	bl	8001690 <HAL_GetTick>
 80047f6:	1b80      	subs	r0, r0, r6
 80047f8:	2802      	cmp	r0, #2
 80047fa:	d9f5      	bls.n	80047e8 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 80047fc:	2003      	movs	r0, #3
 80047fe:	e12c      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004800:	68e3      	ldr	r3, [r4, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d061      	beq.n	80048ca <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004806:	2b85      	cmp	r3, #133	; 0x85
 8004808:	d001      	beq.n	800480e <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800480a:	2b05      	cmp	r3, #5
 800480c:	d107      	bne.n	800481e <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800480e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004812:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004816:	f043 0304 	orr.w	r3, r3, #4
 800481a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800481e:	f7fc ff37 	bl	8001690 <HAL_GetTick>
 8004822:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004828:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f013 0f02 	tst.w	r3, #2
 8004840:	d108      	bne.n	8004854 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004842:	f7fc ff25 	bl	8001690 <HAL_GetTick>
 8004846:	1b80      	subs	r0, r0, r6
 8004848:	f241 3388 	movw	r3, #5000	; 0x1388
 800484c:	4298      	cmp	r0, r3
 800484e:	d9f1      	bls.n	8004834 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 8004850:	2003      	movs	r0, #3
 8004852:	e102      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004854:	68e3      	ldr	r3, [r4, #12]
 8004856:	2b81      	cmp	r3, #129	; 0x81
 8004858:	d001      	beq.n	800485e <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800485a:	2b85      	cmp	r3, #133	; 0x85
 800485c:	d11a      	bne.n	8004894 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 800485e:	f7fc ff17 	bl	8001690 <HAL_GetTick>
 8004862:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004868:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800486c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004880:	d159      	bne.n	8004936 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004882:	f7fc ff05 	bl	8001690 <HAL_GetTick>
 8004886:	1b80      	subs	r0, r0, r6
 8004888:	f241 3388 	movw	r3, #5000	; 0x1388
 800488c:	4298      	cmp	r0, r3
 800488e:	d9f1      	bls.n	8004874 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8004890:	2003      	movs	r0, #3
 8004892:	e0e2      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8004894:	f7fc fefc 	bl	8001690 <HAL_GetTick>
 8004898:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800489a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800489e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80048a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80048b6:	d03e      	beq.n	8004936 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f7fc feea 	bl	8001690 <HAL_GetTick>
 80048bc:	1b80      	subs	r0, r0, r6
 80048be:	f241 3388 	movw	r3, #5000	; 0x1388
 80048c2:	4298      	cmp	r0, r3
 80048c4:	d9f1      	bls.n	80048aa <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 80048c6:	2003      	movs	r0, #3
 80048c8:	e0c7      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 80048ca:	f7fc fee1 	bl	8001690 <HAL_GetTick>
 80048ce:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80048d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80048ec:	d008      	beq.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ee:	f7fc fecf 	bl	8001690 <HAL_GetTick>
 80048f2:	1b80      	subs	r0, r0, r6
 80048f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80048f8:	4298      	cmp	r0, r3
 80048fa:	d9f1      	bls.n	80048e0 <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 80048fc:	2003      	movs	r0, #3
 80048fe:	e0ac      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8004900:	f7fc fec6 	bl	8001690 <HAL_GetTick>
 8004904:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800490a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	f013 0f02 	tst.w	r3, #2
 8004922:	d008      	beq.n	8004936 <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004924:	f7fc feb4 	bl	8001690 <HAL_GetTick>
 8004928:	1b80      	subs	r0, r0, r6
 800492a:	f241 3388 	movw	r3, #5000	; 0x1388
 800492e:	4298      	cmp	r0, r3
 8004930:	d9f1      	bls.n	8004916 <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 8004932:	2003      	movs	r0, #3
 8004934:	e091      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004936:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 808d 	beq.w	8004a58 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800493e:	2d0c      	cmp	r5, #12
 8004940:	d062      	beq.n	8004a08 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004942:	2b02      	cmp	r3, #2
 8004944:	d01f      	beq.n	8004986 <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004950:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	f022 0203 	bic.w	r2, r2, #3
 8004958:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8004960:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004964:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004966:	f7fc fe93 	bl	8001690 <HAL_GetTick>
 800496a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800496c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004976:	d073      	beq.n	8004a60 <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004978:	f7fc fe8a 	bl	8001690 <HAL_GetTick>
 800497c:	1b00      	subs	r0, r0, r4
 800497e:	280a      	cmp	r0, #10
 8004980:	d9f4      	bls.n	800496c <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 8004982:	2003      	movs	r0, #3
 8004984:	e069      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800498a:	6813      	ldr	r3, [r2, #0]
 800498c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004990:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004992:	f7fc fe7d 	bl	8001690 <HAL_GetTick>
 8004996:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80049a2:	d12a      	bne.n	80049fa <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049a8:	68d3      	ldr	r3, [r2, #12]
 80049aa:	4934      	ldr	r1, [pc, #208]	; (8004a7c <HAL_RCC_OscConfig+0x674>)
 80049ac:	4019      	ands	r1, r3
 80049ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80049b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80049b2:	4303      	orrs	r3, r0
 80049b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80049b6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80049ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80049bc:	4303      	orrs	r3, r0
 80049be:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80049c0:	4303      	orrs	r3, r0
 80049c2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80049c4:	4303      	orrs	r3, r0
 80049c6:	430b      	orrs	r3, r1
 80049c8:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80049ca:	6813      	ldr	r3, [r2, #0]
 80049cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049d0:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049d2:	68d3      	ldr	r3, [r2, #12]
 80049d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d8:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80049da:	f7fc fe59 	bl	8001690 <HAL_GetTick>
 80049de:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80049e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80049ea:	d137      	bne.n	8004a5c <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fc fe50 	bl	8001690 <HAL_GetTick>
 80049f0:	1b00      	subs	r0, r0, r4
 80049f2:	280a      	cmp	r0, #10
 80049f4:	d9f4      	bls.n	80049e0 <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 80049f6:	2003      	movs	r0, #3
 80049f8:	e02f      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fa:	f7fc fe49 	bl	8001690 <HAL_GetTick>
 80049fe:	1b40      	subs	r0, r0, r5
 8004a00:	280a      	cmp	r0, #10
 8004a02:	d9c9      	bls.n	8004998 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8004a04:	2003      	movs	r0, #3
 8004a06:	e028      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d02b      	beq.n	8004a64 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 8004a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a10:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004a12:	f003 0103 	and.w	r1, r3, #3
 8004a16:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a18:	4291      	cmp	r1, r2
 8004a1a:	d125      	bne.n	8004a68 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004a1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a22:	428a      	cmp	r2, r1
 8004a24:	d122      	bne.n	8004a6c <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004a26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a2c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004a30:	d11e      	bne.n	8004a70 <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004a32:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8004a36:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d11b      	bne.n	8004a74 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	e00c      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 8004a40:	2001      	movs	r0, #1
}
 8004a42:	4770      	bx	lr
        return HAL_ERROR;
 8004a44:	2001      	movs	r0, #1
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 8004a48:	2001      	movs	r0, #1
 8004a4a:	e006      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004a4c:	2001      	movs	r0, #1
 8004a4e:	e004      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004a50:	2001      	movs	r0, #1
 8004a52:	e002      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8004a54:	2001      	movs	r0, #1
 8004a56:	e000      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 8004a58:	2000      	movs	r0, #0
}
 8004a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	e7fc      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
 8004a60:	2000      	movs	r0, #0
 8004a62:	e7fa      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8004a64:	2001      	movs	r0, #1
 8004a66:	e7f8      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8004a68:	2001      	movs	r0, #1
 8004a6a:	e7f6      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	e7f4      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
 8004a70:	2001      	movs	r0, #1
 8004a72:	e7f2      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
 8004a74:	2001      	movs	r0, #1
 8004a76:	e7f0      	b.n	8004a5a <HAL_RCC_OscConfig+0x652>
 8004a78:	58000400 	.word	0x58000400
 8004a7c:	11c1808c 	.word	0x11c1808c

08004a80 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004a80:	2800      	cmp	r0, #0
 8004a82:	f000 8127 	beq.w	8004cd4 <HAL_RCC_ClockConfig+0x254>
{
 8004a86:	b570      	push	{r4, r5, r6, lr}
 8004a88:	460c      	mov	r4, r1
 8004a8a:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b93      	ldr	r3, [pc, #588]	; (8004cdc <HAL_RCC_ClockConfig+0x25c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	428b      	cmp	r3, r1
 8004a96:	d32d      	bcc.n	8004af4 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a98:	682b      	ldr	r3, [r5, #0]
 8004a9a:	f013 0f02 	tst.w	r3, #2
 8004a9e:	d13f      	bne.n	8004b20 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	f013 0f20 	tst.w	r3, #32
 8004aa6:	d153      	bne.n	8004b50 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004aae:	d16a      	bne.n	8004b86 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	f013 0f04 	tst.w	r3, #4
 8004ab6:	f040 8083 	bne.w	8004bc0 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aba:	682b      	ldr	r3, [r5, #0]
 8004abc:	f013 0f08 	tst.w	r3, #8
 8004ac0:	f040 8097 	bne.w	8004bf2 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	f013 0f01 	tst.w	r3, #1
 8004aca:	f000 80de 	beq.w	8004c8a <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ace:	686b      	ldr	r3, [r5, #4]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	f000 80a8 	beq.w	8004c26 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	f000 80ad 	beq.w	8004c36 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f040 80b2 	bne.w	8004c46 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	f012 0f02 	tst.w	r2, #2
 8004aec:	f040 80b1 	bne.w	8004c52 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004af0:	2001      	movs	r0, #1
 8004af2:	e0ee      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af4:	4a79      	ldr	r2, [pc, #484]	; (8004cdc <HAL_RCC_ClockConfig+0x25c>)
 8004af6:	6813      	ldr	r3, [r2, #0]
 8004af8:	f023 0307 	bic.w	r3, r3, #7
 8004afc:	430b      	orrs	r3, r1
 8004afe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004b00:	f7fc fdc6 	bl	8001690 <HAL_GetTick>
 8004b04:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b06:	4b75      	ldr	r3, [pc, #468]	; (8004cdc <HAL_RCC_ClockConfig+0x25c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	42a3      	cmp	r3, r4
 8004b10:	d0c2      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004b12:	f7fc fdbd 	bl	8001690 <HAL_GetTick>
 8004b16:	1b80      	subs	r0, r0, r6
 8004b18:	2802      	cmp	r0, #2
 8004b1a:	d9f4      	bls.n	8004b06 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8004b1c:	2003      	movs	r0, #3
 8004b1e:	e0d8      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004b20:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b26:	688a      	ldr	r2, [r1, #8]
 8004b28:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004b30:	f7fc fdae 	bl	8001690 <HAL_GetTick>
 8004b34:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004b40:	d1ae      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b42:	f7fc fda5 	bl	8001690 <HAL_GetTick>
 8004b46:	1b80      	subs	r0, r0, r6
 8004b48:	2802      	cmp	r0, #2
 8004b4a:	d9f4      	bls.n	8004b36 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8004b4c:	2003      	movs	r0, #3
 8004b4e:	e0c0      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004b50:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b56:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8004b5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004b64:	f7fc fd94 	bl	8001690 <HAL_GetTick>
 8004b68:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b72:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b76:	d197      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b78:	f7fc fd8a 	bl	8001690 <HAL_GetTick>
 8004b7c:	1b80      	subs	r0, r0, r6
 8004b7e:	2802      	cmp	r0, #2
 8004b80:	d9f3      	bls.n	8004b6a <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8004b82:	2003      	movs	r0, #3
 8004b84:	e0a5      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004b86:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b8c:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8004b90:	f023 030f 	bic.w	r3, r3, #15
 8004b94:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8004b98:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8004b9c:	f7fc fd78 	bl	8001690 <HAL_GetTick>
 8004ba0:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004baa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004bae:	f47f af7f 	bne.w	8004ab0 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bb2:	f7fc fd6d 	bl	8001690 <HAL_GetTick>
 8004bb6:	1b80      	subs	r0, r0, r6
 8004bb8:	2802      	cmp	r0, #2
 8004bba:	d9f2      	bls.n	8004ba2 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8004bbc:	2003      	movs	r0, #3
 8004bbe:	e088      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004bc0:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bc6:	688a      	ldr	r2, [r1, #8]
 8004bc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004bd0:	f7fc fd5e 	bl	8001690 <HAL_GetTick>
 8004bd4:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004be0:	f47f af6b 	bne.w	8004aba <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004be4:	f7fc fd54 	bl	8001690 <HAL_GetTick>
 8004be8:	1b80      	subs	r0, r0, r6
 8004bea:	2802      	cmp	r0, #2
 8004bec:	d9f3      	bls.n	8004bd6 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8004bee:	2003      	movs	r0, #3
 8004bf0:	e06f      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004bf2:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf8:	6893      	ldr	r3, [r2, #8]
 8004bfa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004bfe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c02:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8004c04:	f7fc fd44 	bl	8001690 <HAL_GetTick>
 8004c08:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004c14:	f47f af56 	bne.w	8004ac4 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c18:	f7fc fd3a 	bl	8001690 <HAL_GetTick>
 8004c1c:	1b80      	subs	r0, r0, r6
 8004c1e:	2802      	cmp	r0, #2
 8004c20:	d9f3      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8004c22:	2003      	movs	r0, #3
 8004c24:	e055      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004c26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004c30:	d10f      	bne.n	8004c52 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004c32:	2001      	movs	r0, #1
 8004c34:	e04d      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004c40:	d107      	bne.n	8004c52 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8004c42:	2001      	movs	r0, #1
 8004c44:	e045      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004c50:	d042      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c56:	688a      	ldr	r2, [r1, #8]
 8004c58:	f022 0203 	bic.w	r2, r2, #3
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004c60:	f7fc fd16 	bl	8001690 <HAL_GetTick>
 8004c64:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c70:	686a      	ldr	r2, [r5, #4]
 8004c72:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004c76:	d008      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c78:	f7fc fd0a 	bl	8001690 <HAL_GetTick>
 8004c7c:	1b80      	subs	r0, r0, r6
 8004c7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c82:	4298      	cmp	r0, r3
 8004c84:	d9ef      	bls.n	8004c66 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8004c86:	2003      	movs	r0, #3
 8004c88:	e023      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <HAL_RCC_ClockConfig+0x25c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	42a3      	cmp	r3, r4
 8004c94:	d915      	bls.n	8004cc2 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4a11      	ldr	r2, [pc, #68]	; (8004cdc <HAL_RCC_ClockConfig+0x25c>)
 8004c98:	6813      	ldr	r3, [r2, #0]
 8004c9a:	f023 0307 	bic.w	r3, r3, #7
 8004c9e:	4323      	orrs	r3, r4
 8004ca0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004ca2:	f7fc fcf5 	bl	8001690 <HAL_GetTick>
 8004ca6:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca8:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <HAL_RCC_ClockConfig+0x25c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	42a3      	cmp	r3, r4
 8004cb2:	d006      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cb4:	f7fc fcec 	bl	8001690 <HAL_GetTick>
 8004cb8:	1b40      	subs	r0, r0, r5
 8004cba:	2802      	cmp	r0, #2
 8004cbc:	d9f4      	bls.n	8004ca8 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8004cbe:	2003      	movs	r0, #3
 8004cc0:	e007      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004cc2:	f7ff fb91 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004cc6:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_RCC_ClockConfig+0x260>)
 8004cc8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <HAL_RCC_ClockConfig+0x264>)
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	f7fc fcdd 	bl	800168c <HAL_InitTick>
}
 8004cd2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004cd4:	2001      	movs	r0, #1
}
 8004cd6:	4770      	bx	lr
        return HAL_ERROR;
 8004cd8:	2001      	movs	r0, #1
 8004cda:	e7fa      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x252>
 8004cdc:	58004000 	.word	0x58004000
 8004ce0:	20000070 	.word	0x20000070
 8004ce4:	20000074 	.word	0x20000074

08004ce8 <HAL_RCC_GetPCLK1Freq>:
{
 8004ce8:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004cea:	f7ff fb7d 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004cf8:	4a02      	ldr	r2, [pc, #8]	; (8004d04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004cfe:	40d8      	lsrs	r0, r3
 8004d00:	bd08      	pop	{r3, pc}
 8004d02:	bf00      	nop
 8004d04:	08011650 	.word	0x08011650

08004d08 <HAL_RCC_GetPCLK2Freq>:
{
 8004d08:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004d0a:	f7ff fb6d 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004d18:	4a02      	ldr	r2, [pc, #8]	; (8004d24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004d1e:	40d8      	lsrs	r0, r3
 8004d20:	bd08      	pop	{r3, pc}
 8004d22:	bf00      	nop
 8004d24:	08011650 	.word	0x08011650

08004d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d28:	b570      	push	{r4, r5, r6, lr}
 8004d2a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d2c:	6803      	ldr	r3, [r0, #0]
 8004d2e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004d32:	f040 80ab 	bne.w	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004d36:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	f013 0f01 	tst.w	r3, #1
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d40:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d46:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004d4a:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004d4e:	b292      	uxth	r2, r2
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	f013 0f02 	tst.w	r3, #2
 8004d5c:	d00a      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d5e:	68a2      	ldr	r2, [r4, #8]
 8004d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d64:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004d68:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8004d6c:	b292      	uxth	r2, r2
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	f013 0f20 	tst.w	r3, #32
 8004d7a:	d009      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d7c:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d82:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004d86:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004d96:	d00c      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d98:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d9e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004da2:	0c02      	lsrs	r2, r0, #16
 8004da4:	0412      	lsls	r2, r2, #16
 8004da6:	ea23 0302 	bic.w	r3, r3, r2
 8004daa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004db8:	d00c      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004dbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dc0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004dc4:	0c02      	lsrs	r2, r0, #16
 8004dc6:	0412      	lsls	r2, r2, #16
 8004dc8:	ea23 0302 	bic.w	r3, r3, r2
 8004dcc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004dda:	d00c      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004ddc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004de2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004de6:	0c02      	lsrs	r2, r0, #16
 8004de8:	0412      	lsls	r2, r2, #16
 8004dea:	ea23 0302 	bic.w	r3, r3, r2
 8004dee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004dfc:	f040 809e 	bne.w	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004e06:	f040 80aa 	bne.w	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e10:	f040 80b6 	bne.w	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	f013 0f10 	tst.w	r3, #16
 8004e1a:	d00e      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004e1c:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8004e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e22:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004e30:	68e3      	ldr	r3, [r4, #12]
 8004e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e36:	f000 80b4 	beq.w	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004e40:	d00f      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e42:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e48:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e4c:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e58:	b91b      	cbnz	r3, 8004e62 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004e5a:	68cb      	ldr	r3, [r1, #12]
 8004e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e60:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004e68:	d00e      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e70:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004e74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004e7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e84:	f000 8092 	beq.w	8004fac <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8004e88:	4628      	mov	r0, r5
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8004e8c:	f7ff f922 	bl	80040d4 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8004e90:	f7fc fbfe 	bl	8001690 <HAL_GetTick>
 8004e94:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004e96:	4b48      	ldr	r3, [pc, #288]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e9e:	d106      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea0:	f7fc fbf6 	bl	8001690 <HAL_GetTick>
 8004ea4:	1b40      	subs	r0, r0, r5
 8004ea6:	2802      	cmp	r0, #2
 8004ea8:	d9f5      	bls.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8004eaa:	2503      	movs	r5, #3
 8004eac:	e000      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8004eae:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8004eb0:	2d00      	cmp	r5, #0
 8004eb2:	f47f af41 	bne.w	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004ec2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d024      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ecc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004ed0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ed4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004ed8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004edc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ee0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004ee4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004ee8:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8004ef0:	f012 0f02 	tst.w	r2, #2
 8004ef4:	d10f      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8004ef6:	2d00      	cmp	r5, #0
 8004ef8:	f47f af1e 	bne.w	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004efc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f02:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004f06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004f10:	e712      	b.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8004f12:	2200      	movs	r2, #0
 8004f14:	e7ec      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8004f16:	f7fc fbbb 	bl	8001690 <HAL_GetTick>
 8004f1a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	f013 0f02 	tst.w	r3, #2
 8004f28:	d1e5      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2a:	f7fc fbb1 	bl	8001690 <HAL_GetTick>
 8004f2e:	1b80      	subs	r0, r0, r6
 8004f30:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f34:	4298      	cmp	r0, r3
 8004f36:	d9f1      	bls.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8004f38:	2503      	movs	r5, #3
 8004f3a:	e7dc      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f3c:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004f3e:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004f42:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004f46:	0919      	lsrs	r1, r3, #4
 8004f48:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004f4c:	ea22 0201 	bic.w	r2, r2, r1
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004f5c:	e750      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f5e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004f60:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004f64:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004f68:	0919      	lsrs	r1, r3, #4
 8004f6a:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004f6e:	ea22 0201 	bic.w	r2, r2, r1
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004f7e:	e744      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f80:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004f82:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8004f86:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004f8a:	0919      	lsrs	r1, r3, #4
 8004f8c:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8004f90:	ea22 0201 	bic.w	r2, r2, r1
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8004fa0:	e738      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004fa2:	68cb      	ldr	r3, [r1, #12]
 8004fa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fa8:	60cb      	str	r3, [r1, #12]
 8004faa:	e746      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fac:	68cb      	ldr	r3, [r1, #12]
 8004fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb2:	60cb      	str	r3, [r1, #12]
 8004fb4:	e768      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004fb6:	bf00      	nop
 8004fb8:	58000400 	.word	0x58000400

08004fbc <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fbc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d036      	beq.n	8005032 <HAL_RTC_DeactivateAlarm+0x76>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fd0:	4b19      	ldr	r3, [pc, #100]	; (8005038 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004fd2:	22ca      	movs	r2, #202	; 0xca
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24
 8004fd6:	2253      	movs	r2, #83	; 0x53
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004fda:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004fde:	d019      	beq.n	8005014 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004fe0:	4b15      	ldr	r3, [pc, #84]	; (8005038 <HAL_RTC_DeactivateAlarm+0x7c>)
 8004fe2:	699a      	ldr	r2, [r3, #24]
 8004fe4:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004fe8:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8004fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ff0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004ff2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004ff4:	f022 0202 	bic.w	r2, r2, #2
 8004ff8:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ffe:	4b0e      	ldr	r3, [pc, #56]	; (8005038 <HAL_RTC_DeactivateAlarm+0x7c>)
 8005000:	22ff      	movs	r2, #255	; 0xff
 8005002:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005004:	2301      	movs	r3, #1
 8005006:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800500a:	2300      	movs	r3, #0
 800500c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005010:	4618      	mov	r0, r3
 8005012:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800501a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800501c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800501e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005022:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005024:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800502c:	2201      	movs	r2, #1
 800502e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005030:	e7e5      	b.n	8004ffe <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8005032:	2002      	movs	r0, #2
}
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40002800 	.word	0x40002800

0800503c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005040:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <HAL_RTC_AlarmIRQHandler+0x3c>)
 8005042:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8005044:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005046:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005048:	f015 0f01 	tst.w	r5, #1
 800504c:	d106      	bne.n	800505c <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800504e:	f015 0f02 	tst.w	r5, #2
 8005052:	d109      	bne.n	8005068 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005054:	2301      	movs	r3, #1
 8005056:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800505a:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800505c:	4b06      	ldr	r3, [pc, #24]	; (8005078 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800505e:	2201      	movs	r2, #1
 8005060:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8005062:	f7fc fceb 	bl	8001a3c <HAL_RTC_AlarmAEventCallback>
 8005066:	e7f2      	b.n	800504e <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005068:	4b03      	ldr	r3, [pc, #12]	; (8005078 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800506a:	2202      	movs	r2, #2
 800506c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800506e:	4620      	mov	r0, r4
 8005070:	f000 f9e6 	bl	8005440 <HAL_RTCEx_AlarmBEventCallback>
 8005074:	e7ee      	b.n	8005054 <HAL_RTC_AlarmIRQHandler+0x18>
 8005076:	bf00      	nop
 8005078:	40002800 	.word	0x40002800

0800507c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800507c:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800507e:	4a0b      	ldr	r2, [pc, #44]	; (80050ac <HAL_RTC_WaitForSynchro+0x30>)
 8005080:	68d3      	ldr	r3, [r2, #12]
 8005082:	f023 0320 	bic.w	r3, r3, #32
 8005086:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005088:	f7fc fb02 	bl	8001690 <HAL_GetTick>
 800508c:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <HAL_RTC_WaitForSynchro+0x30>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f013 0f20 	tst.w	r3, #32
 8005096:	d107      	bne.n	80050a8 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005098:	f7fc fafa 	bl	8001690 <HAL_GetTick>
 800509c:	1b00      	subs	r0, r0, r4
 800509e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80050a2:	d9f4      	bls.n	800508e <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80050a4:	2003      	movs	r0, #3
 80050a6:	e000      	b.n	80050aa <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80050a8:	2000      	movs	r0, #0
}
 80050aa:	bd10      	pop	{r4, pc}
 80050ac:	40002800 	.word	0x40002800

080050b0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050b0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80050b2:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <RTC_EnterInitMode+0x48>)
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80050ba:	d002      	beq.n	80050c2 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80050bc:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80050be:	4620      	mov	r0, r4
 80050c0:	bd70      	pop	{r4, r5, r6, pc}
 80050c2:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80050c4:	4a0c      	ldr	r2, [pc, #48]	; (80050f8 <RTC_EnterInitMode+0x48>)
 80050c6:	68d3      	ldr	r3, [r2, #12]
 80050c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050cc:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80050ce:	f7fc fadf 	bl	8001690 <HAL_GetTick>
 80050d2:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80050d4:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80050d6:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <RTC_EnterInitMode+0x48>)
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80050de:	d1ee      	bne.n	80050be <RTC_EnterInitMode+0xe>
 80050e0:	2c03      	cmp	r4, #3
 80050e2:	d0ec      	beq.n	80050be <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80050e4:	f7fc fad4 	bl	8001690 <HAL_GetTick>
 80050e8:	1b43      	subs	r3, r0, r5
 80050ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050ee:	d9f2      	bls.n	80050d6 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050f0:	2403      	movs	r4, #3
 80050f2:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 80050f6:	e7ee      	b.n	80050d6 <RTC_EnterInitMode+0x26>
 80050f8:	40002800 	.word	0x40002800

080050fc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050fc:	b510      	push	{r4, lr}
 80050fe:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005100:	4b11      	ldr	r3, [pc, #68]	; (8005148 <RTC_ExitInitMode+0x4c>)
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005108:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f013 0f20 	tst.w	r3, #32
 8005110:	d107      	bne.n	8005122 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005112:	f7ff ffb3 	bl	800507c <HAL_RTC_WaitForSynchro>
 8005116:	4603      	mov	r3, r0
 8005118:	b1a0      	cbz	r0, 8005144 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005120:	e010      	b.n	8005144 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005122:	4a09      	ldr	r2, [pc, #36]	; (8005148 <RTC_ExitInitMode+0x4c>)
 8005124:	6993      	ldr	r3, [r2, #24]
 8005126:	f023 0320 	bic.w	r3, r3, #32
 800512a:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800512c:	f7ff ffa6 	bl	800507c <HAL_RTC_WaitForSynchro>
 8005130:	4603      	mov	r3, r0
 8005132:	b110      	cbz	r0, 800513a <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800513a:	4903      	ldr	r1, [pc, #12]	; (8005148 <RTC_ExitInitMode+0x4c>)
 800513c:	698a      	ldr	r2, [r1, #24]
 800513e:	f042 0220 	orr.w	r2, r2, #32
 8005142:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8005144:	4618      	mov	r0, r3
 8005146:	bd10      	pop	{r4, pc}
 8005148:	40002800 	.word	0x40002800

0800514c <HAL_RTC_Init>:
  if (hrtc != NULL)
 800514c:	2800      	cmp	r0, #0
 800514e:	d04a      	beq.n	80051e6 <HAL_RTC_Init+0x9a>
{
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005154:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8005158:	b19b      	cbz	r3, 8005182 <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800515a:	2302      	movs	r3, #2
 800515c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005160:	4b22      	ldr	r3, [pc, #136]	; (80051ec <HAL_RTC_Init+0xa0>)
 8005162:	22ca      	movs	r2, #202	; 0xca
 8005164:	625a      	str	r2, [r3, #36]	; 0x24
 8005166:	2253      	movs	r2, #83	; 0x53
 8005168:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 800516a:	4620      	mov	r0, r4
 800516c:	f7ff ffa0 	bl	80050b0 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8005170:	b160      	cbz	r0, 800518c <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005172:	4b1e      	ldr	r3, [pc, #120]	; (80051ec <HAL_RTC_Init+0xa0>)
 8005174:	22ff      	movs	r2, #255	; 0xff
 8005176:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8005178:	b910      	cbnz	r0, 8005180 <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 800517a:	2301      	movs	r3, #1
 800517c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005180:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8005182:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8005186:	f7fc f8d9 	bl	800133c <HAL_RTC_MspInit>
 800518a:	e7e6      	b.n	800515a <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800518c:	4b17      	ldr	r3, [pc, #92]	; (80051ec <HAL_RTC_Init+0xa0>)
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8005194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005198:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800519a:	6999      	ldr	r1, [r3, #24]
 800519c:	6862      	ldr	r2, [r4, #4]
 800519e:	6920      	ldr	r0, [r4, #16]
 80051a0:	4302      	orrs	r2, r0
 80051a2:	69a0      	ldr	r0, [r4, #24]
 80051a4:	4302      	orrs	r2, r0
 80051a6:	430a      	orrs	r2, r1
 80051a8:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80051aa:	68e2      	ldr	r2, [r4, #12]
 80051ac:	68a1      	ldr	r1, [r4, #8]
 80051ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80051b2:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80051ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80051bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80051be:	4301      	orrs	r1, r0
 80051c0:	430a      	orrs	r2, r1
 80051c2:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 80051c4:	4620      	mov	r0, r4
 80051c6:	f7ff ff99 	bl	80050fc <RTC_ExitInitMode>
      if (status == HAL_OK)
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d1d1      	bne.n	8005172 <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 80051ce:	4907      	ldr	r1, [pc, #28]	; (80051ec <HAL_RTC_Init+0xa0>)
 80051d0:	698b      	ldr	r3, [r1, #24]
 80051d2:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80051d6:	6a22      	ldr	r2, [r4, #32]
 80051d8:	69e5      	ldr	r5, [r4, #28]
 80051da:	432a      	orrs	r2, r5
 80051dc:	6965      	ldr	r5, [r4, #20]
 80051de:	432a      	orrs	r2, r5
 80051e0:	4313      	orrs	r3, r2
 80051e2:	618b      	str	r3, [r1, #24]
 80051e4:	e7c5      	b.n	8005172 <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 80051e6:	2001      	movs	r0, #1
}
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40002800 	.word	0x40002800

080051f0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80051f0:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80051f2:	e002      	b.n	80051fa <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80051f4:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80051f6:	380a      	subs	r0, #10
 80051f8:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 80051fa:	2809      	cmp	r0, #9
 80051fc:	d8fa      	bhi.n	80051f4 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	b2db      	uxtb	r3, r3
}
 8005202:	4318      	orrs	r0, r3
 8005204:	4770      	bx	lr
	...

08005208 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005208:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800520c:	2b01      	cmp	r3, #1
 800520e:	f000 80b0 	beq.w	8005372 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8005212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005216:	4605      	mov	r5, r0
 8005218:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800521a:	2301      	movs	r3, #1
 800521c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005220:	2302      	movs	r3, #2
 8005222:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005226:	4b54      	ldr	r3, [pc, #336]	; (8005378 <HAL_RTC_SetAlarm_IT+0x170>)
 8005228:	68de      	ldr	r6, [r3, #12]
 800522a:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800522e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005232:	d043      	beq.n	80052bc <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005234:	bb12      	cbnz	r2, 800527c <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	f013 0f40 	tst.w	r3, #64	; 0x40
 800523c:	d101      	bne.n	8005242 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800523e:	2300      	movs	r3, #0
 8005240:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005242:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005246:	7820      	ldrb	r0, [r4, #0]
 8005248:	f7ff ffd2 	bl	80051f0 <RTC_ByteToBcd2>
 800524c:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800524e:	7860      	ldrb	r0, [r4, #1]
 8005250:	f7ff ffce 	bl	80051f0 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005254:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005258:	78a0      	ldrb	r0, [r4, #2]
 800525a:	f7ff ffc9 	bl	80051f0 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800525e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005260:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005262:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005266:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800526a:	f7ff ffc1 	bl	80051f0 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800526e:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005272:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005274:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005276:	ea48 0000 	orr.w	r0, r8, r0
 800527a:	e020      	b.n	80052be <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800527c:	6948      	ldr	r0, [r1, #20]
 800527e:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8005282:	d009      	beq.n	8005298 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005284:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005288:	d006      	beq.n	8005298 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800528a:	4b3b      	ldr	r3, [pc, #236]	; (8005378 <HAL_RTC_SetAlarm_IT+0x170>)
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005292:	d101      	bne.n	8005298 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005294:	2300      	movs	r3, #0
 8005296:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005298:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800529a:	7863      	ldrb	r3, [r4, #1]
 800529c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800529e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80052a2:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052a4:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80052a6:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80052a8:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80052ac:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80052b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80052b4:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80052b6:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052b8:	4318      	orrs	r0, r3
 80052ba:	e000      	b.n	80052be <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80052bc:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052be:	4b2e      	ldr	r3, [pc, #184]	; (8005378 <HAL_RTC_SetAlarm_IT+0x170>)
 80052c0:	22ca      	movs	r2, #202	; 0xca
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24
 80052c4:	2253      	movs	r2, #83	; 0x53
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80052c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ce:	d02a      	beq.n	8005326 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80052d0:	4b29      	ldr	r3, [pc, #164]	; (8005378 <HAL_RTC_SetAlarm_IT+0x170>)
 80052d2:	699a      	ldr	r2, [r3, #24]
 80052d4:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80052d8:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80052da:	2202      	movs	r2, #2
 80052dc:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80052de:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80052e2:	d040      	beq.n	8005366 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80052e4:	4b24      	ldr	r3, [pc, #144]	; (8005378 <HAL_RTC_SetAlarm_IT+0x170>)
 80052e6:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80052e8:	69a2      	ldr	r2, [r4, #24]
 80052ea:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80052ec:	6862      	ldr	r2, [r4, #4]
 80052ee:	4b22      	ldr	r3, [pc, #136]	; (8005378 <HAL_RTC_SetAlarm_IT+0x170>)
 80052f0:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80052f2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80052f4:	f042 0202 	orr.w	r2, r2, #2
 80052f8:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80052fa:	699a      	ldr	r2, [r3, #24]
 80052fc:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8005300:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005302:	4a1e      	ldr	r2, [pc, #120]	; (800537c <HAL_RTC_SetAlarm_IT+0x174>)
 8005304:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8005308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800530c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005310:	4b19      	ldr	r3, [pc, #100]	; (8005378 <HAL_RTC_SetAlarm_IT+0x170>)
 8005312:	22ff      	movs	r2, #255	; 0xff
 8005314:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005316:	2301      	movs	r3, #1
 8005318:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 800531c:	2000      	movs	r0, #0
 800531e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8005322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <HAL_RTC_SetAlarm_IT+0x170>)
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800532e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005330:	2201      	movs	r2, #1
 8005332:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005334:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005338:	d00f      	beq.n	800535a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800533a:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <HAL_RTC_SetAlarm_IT+0x170>)
 800533c:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800533e:	69a2      	ldr	r2, [r4, #24]
 8005340:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005342:	6862      	ldr	r2, [r4, #4]
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <HAL_RTC_SetAlarm_IT+0x170>)
 8005346:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005348:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8005356:	619a      	str	r2, [r3, #24]
 8005358:	e7d3      	b.n	8005302 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800535a:	69a3      	ldr	r3, [r4, #24]
 800535c:	69e2      	ldr	r2, [r4, #28]
 800535e:	4313      	orrs	r3, r2
 8005360:	4a05      	ldr	r2, [pc, #20]	; (8005378 <HAL_RTC_SetAlarm_IT+0x170>)
 8005362:	6453      	str	r3, [r2, #68]	; 0x44
 8005364:	e7ed      	b.n	8005342 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005366:	69a3      	ldr	r3, [r4, #24]
 8005368:	69e2      	ldr	r2, [r4, #28]
 800536a:	4313      	orrs	r3, r2
 800536c:	4a02      	ldr	r2, [pc, #8]	; (8005378 <HAL_RTC_SetAlarm_IT+0x170>)
 800536e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005370:	e7bc      	b.n	80052ec <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8005372:	2002      	movs	r0, #2
}
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40002800 	.word	0x40002800
 800537c:	58000800 	.word	0x58000800

08005380 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005380:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005384:	2b01      	cmp	r3, #1
 8005386:	d017      	beq.n	80053b8 <HAL_RTCEx_EnableBypassShadow+0x38>
 8005388:	2101      	movs	r1, #1
 800538a:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800538e:	2302      	movs	r3, #2
 8005390:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005394:	4b09      	ldr	r3, [pc, #36]	; (80053bc <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8005396:	22ca      	movs	r2, #202	; 0xca
 8005398:	625a      	str	r2, [r3, #36]	; 0x24
 800539a:	2253      	movs	r2, #83	; 0x53
 800539c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800539e:	699a      	ldr	r2, [r3, #24]
 80053a0:	f042 0220 	orr.w	r2, r2, #32
 80053a4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053a6:	22ff      	movs	r2, #255	; 0xff
 80053a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053aa:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053ae:	2300      	movs	r3, #0
 80053b0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80053b4:	4618      	mov	r0, r3
 80053b6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80053b8:	2002      	movs	r0, #2
}
 80053ba:	4770      	bx	lr
 80053bc:	40002800 	.word	0x40002800

080053c0 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053c0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d020      	beq.n	800540a <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80053c8:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80053ca:	2101      	movs	r1, #1
 80053cc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053d0:	2302      	movs	r3, #2
 80053d2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053d6:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <HAL_RTCEx_SetSSRU_IT+0x50>)
 80053d8:	22ca      	movs	r2, #202	; 0xca
 80053da:	625a      	str	r2, [r3, #36]	; 0x24
 80053dc:	2253      	movs	r2, #83	; 0x53
 80053de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053e6:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80053e8:	4c0a      	ldr	r4, [pc, #40]	; (8005414 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80053ea:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80053ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80053f2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053f6:	22ff      	movs	r2, #255	; 0xff
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80053fa:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053fe:	2300      	movs	r3, #0
 8005400:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005404:	4618      	mov	r0, r3
}
 8005406:	bc10      	pop	{r4}
 8005408:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800540a:	2002      	movs	r0, #2
}
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40002800 	.word	0x40002800
 8005414:	58000800 	.word	0x58000800

08005418 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005418:	b510      	push	{r4, lr}
 800541a:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800541c:	4b07      	ldr	r3, [pc, #28]	; (800543c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005424:	d103      	bne.n	800542e <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005426:	2301      	movs	r3, #1
 8005428:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800542c:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800542e:	4b03      	ldr	r3, [pc, #12]	; (800543c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005430:	2240      	movs	r2, #64	; 0x40
 8005432:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005434:	f7fc fb06 	bl	8001a44 <HAL_RTCEx_SSRUEventCallback>
 8005438:	e7f5      	b.n	8005426 <HAL_RTCEx_SSRUIRQHandler+0xe>
 800543a:	bf00      	nop
 800543c:	40002800 	.word	0x40002800

08005440 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005440:	4770      	bx	lr

08005442 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005442:	0089      	lsls	r1, r1, #2
 8005444:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005448:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800544c:	600a      	str	r2, [r1, #0]
}
 800544e:	4770      	bx	lr

08005450 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005450:	0089      	lsls	r1, r1, #2
 8005452:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005456:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800545a:	6808      	ldr	r0, [r1, #0]
}
 800545c:	4770      	bx	lr
	...

08005460 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <SUBGHZSPI_Init+0x20>)
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005468:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800546a:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 800546e:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005470:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005474:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800547c:	601a      	str	r2, [r3, #0]
}
 800547e:	4770      	bx	lr
 8005480:	58010000 	.word	0x58010000

08005484 <HAL_SUBGHZ_Init>:
{
 8005484:	b530      	push	{r4, r5, lr}
 8005486:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8005488:	2800      	cmp	r0, #0
 800548a:	d04e      	beq.n	800552a <HAL_SUBGHZ_Init+0xa6>
 800548c:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 800548e:	7983      	ldrb	r3, [r0, #6]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d03b      	beq.n	800550c <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005494:	2302      	movs	r3, #2
 8005496:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800549c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80054a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80054a8:	4b21      	ldr	r3, [pc, #132]	; (8005530 <HAL_SUBGHZ_Init+0xac>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80054b0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80054b4:	2264      	movs	r2, #100	; 0x64
 80054b6:	fb02 f303 	mul.w	r3, r2, r3
 80054ba:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 80054bc:	9b01      	ldr	r3, [sp, #4]
 80054be:	b34b      	cbz	r3, 8005514 <HAL_SUBGHZ_Init+0x90>
    count--;
 80054c0:	9b01      	ldr	r3, [sp, #4]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80054c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054ce:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80054d2:	d1f3      	bne.n	80054bc <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 80054d4:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80054d6:	4b17      	ldr	r3, [pc, #92]	; (8005534 <HAL_SUBGHZ_Init+0xb0>)
 80054d8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80054dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80054e4:	4914      	ldr	r1, [pc, #80]	; (8005538 <HAL_SUBGHZ_Init+0xb4>)
 80054e6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80054ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054ee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054f8:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80054fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054fe:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8005500:	b15d      	cbz	r5, 800551a <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8005502:	2301      	movs	r3, #1
 8005504:	71a3      	strb	r3, [r4, #6]
}
 8005506:	4628      	mov	r0, r5
 8005508:	b003      	add	sp, #12
 800550a:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 800550c:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 800550e:	f7fb ffc5 	bl	800149c <HAL_SUBGHZ_MspInit>
 8005512:	e7bf      	b.n	8005494 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005514:	2501      	movs	r5, #1
 8005516:	60a5      	str	r5, [r4, #8]
      break;
 8005518:	e7dd      	b.n	80054d6 <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800551a:	6820      	ldr	r0, [r4, #0]
 800551c:	f7ff ffa0 	bl	8005460 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005520:	2301      	movs	r3, #1
 8005522:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005524:	2300      	movs	r3, #0
 8005526:	60a3      	str	r3, [r4, #8]
 8005528:	e7eb      	b.n	8005502 <HAL_SUBGHZ_Init+0x7e>
    return status;
 800552a:	2501      	movs	r5, #1
 800552c:	e7eb      	b.n	8005506 <HAL_SUBGHZ_Init+0x82>
 800552e:	bf00      	nop
 8005530:	20000070 	.word	0x20000070
 8005534:	58000400 	.word	0x58000400
 8005538:	58000800 	.word	0x58000800

0800553c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800553c:	b082      	sub	sp, #8
 800553e:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005540:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <SUBGHZSPI_Transmit+0x70>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005548:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800554c:	2064      	movs	r0, #100	; 0x64
 800554e:	fb00 f303 	mul.w	r3, r0, r3
 8005552:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005554:	9b01      	ldr	r3, [sp, #4]
 8005556:	b14b      	cbz	r3, 800556c <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005558:	9b01      	ldr	r3, [sp, #4]
 800555a:	3b01      	subs	r3, #1
 800555c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800555e:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <SUBGHZSPI_Transmit+0x74>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f013 0f02 	tst.w	r3, #2
 8005566:	d0f5      	beq.n	8005554 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005568:	2000      	movs	r0, #0
 800556a:	e001      	b.n	8005570 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800556c:	2001      	movs	r0, #1
 800556e:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8005570:	4b0f      	ldr	r3, [pc, #60]	; (80055b0 <SUBGHZSPI_Transmit+0x74>)
 8005572:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005574:	4b0d      	ldr	r3, [pc, #52]	; (80055ac <SUBGHZSPI_Transmit+0x70>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800557c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005580:	2164      	movs	r1, #100	; 0x64
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005588:	9b01      	ldr	r3, [sp, #4]
 800558a:	b143      	cbz	r3, 800559e <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800558c:	9b01      	ldr	r3, [sp, #4]
 800558e:	3b01      	subs	r3, #1
 8005590:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005592:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <SUBGHZSPI_Transmit+0x74>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f013 0f01 	tst.w	r3, #1
 800559a:	d0f5      	beq.n	8005588 <SUBGHZSPI_Transmit+0x4c>
 800559c:	e001      	b.n	80055a2 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800559e:	2001      	movs	r0, #1
 80055a0:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80055a2:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <SUBGHZSPI_Transmit+0x74>)
 80055a4:	68db      	ldr	r3, [r3, #12]

  return status;
}
 80055a6:	b002      	add	sp, #8
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	20000070 	.word	0x20000070
 80055b0:	58010000 	.word	0x58010000

080055b4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80055b4:	b082      	sub	sp, #8
 80055b6:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80055b8:	4b1c      	ldr	r3, [pc, #112]	; (800562c <SUBGHZSPI_Receive+0x78>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80055c0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80055c4:	2064      	movs	r0, #100	; 0x64
 80055c6:	fb00 f303 	mul.w	r3, r0, r3
 80055ca:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80055cc:	9b01      	ldr	r3, [sp, #4]
 80055ce:	b14b      	cbz	r3, 80055e4 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80055d0:	9b01      	ldr	r3, [sp, #4]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80055d6:	4b16      	ldr	r3, [pc, #88]	; (8005630 <SUBGHZSPI_Receive+0x7c>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f013 0f02 	tst.w	r3, #2
 80055de:	d0f5      	beq.n	80055cc <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80055e0:	2000      	movs	r0, #0
 80055e2:	e001      	b.n	80055e8 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80055e4:	2001      	movs	r0, #1
 80055e6:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80055e8:	4b11      	ldr	r3, [pc, #68]	; (8005630 <SUBGHZSPI_Receive+0x7c>)
 80055ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80055ee:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80055f2:	4b0e      	ldr	r3, [pc, #56]	; (800562c <SUBGHZSPI_Receive+0x78>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80055fa:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80055fe:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005602:	fb0c f303 	mul.w	r3, ip, r3
 8005606:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005608:	9b01      	ldr	r3, [sp, #4]
 800560a:	b143      	cbz	r3, 800561e <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800560c:	9b01      	ldr	r3, [sp, #4]
 800560e:	3b01      	subs	r3, #1
 8005610:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005612:	4b07      	ldr	r3, [pc, #28]	; (8005630 <SUBGHZSPI_Receive+0x7c>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f013 0f01 	tst.w	r3, #1
 800561a:	d0f5      	beq.n	8005608 <SUBGHZSPI_Receive+0x54>
 800561c:	e001      	b.n	8005622 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800561e:	2001      	movs	r0, #1
 8005620:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005622:	4b03      	ldr	r3, [pc, #12]	; (8005630 <SUBGHZSPI_Receive+0x7c>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	700b      	strb	r3, [r1, #0]

  return status;
}
 8005628:	b002      	add	sp, #8
 800562a:	4770      	bx	lr
 800562c:	20000070 	.word	0x20000070
 8005630:	58010000 	.word	0x58010000

08005634 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005634:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005636:	4b13      	ldr	r3, [pc, #76]	; (8005684 <SUBGHZ_WaitOnBusy+0x50>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800563e:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8005642:	2264      	movs	r2, #100	; 0x64
 8005644:	fb02 f303 	mul.w	r3, r2, r3
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	e006      	b.n	800565a <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800564c:	2302      	movs	r3, #2
 800564e:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8005650:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8005652:	b002      	add	sp, #8
 8005654:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005656:	4213      	tst	r3, r2
 8005658:	d012      	beq.n	8005680 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800565a:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <SUBGHZ_WaitOnBusy+0x54>)
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f013 0304 	ands.w	r3, r3, #4
 8005662:	d000      	beq.n	8005666 <SUBGHZ_WaitOnBusy+0x32>
 8005664:	2301      	movs	r3, #1
    if (count == 0U)
 8005666:	9a01      	ldr	r2, [sp, #4]
 8005668:	2a00      	cmp	r2, #0
 800566a:	d0ef      	beq.n	800564c <SUBGHZ_WaitOnBusy+0x18>
    count--;
 800566c:	9a01      	ldr	r2, [sp, #4]
 800566e:	3a01      	subs	r2, #1
 8005670:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005672:	4a05      	ldr	r2, [pc, #20]	; (8005688 <SUBGHZ_WaitOnBusy+0x54>)
 8005674:	6952      	ldr	r2, [r2, #20]
 8005676:	f012 0202 	ands.w	r2, r2, #2
 800567a:	d0ec      	beq.n	8005656 <SUBGHZ_WaitOnBusy+0x22>
 800567c:	2201      	movs	r2, #1
 800567e:	e7ea      	b.n	8005656 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8005680:	2000      	movs	r0, #0
 8005682:	e7e6      	b.n	8005652 <SUBGHZ_WaitOnBusy+0x1e>
 8005684:	20000070 	.word	0x20000070
 8005688:	58000400 	.word	0x58000400

0800568c <SUBGHZ_CheckDeviceReady>:
{
 800568c:	b500      	push	{lr}
 800568e:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005690:	7903      	ldrb	r3, [r0, #4]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d004      	beq.n	80056a0 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005696:	f7ff ffcd 	bl	8005634 <SUBGHZ_WaitOnBusy>
}
 800569a:	b003      	add	sp, #12
 800569c:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 80056a0:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <SUBGHZ_CheckDeviceReady+0x4c>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80056a8:	f3c3 334f 	ubfx	r3, r3, #13, #16
 80056ac:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056ae:	4a0b      	ldr	r2, [pc, #44]	; (80056dc <SUBGHZ_CheckDeviceReady+0x50>)
 80056b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80056b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 80056bc:	9b01      	ldr	r3, [sp, #4]
 80056be:	3b01      	subs	r3, #1
 80056c0:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 80056c2:	9b01      	ldr	r3, [sp, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f9      	bne.n	80056bc <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80056c8:	4a04      	ldr	r2, [pc, #16]	; (80056dc <SUBGHZ_CheckDeviceReady+0x50>)
 80056ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80056ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80056d6:	e7de      	b.n	8005696 <SUBGHZ_CheckDeviceReady+0xa>
 80056d8:	20000070 	.word	0x20000070
 80056dc:	58000400 	.word	0x58000400

080056e0 <HAL_SUBGHZ_WriteRegisters>:
{
 80056e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e4:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80056e6:	7980      	ldrb	r0, [r0, #6]
 80056e8:	fa5f f880 	uxtb.w	r8, r0
 80056ec:	f1b8 0f01 	cmp.w	r8, #1
 80056f0:	d13e      	bne.n	8005770 <HAL_SUBGHZ_WriteRegisters+0x90>
 80056f2:	460c      	mov	r4, r1
 80056f4:	4617      	mov	r7, r2
 80056f6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80056f8:	796b      	ldrb	r3, [r5, #5]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d03b      	beq.n	8005776 <HAL_SUBGHZ_WriteRegisters+0x96>
 80056fe:	2301      	movs	r3, #1
 8005700:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005702:	2302      	movs	r3, #2
 8005704:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005706:	4628      	mov	r0, r5
 8005708:	f7ff ffc0 	bl	800568c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800570c:	4a1b      	ldr	r2, [pc, #108]	; (800577c <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800570e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005712:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800571a:	210d      	movs	r1, #13
 800571c:	4628      	mov	r0, r5
 800571e:	f7ff ff0d 	bl	800553c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005722:	0a21      	lsrs	r1, r4, #8
 8005724:	4628      	mov	r0, r5
 8005726:	f7ff ff09 	bl	800553c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800572a:	b2e1      	uxtb	r1, r4
 800572c:	4628      	mov	r0, r5
 800572e:	f7ff ff05 	bl	800553c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005732:	2400      	movs	r4, #0
 8005734:	e005      	b.n	8005742 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005736:	5d39      	ldrb	r1, [r7, r4]
 8005738:	4628      	mov	r0, r5
 800573a:	f7ff feff 	bl	800553c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800573e:	3401      	adds	r4, #1
 8005740:	b2a4      	uxth	r4, r4
 8005742:	42b4      	cmp	r4, r6
 8005744:	d3f7      	bcc.n	8005736 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005746:	4a0d      	ldr	r2, [pc, #52]	; (800577c <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005748:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800574c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005754:	4628      	mov	r0, r5
 8005756:	f7ff ff6d 	bl	8005634 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800575a:	68ab      	ldr	r3, [r5, #8]
 800575c:	b90b      	cbnz	r3, 8005762 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800575e:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005762:	2301      	movs	r3, #1
 8005764:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005766:	2300      	movs	r3, #0
 8005768:	716b      	strb	r3, [r5, #5]
}
 800576a:	4640      	mov	r0, r8
 800576c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005770:	f04f 0802 	mov.w	r8, #2
 8005774:	e7f9      	b.n	800576a <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8005776:	f04f 0802 	mov.w	r8, #2
 800577a:	e7f6      	b.n	800576a <HAL_SUBGHZ_WriteRegisters+0x8a>
 800577c:	58000400 	.word	0x58000400

08005780 <HAL_SUBGHZ_ReadRegisters>:
{
 8005780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005784:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005786:	7980      	ldrb	r0, [r0, #6]
 8005788:	fa5f f880 	uxtb.w	r8, r0
 800578c:	f1b8 0f01 	cmp.w	r8, #1
 8005790:	d141      	bne.n	8005816 <HAL_SUBGHZ_ReadRegisters+0x96>
 8005792:	460c      	mov	r4, r1
 8005794:	4615      	mov	r5, r2
 8005796:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005798:	7973      	ldrb	r3, [r6, #5]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d03e      	beq.n	800581c <HAL_SUBGHZ_ReadRegisters+0x9c>
 800579e:	2301      	movs	r3, #1
 80057a0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80057a2:	4630      	mov	r0, r6
 80057a4:	f7ff ff72 	bl	800568c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057a8:	4a1e      	ldr	r2, [pc, #120]	; (8005824 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80057aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80057b6:	211d      	movs	r1, #29
 80057b8:	4630      	mov	r0, r6
 80057ba:	f7ff febf 	bl	800553c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80057be:	0a21      	lsrs	r1, r4, #8
 80057c0:	4630      	mov	r0, r6
 80057c2:	f7ff febb 	bl	800553c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80057c6:	b2e1      	uxtb	r1, r4
 80057c8:	4630      	mov	r0, r6
 80057ca:	f7ff feb7 	bl	800553c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80057ce:	2100      	movs	r1, #0
 80057d0:	4630      	mov	r0, r6
 80057d2:	f7ff feb3 	bl	800553c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80057d6:	2400      	movs	r4, #0
 80057d8:	e006      	b.n	80057e8 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80057da:	4629      	mov	r1, r5
 80057dc:	4630      	mov	r0, r6
 80057de:	f7ff fee9 	bl	80055b4 <SUBGHZSPI_Receive>
      pData++;
 80057e2:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80057e4:	3401      	adds	r4, #1
 80057e6:	b2a4      	uxth	r4, r4
 80057e8:	42bc      	cmp	r4, r7
 80057ea:	d3f6      	bcc.n	80057da <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057ec:	4a0d      	ldr	r2, [pc, #52]	; (8005824 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80057ee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80057f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80057fa:	4630      	mov	r0, r6
 80057fc:	f7ff ff1a 	bl	8005634 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005800:	68b3      	ldr	r3, [r6, #8]
 8005802:	b90b      	cbnz	r3, 8005808 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8005804:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005808:	2301      	movs	r3, #1
 800580a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800580c:	2300      	movs	r3, #0
 800580e:	7173      	strb	r3, [r6, #5]
}
 8005810:	4640      	mov	r0, r8
 8005812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005816:	f04f 0802 	mov.w	r8, #2
 800581a:	e7f9      	b.n	8005810 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 800581c:	f04f 0802 	mov.w	r8, #2
 8005820:	e7f6      	b.n	8005810 <HAL_SUBGHZ_ReadRegisters+0x90>
 8005822:	bf00      	nop
 8005824:	58000400 	.word	0x58000400

08005828 <HAL_SUBGHZ_ExecSetCmd>:
{
 8005828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800582c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800582e:	7980      	ldrb	r0, [r0, #6]
 8005830:	fa5f f980 	uxtb.w	r9, r0
 8005834:	f1b9 0f01 	cmp.w	r9, #1
 8005838:	d143      	bne.n	80058c2 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 800583a:	4688      	mov	r8, r1
 800583c:	4617      	mov	r7, r2
 800583e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005840:	796b      	ldrb	r3, [r5, #5]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d040      	beq.n	80058c8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8005846:	2301      	movs	r3, #1
 8005848:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800584a:	4628      	mov	r0, r5
 800584c:	f7ff ff1e 	bl	800568c <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005850:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005854:	d005      	beq.n	8005862 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8005856:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 800585a:	d002      	beq.n	8005862 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800585c:	2300      	movs	r3, #0
 800585e:	712b      	strb	r3, [r5, #4]
 8005860:	e001      	b.n	8005866 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005862:	2301      	movs	r3, #1
 8005864:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005866:	4a1a      	ldr	r2, [pc, #104]	; (80058d0 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005868:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800586c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005874:	4641      	mov	r1, r8
 8005876:	4628      	mov	r0, r5
 8005878:	f7ff fe60 	bl	800553c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800587c:	2400      	movs	r4, #0
 800587e:	e005      	b.n	800588c <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005880:	5d39      	ldrb	r1, [r7, r4]
 8005882:	4628      	mov	r0, r5
 8005884:	f7ff fe5a 	bl	800553c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005888:	3401      	adds	r4, #1
 800588a:	b2a4      	uxth	r4, r4
 800588c:	42b4      	cmp	r4, r6
 800588e:	d3f7      	bcc.n	8005880 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005890:	4a0f      	ldr	r2, [pc, #60]	; (80058d0 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005892:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 800589e:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80058a2:	d10a      	bne.n	80058ba <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80058a4:	68ab      	ldr	r3, [r5, #8]
 80058a6:	b90b      	cbnz	r3, 80058ac <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 80058a8:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80058ac:	2301      	movs	r3, #1
 80058ae:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80058b0:	2300      	movs	r3, #0
 80058b2:	716b      	strb	r3, [r5, #5]
}
 80058b4:	4648      	mov	r0, r9
 80058b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80058ba:	4628      	mov	r0, r5
 80058bc:	f7ff feba 	bl	8005634 <SUBGHZ_WaitOnBusy>
 80058c0:	e7f0      	b.n	80058a4 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 80058c2:	f04f 0902 	mov.w	r9, #2
 80058c6:	e7f5      	b.n	80058b4 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80058c8:	f04f 0902 	mov.w	r9, #2
 80058cc:	e7f2      	b.n	80058b4 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 80058ce:	bf00      	nop
 80058d0:	58000400 	.word	0x58000400

080058d4 <HAL_SUBGHZ_ExecGetCmd>:
{
 80058d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d8:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80058da:	7980      	ldrb	r0, [r0, #6]
 80058dc:	fa5f f880 	uxtb.w	r8, r0
 80058e0:	f1b8 0f01 	cmp.w	r8, #1
 80058e4:	d139      	bne.n	800595a <HAL_SUBGHZ_ExecGetCmd+0x86>
 80058e6:	460c      	mov	r4, r1
 80058e8:	4615      	mov	r5, r2
 80058ea:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80058ec:	7973      	ldrb	r3, [r6, #5]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d036      	beq.n	8005960 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 80058f2:	2301      	movs	r3, #1
 80058f4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80058f6:	4630      	mov	r0, r6
 80058f8:	f7ff fec8 	bl	800568c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80058fc:	4a1a      	ldr	r2, [pc, #104]	; (8005968 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80058fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005902:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800590a:	4621      	mov	r1, r4
 800590c:	4630      	mov	r0, r6
 800590e:	f7ff fe15 	bl	800553c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005912:	2100      	movs	r1, #0
 8005914:	4630      	mov	r0, r6
 8005916:	f7ff fe11 	bl	800553c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800591a:	2400      	movs	r4, #0
 800591c:	e006      	b.n	800592c <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800591e:	4629      	mov	r1, r5
 8005920:	4630      	mov	r0, r6
 8005922:	f7ff fe47 	bl	80055b4 <SUBGHZSPI_Receive>
      pData++;
 8005926:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005928:	3401      	adds	r4, #1
 800592a:	b2a4      	uxth	r4, r4
 800592c:	42bc      	cmp	r4, r7
 800592e:	d3f6      	bcc.n	800591e <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005930:	4a0d      	ldr	r2, [pc, #52]	; (8005968 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005932:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800593a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800593e:	4630      	mov	r0, r6
 8005940:	f7ff fe78 	bl	8005634 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005944:	68b3      	ldr	r3, [r6, #8]
 8005946:	b90b      	cbnz	r3, 800594c <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005948:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800594c:	2301      	movs	r3, #1
 800594e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005950:	2300      	movs	r3, #0
 8005952:	7173      	strb	r3, [r6, #5]
}
 8005954:	4640      	mov	r0, r8
 8005956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800595a:	f04f 0802 	mov.w	r8, #2
 800595e:	e7f9      	b.n	8005954 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8005960:	f04f 0802 	mov.w	r8, #2
 8005964:	e7f6      	b.n	8005954 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8005966:	bf00      	nop
 8005968:	58000400 	.word	0x58000400

0800596c <HAL_SUBGHZ_IRQHandler>:
{
 800596c:	b530      	push	{r4, r5, lr}
 800596e:	b083      	sub	sp, #12
 8005970:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8005972:	2300      	movs	r3, #0
 8005974:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005978:	2302      	movs	r3, #2
 800597a:	aa01      	add	r2, sp, #4
 800597c:	2112      	movs	r1, #18
 800597e:	f7ff ffa9 	bl	80058d4 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005982:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005986:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800598a:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800598e:	f013 0f01 	tst.w	r3, #1
 8005992:	d126      	bne.n	80059e2 <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005994:	f014 0f02 	tst.w	r4, #2
 8005998:	d127      	bne.n	80059ea <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800599a:	f014 0f04 	tst.w	r4, #4
 800599e:	d128      	bne.n	80059f2 <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80059a0:	f014 0f08 	tst.w	r4, #8
 80059a4:	d129      	bne.n	80059fa <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80059a6:	f014 0f10 	tst.w	r4, #16
 80059aa:	d12a      	bne.n	8005a02 <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80059ac:	f014 0f20 	tst.w	r4, #32
 80059b0:	d12b      	bne.n	8005a0a <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80059b2:	f014 0f40 	tst.w	r4, #64	; 0x40
 80059b6:	d12c      	bne.n	8005a12 <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80059b8:	f014 0f80 	tst.w	r4, #128	; 0x80
 80059bc:	d006      	beq.n	80059cc <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80059be:	f414 7f80 	tst.w	r4, #256	; 0x100
 80059c2:	d02a      	beq.n	8005a1a <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80059c4:	2101      	movs	r1, #1
 80059c6:	4628      	mov	r0, r5
 80059c8:	f00a fb5c 	bl	8010084 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80059cc:	f414 7f00 	tst.w	r4, #512	; 0x200
 80059d0:	d128      	bne.n	8005a24 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80059d2:	2302      	movs	r3, #2
 80059d4:	aa01      	add	r2, sp, #4
 80059d6:	4619      	mov	r1, r3
 80059d8:	4628      	mov	r0, r5
 80059da:	f7ff ff25 	bl	8005828 <HAL_SUBGHZ_ExecSetCmd>
}
 80059de:	b003      	add	sp, #12
 80059e0:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80059e2:	4628      	mov	r0, r5
 80059e4:	f00a fb36 	bl	8010054 <HAL_SUBGHZ_TxCpltCallback>
 80059e8:	e7d4      	b.n	8005994 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80059ea:	4628      	mov	r0, r5
 80059ec:	f00a fb3a 	bl	8010064 <HAL_SUBGHZ_RxCpltCallback>
 80059f0:	e7d3      	b.n	800599a <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80059f2:	4628      	mov	r0, r5
 80059f4:	f00a fb6a 	bl	80100cc <HAL_SUBGHZ_PreambleDetectedCallback>
 80059f8:	e7d2      	b.n	80059a0 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80059fa:	4628      	mov	r0, r5
 80059fc:	f00a fb6e 	bl	80100dc <HAL_SUBGHZ_SyncWordValidCallback>
 8005a00:	e7d1      	b.n	80059a6 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005a02:	4628      	mov	r0, r5
 8005a04:	f00a fb72 	bl	80100ec <HAL_SUBGHZ_HeaderValidCallback>
 8005a08:	e7d0      	b.n	80059ac <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f00a fb56 	bl	80100bc <HAL_SUBGHZ_HeaderErrorCallback>
 8005a10:	e7cf      	b.n	80059b2 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005a12:	4628      	mov	r0, r5
 8005a14:	f00a fb2e 	bl	8010074 <HAL_SUBGHZ_CRCErrorCallback>
 8005a18:	e7ce      	b.n	80059b8 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	f00a fb31 	bl	8010084 <HAL_SUBGHZ_CADStatusCallback>
 8005a22:	e7d3      	b.n	80059cc <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005a24:	4628      	mov	r0, r5
 8005a26:	f00a fb3f 	bl	80100a8 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8005a2a:	e7d2      	b.n	80059d2 <HAL_SUBGHZ_IRQHandler+0x66>

08005a2c <HAL_SUBGHZ_WriteBuffer>:
{
 8005a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a30:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a32:	7980      	ldrb	r0, [r0, #6]
 8005a34:	fa5f f880 	uxtb.w	r8, r0
 8005a38:	f1b8 0f01 	cmp.w	r8, #1
 8005a3c:	d138      	bne.n	8005ab0 <HAL_SUBGHZ_WriteBuffer+0x84>
 8005a3e:	460c      	mov	r4, r1
 8005a40:	4617      	mov	r7, r2
 8005a42:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005a44:	796b      	ldrb	r3, [r5, #5]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d035      	beq.n	8005ab6 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f7ff fe1c 	bl	800568c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a54:	4a19      	ldr	r2, [pc, #100]	; (8005abc <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005a56:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005a62:	210e      	movs	r1, #14
 8005a64:	4628      	mov	r0, r5
 8005a66:	f7ff fd69 	bl	800553c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	f7ff fd65 	bl	800553c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a72:	2400      	movs	r4, #0
 8005a74:	e005      	b.n	8005a82 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005a76:	5d39      	ldrb	r1, [r7, r4]
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f7ff fd5f 	bl	800553c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a7e:	3401      	adds	r4, #1
 8005a80:	b2a4      	uxth	r4, r4
 8005a82:	42b4      	cmp	r4, r6
 8005a84:	d3f7      	bcc.n	8005a76 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005a86:	4a0d      	ldr	r2, [pc, #52]	; (8005abc <HAL_SUBGHZ_WriteBuffer+0x90>)
 8005a88:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a94:	4628      	mov	r0, r5
 8005a96:	f7ff fdcd 	bl	8005634 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a9a:	68ab      	ldr	r3, [r5, #8]
 8005a9c:	b90b      	cbnz	r3, 8005aa2 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8005a9e:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	716b      	strb	r3, [r5, #5]
}
 8005aaa:	4640      	mov	r0, r8
 8005aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005ab0:	f04f 0802 	mov.w	r8, #2
 8005ab4:	e7f9      	b.n	8005aaa <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8005ab6:	f04f 0802 	mov.w	r8, #2
 8005aba:	e7f6      	b.n	8005aaa <HAL_SUBGHZ_WriteBuffer+0x7e>
 8005abc:	58000400 	.word	0x58000400

08005ac0 <HAL_SUBGHZ_ReadBuffer>:
{
 8005ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac4:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005ac6:	7980      	ldrb	r0, [r0, #6]
 8005ac8:	fa5f f880 	uxtb.w	r8, r0
 8005acc:	f1b8 0f01 	cmp.w	r8, #1
 8005ad0:	d13d      	bne.n	8005b4e <HAL_SUBGHZ_ReadBuffer+0x8e>
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	4615      	mov	r5, r2
 8005ad6:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005ad8:	7973      	ldrb	r3, [r6, #5]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d03a      	beq.n	8005b54 <HAL_SUBGHZ_ReadBuffer+0x94>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f7ff fdd2 	bl	800568c <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005ae8:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005aea:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005aee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005af6:	211e      	movs	r1, #30
 8005af8:	4630      	mov	r0, r6
 8005afa:	f7ff fd1f 	bl	800553c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005afe:	4621      	mov	r1, r4
 8005b00:	4630      	mov	r0, r6
 8005b02:	f7ff fd1b 	bl	800553c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005b06:	2100      	movs	r1, #0
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f7ff fd17 	bl	800553c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005b0e:	2400      	movs	r4, #0
 8005b10:	e006      	b.n	8005b20 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005b12:	4629      	mov	r1, r5
 8005b14:	4630      	mov	r0, r6
 8005b16:	f7ff fd4d 	bl	80055b4 <SUBGHZSPI_Receive>
      pData++;
 8005b1a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005b1c:	3401      	adds	r4, #1
 8005b1e:	b2a4      	uxth	r4, r4
 8005b20:	42bc      	cmp	r4, r7
 8005b22:	d3f6      	bcc.n	8005b12 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005b24:	4a0d      	ldr	r2, [pc, #52]	; (8005b5c <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8005b26:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005b32:	4630      	mov	r0, r6
 8005b34:	f7ff fd7e 	bl	8005634 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005b38:	68b3      	ldr	r3, [r6, #8]
 8005b3a:	b90b      	cbnz	r3, 8005b40 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8005b3c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b40:	2301      	movs	r3, #1
 8005b42:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005b44:	2300      	movs	r3, #0
 8005b46:	7173      	strb	r3, [r6, #5]
}
 8005b48:	4640      	mov	r0, r8
 8005b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005b4e:	f04f 0802 	mov.w	r8, #2
 8005b52:	e7f9      	b.n	8005b48 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8005b54:	f04f 0802 	mov.w	r8, #2
 8005b58:	e7f6      	b.n	8005b48 <HAL_SUBGHZ_ReadBuffer+0x88>
 8005b5a:	bf00      	nop
 8005b5c:	58000400 	.word	0x58000400

08005b60 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005b60:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	e852 3f00 	ldrex	r3, [r2]
 8005b66:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	e842 3100 	strex	r1, r3, [r2]
 8005b6e:	2900      	cmp	r1, #0
 8005b70:	d1f6      	bne.n	8005b60 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005b72:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b74:	f102 0308 	add.w	r3, r2, #8
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	3208      	adds	r2, #8
 8005b82:	e842 3100 	strex	r1, r3, [r2]
 8005b86:	2900      	cmp	r1, #0
 8005b88:	d1f3      	bne.n	8005b72 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b8a:	2320      	movs	r3, #32
 8005b8c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8005b90:	4770      	bx	lr

08005b92 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b92:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	e852 3f00 	ldrex	r3, [r2]
 8005b98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	e842 3100 	strex	r1, r3, [r2]
 8005ba0:	2900      	cmp	r1, #0
 8005ba2:	d1f6      	bne.n	8005b92 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ba4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	f102 0308 	add.w	r3, r2, #8
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	3208      	adds	r2, #8
 8005bb8:	e842 3100 	strex	r1, r3, [r2]
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	d1f1      	bne.n	8005ba4 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d006      	beq.n	8005bd4 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bc6:	2320      	movs	r3, #32
 8005bc8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bd0:	6703      	str	r3, [r0, #112]	; 0x70
}
 8005bd2:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	e852 3f00 	ldrex	r3, [r2]
 8005bda:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	e842 3100 	strex	r1, r3, [r2]
 8005be2:	2900      	cmp	r1, #0
 8005be4:	d1f6      	bne.n	8005bd4 <UART_EndRxTransfer+0x42>
 8005be6:	e7ee      	b.n	8005bc6 <UART_EndRxTransfer+0x34>

08005be8 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8005be8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d14c      	bne.n	8005c8a <HAL_UART_Transmit_DMA+0xa2>
{
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	d04a      	beq.n	8005c8e <HAL_UART_Transmit_DMA+0xa6>
 8005bf8:	2a00      	cmp	r2, #0
 8005bfa:	d04a      	beq.n	8005c92 <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8005bfc:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d048      	beq.n	8005c96 <HAL_UART_Transmit_DMA+0xae>
 8005c04:	2301      	movs	r3, #1
 8005c06:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8005c0a:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005c0c:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8005c10:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c14:	2300      	movs	r3, #0
 8005c16:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c1a:	2321      	movs	r3, #33	; 0x21
 8005c1c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8005c20:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005c22:	b1f3      	cbz	r3, 8005c62 <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005c24:	491d      	ldr	r1, [pc, #116]	; (8005c9c <HAL_UART_Transmit_DMA+0xb4>)
 8005c26:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005c28:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005c2a:	491d      	ldr	r1, [pc, #116]	; (8005ca0 <HAL_UART_Transmit_DMA+0xb8>)
 8005c2c:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005c2e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005c30:	491c      	ldr	r1, [pc, #112]	; (8005ca4 <HAL_UART_Transmit_DMA+0xbc>)
 8005c32:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8005c34:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005c36:	2100      	movs	r1, #0
 8005c38:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005c3a:	6801      	ldr	r1, [r0, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	f101 0228 	add.w	r2, r1, #40	; 0x28
 8005c42:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005c44:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005c46:	f7fd fe07 	bl	8003858 <HAL_DMA_Start_IT>
 8005c4a:	b150      	cbz	r0, 8005c62 <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c4c:	2310      	movs	r3, #16
 8005c4e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8005c52:	2300      	movs	r3, #0
 8005c54:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8005c58:	2320      	movs	r3, #32
 8005c5a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8005c5e:	2001      	movs	r0, #1
 8005c60:	e012      	b.n	8005c88 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	2240      	movs	r2, #64	; 0x40
 8005c66:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	f102 0308 	add.w	r3, r2, #8
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	3208      	adds	r2, #8
 8005c7e:	e842 3100 	strex	r1, r3, [r2]
 8005c82:	2900      	cmp	r1, #0
 8005c84:	d1f3      	bne.n	8005c6e <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8005c86:	2000      	movs	r0, #0
}
 8005c88:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005c8a:	2002      	movs	r0, #2
}
 8005c8c:	4770      	bx	lr
      return HAL_ERROR;
 8005c8e:	2001      	movs	r0, #1
 8005c90:	e7fa      	b.n	8005c88 <HAL_UART_Transmit_DMA+0xa0>
 8005c92:	2001      	movs	r0, #1
 8005c94:	e7f8      	b.n	8005c88 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8005c96:	2002      	movs	r0, #2
 8005c98:	e7f6      	b.n	8005c88 <HAL_UART_Transmit_DMA+0xa0>
 8005c9a:	bf00      	nop
 8005c9c:	08005ca9 	.word	0x08005ca9
 8005ca0:	08005d17 	.word	0x08005d17
 8005ca4:	08005d23 	.word	0x08005d23

08005ca8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ca8:	b508      	push	{r3, lr}
 8005caa:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cac:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f013 0f20 	tst.w	r3, #32
 8005cb6:	d118      	bne.n	8005cea <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cbe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	f102 0308 	add.w	r3, r2, #8
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ccc:	3208      	adds	r2, #8
 8005cce:	e842 3100 	strex	r1, r3, [r2]
 8005cd2:	2900      	cmp	r1, #0
 8005cd4:	d1f3      	bne.n	8005cbe <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cd6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	e852 3f00 	ldrex	r3, [r2]
 8005cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce0:	e842 3100 	strex	r1, r3, [r2]
 8005ce4:	2900      	cmp	r1, #0
 8005ce6:	d1f6      	bne.n	8005cd6 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ce8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005cea:	f7fb ffeb 	bl	8001cc4 <HAL_UART_TxCpltCallback>
}
 8005cee:	e7fb      	b.n	8005ce8 <UART_DMATransmitCplt+0x40>

08005cf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cf0:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cf2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	e852 3f00 	ldrex	r3, [r2]
 8005cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfc:	e842 3100 	strex	r1, r3, [r2]
 8005d00:	2900      	cmp	r1, #0
 8005d02:	d1f6      	bne.n	8005cf2 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d04:	2320      	movs	r3, #32
 8005d06:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d0e:	f7fb ffd9 	bl	8001cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d12:	bd08      	pop	{r3, pc}

08005d14 <HAL_UART_TxHalfCpltCallback>:
}
 8005d14:	4770      	bx	lr

08005d16 <UART_DMATxHalfCplt>:
{
 8005d16:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005d18:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8005d1a:	f7ff fffb 	bl	8005d14 <HAL_UART_TxHalfCpltCallback>
}
 8005d1e:	bd08      	pop	{r3, pc}

08005d20 <HAL_UART_ErrorCallback>:
}
 8005d20:	4770      	bx	lr

08005d22 <UART_DMAError>:
{
 8005d22:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d24:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005d26:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005d2a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005d2e:	6823      	ldr	r3, [r4, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d36:	d001      	beq.n	8005d3c <UART_DMAError+0x1a>
 8005d38:	2a21      	cmp	r2, #33	; 0x21
 8005d3a:	d010      	beq.n	8005d5e <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d44:	d001      	beq.n	8005d4a <UART_DMAError+0x28>
 8005d46:	2d22      	cmp	r5, #34	; 0x22
 8005d48:	d010      	beq.n	8005d6c <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d4a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005d4e:	f043 0310 	orr.w	r3, r3, #16
 8005d52:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8005d56:	4620      	mov	r0, r4
 8005d58:	f7ff ffe2 	bl	8005d20 <HAL_UART_ErrorCallback>
}
 8005d5c:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005d64:	4620      	mov	r0, r4
 8005d66:	f7ff fefb 	bl	8005b60 <UART_EndTxTransfer>
 8005d6a:	e7e7      	b.n	8005d3c <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8005d72:	4620      	mov	r0, r4
 8005d74:	f7ff ff0d 	bl	8005b92 <UART_EndRxTransfer>
 8005d78:	e7e7      	b.n	8005d4a <UART_DMAError+0x28>

08005d7a <UART_DMAAbortOnError>:
{
 8005d7a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d7c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005d84:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8005d88:	f7ff ffca 	bl	8005d20 <HAL_UART_ErrorCallback>
}
 8005d8c:	bd08      	pop	{r3, pc}

08005d8e <HAL_UARTEx_RxEventCallback>:
}
 8005d8e:	4770      	bx	lr

08005d90 <HAL_UART_IRQHandler>:
{
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d94:	6801      	ldr	r1, [r0, #0]
 8005d96:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d98:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d9a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d9c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8005da0:	401a      	ands	r2, r3
 8005da2:	d108      	bne.n	8005db6 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005da4:	f013 0f20 	tst.w	r3, #32
 8005da8:	d005      	beq.n	8005db6 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005daa:	f010 0f20 	tst.w	r0, #32
 8005dae:	d134      	bne.n	8005e1a <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005db0:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005db4:	d131      	bne.n	8005e1a <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8005db6:	b12a      	cbz	r2, 8005dc4 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005db8:	4a95      	ldr	r2, [pc, #596]	; (8006010 <HAL_UART_IRQHandler+0x280>)
 8005dba:	402a      	ands	r2, r5
 8005dbc:	d133      	bne.n	8005e26 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005dbe:	4e95      	ldr	r6, [pc, #596]	; (8006014 <HAL_UART_IRQHandler+0x284>)
 8005dc0:	4230      	tst	r0, r6
 8005dc2:	d130      	bne.n	8005e26 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8005dc6:	2a01      	cmp	r2, #1
 8005dc8:	f000 80c3 	beq.w	8005f52 <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dcc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005dd0:	d003      	beq.n	8005dda <HAL_UART_IRQHandler+0x4a>
 8005dd2:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8005dd6:	f040 815b 	bne.w	8006090 <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005dda:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005dde:	d007      	beq.n	8005df0 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005de0:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005de4:	f040 815b 	bne.w	800609e <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005de8:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8005dec:	f040 8157 	bne.w	800609e <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005df0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005df4:	d003      	beq.n	8005dfe <HAL_UART_IRQHandler+0x6e>
 8005df6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dfa:	f040 8157 	bne.w	80060ac <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005dfe:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005e02:	d003      	beq.n	8005e0c <HAL_UART_IRQHandler+0x7c>
 8005e04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005e08:	f040 8154 	bne.w	80060b4 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005e0c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8005e10:	d002      	beq.n	8005e18 <HAL_UART_IRQHandler+0x88>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	f2c0 8152 	blt.w	80060bc <HAL_UART_IRQHandler+0x32c>
}
 8005e18:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8005e1a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0fb      	beq.n	8005e18 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8005e20:	4620      	mov	r0, r4
 8005e22:	4798      	blx	r3
      return;
 8005e24:	e7f8      	b.n	8005e18 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e26:	f013 0f01 	tst.w	r3, #1
 8005e2a:	d009      	beq.n	8005e40 <HAL_UART_IRQHandler+0xb0>
 8005e2c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005e30:	d006      	beq.n	8005e40 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e32:	2601      	movs	r6, #1
 8005e34:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e36:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005e3a:	4331      	orrs	r1, r6
 8005e3c:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e40:	f013 0f02 	tst.w	r3, #2
 8005e44:	d00b      	beq.n	8005e5e <HAL_UART_IRQHandler+0xce>
 8005e46:	f015 0f01 	tst.w	r5, #1
 8005e4a:	d008      	beq.n	8005e5e <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e4c:	6821      	ldr	r1, [r4, #0]
 8005e4e:	2602      	movs	r6, #2
 8005e50:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e52:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005e56:	f041 0104 	orr.w	r1, r1, #4
 8005e5a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e5e:	f013 0f04 	tst.w	r3, #4
 8005e62:	d00b      	beq.n	8005e7c <HAL_UART_IRQHandler+0xec>
 8005e64:	f015 0f01 	tst.w	r5, #1
 8005e68:	d008      	beq.n	8005e7c <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e6a:	6821      	ldr	r1, [r4, #0]
 8005e6c:	2604      	movs	r6, #4
 8005e6e:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e70:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8005e74:	f041 0102 	orr.w	r1, r1, #2
 8005e78:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e7c:	f013 0f08 	tst.w	r3, #8
 8005e80:	d00b      	beq.n	8005e9a <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e82:	f010 0f20 	tst.w	r0, #32
 8005e86:	d100      	bne.n	8005e8a <HAL_UART_IRQHandler+0xfa>
 8005e88:	b13a      	cbz	r2, 8005e9a <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e8a:	6822      	ldr	r2, [r4, #0]
 8005e8c:	2108      	movs	r1, #8
 8005e8e:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e90:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005e94:	430a      	orrs	r2, r1
 8005e96:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e9a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005e9e:	d00c      	beq.n	8005eba <HAL_UART_IRQHandler+0x12a>
 8005ea0:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8005ea4:	d009      	beq.n	8005eba <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005eac:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005eae:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005eb2:	f042 0220 	orr.w	r2, r2, #32
 8005eb6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eba:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8005ebe:	2a00      	cmp	r2, #0
 8005ec0:	d0aa      	beq.n	8005e18 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ec2:	f013 0f20 	tst.w	r3, #32
 8005ec6:	d009      	beq.n	8005edc <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ec8:	f010 0f20 	tst.w	r0, #32
 8005ecc:	d102      	bne.n	8005ed4 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ece:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8005ed2:	d003      	beq.n	8005edc <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8005ed4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005ed6:	b10b      	cbz	r3, 8005edc <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8005ed8:	4620      	mov	r0, r4
 8005eda:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8005edc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ee8:	d102      	bne.n	8005ef0 <HAL_UART_IRQHandler+0x160>
 8005eea:	f012 0f28 	tst.w	r2, #40	; 0x28
 8005eee:	d029      	beq.n	8005f44 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f7ff fe4e 	bl	8005b92 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005efe:	d01d      	beq.n	8005f3c <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f00:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	f102 0308 	add.w	r3, r2, #8
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	3208      	adds	r2, #8
 8005f10:	e842 3100 	strex	r1, r3, [r2]
 8005f14:	2900      	cmp	r1, #0
 8005f16:	d1f3      	bne.n	8005f00 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8005f18:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005f1a:	b15b      	cbz	r3, 8005f34 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f1c:	4a3e      	ldr	r2, [pc, #248]	; (8006018 <HAL_UART_IRQHandler+0x288>)
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f20:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005f22:	f7fd fd1f 	bl	8003964 <HAL_DMA_Abort_IT>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	f43f af76 	beq.w	8005e18 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f2c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005f2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005f30:	4798      	blx	r3
 8005f32:	e771      	b.n	8005e18 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8005f34:	4620      	mov	r0, r4
 8005f36:	f7ff fef3 	bl	8005d20 <HAL_UART_ErrorCallback>
 8005f3a:	e76d      	b.n	8005e18 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f7ff feef 	bl	8005d20 <HAL_UART_ErrorCallback>
 8005f42:	e769      	b.n	8005e18 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8005f44:	4620      	mov	r0, r4
 8005f46:	f7ff feeb 	bl	8005d20 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8005f50:	e762      	b.n	8005e18 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005f52:	f013 0f10 	tst.w	r3, #16
 8005f56:	f43f af39 	beq.w	8005dcc <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005f5a:	f010 0f10 	tst.w	r0, #16
 8005f5e:	f43f af35 	beq.w	8005dcc <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f62:	2310      	movs	r3, #16
 8005f64:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f6e:	d055      	beq.n	800601c <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f70:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8005f72:	6813      	ldr	r3, [r2, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f43f af4d 	beq.w	8005e18 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005f7e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005f82:	4299      	cmp	r1, r3
 8005f84:	f67f af48 	bls.w	8005e18 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8005f88:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005f8c:	6813      	ldr	r3, [r2, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f013 0f20 	tst.w	r3, #32
 8005f94:	d131      	bne.n	8005ffa <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f96:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	e852 3f00 	ldrex	r3, [r2]
 8005f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	e842 3100 	strex	r1, r3, [r2]
 8005fa4:	2900      	cmp	r1, #0
 8005fa6:	d1f6      	bne.n	8005f96 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005faa:	f102 0308 	add.w	r3, r2, #8
 8005fae:	e853 3f00 	ldrex	r3, [r3]
 8005fb2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	3208      	adds	r2, #8
 8005fb8:	e842 3100 	strex	r1, r3, [r2]
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	d1f3      	bne.n	8005fa8 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	f102 0308 	add.w	r3, r2, #8
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	3208      	adds	r2, #8
 8005fd0:	e842 3100 	strex	r1, r3, [r2]
 8005fd4:	2900      	cmp	r1, #0
 8005fd6:	d1f3      	bne.n	8005fc0 <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8005fd8:	2320      	movs	r3, #32
 8005fda:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	e852 3f00 	ldrex	r3, [r2]
 8005fe8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	e842 3100 	strex	r1, r3, [r2]
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	d1f6      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ff4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005ff6:	f7fd fc7b 	bl	80038f0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ffa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005ffe:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006002:	b29b      	uxth	r3, r3
 8006004:	1ac9      	subs	r1, r1, r3
 8006006:	b289      	uxth	r1, r1
 8006008:	4620      	mov	r0, r4
 800600a:	f7ff fec0 	bl	8005d8e <HAL_UARTEx_RxEventCallback>
      return;
 800600e:	e703      	b.n	8005e18 <HAL_UART_IRQHandler+0x88>
 8006010:	10000001 	.word	0x10000001
 8006014:	04000120 	.word	0x04000120
 8006018:	08005d7b 	.word	0x08005d7b
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800601c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006020:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006024:	b29b      	uxth	r3, r3
 8006026:	1ac9      	subs	r1, r1, r3
 8006028:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 800602a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	f43f aef1 	beq.w	8005e18 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8006036:	2900      	cmp	r1, #0
 8006038:	f43f aeee 	beq.w	8005e18 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800603c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	e852 3f00 	ldrex	r3, [r2]
 8006042:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	e842 3000 	strex	r0, r3, [r2]
 800604a:	2800      	cmp	r0, #0
 800604c:	d1f6      	bne.n	800603c <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800604e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006050:	f102 0308 	add.w	r3, r2, #8
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800605c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	3208      	adds	r2, #8
 8006062:	e842 3000 	strex	r0, r3, [r2]
 8006066:	2800      	cmp	r0, #0
 8006068:	d1f1      	bne.n	800604e <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 800606a:	2320      	movs	r3, #32
 800606c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006070:	2300      	movs	r3, #0
 8006072:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8006074:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006076:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	e852 3f00 	ldrex	r3, [r2]
 800607c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	e842 3000 	strex	r0, r3, [r2]
 8006084:	2800      	cmp	r0, #0
 8006086:	d1f6      	bne.n	8006076 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006088:	4620      	mov	r0, r4
 800608a:	f7ff fe80 	bl	8005d8e <HAL_UARTEx_RxEventCallback>
      return;
 800608e:	e6c3      	b.n	8005e18 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006090:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006094:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006096:	4620      	mov	r0, r4
 8006098:	f000 fe1c 	bl	8006cd4 <HAL_UARTEx_WakeupCallback>
    return;
 800609c:	e6bc      	b.n	8005e18 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 800609e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f43f aeb9 	beq.w	8005e18 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 80060a6:	4620      	mov	r0, r4
 80060a8:	4798      	blx	r3
    return;
 80060aa:	e6b5      	b.n	8005e18 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 80060ac:	4620      	mov	r0, r4
 80060ae:	f7ff fe1f 	bl	8005cf0 <UART_EndTransmit_IT>
    return;
 80060b2:	e6b1      	b.n	8005e18 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060b4:	4620      	mov	r0, r4
 80060b6:	f000 fe0f 	bl	8006cd8 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80060ba:	e6ad      	b.n	8005e18 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80060bc:	4620      	mov	r0, r4
 80060be:	f000 fe0a 	bl	8006cd6 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80060c2:	e6a9      	b.n	8005e18 <HAL_UART_IRQHandler+0x88>

080060c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060c4:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80060c6:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ca:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80060ce:	2a22      	cmp	r2, #34	; 0x22
 80060d0:	d005      	beq.n	80060de <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060d2:	6802      	ldr	r2, [r0, #0]
 80060d4:	6993      	ldr	r3, [r2, #24]
 80060d6:	f043 0308 	orr.w	r3, r3, #8
 80060da:	6193      	str	r3, [r2, #24]
  }
}
 80060dc:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80060de:	6802      	ldr	r2, [r0, #0]
 80060e0:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80060e6:	400b      	ands	r3, r1
 80060e8:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80060ea:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80060ec:	3301      	adds	r3, #1
 80060ee:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80060f0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80060fe:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e9      	bne.n	80060dc <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006108:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	e852 3f00 	ldrex	r3, [r2]
 800610e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	e842 3100 	strex	r1, r3, [r2]
 8006116:	2900      	cmp	r1, #0
 8006118:	d1f6      	bne.n	8006108 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	f102 0308 	add.w	r3, r2, #8
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	3208      	adds	r2, #8
 800612a:	e842 3100 	strex	r1, r3, [r2]
 800612e:	2900      	cmp	r1, #0
 8006130:	d1f3      	bne.n	800611a <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8006132:	2320      	movs	r3, #32
 8006134:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8006138:	2300      	movs	r3, #0
 800613a:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800613c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d116      	bne.n	8006170 <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006142:	2300      	movs	r3, #0
 8006144:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006146:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	e852 3f00 	ldrex	r3, [r2]
 800614c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	e842 3100 	strex	r1, r3, [r2]
 8006154:	2900      	cmp	r1, #0
 8006156:	d1f6      	bne.n	8006146 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006158:	6803      	ldr	r3, [r0, #0]
 800615a:	69da      	ldr	r2, [r3, #28]
 800615c:	f012 0f10 	tst.w	r2, #16
 8006160:	d001      	beq.n	8006166 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006162:	2210      	movs	r2, #16
 8006164:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006166:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800616a:	f7ff fe10 	bl	8005d8e <HAL_UARTEx_RxEventCallback>
 800616e:	e7b5      	b.n	80060dc <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006170:	f7fb fdb8 	bl	8001ce4 <HAL_UART_RxCpltCallback>
 8006174:	e7b2      	b.n	80060dc <UART_RxISR_8BIT+0x18>

08006176 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006176:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006178:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800617c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006180:	2b22      	cmp	r3, #34	; 0x22
 8006182:	d005      	beq.n	8006190 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006184:	6802      	ldr	r2, [r0, #0]
 8006186:	6993      	ldr	r3, [r2, #24]
 8006188:	f043 0308 	orr.w	r3, r3, #8
 800618c:	6193      	str	r3, [r2, #24]
  }
}
 800618e:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006190:	6803      	ldr	r3, [r0, #0]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006194:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8006196:	4013      	ands	r3, r2
 8006198:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800619a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800619c:	3302      	adds	r3, #2
 800619e:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80061a0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80061ae:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1ea      	bne.n	800618e <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061b8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	e852 3f00 	ldrex	r3, [r2]
 80061be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c2:	e842 3100 	strex	r1, r3, [r2]
 80061c6:	2900      	cmp	r1, #0
 80061c8:	d1f6      	bne.n	80061b8 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061cc:	f102 0308 	add.w	r3, r2, #8
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	3208      	adds	r2, #8
 80061da:	e842 3100 	strex	r1, r3, [r2]
 80061de:	2900      	cmp	r1, #0
 80061e0:	d1f3      	bne.n	80061ca <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 80061e2:	2320      	movs	r3, #32
 80061e4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d116      	bne.n	8006220 <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f2:	2300      	movs	r3, #0
 80061f4:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	e852 3f00 	ldrex	r3, [r2]
 80061fc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	e842 3100 	strex	r1, r3, [r2]
 8006204:	2900      	cmp	r1, #0
 8006206:	d1f6      	bne.n	80061f6 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006208:	6803      	ldr	r3, [r0, #0]
 800620a:	69da      	ldr	r2, [r3, #28]
 800620c:	f012 0f10 	tst.w	r2, #16
 8006210:	d001      	beq.n	8006216 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006212:	2210      	movs	r2, #16
 8006214:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006216:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800621a:	f7ff fdb8 	bl	8005d8e <HAL_UARTEx_RxEventCallback>
 800621e:	e7b6      	b.n	800618e <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006220:	f7fb fd60 	bl	8001ce4 <HAL_UART_RxCpltCallback>
 8006224:	e7b3      	b.n	800618e <UART_RxISR_16BIT+0x18>
	...

08006228 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 800622c:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006230:	6803      	ldr	r3, [r0, #0]
 8006232:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006234:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006238:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800623c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006240:	2a22      	cmp	r2, #34	; 0x22
 8006242:	d005      	beq.n	8006250 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006244:	699a      	ldr	r2, [r3, #24]
 8006246:	f042 0208 	orr.w	r2, r2, #8
 800624a:	619a      	str	r2, [r3, #24]
  }
}
 800624c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006250:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006252:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006256:	e008      	b.n	800626a <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006258:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800625c:	2b00      	cmp	r3, #0
 800625e:	d14c      	bne.n	80062fa <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8006260:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006264:	b29b      	uxth	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d04e      	beq.n	8006308 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800626a:	2f00      	cmp	r7, #0
 800626c:	f000 8087 	beq.w	800637e <UART_RxISR_8BIT_FIFOEN+0x156>
 8006270:	f015 0f20 	tst.w	r5, #32
 8006274:	f000 8083 	beq.w	800637e <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800627c:	b2f3      	uxtb	r3, r6
 800627e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006280:	400b      	ands	r3, r1
 8006282:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8006284:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006286:	3301      	adds	r3, #1
 8006288:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800628a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800628e:	b29b      	uxth	r3, r3
 8006290:	3b01      	subs	r3, #1
 8006292:	b29b      	uxth	r3, r3
 8006294:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800629c:	f015 0f07 	tst.w	r5, #7
 80062a0:	d0de      	beq.n	8006260 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062a2:	f015 0f01 	tst.w	r5, #1
 80062a6:	d009      	beq.n	80062bc <UART_RxISR_8BIT_FIFOEN+0x94>
 80062a8:	f419 7f80 	tst.w	r9, #256	; 0x100
 80062ac:	d006      	beq.n	80062bc <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062ae:	2201      	movs	r2, #1
 80062b0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062b2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062bc:	f015 0f02 	tst.w	r5, #2
 80062c0:	d00b      	beq.n	80062da <UART_RxISR_8BIT_FIFOEN+0xb2>
 80062c2:	f018 0f01 	tst.w	r8, #1
 80062c6:	d008      	beq.n	80062da <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	2202      	movs	r2, #2
 80062cc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062ce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80062d2:	f043 0304 	orr.w	r3, r3, #4
 80062d6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062da:	f015 0f04 	tst.w	r5, #4
 80062de:	d0bb      	beq.n	8006258 <UART_RxISR_8BIT_FIFOEN+0x30>
 80062e0:	f018 0f01 	tst.w	r8, #1
 80062e4:	d0b8      	beq.n	8006258 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	2204      	movs	r2, #4
 80062ea:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062ec:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80062f0:	f043 0302 	orr.w	r3, r3, #2
 80062f4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80062f8:	e7ae      	b.n	8006258 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80062fa:	4620      	mov	r0, r4
 80062fc:	f7ff fd10 	bl	8005d20 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006300:	2300      	movs	r3, #0
 8006302:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006306:	e7ab      	b.n	8006260 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006308:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	e852 3f00 	ldrex	r3, [r2]
 800630e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	e842 3100 	strex	r1, r3, [r2]
 8006316:	2900      	cmp	r1, #0
 8006318:	d1f6      	bne.n	8006308 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800631a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	f102 0308 	add.w	r3, r2, #8
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006328:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	3208      	adds	r2, #8
 800632e:	e842 3100 	strex	r1, r3, [r2]
 8006332:	2900      	cmp	r1, #0
 8006334:	d1f1      	bne.n	800631a <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8006336:	2320      	movs	r3, #32
 8006338:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 800633c:	2300      	movs	r3, #0
 800633e:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006340:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006342:	2b01      	cmp	r3, #1
 8006344:	d003      	beq.n	800634e <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8006346:	4620      	mov	r0, r4
 8006348:	f7fb fccc 	bl	8001ce4 <HAL_UART_RxCpltCallback>
 800634c:	e78d      	b.n	800626a <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634e:	2300      	movs	r3, #0
 8006350:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006352:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	e852 3f00 	ldrex	r3, [r2]
 8006358:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	e842 3100 	strex	r1, r3, [r2]
 8006360:	2900      	cmp	r1, #0
 8006362:	d1f6      	bne.n	8006352 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	f012 0f10 	tst.w	r2, #16
 800636c:	d001      	beq.n	8006372 <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800636e:	2210      	movs	r2, #16
 8006370:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006372:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006376:	4620      	mov	r0, r4
 8006378:	f7ff fd09 	bl	8005d8e <HAL_UARTEx_RxEventCallback>
 800637c:	e775      	b.n	800626a <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800637e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006382:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006384:	2b00      	cmp	r3, #0
 8006386:	f43f af61 	beq.w	800624c <UART_RxISR_8BIT_FIFOEN+0x24>
 800638a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800638e:	429a      	cmp	r2, r3
 8006390:	f67f af5c 	bls.w	800624c <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006394:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	f102 0308 	add.w	r3, r2, #8
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	3208      	adds	r2, #8
 80063a4:	e842 3100 	strex	r1, r3, [r2]
 80063a8:	2900      	cmp	r1, #0
 80063aa:	d1f3      	bne.n	8006394 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 80063ae:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80063b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	e852 3f00 	ldrex	r3, [r2]
 80063b6:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	e842 3100 	strex	r1, r3, [r2]
 80063be:	2900      	cmp	r1, #0
 80063c0:	d1f6      	bne.n	80063b0 <UART_RxISR_8BIT_FIFOEN+0x188>
 80063c2:	e743      	b.n	800624c <UART_RxISR_8BIT_FIFOEN+0x24>
 80063c4:	080060c5 	.word	0x080060c5

080063c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80063c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80063cc:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80063d0:	6803      	ldr	r3, [r0, #0]
 80063d2:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80063d4:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80063d8:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063dc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80063e0:	2a22      	cmp	r2, #34	; 0x22
 80063e2:	d005      	beq.n	80063f0 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063e4:	699a      	ldr	r2, [r3, #24]
 80063e6:	f042 0208 	orr.w	r2, r2, #8
 80063ea:	619a      	str	r2, [r3, #24]
  }
}
 80063ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063f0:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80063f2:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80063f6:	e008      	b.n	800640a <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063f8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d14b      	bne.n	8006498 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8006400:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d04d      	beq.n	80064a6 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800640a:	2f00      	cmp	r7, #0
 800640c:	f000 8086 	beq.w	800651c <UART_RxISR_16BIT_FIFOEN+0x154>
 8006410:	f015 0f20 	tst.w	r5, #32
 8006414:	f000 8082 	beq.w	800651c <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006418:	6823      	ldr	r3, [r4, #0]
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800641c:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800641e:	4033      	ands	r3, r6
 8006420:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8006422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006424:	3302      	adds	r3, #2
 8006426:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006428:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29b      	uxth	r3, r3
 8006432:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800643a:	f015 0f07 	tst.w	r5, #7
 800643e:	d0df      	beq.n	8006400 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006440:	f015 0f01 	tst.w	r5, #1
 8006444:	d009      	beq.n	800645a <UART_RxISR_16BIT_FIFOEN+0x92>
 8006446:	f419 7f80 	tst.w	r9, #256	; 0x100
 800644a:	d006      	beq.n	800645a <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800644c:	2201      	movs	r2, #1
 800644e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006450:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800645a:	f015 0f02 	tst.w	r5, #2
 800645e:	d00b      	beq.n	8006478 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8006460:	f018 0f01 	tst.w	r8, #1
 8006464:	d008      	beq.n	8006478 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	2202      	movs	r2, #2
 800646a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800646c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006470:	f043 0304 	orr.w	r3, r3, #4
 8006474:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006478:	f015 0f04 	tst.w	r5, #4
 800647c:	d0bc      	beq.n	80063f8 <UART_RxISR_16BIT_FIFOEN+0x30>
 800647e:	f018 0f01 	tst.w	r8, #1
 8006482:	d0b9      	beq.n	80063f8 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	2204      	movs	r2, #4
 8006488:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800648a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800648e:	f043 0302 	orr.w	r3, r3, #2
 8006492:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006496:	e7af      	b.n	80063f8 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8006498:	4620      	mov	r0, r4
 800649a:	f7ff fc41 	bl	8005d20 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800649e:	2300      	movs	r3, #0
 80064a0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80064a4:	e7ac      	b.n	8006400 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064a6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	e852 3f00 	ldrex	r3, [r2]
 80064ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	e842 3100 	strex	r1, r3, [r2]
 80064b4:	2900      	cmp	r1, #0
 80064b6:	d1f6      	bne.n	80064a6 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ba:	f102 0308 	add.w	r3, r2, #8
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064c6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	3208      	adds	r2, #8
 80064cc:	e842 3100 	strex	r1, r3, [r2]
 80064d0:	2900      	cmp	r1, #0
 80064d2:	d1f1      	bne.n	80064b8 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80064d4:	2320      	movs	r3, #32
 80064d6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d003      	beq.n	80064ec <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 80064e4:	4620      	mov	r0, r4
 80064e6:	f7fb fbfd 	bl	8001ce4 <HAL_UART_RxCpltCallback>
 80064ea:	e78e      	b.n	800640a <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ec:	2300      	movs	r3, #0
 80064ee:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	e852 3f00 	ldrex	r3, [r2]
 80064f6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fa:	e842 3100 	strex	r1, r3, [r2]
 80064fe:	2900      	cmp	r1, #0
 8006500:	d1f6      	bne.n	80064f0 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	69da      	ldr	r2, [r3, #28]
 8006506:	f012 0f10 	tst.w	r2, #16
 800650a:	d001      	beq.n	8006510 <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800650c:	2210      	movs	r2, #16
 800650e:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006510:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006514:	4620      	mov	r0, r4
 8006516:	f7ff fc3a 	bl	8005d8e <HAL_UARTEx_RxEventCallback>
 800651a:	e776      	b.n	800640a <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800651c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006520:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006522:	2b00      	cmp	r3, #0
 8006524:	f43f af62 	beq.w	80063ec <UART_RxISR_16BIT_FIFOEN+0x24>
 8006528:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800652c:	429a      	cmp	r2, r3
 800652e:	f67f af5d 	bls.w	80063ec <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006532:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	f102 0308 	add.w	r3, r2, #8
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	3208      	adds	r2, #8
 8006542:	e842 3100 	strex	r1, r3, [r2]
 8006546:	2900      	cmp	r1, #0
 8006548:	d1f3      	bne.n	8006532 <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 800654a:	4b06      	ldr	r3, [pc, #24]	; (8006564 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 800654c:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800654e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	e852 3f00 	ldrex	r3, [r2]
 8006554:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	e842 3100 	strex	r1, r3, [r2]
 800655c:	2900      	cmp	r1, #0
 800655e:	d1f6      	bne.n	800654e <UART_RxISR_16BIT_FIFOEN+0x186>
 8006560:	e744      	b.n	80063ec <UART_RxISR_16BIT_FIFOEN+0x24>
 8006562:	bf00      	nop
 8006564:	08006177 	.word	0x08006177

08006568 <UART_SetConfig>:
{
 8006568:	b570      	push	{r4, r5, r6, lr}
 800656a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800656c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800656e:	6883      	ldr	r3, [r0, #8]
 8006570:	6902      	ldr	r2, [r0, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	6942      	ldr	r2, [r0, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	69c2      	ldr	r2, [r0, #28]
 800657a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800657c:	6808      	ldr	r0, [r1, #0]
 800657e:	4a9d      	ldr	r2, [pc, #628]	; (80067f4 <UART_SetConfig+0x28c>)
 8006580:	4002      	ands	r2, r0
 8006582:	4313      	orrs	r3, r2
 8006584:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006586:	6822      	ldr	r2, [r4, #0]
 8006588:	6853      	ldr	r3, [r2, #4]
 800658a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800658e:	68e1      	ldr	r1, [r4, #12]
 8006590:	430b      	orrs	r3, r1
 8006592:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006594:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	4b97      	ldr	r3, [pc, #604]	; (80067f8 <UART_SetConfig+0x290>)
 800659a:	429a      	cmp	r2, r3
 800659c:	d001      	beq.n	80065a2 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800659e:	6a23      	ldr	r3, [r4, #32]
 80065a0:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065a2:	6893      	ldr	r3, [r2, #8]
 80065a4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80065a8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065b0:	6822      	ldr	r2, [r4, #0]
 80065b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80065b4:	f023 030f 	bic.w	r3, r3, #15
 80065b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80065ba:	430b      	orrs	r3, r1
 80065bc:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	4a8e      	ldr	r2, [pc, #568]	; (80067fc <UART_SetConfig+0x294>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01c      	beq.n	8006600 <UART_SetConfig+0x98>
 80065c6:	4a8e      	ldr	r2, [pc, #568]	; (8006800 <UART_SetConfig+0x298>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d031      	beq.n	8006630 <UART_SetConfig+0xc8>
 80065cc:	4a8a      	ldr	r2, [pc, #552]	; (80067f8 <UART_SetConfig+0x290>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d04b      	beq.n	800666a <UART_SetConfig+0x102>
 80065d2:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80065d4:	4988      	ldr	r1, [pc, #544]	; (80067f8 <UART_SetConfig+0x290>)
 80065d6:	428b      	cmp	r3, r1
 80065d8:	d068      	beq.n	80066ac <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065da:	69e0      	ldr	r0, [r4, #28]
 80065dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80065e0:	f000 80a5 	beq.w	800672e <UART_SetConfig+0x1c6>
    switch (clocksource)
 80065e4:	2a08      	cmp	r2, #8
 80065e6:	f200 811f 	bhi.w	8006828 <UART_SetConfig+0x2c0>
 80065ea:	e8df f012 	tbh	[pc, r2, lsl #1]
 80065ee:	00d3      	.short	0x00d3
 80065f0:	00d100f5 	.word	0x00d100f5
 80065f4:	00f8011d 	.word	0x00f8011d
 80065f8:	011d011d 	.word	0x011d011d
 80065fc:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006604:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006608:	f002 0203 	and.w	r2, r2, #3
 800660c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006610:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8006614:	2a03      	cmp	r2, #3
 8006616:	d809      	bhi.n	800662c <UART_SetConfig+0xc4>
 8006618:	e8df f002 	tbb	[pc, r2]
 800661c:	063c0402 	.word	0x063c0402
 8006620:	2201      	movs	r2, #1
 8006622:	e7d7      	b.n	80065d4 <UART_SetConfig+0x6c>
 8006624:	2204      	movs	r2, #4
 8006626:	e7d5      	b.n	80065d4 <UART_SetConfig+0x6c>
 8006628:	2208      	movs	r2, #8
 800662a:	e7d3      	b.n	80065d4 <UART_SetConfig+0x6c>
 800662c:	2210      	movs	r2, #16
 800662e:	e7d1      	b.n	80065d4 <UART_SetConfig+0x6c>
 8006630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006634:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006638:	f002 020c 	and.w	r2, r2, #12
 800663c:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8006640:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8006644:	2a0c      	cmp	r2, #12
 8006646:	d80e      	bhi.n	8006666 <UART_SetConfig+0xfe>
 8006648:	e8df f002 	tbb	[pc, r2]
 800664c:	0d0d0d07 	.word	0x0d0d0d07
 8006650:	0d0d0d09 	.word	0x0d0d0d09
 8006654:	0d0d0d26 	.word	0x0d0d0d26
 8006658:	0b          	.byte	0x0b
 8006659:	00          	.byte	0x00
 800665a:	2200      	movs	r2, #0
 800665c:	e7ba      	b.n	80065d4 <UART_SetConfig+0x6c>
 800665e:	2204      	movs	r2, #4
 8006660:	e7b8      	b.n	80065d4 <UART_SetConfig+0x6c>
 8006662:	2208      	movs	r2, #8
 8006664:	e7b6      	b.n	80065d4 <UART_SetConfig+0x6c>
 8006666:	2210      	movs	r2, #16
 8006668:	e7b4      	b.n	80065d4 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800666a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800666e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8006672:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8006676:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800667a:	d00f      	beq.n	800669c <UART_SetConfig+0x134>
 800667c:	d805      	bhi.n	800668a <UART_SetConfig+0x122>
 800667e:	b17a      	cbz	r2, 80066a0 <UART_SetConfig+0x138>
 8006680:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006684:	d10e      	bne.n	80066a4 <UART_SetConfig+0x13c>
 8006686:	2204      	movs	r2, #4
 8006688:	e7a4      	b.n	80065d4 <UART_SetConfig+0x6c>
 800668a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800668e:	d10b      	bne.n	80066a8 <UART_SetConfig+0x140>
 8006690:	2208      	movs	r2, #8
 8006692:	e79f      	b.n	80065d4 <UART_SetConfig+0x6c>
 8006694:	2202      	movs	r2, #2
 8006696:	e79d      	b.n	80065d4 <UART_SetConfig+0x6c>
 8006698:	2202      	movs	r2, #2
 800669a:	e79b      	b.n	80065d4 <UART_SetConfig+0x6c>
 800669c:	2202      	movs	r2, #2
 800669e:	e799      	b.n	80065d4 <UART_SetConfig+0x6c>
 80066a0:	2200      	movs	r2, #0
 80066a2:	e797      	b.n	80065d4 <UART_SetConfig+0x6c>
 80066a4:	2210      	movs	r2, #16
 80066a6:	e795      	b.n	80065d4 <UART_SetConfig+0x6c>
 80066a8:	2210      	movs	r2, #16
 80066aa:	e793      	b.n	80065d4 <UART_SetConfig+0x6c>
    switch (clocksource)
 80066ac:	2a08      	cmp	r2, #8
 80066ae:	f200 809c 	bhi.w	80067ea <UART_SetConfig+0x282>
 80066b2:	e8df f002 	tbb	[pc, r2]
 80066b6:	9a08      	.short	0x9a08
 80066b8:	9a379a3a 	.word	0x9a379a3a
 80066bc:	9a9a      	.short	0x9a9a
 80066be:	05          	.byte	0x05
 80066bf:	00          	.byte	0x00
 80066c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80066c4:	e004      	b.n	80066d0 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80066c6:	f7fe fb0f 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80066ca:	2800      	cmp	r0, #0
 80066cc:	f000 808f 	beq.w	80067ee <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80066d2:	4b4c      	ldr	r3, [pc, #304]	; (8006804 <UART_SetConfig+0x29c>)
 80066d4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80066d8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066dc:	6865      	ldr	r5, [r4, #4]
 80066de:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80066e2:	4299      	cmp	r1, r3
 80066e4:	f200 8094 	bhi.w	8006810 <UART_SetConfig+0x2a8>
 80066e8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80066ec:	f200 8092 	bhi.w	8006814 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066f0:	2600      	movs	r6, #0
 80066f2:	4633      	mov	r3, r6
 80066f4:	4631      	mov	r1, r6
 80066f6:	f7fa f907 	bl	8000908 <__aeabi_uldivmod>
 80066fa:	0209      	lsls	r1, r1, #8
 80066fc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006700:	0200      	lsls	r0, r0, #8
 8006702:	086b      	lsrs	r3, r5, #1
 8006704:	18c0      	adds	r0, r0, r3
 8006706:	462a      	mov	r2, r5
 8006708:	4633      	mov	r3, r6
 800670a:	f141 0100 	adc.w	r1, r1, #0
 800670e:	f7fa f8fb 	bl	8000908 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006712:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006716:	4b3c      	ldr	r3, [pc, #240]	; (8006808 <UART_SetConfig+0x2a0>)
 8006718:	429a      	cmp	r2, r3
 800671a:	d87d      	bhi.n	8006818 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	60d8      	str	r0, [r3, #12]
 8006720:	4630      	mov	r0, r6
 8006722:	e050      	b.n	80067c6 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8006724:	f7fd fdd8 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
        break;
 8006728:	e7cf      	b.n	80066ca <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 800672a:	4838      	ldr	r0, [pc, #224]	; (800680c <UART_SetConfig+0x2a4>)
 800672c:	e7d0      	b.n	80066d0 <UART_SetConfig+0x168>
    switch (clocksource)
 800672e:	2a08      	cmp	r2, #8
 8006730:	d874      	bhi.n	800681c <UART_SetConfig+0x2b4>
 8006732:	e8df f002 	tbb	[pc, r2]
 8006736:	2707      	.short	0x2707
 8006738:	732a7305 	.word	0x732a7305
 800673c:	7373      	.short	0x7373
 800673e:	0b          	.byte	0x0b
 800673f:	00          	.byte	0x00
 8006740:	4832      	ldr	r0, [pc, #200]	; (800680c <UART_SetConfig+0x2a4>)
 8006742:	e003      	b.n	800674c <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006744:	f7fe fad0 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006748:	2800      	cmp	r0, #0
 800674a:	d069      	beq.n	8006820 <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800674c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800674e:	4b2d      	ldr	r3, [pc, #180]	; (8006804 <UART_SetConfig+0x29c>)
 8006750:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006754:	fbb0 f0f3 	udiv	r0, r0, r3
 8006758:	6862      	ldr	r2, [r4, #4]
 800675a:	0853      	lsrs	r3, r2, #1
 800675c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006760:	fbb0 f0f2 	udiv	r0, r0, r2
 8006764:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006766:	f1a0 0210 	sub.w	r2, r0, #16
 800676a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800676e:	429a      	cmp	r2, r3
 8006770:	d858      	bhi.n	8006824 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006772:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006776:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800677a:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	60d8      	str	r0, [r3, #12]
 8006780:	2000      	movs	r0, #0
 8006782:	e020      	b.n	80067c6 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006784:	f7fe fac0 	bl	8004d08 <HAL_RCC_GetPCLK2Freq>
        break;
 8006788:	e7de      	b.n	8006748 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800678a:	f7fd fda5 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
        break;
 800678e:	e7db      	b.n	8006748 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8006790:	481e      	ldr	r0, [pc, #120]	; (800680c <UART_SetConfig+0x2a4>)
 8006792:	e003      	b.n	800679c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006794:	f7fe faa8 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006798:	2800      	cmp	r0, #0
 800679a:	d047      	beq.n	800682c <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800679c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800679e:	4b19      	ldr	r3, [pc, #100]	; (8006804 <UART_SetConfig+0x29c>)
 80067a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80067a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80067a8:	6863      	ldr	r3, [r4, #4]
 80067aa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80067ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80067b2:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067b4:	f1a0 0210 	sub.w	r2, r0, #16
 80067b8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80067bc:	429a      	cmp	r2, r3
 80067be:	d837      	bhi.n	8006830 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	60d8      	str	r0, [r3, #12]
 80067c4:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067cc:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80067d0:	2300      	movs	r3, #0
 80067d2:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80067d4:	6763      	str	r3, [r4, #116]	; 0x74
}
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80067d8:	f7fe fa96 	bl	8004d08 <HAL_RCC_GetPCLK2Freq>
        break;
 80067dc:	e7dc      	b.n	8006798 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 80067de:	f7fd fd7b 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
        break;
 80067e2:	e7d9      	b.n	8006798 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 80067e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80067e8:	e7d8      	b.n	800679c <UART_SetConfig+0x234>
    switch (clocksource)
 80067ea:	2001      	movs	r0, #1
 80067ec:	e7eb      	b.n	80067c6 <UART_SetConfig+0x25e>
 80067ee:	2000      	movs	r0, #0
 80067f0:	e7e9      	b.n	80067c6 <UART_SetConfig+0x25e>
 80067f2:	bf00      	nop
 80067f4:	cfff69f3 	.word	0xcfff69f3
 80067f8:	40008000 	.word	0x40008000
 80067fc:	40013800 	.word	0x40013800
 8006800:	40004400 	.word	0x40004400
 8006804:	080116b0 	.word	0x080116b0
 8006808:	000ffcff 	.word	0x000ffcff
 800680c:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8006810:	2001      	movs	r0, #1
 8006812:	e7d8      	b.n	80067c6 <UART_SetConfig+0x25e>
 8006814:	2001      	movs	r0, #1
 8006816:	e7d6      	b.n	80067c6 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8006818:	2001      	movs	r0, #1
 800681a:	e7d4      	b.n	80067c6 <UART_SetConfig+0x25e>
    switch (clocksource)
 800681c:	2001      	movs	r0, #1
 800681e:	e7d2      	b.n	80067c6 <UART_SetConfig+0x25e>
 8006820:	2000      	movs	r0, #0
 8006822:	e7d0      	b.n	80067c6 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006824:	2001      	movs	r0, #1
 8006826:	e7ce      	b.n	80067c6 <UART_SetConfig+0x25e>
    switch (clocksource)
 8006828:	2001      	movs	r0, #1
 800682a:	e7cc      	b.n	80067c6 <UART_SetConfig+0x25e>
 800682c:	2000      	movs	r0, #0
 800682e:	e7ca      	b.n	80067c6 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8006830:	2001      	movs	r0, #1
 8006832:	e7c8      	b.n	80067c6 <UART_SetConfig+0x25e>

08006834 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006834:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006836:	f013 0f01 	tst.w	r3, #1
 800683a:	d006      	beq.n	800684a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800683c:	6802      	ldr	r2, [r0, #0]
 800683e:	6853      	ldr	r3, [r2, #4]
 8006840:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006844:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006846:	430b      	orrs	r3, r1
 8006848:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800684a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800684c:	f013 0f02 	tst.w	r3, #2
 8006850:	d006      	beq.n	8006860 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006852:	6802      	ldr	r2, [r0, #0]
 8006854:	6853      	ldr	r3, [r2, #4]
 8006856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800685c:	430b      	orrs	r3, r1
 800685e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006860:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006862:	f013 0f04 	tst.w	r3, #4
 8006866:	d006      	beq.n	8006876 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006868:	6802      	ldr	r2, [r0, #0]
 800686a:	6853      	ldr	r3, [r2, #4]
 800686c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006870:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006872:	430b      	orrs	r3, r1
 8006874:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006876:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006878:	f013 0f08 	tst.w	r3, #8
 800687c:	d006      	beq.n	800688c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800687e:	6802      	ldr	r2, [r0, #0]
 8006880:	6853      	ldr	r3, [r2, #4]
 8006882:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006886:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006888:	430b      	orrs	r3, r1
 800688a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800688c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800688e:	f013 0f10 	tst.w	r3, #16
 8006892:	d006      	beq.n	80068a2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006894:	6802      	ldr	r2, [r0, #0]
 8006896:	6893      	ldr	r3, [r2, #8]
 8006898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800689c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800689e:	430b      	orrs	r3, r1
 80068a0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068a4:	f013 0f20 	tst.w	r3, #32
 80068a8:	d006      	beq.n	80068b8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068aa:	6802      	ldr	r2, [r0, #0]
 80068ac:	6893      	ldr	r3, [r2, #8]
 80068ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068b2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80068b4:	430b      	orrs	r3, r1
 80068b6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 80068be:	d00a      	beq.n	80068d6 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068c0:	6802      	ldr	r2, [r0, #0]
 80068c2:	6853      	ldr	r3, [r2, #4]
 80068c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80068c8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80068ca:	430b      	orrs	r3, r1
 80068cc:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80068d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068d4:	d00b      	beq.n	80068ee <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80068d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80068dc:	d006      	beq.n	80068ec <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068de:	6802      	ldr	r2, [r0, #0]
 80068e0:	6853      	ldr	r3, [r2, #4]
 80068e2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80068e6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80068e8:	430b      	orrs	r3, r1
 80068ea:	6053      	str	r3, [r2, #4]
}
 80068ec:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068ee:	6802      	ldr	r2, [r0, #0]
 80068f0:	6853      	ldr	r3, [r2, #4]
 80068f2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80068f6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80068f8:	430b      	orrs	r3, r1
 80068fa:	6053      	str	r3, [r2, #4]
 80068fc:	e7eb      	b.n	80068d6 <UART_AdvFeatureConfig+0xa2>

080068fe <UART_WaitOnFlagUntilTimeout>:
{
 80068fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006902:	4605      	mov	r5, r0
 8006904:	460f      	mov	r7, r1
 8006906:	4616      	mov	r6, r2
 8006908:	4699      	mov	r9, r3
 800690a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800690e:	682c      	ldr	r4, [r5, #0]
 8006910:	69e4      	ldr	r4, [r4, #28]
 8006912:	ea37 0304 	bics.w	r3, r7, r4
 8006916:	bf0c      	ite	eq
 8006918:	f04f 0c01 	moveq.w	ip, #1
 800691c:	f04f 0c00 	movne.w	ip, #0
 8006920:	45b4      	cmp	ip, r6
 8006922:	d157      	bne.n	80069d4 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8006924:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006928:	d0f1      	beq.n	800690e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692a:	f7fa feb1 	bl	8001690 <HAL_GetTick>
 800692e:	eba0 0009 	sub.w	r0, r0, r9
 8006932:	4540      	cmp	r0, r8
 8006934:	d82f      	bhi.n	8006996 <UART_WaitOnFlagUntilTimeout+0x98>
 8006936:	f1b8 0f00 	cmp.w	r8, #0
 800693a:	d02c      	beq.n	8006996 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	f012 0f04 	tst.w	r2, #4
 8006944:	d0e3      	beq.n	800690e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800694c:	d0df      	beq.n	800690e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800694e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006952:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006954:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	e852 3f00 	ldrex	r3, [r2]
 800695a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	e842 3100 	strex	r1, r3, [r2]
 8006962:	2900      	cmp	r1, #0
 8006964:	d1f6      	bne.n	8006954 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006966:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006968:	f102 0308 	add.w	r3, r2, #8
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	3208      	adds	r2, #8
 8006976:	e842 3100 	strex	r1, r3, [r2]
 800697a:	2900      	cmp	r1, #0
 800697c:	d1f3      	bne.n	8006966 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 800697e:	2320      	movs	r3, #32
 8006980:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006984:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006988:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 800698c:	2300      	movs	r3, #0
 800698e:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8006992:	2003      	movs	r0, #3
 8006994:	e01f      	b.n	80069d6 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006996:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	e852 3f00 	ldrex	r3, [r2]
 800699c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	e842 3100 	strex	r1, r3, [r2]
 80069a4:	2900      	cmp	r1, #0
 80069a6:	d1f6      	bne.n	8006996 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a8:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	f102 0308 	add.w	r3, r2, #8
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	3208      	adds	r2, #8
 80069b8:	e842 3100 	strex	r1, r3, [r2]
 80069bc:	2900      	cmp	r1, #0
 80069be:	d1f3      	bne.n	80069a8 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 80069c0:	2320      	movs	r3, #32
 80069c2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80069c6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80069ca:	2300      	movs	r3, #0
 80069cc:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 80069d0:	2003      	movs	r0, #3
 80069d2:	e000      	b.n	80069d6 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 80069d4:	2000      	movs	r0, #0
}
 80069d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080069da <UART_CheckIdleState>:
{
 80069da:	b530      	push	{r4, r5, lr}
 80069dc:	b083      	sub	sp, #12
 80069de:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e0:	2300      	movs	r3, #0
 80069e2:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80069e6:	f7fa fe53 	bl	8001690 <HAL_GetTick>
 80069ea:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069ec:	6822      	ldr	r2, [r4, #0]
 80069ee:	6812      	ldr	r2, [r2, #0]
 80069f0:	f012 0f08 	tst.w	r2, #8
 80069f4:	d10f      	bne.n	8006a16 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f013 0f04 	tst.w	r3, #4
 80069fe:	d118      	bne.n	8006a32 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8006a00:	2320      	movs	r3, #32
 8006a02:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006a06:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 8006a0e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006a12:	b003      	add	sp, #12
 8006a14:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a24:	4620      	mov	r0, r4
 8006a26:	f7ff ff6a 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d0e3      	beq.n	80069f6 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8006a2e:	2003      	movs	r0, #3
 8006a30:	e7ef      	b.n	8006a12 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	462b      	mov	r3, r5
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a40:	4620      	mov	r0, r4
 8006a42:	f7ff ff5c 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	d0da      	beq.n	8006a00 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8006a4a:	2003      	movs	r0, #3
 8006a4c:	e7e1      	b.n	8006a12 <UART_CheckIdleState+0x38>

08006a4e <HAL_UART_Init>:
  if (huart == NULL)
 8006a4e:	b378      	cbz	r0, 8006ab0 <HAL_UART_Init+0x62>
{
 8006a50:	b510      	push	{r4, lr}
 8006a52:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006a54:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8006a58:	b30b      	cbz	r3, 8006a9e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006a5a:	2324      	movs	r3, #36	; 0x24
 8006a5c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006a60:	6822      	ldr	r2, [r4, #0]
 8006a62:	6813      	ldr	r3, [r2, #0]
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f7ff fd7c 	bl	8006568 <UART_SetConfig>
 8006a70:	2801      	cmp	r0, #1
 8006a72:	d013      	beq.n	8006a9c <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a76:	b9bb      	cbnz	r3, 8006aa8 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a78:	6822      	ldr	r2, [r4, #0]
 8006a7a:	6853      	ldr	r3, [r2, #4]
 8006a7c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006a80:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	6893      	ldr	r3, [r2, #8]
 8006a86:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006a8a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006a8c:	6822      	ldr	r2, [r4, #0]
 8006a8e:	6813      	ldr	r3, [r2, #0]
 8006a90:	f043 0301 	orr.w	r3, r3, #1
 8006a94:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006a96:	4620      	mov	r0, r4
 8006a98:	f7ff ff9f 	bl	80069da <UART_CheckIdleState>
}
 8006a9c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006a9e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006aa2:	f7fb f80b 	bl	8001abc <HAL_UART_MspInit>
 8006aa6:	e7d8      	b.n	8006a5a <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f7ff fec3 	bl	8006834 <UART_AdvFeatureConfig>
 8006aae:	e7e3      	b.n	8006a78 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8006ab0:	2001      	movs	r0, #1
}
 8006ab2:	4770      	bx	lr

08006ab4 <UART_Start_Receive_IT>:
{
 8006ab4:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8006ab6:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006ab8:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006abc:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8006ac4:	6883      	ldr	r3, [r0, #8]
 8006ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aca:	d006      	beq.n	8006ada <UART_Start_Receive_IT+0x26>
 8006acc:	b9a3      	cbnz	r3, 8006af8 <UART_Start_Receive_IT+0x44>
 8006ace:	6903      	ldr	r3, [r0, #16]
 8006ad0:	b973      	cbnz	r3, 8006af0 <UART_Start_Receive_IT+0x3c>
 8006ad2:	23ff      	movs	r3, #255	; 0xff
 8006ad4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006ad8:	e014      	b.n	8006b04 <UART_Start_Receive_IT+0x50>
 8006ada:	6903      	ldr	r3, [r0, #16]
 8006adc:	b923      	cbnz	r3, 8006ae8 <UART_Start_Receive_IT+0x34>
 8006ade:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006ae2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006ae6:	e00d      	b.n	8006b04 <UART_Start_Receive_IT+0x50>
 8006ae8:	23ff      	movs	r3, #255	; 0xff
 8006aea:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006aee:	e009      	b.n	8006b04 <UART_Start_Receive_IT+0x50>
 8006af0:	237f      	movs	r3, #127	; 0x7f
 8006af2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006af6:	e005      	b.n	8006b04 <UART_Start_Receive_IT+0x50>
 8006af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006afc:	d030      	beq.n	8006b60 <UART_Start_Receive_IT+0xac>
 8006afe:	2300      	movs	r3, #0
 8006b00:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b04:	2300      	movs	r3, #0
 8006b06:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b0a:	2322      	movs	r3, #34	; 0x22
 8006b0c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b10:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	f101 0308 	add.w	r3, r1, #8
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	3108      	adds	r1, #8
 8006b20:	e841 3400 	strex	r4, r3, [r1]
 8006b24:	2c00      	cmp	r4, #0
 8006b26:	d1f3      	bne.n	8006b10 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b28:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b2e:	d021      	beq.n	8006b74 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b30:	6883      	ldr	r3, [r0, #8]
 8006b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b36:	d048      	beq.n	8006bca <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 8006b38:	4b2c      	ldr	r3, [pc, #176]	; (8006bec <UART_Start_Receive_IT+0x138>)
 8006b3a:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b42:	6903      	ldr	r3, [r0, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d046      	beq.n	8006bd6 <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b48:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	e852 3f00 	ldrex	r3, [r2]
 8006b4e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b52:	e842 3100 	strex	r1, r3, [r2]
 8006b56:	2900      	cmp	r1, #0
 8006b58:	d1f6      	bne.n	8006b48 <UART_Start_Receive_IT+0x94>
}
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	bc10      	pop	{r4}
 8006b5e:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006b60:	6903      	ldr	r3, [r0, #16]
 8006b62:	b91b      	cbnz	r3, 8006b6c <UART_Start_Receive_IT+0xb8>
 8006b64:	237f      	movs	r3, #127	; 0x7f
 8006b66:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b6a:	e7cb      	b.n	8006b04 <UART_Start_Receive_IT+0x50>
 8006b6c:	233f      	movs	r3, #63	; 0x3f
 8006b6e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8006b72:	e7c7      	b.n	8006b04 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b74:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d8d9      	bhi.n	8006b30 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b7c:	6883      	ldr	r3, [r0, #8]
 8006b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b82:	d01c      	beq.n	8006bbe <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006b84:	4b1a      	ldr	r3, [pc, #104]	; (8006bf0 <UART_Start_Receive_IT+0x13c>)
 8006b86:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8006b88:	2300      	movs	r3, #0
 8006b8a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b8e:	6903      	ldr	r3, [r0, #16]
 8006b90:	b143      	cbz	r3, 8006ba4 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b92:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	e852 3f00 	ldrex	r3, [r2]
 8006b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	e842 3100 	strex	r1, r3, [r2]
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	d1f6      	bne.n	8006b92 <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ba4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	f102 0308 	add.w	r3, r2, #8
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb2:	3208      	adds	r2, #8
 8006bb4:	e842 3100 	strex	r1, r3, [r2]
 8006bb8:	2900      	cmp	r1, #0
 8006bba:	d1f3      	bne.n	8006ba4 <UART_Start_Receive_IT+0xf0>
 8006bbc:	e7cd      	b.n	8006b5a <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bbe:	6903      	ldr	r3, [r0, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1df      	bne.n	8006b84 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <UART_Start_Receive_IT+0x140>)
 8006bc6:	6703      	str	r3, [r0, #112]	; 0x70
 8006bc8:	e7de      	b.n	8006b88 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bca:	6903      	ldr	r3, [r0, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1b3      	bne.n	8006b38 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8006bd0:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <UART_Start_Receive_IT+0x144>)
 8006bd2:	6703      	str	r3, [r0, #112]	; 0x70
 8006bd4:	e7b2      	b.n	8006b3c <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006bd6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	e852 3f00 	ldrex	r3, [r2]
 8006bdc:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	e842 3100 	strex	r1, r3, [r2]
 8006be4:	2900      	cmp	r1, #0
 8006be6:	d1f6      	bne.n	8006bd6 <UART_Start_Receive_IT+0x122>
 8006be8:	e7b7      	b.n	8006b5a <UART_Start_Receive_IT+0xa6>
 8006bea:	bf00      	nop
 8006bec:	080060c5 	.word	0x080060c5
 8006bf0:	08006229 	.word	0x08006229
 8006bf4:	080063c9 	.word	0x080063c9
 8006bf8:	08006177 	.word	0x08006177

08006bfc <HAL_UART_Receive_IT>:
{
 8006bfc:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bfe:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d11e      	bne.n	8006c44 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8006c06:	b1f9      	cbz	r1, 8006c48 <HAL_UART_Receive_IT+0x4c>
 8006c08:	b302      	cbz	r2, 8006c4c <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8006c0a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d01e      	beq.n	8006c50 <HAL_UART_Receive_IT+0x54>
 8006c12:	2301      	movs	r3, #1
 8006c14:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006c1c:	6803      	ldr	r3, [r0, #0]
 8006c1e:	4c0d      	ldr	r4, [pc, #52]	; (8006c54 <HAL_UART_Receive_IT+0x58>)
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	d00c      	beq.n	8006c3e <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006c2a:	d008      	beq.n	8006c3e <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c2c:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	e854 3f00 	ldrex	r3, [r4]
 8006c32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	e844 3500 	strex	r5, r3, [r4]
 8006c3a:	2d00      	cmp	r5, #0
 8006c3c:	d1f6      	bne.n	8006c2c <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8006c3e:	f7ff ff39 	bl	8006ab4 <UART_Start_Receive_IT>
 8006c42:	e000      	b.n	8006c46 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8006c44:	2002      	movs	r0, #2
}
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006c48:	2001      	movs	r0, #1
 8006c4a:	e7fc      	b.n	8006c46 <HAL_UART_Receive_IT+0x4a>
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	e7fa      	b.n	8006c46 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8006c50:	2002      	movs	r0, #2
 8006c52:	e7f8      	b.n	8006c46 <HAL_UART_Receive_IT+0x4a>
 8006c54:	40008000 	.word	0x40008000

08006c58 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006c58:	b082      	sub	sp, #8
 8006c5a:	ab02      	add	r3, sp, #8
 8006c5c:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006c60:	6802      	ldr	r2, [r0, #0]
 8006c62:	6853      	ldr	r3, [r2, #4]
 8006c64:	f023 0310 	bic.w	r3, r3, #16
 8006c68:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8006c6c:	430b      	orrs	r3, r1
 8006c6e:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006c70:	6802      	ldr	r2, [r0, #0]
 8006c72:	6853      	ldr	r3, [r2, #4]
 8006c74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c78:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8006c7c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006c80:	6053      	str	r3, [r2, #4]
}
 8006c82:	b002      	add	sp, #8
 8006c84:	4770      	bx	lr
	...

08006c88 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c88:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006c8a:	b92b      	cbnz	r3, 8006c98 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c92:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8006c96:	4770      	bx	lr
{
 8006c98:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c9a:	6803      	ldr	r3, [r0, #0]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ca2:	6899      	ldr	r1, [r3, #8]
 8006ca4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ca6:	4d09      	ldr	r5, [pc, #36]	; (8006ccc <UARTEx_SetNbDataToProcess+0x44>)
 8006ca8:	5c6b      	ldrb	r3, [r5, r1]
 8006caa:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cac:	4c08      	ldr	r4, [pc, #32]	; (8006cd0 <UARTEx_SetNbDataToProcess+0x48>)
 8006cae:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cb0:	fb93 f3f1 	sdiv	r3, r3, r1
 8006cb4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cb8:	5cab      	ldrb	r3, [r5, r2]
 8006cba:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cbc:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cc2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8006cc6:	bc30      	pop	{r4, r5}
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	080116d0 	.word	0x080116d0
 8006cd0:	080116c8 	.word	0x080116c8

08006cd4 <HAL_UARTEx_WakeupCallback>:
}
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_UARTEx_RxFifoFullCallback>:
}
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8006cd8:	4770      	bx	lr

08006cda <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	ab04      	add	r3, sp, #16
 8006ce0:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8006ce4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d035      	beq.n	8006d58 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8006cec:	4604      	mov	r4, r0
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006cf4:	2324      	movs	r3, #36	; 0x24
 8006cf6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8006cfa:	6802      	ldr	r2, [r0, #0]
 8006cfc:	6813      	ldr	r3, [r2, #0]
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
 8006d02:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006d04:	6801      	ldr	r1, [r0, #0]
 8006d06:	688b      	ldr	r3, [r1, #8]
 8006d08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006d0c:	9a02      	ldr	r2, [sp, #8]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006d12:	b1aa      	cbz	r2, 8006d40 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8006d14:	6822      	ldr	r2, [r4, #0]
 8006d16:	6813      	ldr	r3, [r2, #0]
 8006d18:	f043 0301 	orr.w	r3, r3, #1
 8006d1c:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8006d1e:	f7fa fcb7 	bl	8001690 <HAL_GetTick>
 8006d22:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d24:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8006d28:	9200      	str	r2, [sp, #0]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d30:	4620      	mov	r0, r4
 8006d32:	f7ff fde4 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 8006d36:	b948      	cbnz	r0, 8006d4c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006d38:	2320      	movs	r3, #32
 8006d3a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006d3e:	e006      	b.n	8006d4e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006d40:	ab04      	add	r3, sp, #16
 8006d42:	e913 0006 	ldmdb	r3, {r1, r2}
 8006d46:	f7ff ff87 	bl	8006c58 <UARTEx_Wakeup_AddressConfig>
 8006d4a:	e7e3      	b.n	8006d14 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8006d4c:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006d54:	b004      	add	sp, #16
 8006d56:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006d58:	2002      	movs	r0, #2
 8006d5a:	e7fb      	b.n	8006d54 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08006d5c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006d5c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d010      	beq.n	8006d86 <HAL_UARTEx_EnableStopMode+0x2a>
 8006d64:	2301      	movs	r3, #1
 8006d66:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006d6a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	e852 3f00 	ldrex	r3, [r2]
 8006d70:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d74:	e842 3100 	strex	r1, r3, [r2]
 8006d78:	2900      	cmp	r1, #0
 8006d7a:	d1f6      	bne.n	8006d6a <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006d82:	4618      	mov	r0, r3
 8006d84:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006d86:	2002      	movs	r0, #2
}
 8006d88:	4770      	bx	lr

08006d8a <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8006d8a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d01d      	beq.n	8006dce <HAL_UARTEx_EnableFifoMode+0x44>
{
 8006d92:	b510      	push	{r4, lr}
 8006d94:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006d96:	2301      	movs	r3, #1
 8006d98:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006d9c:	2324      	movs	r3, #36	; 0x24
 8006d9e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006da2:	6802      	ldr	r2, [r0, #0]
 8006da4:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006da6:	6811      	ldr	r1, [r2, #0]
 8006da8:	f021 0101 	bic.w	r1, r1, #1
 8006dac:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006dae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006db2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006db6:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db8:	6802      	ldr	r2, [r0, #0]
 8006dba:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8006dbc:	f7ff ff64 	bl	8006c88 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8006dc0:	2320      	movs	r3, #32
 8006dc2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006dcc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8006dce:	2002      	movs	r0, #2
}
 8006dd0:	4770      	bx	lr

08006dd2 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006dd2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006dd4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d01d      	beq.n	8006e18 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8006ddc:	4604      	mov	r4, r0
 8006dde:	2301      	movs	r3, #1
 8006de0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006de4:	2324      	movs	r3, #36	; 0x24
 8006de6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dea:	6803      	ldr	r3, [r0, #0]
 8006dec:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	f022 0201 	bic.w	r2, r2, #1
 8006df4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006df6:	6802      	ldr	r2, [r0, #0]
 8006df8:	6893      	ldr	r3, [r2, #8]
 8006dfa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006dfe:	4319      	orrs	r1, r3
 8006e00:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006e02:	f7ff ff41 	bl	8006c88 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e0a:	2320      	movs	r3, #32
 8006e0c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006e10:	2000      	movs	r0, #0
 8006e12:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006e18:	2002      	movs	r0, #2
 8006e1a:	e7fc      	b.n	8006e16 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08006e1c <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006e1c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006e1e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d01d      	beq.n	8006e62 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8006e26:	4604      	mov	r4, r0
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006e2e:	2324      	movs	r3, #36	; 0x24
 8006e30:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e34:	6803      	ldr	r3, [r0, #0]
 8006e36:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	f022 0201 	bic.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e40:	6802      	ldr	r2, [r0, #0]
 8006e42:	6893      	ldr	r3, [r2, #8]
 8006e44:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8006e48:	4319      	orrs	r1, r3
 8006e4a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006e4c:	f7ff ff1c 	bl	8006c88 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e54:	2320      	movs	r3, #32
 8006e56:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006e5a:	2000      	movs	r0, #0
 8006e5c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006e60:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006e62:	2002      	movs	r0, #2
 8006e64:	e7fc      	b.n	8006e60 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08006e68 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006e68:	2804      	cmp	r0, #4
 8006e6a:	d807      	bhi.n	8006e7c <LmHandlerPackageIsInitialized+0x14>
{
 8006e6c:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <LmHandlerPackageIsInitialized+0x1c>)
 8006e70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	b11b      	cbz	r3, 8006e80 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8006e78:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8006e7a:	bd08      	pop	{r3, pc}
        return false;
 8006e7c:	2000      	movs	r0, #0
}
 8006e7e:	4770      	bx	lr
        return false;
 8006e80:	2000      	movs	r0, #0
 8006e82:	e7fa      	b.n	8006e7a <LmHandlerPackageIsInitialized+0x12>
 8006e84:	2000057c 	.word	0x2000057c

08006e88 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006e8e:	2400      	movs	r4, #0
 8006e90:	e005      	b.n	8006e9e <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	b10b      	cbz	r3, 8006e9a <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006e96:	4630      	mov	r0, r6
 8006e98:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006e9a:	3401      	adds	r4, #1
 8006e9c:	b264      	sxtb	r4, r4
 8006e9e:	2c04      	cmp	r4, #4
 8006ea0:	dc24      	bgt.n	8006eec <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8006ea2:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <LmHandlerPackagesNotify+0x68>)
 8006ea4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d0f6      	beq.n	8006e9a <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8006eac:	2d03      	cmp	r5, #3
 8006eae:	d8f4      	bhi.n	8006e9a <LmHandlerPackagesNotify+0x12>
 8006eb0:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <LmHandlerPackagesNotify+0x30>)
 8006eb2:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8006eb6:	bf00      	nop
 8006eb8:	08006e93 	.word	0x08006e93
 8006ebc:	08006ec9 	.word	0x08006ec9
 8006ec0:	08006ed5 	.word	0x08006ed5
 8006ec4:	08006ee1 	.word	0x08006ee1
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0e5      	beq.n	8006e9a <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8006ece:	4630      	mov	r0, r6
 8006ed0:	4798      	blx	r3
 8006ed2:	e7e2      	b.n	8006e9a <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0df      	beq.n	8006e9a <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8006eda:	4630      	mov	r0, r6
 8006edc:	4798      	blx	r3
 8006ede:	e7dc      	b.n	8006e9a <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0d9      	beq.n	8006e9a <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8006ee6:	4630      	mov	r0, r6
 8006ee8:	4798      	blx	r3
 8006eea:	e7d6      	b.n	8006e9a <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 8006eec:	bd70      	pop	{r4, r5, r6, pc}
 8006eee:	bf00      	nop
 8006ef0:	2000057c 	.word	0x2000057c

08006ef4 <MlmeIndication>:
{
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8006ef8:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <MlmeIndication+0x58>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8006efe:	7842      	ldrb	r2, [r0, #1]
 8006f00:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8006f02:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8006f06:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8006f08:	f9b1 2000 	ldrsh.w	r2, [r1]
 8006f0c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8006f0e:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8006f12:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8006f14:	78ca      	ldrb	r2, [r1, #3]
 8006f16:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8006f18:	6842      	ldr	r2, [r0, #4]
 8006f1a:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 8006f1c:	7803      	ldrb	r3, [r0, #0]
 8006f1e:	2b0a      	cmp	r3, #10
 8006f20:	d007      	beq.n	8006f32 <MlmeIndication+0x3e>
 8006f22:	2b0e      	cmp	r3, #14
 8006f24:	d005      	beq.n	8006f32 <MlmeIndication+0x3e>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8006f26:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <MlmeIndication+0x5c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2c:	4907      	ldr	r1, [pc, #28]	; (8006f4c <MlmeIndication+0x58>)
 8006f2e:	2000      	movs	r0, #0
 8006f30:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8006f32:	4621      	mov	r1, r4
 8006f34:	2003      	movs	r0, #3
 8006f36:	f7ff ffa7 	bl	8006e88 <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 8006f3a:	7823      	ldrb	r3, [r4, #0]
 8006f3c:	2b06      	cmp	r3, #6
 8006f3e:	d000      	beq.n	8006f42 <MlmeIndication+0x4e>
}
 8006f40:	bd10      	pop	{r4, pc}
            IsUplinkTxPending = true;
 8006f42:	4b04      	ldr	r3, [pc, #16]	; (8006f54 <MlmeIndication+0x60>)
 8006f44:	2201      	movs	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]
}
 8006f48:	e7fa      	b.n	8006f40 <MlmeIndication+0x4c>
 8006f4a:	bf00      	nop
 8006f4c:	20000098 	.word	0x20000098
 8006f50:	20000578 	.word	0x20000578
 8006f54:	20000574 	.word	0x20000574

08006f58 <McpsConfirm>:
{
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8006f5c:	480c      	ldr	r0, [pc, #48]	; (8006f90 <McpsConfirm+0x38>)
 8006f5e:	2301      	movs	r3, #1
 8006f60:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 8006f62:	7863      	ldrb	r3, [r4, #1]
 8006f64:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8006f66:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8006f6a:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006f6c:	68e3      	ldr	r3, [r4, #12]
 8006f6e:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006f70:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8006f74:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8006f76:	6923      	ldr	r3, [r4, #16]
 8006f78:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006f7a:	7923      	ldrb	r3, [r4, #4]
 8006f7c:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006f7e:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <McpsConfirm+0x3c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f84:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8006f86:	4621      	mov	r1, r4
 8006f88:	2000      	movs	r0, #0
 8006f8a:	f7ff ff7d 	bl	8006e88 <LmHandlerPackagesNotify>
}
 8006f8e:	bd10      	pop	{r4, pc}
 8006f90:	200000ac 	.word	0x200000ac
 8006f94:	20000578 	.word	0x20000578

08006f98 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 8006f98:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006f9a:	2400      	movs	r4, #0
 8006f9c:	e001      	b.n	8006fa2 <LmHandlerPackageIsTxPending+0xa>
 8006f9e:	3401      	adds	r4, #1
 8006fa0:	b264      	sxtb	r4, r4
 8006fa2:	2c04      	cmp	r4, #4
 8006fa4:	dc0a      	bgt.n	8006fbc <LmHandlerPackageIsTxPending+0x24>
    {
        if( LmHandlerPackages[i] != NULL )
 8006fa6:	4b07      	ldr	r3, [pc, #28]	; (8006fc4 <LmHandlerPackageIsTxPending+0x2c>)
 8006fa8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0f6      	beq.n	8006f9e <LmHandlerPackageIsTxPending+0x6>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	4798      	blx	r3
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d0f1      	beq.n	8006f9e <LmHandlerPackageIsTxPending+0x6>
 8006fba:	e000      	b.n	8006fbe <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	bd10      	pop	{r4, pc}
 8006fc2:	bf00      	nop
 8006fc4:	2000057c 	.word	0x2000057c

08006fc8 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 8006fc8:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006fca:	2400      	movs	r4, #0
 8006fcc:	e001      	b.n	8006fd2 <LmHandlerPackagesProcess+0xa>
 8006fce:	3401      	adds	r4, #1
 8006fd0:	b264      	sxtb	r4, r4
 8006fd2:	2c04      	cmp	r4, #4
 8006fd4:	dc12      	bgt.n	8006ffc <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006fd6:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <LmHandlerPackagesProcess+0x38>)
 8006fd8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0f6      	beq.n	8006fce <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006fe0:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0f3      	beq.n	8006fce <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8006fe6:	b2e0      	uxtb	r0, r4
 8006fe8:	f7ff ff3e 	bl	8006e68 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d0ee      	beq.n	8006fce <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8006ff0:	4b03      	ldr	r3, [pc, #12]	; (8007000 <LmHandlerPackagesProcess+0x38>)
 8006ff2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	4798      	blx	r3
 8006ffa:	e7e8      	b.n	8006fce <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8006ffc:	bd38      	pop	{r3, r4, r5, pc}
 8006ffe:	bf00      	nop
 8007000:	2000057c 	.word	0x2000057c

08007004 <LmHandlerJoin>:
{
 8007004:	b510      	push	{r4, lr}
 8007006:	b08e      	sub	sp, #56	; 0x38
 8007008:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 800700a:	2301      	movs	r3, #1
 800700c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007010:	4b26      	ldr	r3, [pc, #152]	; (80070ac <LmHandlerJoin+0xa8>)
 8007012:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8007016:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 800701a:	2802      	cmp	r0, #2
 800701c:	d021      	beq.n	8007062 <LmHandlerJoin+0x5e>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800701e:	2101      	movs	r1, #1
 8007020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007024:	4b22      	ldr	r3, [pc, #136]	; (80070b0 <LmHandlerJoin+0xac>)
 8007026:	7199      	strb	r1, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8007028:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800702a:	2100      	movs	r1, #0
 800702c:	7159      	strb	r1, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800702e:	71dc      	strb	r4, [r3, #7]
        if (CtxRestoreDone == false)
 8007030:	4b20      	ldr	r3, [pc, #128]	; (80070b4 <LmHandlerJoin+0xb0>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	b1f3      	cbz	r3, 8007074 <LmHandlerJoin+0x70>
        LoRaMacStart();
 8007036:	f003 fa4d 	bl	800a4d4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800703a:	2301      	movs	r3, #1
 800703c:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8007040:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007044:	4668      	mov	r0, sp
 8007046:	f003 fc4d 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800704a:	4b1a      	ldr	r3, [pc, #104]	; (80070b4 <LmHandlerJoin+0xb0>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	b103      	cbz	r3, 8007052 <LmHandlerJoin+0x4e>
 8007050:	b114      	cbz	r4, 8007058 <LmHandlerJoin+0x54>
        LoRaMacMlmeRequest( &mlmeReq );
 8007052:	a809      	add	r0, sp, #36	; 0x24
 8007054:	f003 fecc 	bl	800adf0 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8007058:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800705a:	4b17      	ldr	r3, [pc, #92]	; (80070b8 <LmHandlerJoin+0xb4>)
 800705c:	601a      	str	r2, [r3, #0]
}
 800705e:	b00e      	add	sp, #56	; 0x38
 8007060:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8007062:	2202      	movs	r2, #2
 8007064:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8007068:	4b11      	ldr	r3, [pc, #68]	; (80070b0 <LmHandlerJoin+0xac>)
 800706a:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800706c:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 800706e:	f003 fa31 	bl	800a4d4 <LoRaMacStart>
 8007072:	e7ea      	b.n	800704a <LmHandlerJoin+0x46>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8007074:	231f      	movs	r3, #31
 8007076:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800707a:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800707e:	4668      	mov	r0, sp
 8007080:	f003 fc30 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8007084:	2320      	movs	r3, #32
 8007086:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800708a:	4b08      	ldr	r3, [pc, #32]	; (80070ac <LmHandlerJoin+0xa8>)
 800708c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007090:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8007094:	4668      	mov	r0, sp
 8007096:	f003 fc25 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800709a:	2329      	movs	r3, #41	; 0x29
 800709c:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80070a0:	4b06      	ldr	r3, [pc, #24]	; (80070bc <LmHandlerJoin+0xb8>)
 80070a2:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80070a4:	4668      	mov	r0, sp
 80070a6:	f003 fc1d 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
 80070aa:	e7c4      	b.n	8007036 <LmHandlerJoin+0x32>
 80070ac:	20000590 	.word	0x20000590
 80070b0:	20000090 	.word	0x20000090
 80070b4:	2000056e 	.word	0x2000056e
 80070b8:	20000570 	.word	0x20000570
 80070bc:	01000400 	.word	0x01000400

080070c0 <LmHandlerDeviceTimeReq>:
{
 80070c0:	b500      	push	{lr}
 80070c2:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 80070c4:	2309      	movs	r3, #9
 80070c6:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 80070ca:	a801      	add	r0, sp, #4
 80070cc:	f003 fe90 	bl	800adf0 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80070d0:	9a05      	ldr	r2, [sp, #20]
 80070d2:	4b04      	ldr	r3, [pc, #16]	; (80070e4 <LmHandlerDeviceTimeReq+0x24>)
 80070d4:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 80070d6:	b910      	cbnz	r0, 80070de <LmHandlerDeviceTimeReq+0x1e>
}
 80070d8:	b007      	add	sp, #28
 80070da:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80070de:	f04f 30ff 	mov.w	r0, #4294967295
 80070e2:	e7f9      	b.n	80070d8 <LmHandlerDeviceTimeReq+0x18>
 80070e4:	20000570 	.word	0x20000570

080070e8 <LmHandlerGetDutyCycleWaitTime>:
}
 80070e8:	4b01      	ldr	r3, [pc, #4]	; (80070f0 <LmHandlerGetDutyCycleWaitTime+0x8>)
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20000570 	.word	0x20000570

080070f4 <LmHandlerJoinStatus>:
{
 80070f4:	b500      	push	{lr}
 80070f6:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80070f8:	2301      	movs	r3, #1
 80070fa:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80070fe:	a801      	add	r0, sp, #4
 8007100:	f003 faa2 	bl	800a648 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 8007104:	b920      	cbnz	r0, 8007110 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007106:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800710a:	b110      	cbz	r0, 8007112 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800710c:	2001      	movs	r0, #1
 800710e:	e000      	b.n	8007112 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 8007110:	2000      	movs	r0, #0
}
 8007112:	b00b      	add	sp, #44	; 0x2c
 8007114:	f85d fb04 	ldr.w	pc, [sp], #4

08007118 <LmHandlerSend>:
{
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	4604      	mov	r4, r0
 800711e:	460d      	mov	r5, r1
 8007120:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 8007122:	f002 ff91 	bl	800a048 <LoRaMacIsBusy>
 8007126:	2800      	cmp	r0, #0
 8007128:	d164      	bne.n	80071f4 <LmHandlerSend+0xdc>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800712a:	f7ff ffe3 	bl	80070f4 <LmHandlerJoinStatus>
 800712e:	2801      	cmp	r0, #1
 8007130:	d137      	bne.n	80071a2 <LmHandlerSend+0x8a>
    TxParams.MsgType = isTxConfirmed;
 8007132:	4b33      	ldr	r3, [pc, #204]	; (8007200 <LmHandlerSend+0xe8>)
 8007134:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8007136:	3d00      	subs	r5, #0
 8007138:	bf18      	it	ne
 800713a:	2501      	movne	r5, #1
 800713c:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8007140:	4b30      	ldr	r3, [pc, #192]	; (8007204 <LmHandlerSend+0xec>)
 8007142:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007146:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800714a:	4669      	mov	r1, sp
 800714c:	7860      	ldrb	r0, [r4, #1]
 800714e:	f003 fa0f 	bl	800a570 <LoRaMacQueryTxPossible>
 8007152:	b370      	cbz	r0, 80071b2 <LmHandlerSend+0x9a>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8007154:	2300      	movs	r3, #0
 8007156:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800715a:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800715c:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8007160:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8007164:	4b26      	ldr	r3, [pc, #152]	; (8007200 <LmHandlerSend+0xe8>)
 8007166:	f103 0c10 	add.w	ip, r3, #16
 800716a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800716e:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8007172:	4a24      	ldr	r2, [pc, #144]	; (8007204 <LmHandlerSend+0xec>)
 8007174:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007178:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800717a:	4631      	mov	r1, r6
 800717c:	a801      	add	r0, sp, #4
 800717e:	f003 ff31 	bl	800afe4 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8007182:	9a05      	ldr	r2, [sp, #20]
 8007184:	4b20      	ldr	r3, [pc, #128]	; (8007208 <LmHandlerSend+0xf0>)
 8007186:	601a      	str	r2, [r3, #0]
    switch (status)
 8007188:	2811      	cmp	r0, #17
 800718a:	d830      	bhi.n	80071ee <LmHandlerSend+0xd6>
 800718c:	e8df f000 	tbb	[pc, r0]
 8007190:	2f2f1c21 	.word	0x2f2f1c21
 8007194:	352f2f2f 	.word	0x352f2f2f
 8007198:	2c2f2f2f 	.word	0x2c2f2f2f
 800719c:	1c1c2f2f 	.word	0x1c1c2f2f
 80071a0:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 80071a2:	4b1a      	ldr	r3, [pc, #104]	; (800720c <LmHandlerSend+0xf4>)
 80071a4:	79d9      	ldrb	r1, [r3, #7]
 80071a6:	7998      	ldrb	r0, [r3, #6]
 80071a8:	f7ff ff2c 	bl	8007004 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80071ac:	f06f 0502 	mvn.w	r5, #2
 80071b0:	e00c      	b.n	80071cc <LmHandlerSend+0xb4>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80071b2:	7823      	ldrb	r3, [r4, #0]
 80071b4:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80071b8:	7863      	ldrb	r3, [r4, #1]
 80071ba:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80071be:	6863      	ldr	r3, [r4, #4]
 80071c0:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 80071c2:	f04f 35ff 	mov.w	r5, #4294967295
 80071c6:	e7cd      	b.n	8007164 <LmHandlerSend+0x4c>
    switch (status)
 80071c8:	f06f 0501 	mvn.w	r5, #1
}
 80071cc:	4628      	mov	r0, r5
 80071ce:	b006      	add	sp, #24
 80071d0:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 80071d2:	4b0f      	ldr	r3, [pc, #60]	; (8007210 <LmHandlerSend+0xf8>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	701a      	strb	r2, [r3, #0]
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 80071d8:	f115 0f07 	cmn.w	r5, #7
 80071dc:	d0f6      	beq.n	80071cc <LmHandlerSend+0xb4>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80071de:	2500      	movs	r5, #0
 80071e0:	e7f4      	b.n	80071cc <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80071e2:	f06f 0504 	mvn.w	r5, #4
            break;
 80071e6:	e7f1      	b.n	80071cc <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 80071e8:	f06f 0505 	mvn.w	r5, #5
            break;
 80071ec:	e7ee      	b.n	80071cc <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 80071ee:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 80071f2:	e7eb      	b.n	80071cc <LmHandlerSend+0xb4>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80071f4:	f06f 0501 	mvn.w	r5, #1
 80071f8:	e7e8      	b.n	80071cc <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80071fa:	f06f 0502 	mvn.w	r5, #2
 80071fe:	e7e5      	b.n	80071cc <LmHandlerSend+0xb4>
 8007200:	200000ac 	.word	0x200000ac
 8007204:	20000590 	.word	0x20000590
 8007208:	20000570 	.word	0x20000570
 800720c:	20000090 	.word	0x20000090
 8007210:	20000574 	.word	0x20000574

08007214 <LmHandlerProcess>:
{
 8007214:	b500      	push	{lr}
 8007216:	b083      	sub	sp, #12
    LoRaMacProcess( );
 8007218:	f002 ff30 	bl	800a07c <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800721c:	f7ff fed4 	bl	8006fc8 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8007220:	f7ff feba 	bl	8006f98 <LmHandlerPackageIsTxPending>
 8007224:	b910      	cbnz	r0, 800722c <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 8007226:	4b0b      	ldr	r3, [pc, #44]	; (8007254 <LmHandlerProcess+0x40>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	b913      	cbnz	r3, 8007232 <LmHandlerProcess+0x1e>
}
 800722c:	b003      	add	sp, #12
 800722e:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 8007232:	2200      	movs	r2, #0
 8007234:	f88d 2000 	strb.w	r2, [sp]
 8007238:	f88d 2001 	strb.w	r2, [sp, #1]
 800723c:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800723e:	4b06      	ldr	r3, [pc, #24]	; (8007258 <LmHandlerProcess+0x44>)
 8007240:	78d9      	ldrb	r1, [r3, #3]
 8007242:	4668      	mov	r0, sp
 8007244:	f7ff ff68 	bl	8007118 <LmHandlerSend>
 8007248:	2800      	cmp	r0, #0
 800724a:	d1ef      	bne.n	800722c <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 800724c:	4b01      	ldr	r3, [pc, #4]	; (8007254 <LmHandlerProcess+0x40>)
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]
 8007252:	e7eb      	b.n	800722c <LmHandlerProcess+0x18>
 8007254:	20000574 	.word	0x20000574
 8007258:	20000590 	.word	0x20000590

0800725c <LmHandlerRequestClass>:
{
 800725c:	b510      	push	{r4, lr}
 800725e:	b08a      	sub	sp, #40	; 0x28
 8007260:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 8007262:	f002 fef1 	bl	800a048 <LoRaMacIsBusy>
 8007266:	2800      	cmp	r0, #0
 8007268:	d136      	bne.n	80072d8 <LmHandlerRequestClass+0x7c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800726a:	f7ff ff43 	bl	80070f4 <LmHandlerJoinStatus>
 800726e:	2801      	cmp	r0, #1
 8007270:	d135      	bne.n	80072de <LmHandlerRequestClass+0x82>
    mibReq.Type = MIB_DEVICE_CLASS;
 8007272:	2300      	movs	r3, #0
 8007274:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8007278:	a801      	add	r0, sp, #4
 800727a:	f003 f9e5 	bl	800a648 <LoRaMacMibGetRequestConfirm>
 800727e:	bb88      	cbnz	r0, 80072e4 <LmHandlerRequestClass+0x88>
    currentClass = mibReq.Param.Class;
 8007280:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 8007284:	42a3      	cmp	r3, r4
 8007286:	d030      	beq.n	80072ea <LmHandlerRequestClass+0x8e>
        switch( newClass )
 8007288:	2c01      	cmp	r4, #1
 800728a:	d030      	beq.n	80072ee <LmHandlerRequestClass+0x92>
 800728c:	2c02      	cmp	r4, #2
 800728e:	d014      	beq.n	80072ba <LmHandlerRequestClass+0x5e>
 8007290:	b114      	cbz	r4, 8007298 <LmHandlerRequestClass+0x3c>
 8007292:	2000      	movs	r0, #0
}
 8007294:	b00a      	add	sp, #40	; 0x28
 8007296:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 8007298:	b90b      	cbnz	r3, 800729e <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800729a:	2000      	movs	r0, #0
 800729c:	e7fa      	b.n	8007294 <LmHandlerRequestClass+0x38>
                    mibReq.Param.Class = newClass;
 800729e:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80072a2:	a801      	add	r0, sp, #4
 80072a4:	f003 fb1e 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
 80072a8:	bb20      	cbnz	r0, 80072f4 <LmHandlerRequestClass+0x98>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80072aa:	4b19      	ldr	r3, [pc, #100]	; (8007310 <LmHandlerRequestClass+0xb4>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	b31b      	cbz	r3, 80072fa <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80072b2:	4620      	mov	r0, r4
 80072b4:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80072b6:	2000      	movs	r0, #0
 80072b8:	e7ec      	b.n	8007294 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 80072ba:	bb03      	cbnz	r3, 80072fe <LmHandlerRequestClass+0xa2>
                    mibReq.Param.Class = newClass;
 80072bc:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 80072c0:	a801      	add	r0, sp, #4
 80072c2:	f003 fb0f 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
 80072c6:	b9e8      	cbnz	r0, 8007304 <LmHandlerRequestClass+0xa8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 80072c8:	4b11      	ldr	r3, [pc, #68]	; (8007310 <LmHandlerRequestClass+0xb4>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ce:	b1e3      	cbz	r3, 800730a <LmHandlerRequestClass+0xae>
                            LmHandlerCallbacks->OnClassChange( newClass );
 80072d0:	4620      	mov	r0, r4
 80072d2:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80072d4:	2000      	movs	r0, #0
 80072d6:	e7dd      	b.n	8007294 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80072d8:	f06f 0001 	mvn.w	r0, #1
 80072dc:	e7da      	b.n	8007294 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80072de:	f06f 0002 	mvn.w	r0, #2
 80072e2:	e7d7      	b.n	8007294 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	e7d4      	b.n	8007294 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80072ea:	2000      	movs	r0, #0
 80072ec:	e7d2      	b.n	8007294 <LmHandlerRequestClass+0x38>
                errorStatus = LORAMAC_HANDLER_ERROR;
 80072ee:	f04f 30ff 	mov.w	r0, #4294967295
 80072f2:	e7cf      	b.n	8007294 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	e7cc      	b.n	8007294 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80072fa:	2000      	movs	r0, #0
 80072fc:	e7ca      	b.n	8007294 <LmHandlerRequestClass+0x38>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 80072fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007302:	e7c7      	b.n	8007294 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8007304:	f04f 30ff 	mov.w	r0, #4294967295
 8007308:	e7c4      	b.n	8007294 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800730a:	2000      	movs	r0, #0
 800730c:	e7c2      	b.n	8007294 <LmHandlerRequestClass+0x38>
 800730e:	bf00      	nop
 8007310:	20000578 	.word	0x20000578

08007314 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 8007314:	b170      	cbz	r0, 8007334 <LmHandlerGetCurrentClass+0x20>
{
 8007316:	b510      	push	{r4, lr}
 8007318:	b08a      	sub	sp, #40	; 0x28
 800731a:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800731c:	2300      	movs	r3, #0
 800731e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 8007322:	a801      	add	r0, sp, #4
 8007324:	f003 f990 	bl	800a648 <LoRaMacMibGetRequestConfirm>
 8007328:	b938      	cbnz	r0, 800733a <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800732a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800732e:	7023      	strb	r3, [r4, #0]
}
 8007330:	b00a      	add	sp, #40	; 0x28
 8007332:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007338:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800733a:	f04f 30ff 	mov.w	r0, #4294967295
 800733e:	e7f7      	b.n	8007330 <LmHandlerGetCurrentClass+0x1c>

08007340 <McpsIndication>:
{
 8007340:	b530      	push	{r4, r5, lr}
 8007342:	b085      	sub	sp, #20
 8007344:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 8007346:	2200      	movs	r2, #0
 8007348:	f88d 2007 	strb.w	r2, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 800734c:	491d      	ldr	r1, [pc, #116]	; (80073c4 <McpsIndication+0x84>)
 800734e:	2201      	movs	r2, #1
 8007350:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 8007352:	7842      	ldrb	r2, [r0, #1]
 8007354:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8007356:	bb5a      	cbnz	r2, 80073b0 <McpsIndication+0x70>
 8007358:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800735a:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800735e:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8007360:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007364:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 8007366:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800736a:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800736c:	78db      	ldrb	r3, [r3, #3]
 800736e:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8007370:	6903      	ldr	r3, [r0, #16]
 8007372:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8007374:	78c3      	ldrb	r3, [r0, #3]
 8007376:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 800737a:	7b03      	ldrb	r3, [r0, #12]
 800737c:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8007380:	6883      	ldr	r3, [r0, #8]
 8007382:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 8007384:	4d10      	ldr	r5, [pc, #64]	; (80073c8 <McpsIndication+0x88>)
 8007386:	682b      	ldr	r3, [r5, #0]
 8007388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738a:	a802      	add	r0, sp, #8
 800738c:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800738e:	682b      	ldr	r3, [r5, #0]
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	b113      	cbz	r3, 800739a <McpsIndication+0x5a>
 8007394:	7e22      	ldrb	r2, [r4, #24]
 8007396:	b102      	cbz	r2, 800739a <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 8007398:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800739a:	4621      	mov	r1, r4
 800739c:	2001      	movs	r0, #1
 800739e:	f7ff fd73 	bl	8006e88 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 80073a2:	f10d 0007 	add.w	r0, sp, #7
 80073a6:	f7ff ffb5 	bl	8007314 <LmHandlerGetCurrentClass>
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 80073aa:	7963      	ldrb	r3, [r4, #5]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d001      	beq.n	80073b4 <McpsIndication+0x74>
}
 80073b0:	b005      	add	sp, #20
 80073b2:	bd30      	pop	{r4, r5, pc}
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 80073b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f9      	bne.n	80073b0 <McpsIndication+0x70>
        IsUplinkTxPending = true;
 80073bc:	4b03      	ldr	r3, [pc, #12]	; (80073cc <McpsIndication+0x8c>)
 80073be:	2201      	movs	r2, #1
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	e7f5      	b.n	80073b0 <McpsIndication+0x70>
 80073c4:	20000098 	.word	0x20000098
 80073c8:	20000578 	.word	0x20000578
 80073cc:	20000574 	.word	0x20000574

080073d0 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 80073d0:	b180      	cbz	r0, 80073f4 <LmHandlerGetTxDatarate+0x24>
{
 80073d2:	b510      	push	{r4, lr}
 80073d4:	b08a      	sub	sp, #40	; 0x28
 80073d6:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 80073d8:	2320      	movs	r3, #32
 80073da:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 80073de:	a801      	add	r0, sp, #4
 80073e0:	f003 f932 	bl	800a648 <LoRaMacMibGetRequestConfirm>
 80073e4:	b948      	cbnz	r0, 80073fa <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 80073e6:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 80073ea:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 80073ec:	4a04      	ldr	r2, [pc, #16]	; (8007400 <LmHandlerGetTxDatarate+0x30>)
 80073ee:	7113      	strb	r3, [r2, #4]
}
 80073f0:	b00a      	add	sp, #40	; 0x28
 80073f2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80073f8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80073fa:	f04f 30ff 	mov.w	r0, #4294967295
 80073fe:	e7f7      	b.n	80073f0 <LmHandlerGetTxDatarate+0x20>
 8007400:	20000590 	.word	0x20000590

08007404 <MlmeConfirm>:
{
 8007404:	b510      	push	{r4, lr}
 8007406:	b08a      	sub	sp, #40	; 0x28
 8007408:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800740a:	4824      	ldr	r0, [pc, #144]	; (800749c <MlmeConfirm+0x98>)
 800740c:	2300      	movs	r3, #0
 800740e:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 8007410:	7863      	ldrb	r3, [r4, #1]
 8007412:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8007414:	4b22      	ldr	r3, [pc, #136]	; (80074a0 <MlmeConfirm+0x9c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800741c:	4621      	mov	r1, r4
 800741e:	2002      	movs	r0, #2
 8007420:	f7ff fd32 	bl	8006e88 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 8007424:	7823      	ldrb	r3, [r4, #0]
 8007426:	2b04      	cmp	r3, #4
 8007428:	d029      	beq.n	800747e <MlmeConfirm+0x7a>
 800742a:	2b0b      	cmp	r3, #11
 800742c:	d02f      	beq.n	800748e <MlmeConfirm+0x8a>
 800742e:	2b01      	cmp	r3, #1
 8007430:	d001      	beq.n	8007436 <MlmeConfirm+0x32>
}
 8007432:	b00a      	add	sp, #40	; 0x28
 8007434:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8007436:	2306      	movs	r3, #6
 8007438:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800743c:	a801      	add	r0, sp, #4
 800743e:	f003 f903 	bl	800a648 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007442:	9a02      	ldr	r2, [sp, #8]
 8007444:	4b17      	ldr	r3, [pc, #92]	; (80074a4 <MlmeConfirm+0xa0>)
 8007446:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8007448:	4817      	ldr	r0, [pc, #92]	; (80074a8 <MlmeConfirm+0xa4>)
 800744a:	f7ff ffc1 	bl	80073d0 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800744e:	7863      	ldrb	r3, [r4, #1]
 8007450:	b16b      	cbz	r3, 800746e <MlmeConfirm+0x6a>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8007452:	4b16      	ldr	r3, [pc, #88]	; (80074ac <MlmeConfirm+0xa8>)
 8007454:	22ff      	movs	r2, #255	; 0xff
 8007456:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8007458:	4b11      	ldr	r3, [pc, #68]	; (80074a0 <MlmeConfirm+0x9c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	4813      	ldr	r0, [pc, #76]	; (80074ac <MlmeConfirm+0xa8>)
 8007460:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007462:	7863      	ldrb	r3, [r4, #1]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1e4      	bne.n	8007432 <MlmeConfirm+0x2e>
                SecureElementPrintSessionKeys();
 8007468:	f006 ff82 	bl	800e370 <SecureElementPrintSessionKeys>
        break;
 800746c:	e7e1      	b.n	8007432 <MlmeConfirm+0x2e>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800746e:	4b0f      	ldr	r3, [pc, #60]	; (80074ac <MlmeConfirm+0xa8>)
 8007470:	2200      	movs	r2, #0
 8007472:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8007474:	4b0e      	ldr	r3, [pc, #56]	; (80074b0 <MlmeConfirm+0xac>)
 8007476:	7858      	ldrb	r0, [r3, #1]
 8007478:	f7ff fef0 	bl	800725c <LmHandlerRequestClass>
 800747c:	e7ec      	b.n	8007458 <MlmeConfirm+0x54>
            RxParams.LinkCheck = true;
 800747e:	4b0d      	ldr	r3, [pc, #52]	; (80074b4 <MlmeConfirm+0xb0>)
 8007480:	2201      	movs	r2, #1
 8007482:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8007484:	7a22      	ldrb	r2, [r4, #8]
 8007486:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 8007488:	7a62      	ldrb	r2, [r4, #9]
 800748a:	74da      	strb	r2, [r3, #19]
        break;
 800748c:	e7d1      	b.n	8007432 <MlmeConfirm+0x2e>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800748e:	7863      	ldrb	r3, [r4, #1]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0ce      	beq.n	8007432 <MlmeConfirm+0x2e>
                LmHandlerDeviceTimeReq( );
 8007494:	f7ff fe14 	bl	80070c0 <LmHandlerDeviceTimeReq>
}
 8007498:	e7cb      	b.n	8007432 <MlmeConfirm+0x2e>
 800749a:	bf00      	nop
 800749c:	200000ac 	.word	0x200000ac
 80074a0:	20000578 	.word	0x20000578
 80074a4:	20000078 	.word	0x20000078
 80074a8:	20000094 	.word	0x20000094
 80074ac:	20000090 	.word	0x20000090
 80074b0:	20000590 	.word	0x20000590
 80074b4:	20000098 	.word	0x20000098

080074b8 <LmHandlerSetSystemMaxRxError>:
{
 80074b8:	b500      	push	{lr}
 80074ba:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 80074bc:	2323      	movs	r3, #35	; 0x23
 80074be:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 80074c2:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80074c4:	a801      	add	r0, sp, #4
 80074c6:	f003 fa0d 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
 80074ca:	b910      	cbnz	r0, 80074d2 <LmHandlerSetSystemMaxRxError+0x1a>
}
 80074cc:	b00b      	add	sp, #44	; 0x2c
 80074ce:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80074d2:	f04f 30ff 	mov.w	r0, #4294967295
 80074d6:	e7f9      	b.n	80074cc <LmHandlerSetSystemMaxRxError+0x14>

080074d8 <LmHandlerConfigure>:
{
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	b090      	sub	sp, #64	; 0x40
 80074dc:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80074de:	4c78      	ldr	r4, [pc, #480]	; (80076c0 <LmHandlerConfigure+0x1e8>)
 80074e0:	2214      	movs	r2, #20
 80074e2:	4620      	mov	r0, r4
 80074e4:	f009 f86a 	bl	80105bc <UTIL_MEM_cpy_8>
    IsUplinkTxPending = false;
 80074e8:	4b76      	ldr	r3, [pc, #472]	; (80076c4 <LmHandlerConfigure+0x1ec>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 80074ee:	f7fb f9f7 	bl	80028e0 <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80074f2:	7822      	ldrb	r2, [r4, #0]
 80074f4:	2301      	movs	r3, #1
 80074f6:	4093      	lsls	r3, r2
 80074f8:	6841      	ldr	r1, [r0, #4]
 80074fa:	420b      	tst	r3, r1
 80074fc:	d106      	bne.n	800750c <LmHandlerConfigure+0x34>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 80074fe:	4b72      	ldr	r3, [pc, #456]	; (80076c8 <LmHandlerConfigure+0x1f0>)
 8007500:	2201      	movs	r2, #1
 8007502:	2100      	movs	r1, #0
 8007504:	4608      	mov	r0, r1
 8007506:	f008 ff43 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800750a:	e7fe      	b.n	800750a <LmHandlerConfigure+0x32>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800750c:	496f      	ldr	r1, [pc, #444]	; (80076cc <LmHandlerConfigure+0x1f4>)
 800750e:	4870      	ldr	r0, [pc, #448]	; (80076d0 <LmHandlerConfigure+0x1f8>)
 8007510:	f002 fdfe 	bl	800a110 <LoRaMacInitialization>
 8007514:	2800      	cmp	r0, #0
 8007516:	f040 80cf 	bne.w	80076b8 <LmHandlerConfigure+0x1e0>
    mibReq.Type = MIB_NVM_CTXS;
 800751a:	2327      	movs	r3, #39	; 0x27
 800751c:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007520:	a807      	add	r0, sp, #28
 8007522:	f003 f9df 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
 8007526:	2800      	cmp	r0, #0
 8007528:	f040 8087 	bne.w	800763a <LmHandlerConfigure+0x162>
        CtxRestoreDone = true;
 800752c:	4b69      	ldr	r3, [pc, #420]	; (80076d4 <LmHandlerConfigure+0x1fc>)
 800752e:	2201      	movs	r2, #1
 8007530:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 8007532:	4b68      	ldr	r3, [pc, #416]	; (80076d4 <LmHandlerConfigure+0x1fc>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 80a8 	beq.w	800768c <LmHandlerConfigure+0x1b4>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800753c:	4b66      	ldr	r3, [pc, #408]	; (80076d8 <LmHandlerConfigure+0x200>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	b10b      	cbz	r3, 8007548 <LmHandlerConfigure+0x70>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8007544:	2000      	movs	r0, #0
 8007546:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 8007548:	2306      	movs	r3, #6
 800754a:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800754e:	a807      	add	r0, sp, #28
 8007550:	f003 f87a 	bl	800a648 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007554:	9a08      	ldr	r2, [sp, #32]
 8007556:	4b61      	ldr	r3, [pc, #388]	; (80076dc <LmHandlerConfigure+0x204>)
 8007558:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 800755a:	2327      	movs	r3, #39	; 0x27
 800755c:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007560:	a807      	add	r0, sp, #28
 8007562:	f003 f871 	bl	800a648 <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 8007566:	9a08      	ldr	r2, [sp, #32]
 8007568:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 800756c:	4b54      	ldr	r3, [pc, #336]	; (80076c0 <LmHandlerConfigure+0x1e8>)
 800756e:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 8007570:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 8007574:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 8007576:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 800757a:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 800757c:	2502      	movs	r5, #2
 800757e:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8007582:	a807      	add	r0, sp, #28
 8007584:	f003 f860 	bl	800a648 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8007588:	4c54      	ldr	r4, [pc, #336]	; (80076dc <LmHandlerConfigure+0x204>)
 800758a:	2208      	movs	r2, #8
 800758c:	9908      	ldr	r1, [sp, #32]
 800758e:	4620      	mov	r0, r4
 8007590:	f007 f855 	bl	800e63e <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8007594:	2303      	movs	r3, #3
 8007596:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800759a:	a807      	add	r0, sp, #28
 800759c:	f003 f854 	bl	800a648 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 80075a0:	2208      	movs	r2, #8
 80075a2:	9908      	ldr	r1, [sp, #32]
 80075a4:	18a0      	adds	r0, r4, r2
 80075a6:	f007 f84a 	bl	800e63e <memcpy1>
    SecureElementPrintKeys();
 80075aa:	f006 fe81 	bl	800e2b0 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 80075ae:	7de3      	ldrb	r3, [r4, #23]
 80075b0:	7da2      	ldrb	r2, [r4, #22]
 80075b2:	7d61      	ldrb	r1, [r4, #21]
 80075b4:	7d20      	ldrb	r0, [r4, #20]
 80075b6:	9003      	str	r0, [sp, #12]
 80075b8:	9102      	str	r1, [sp, #8]
 80075ba:	9201      	str	r2, [sp, #4]
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	4b48      	ldr	r3, [pc, #288]	; (80076e0 <LmHandlerConfigure+0x208>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	4611      	mov	r1, r2
 80075c4:	4628      	mov	r0, r5
 80075c6:	f008 fee3 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 80075ca:	260f      	movs	r6, #15
 80075cc:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 80075d0:	2301      	movs	r3, #1
 80075d2:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 80075d6:	a807      	add	r0, sp, #28
 80075d8:	f003 f984 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 80075dc:	2310      	movs	r3, #16
 80075de:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 80075e2:	2500      	movs	r5, #0
 80075e4:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80075e8:	a807      	add	r0, sp, #28
 80075ea:	f003 f97b 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 80075ee:	2304      	movs	r3, #4
 80075f0:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 80075f4:	4c32      	ldr	r4, [pc, #200]	; (80076c0 <LmHandlerConfigure+0x1e8>)
 80075f6:	78a3      	ldrb	r3, [r4, #2]
 80075f8:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80075fc:	a807      	add	r0, sp, #28
 80075fe:	f003 f971 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8007602:	2338      	movs	r3, #56	; 0x38
 8007604:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8007608:	6923      	ldr	r3, [r4, #16]
 800760a:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800760c:	a807      	add	r0, sp, #28
 800760e:	f003 f969 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007612:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8007616:	a905      	add	r1, sp, #20
 8007618:	7820      	ldrb	r0, [r4, #0]
 800761a:	f004 fe69 	bl	800c2f0 <RegionGetPhyParam>
 800761e:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8007620:	1b43      	subs	r3, r0, r5
 8007622:	bf18      	it	ne
 8007624:	2301      	movne	r3, #1
 8007626:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 8007628:	2014      	movs	r0, #20
 800762a:	f7ff ff45 	bl	80074b8 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800762e:	79a0      	ldrb	r0, [r4, #6]
 8007630:	f003 fdc6 	bl	800b1c0 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8007634:	4628      	mov	r0, r5
}
 8007636:	b010      	add	sp, #64	; 0x40
 8007638:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800763a:	2328      	movs	r3, #40	; 0x28
 800763c:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <LmHandlerConfigure+0x200>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	b14b      	cbz	r3, 800765c <LmHandlerConfigure+0x184>
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007648:	a807      	add	r0, sp, #28
 800764a:	f002 fffd 	bl	800a648 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800764e:	4b22      	ldr	r3, [pc, #136]	; (80076d8 <LmHandlerConfigure+0x200>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	f240 517c 	movw	r1, #1404	; 0x57c
 8007658:	9808      	ldr	r0, [sp, #32]
 800765a:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800765c:	2327      	movs	r3, #39	; 0x27
 800765e:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 8007662:	a807      	add	r0, sp, #28
 8007664:	f003 f93e 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
 8007668:	2800      	cmp	r0, #0
 800766a:	f47f af62 	bne.w	8007532 <LmHandlerConfigure+0x5a>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800766e:	2301      	movs	r3, #1
 8007670:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007674:	a807      	add	r0, sp, #28
 8007676:	f002 ffe7 	bl	800a648 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800767a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f43f af57 	beq.w	8007532 <LmHandlerConfigure+0x5a>
                CtxRestoreDone = true;
 8007684:	4b13      	ldr	r3, [pc, #76]	; (80076d4 <LmHandlerConfigure+0x1fc>)
 8007686:	2201      	movs	r2, #1
 8007688:	701a      	strb	r2, [r3, #0]
 800768a:	e752      	b.n	8007532 <LmHandlerConfigure+0x5a>
        mibReq.Type = MIB_NET_ID;
 800768c:	2305      	movs	r3, #5
 800768e:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8007692:	2300      	movs	r3, #0
 8007694:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8007696:	a807      	add	r0, sp, #28
 8007698:	f003 f924 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800769c:	4b0e      	ldr	r3, [pc, #56]	; (80076d8 <LmHandlerConfigure+0x200>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	4798      	blx	r3
 80076a4:	4b0d      	ldr	r3, [pc, #52]	; (80076dc <LmHandlerConfigure+0x204>)
 80076a6:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 80076a8:	2306      	movs	r3, #6
 80076aa:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 80076ae:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 80076b0:	a807      	add	r0, sp, #28
 80076b2:	f003 f917 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
 80076b6:	e761      	b.n	800757c <LmHandlerConfigure+0xa4>
        return LORAMAC_HANDLER_ERROR;
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295
 80076bc:	e7bb      	b.n	8007636 <LmHandlerConfigure+0x15e>
 80076be:	bf00      	nop
 80076c0:	20000590 	.word	0x20000590
 80076c4:	20000574 	.word	0x20000574
 80076c8:	080116d8 	.word	0x080116d8
 80076cc:	200005b4 	.word	0x200005b4
 80076d0:	200005c8 	.word	0x200005c8
 80076d4:	2000056e 	.word	0x2000056e
 80076d8:	20000578 	.word	0x20000578
 80076dc:	20000078 	.word	0x20000078
 80076e0:	08011724 	.word	0x08011724

080076e4 <LmHandlerPackageRegister>:
    switch( id )
 80076e4:	b9f0      	cbnz	r0, 8007724 <LmHandlerPackageRegister+0x40>
{
 80076e6:	b538      	push	{r3, r4, r5, lr}
 80076e8:	460c      	mov	r4, r1
 80076ea:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 80076ec:	f000 fb76 	bl	8007ddc <LmhpCompliancePackageFactory>
    if( package != NULL )
 80076f0:	b1a8      	cbz	r0, 800771e <LmHandlerPackageRegister+0x3a>
        LmHandlerPackages[id] = package;
 80076f2:	4a0e      	ldr	r2, [pc, #56]	; (800772c <LmHandlerPackageRegister+0x48>)
 80076f4:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80076f8:	4a0d      	ldr	r2, [pc, #52]	; (8007730 <LmHandlerPackageRegister+0x4c>)
 80076fa:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 80076fc:	4a0d      	ldr	r2, [pc, #52]	; (8007734 <LmHandlerPackageRegister+0x50>)
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8007702:	6301      	str	r1, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8007704:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8007706:	6341      	str	r1, [r0, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8007708:	490b      	ldr	r1, [pc, #44]	; (8007738 <LmHandlerPackageRegister+0x54>)
 800770a:	62c1      	str	r1, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800770c:	6992      	ldr	r2, [r2, #24]
 800770e:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8007710:	6843      	ldr	r3, [r0, #4]
 8007712:	22f2      	movs	r2, #242	; 0xf2
 8007714:	4909      	ldr	r1, [pc, #36]	; (800773c <LmHandlerPackageRegister+0x58>)
 8007716:	4620      	mov	r0, r4
 8007718:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800771a:	2000      	movs	r0, #0
}
 800771c:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 800771e:	f04f 30ff 	mov.w	r0, #4294967295
 8007722:	e7fb      	b.n	800771c <LmHandlerPackageRegister+0x38>
 8007724:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	2000057c 	.word	0x2000057c
 8007730:	08007005 	.word	0x08007005
 8007734:	20000578 	.word	0x20000578
 8007738:	080070c1 	.word	0x080070c1
 800773c:	2000047c 	.word	0x2000047c

08007740 <LmHandlerInit>:
{
 8007740:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 8007742:	4b13      	ldr	r3, [pc, #76]	; (8007790 <LmHandlerInit+0x50>)
 8007744:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8007746:	4b13      	ldr	r3, [pc, #76]	; (8007794 <LmHandlerInit+0x54>)
 8007748:	4a13      	ldr	r2, [pc, #76]	; (8007798 <LmHandlerInit+0x58>)
 800774a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800774c:	4a13      	ldr	r2, [pc, #76]	; (800779c <LmHandlerInit+0x5c>)
 800774e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007750:	4a13      	ldr	r2, [pc, #76]	; (80077a0 <LmHandlerInit+0x60>)
 8007752:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007754:	4a13      	ldr	r2, [pc, #76]	; (80077a4 <LmHandlerInit+0x64>)
 8007756:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007758:	6802      	ldr	r2, [r0, #0]
 800775a:	4b13      	ldr	r3, [pc, #76]	; (80077a8 <LmHandlerInit+0x68>)
 800775c:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800775e:	6842      	ldr	r2, [r0, #4]
 8007760:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 8007762:	6882      	ldr	r2, [r0, #8]
 8007764:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 8007766:	4a11      	ldr	r2, [pc, #68]	; (80077ac <LmHandlerInit+0x6c>)
 8007768:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800776a:	6982      	ldr	r2, [r0, #24]
 800776c:	611a      	str	r2, [r3, #16]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800776e:	4b10      	ldr	r3, [pc, #64]	; (80077b0 <LmHandlerInit+0x70>)
 8007770:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 8007772:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007774:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 8007776:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007778:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800777a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800777c:	60da      	str	r2, [r3, #12]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800777e:	4619      	mov	r1, r3
 8007780:	2000      	movs	r0, #0
 8007782:	f7ff ffaf 	bl	80076e4 <LmHandlerPackageRegister>
 8007786:	b900      	cbnz	r0, 800778a <LmHandlerInit+0x4a>
}
 8007788:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 800778a:	f04f 30ff 	mov.w	r0, #4294967295
 800778e:	e7fb      	b.n	8007788 <LmHandlerInit+0x48>
 8007790:	20000578 	.word	0x20000578
 8007794:	200005c8 	.word	0x200005c8
 8007798:	08006f59 	.word	0x08006f59
 800779c:	08007341 	.word	0x08007341
 80077a0:	08007405 	.word	0x08007405
 80077a4:	08006ef5 	.word	0x08006ef5
 80077a8:	200005b4 	.word	0x200005b4
 80077ac:	0800c2a1 	.word	0x0800c2a1
 80077b0:	200005a4 	.word	0x200005a4

080077b4 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 80077b4:	b161      	cbz	r1, 80077d0 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 80077b6:	b118      	cbz	r0, 80077c0 <LmHandlerGetVersion+0xc>
 80077b8:	2801      	cmp	r0, #1
 80077ba:	d005      	beq.n	80077c8 <LmHandlerGetVersion+0x14>
 80077bc:	2000      	movs	r0, #0
 80077be:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 80077c0:	4a05      	ldr	r2, [pc, #20]	; (80077d8 <LmHandlerGetVersion+0x24>)
 80077c2:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 80077c4:	2000      	movs	r0, #0
            break;
 80077c6:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 80077c8:	4a04      	ldr	r2, [pc, #16]	; (80077dc <LmHandlerGetVersion+0x28>)
 80077ca:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80077cc:	2000      	movs	r0, #0
            break;
 80077ce:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	01000400 	.word	0x01000400
 80077dc:	02010001 	.word	0x02010001

080077e0 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 80077e0:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 80077e2:	f003 fd01 	bl	800b1e8 <LoRaMacDeInitialization>
 80077e6:	b900      	cbnz	r0, 80077ea <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80077e8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80077ea:	f06f 0001 	mvn.w	r0, #1
 80077ee:	e7fb      	b.n	80077e8 <LmHandlerStop+0x8>

080077f0 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 80077f0:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 80077f2:	f002 fe8b 	bl	800a50c <LoRaMacHalt>
 80077f6:	b900      	cbnz	r0, 80077fa <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 80077f8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 80077fa:	f06f 0001 	mvn.w	r0, #1
 80077fe:	e7fb      	b.n	80077f8 <LmHandlerHalt+0x8>

08007800 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8007800:	b510      	push	{r4, lr}
 8007802:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8007804:	f7ff fff4 	bl	80077f0 <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 8007808:	4604      	mov	r4, r0
 800780a:	b148      	cbz	r0, 8007820 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800780c:	b92c      	cbnz	r4, 800781a <LmHandlerNvmDataStore+0x1a>
 800780e:	4b18      	ldr	r3, [pc, #96]	; (8007870 <LmHandlerNvmDataStore+0x70>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	b10b      	cbz	r3, 800781a <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8007816:	2001      	movs	r0, #1
 8007818:	4798      	blx	r3
    }

    return lmhStatus;
}
 800781a:	4620      	mov	r0, r4
 800781c:	b00a      	add	sp, #40	; 0x28
 800781e:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8007820:	f004 fd46 	bl	800c2b0 <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 8007824:	f110 0f02 	cmn.w	r0, #2
 8007828:	d012      	beq.n	8007850 <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800782a:	b9d0      	cbnz	r0, 8007862 <LmHandlerNvmDataStore+0x62>
 800782c:	4b10      	ldr	r3, [pc, #64]	; (8007870 <LmHandlerNvmDataStore+0x70>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	b1cb      	cbz	r3, 8007868 <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 8007834:	2327      	movs	r3, #39	; 0x27
 8007836:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800783a:	a801      	add	r0, sp, #4
 800783c:	f002 ff04 	bl	800a648 <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 8007840:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <LmHandlerNvmDataStore+0x70>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 800784a:	9802      	ldr	r0, [sp, #8]
 800784c:	4798      	blx	r3
 800784e:	e001      	b.n	8007854 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8007850:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8007854:	f004 fd3c 	bl	800c2d0 <NvmDataMgmtStoreEnd>
 8007858:	2800      	cmp	r0, #0
 800785a:	d0d7      	beq.n	800780c <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800785c:	f04f 34ff 	mov.w	r4, #4294967295
 8007860:	e7db      	b.n	800781a <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8007862:	f04f 34ff 	mov.w	r4, #4294967295
 8007866:	e7f5      	b.n	8007854 <LmHandlerNvmDataStore+0x54>
 8007868:	f04f 34ff 	mov.w	r4, #4294967295
 800786c:	e7f2      	b.n	8007854 <LmHandlerNvmDataStore+0x54>
 800786e:	bf00      	nop
 8007870:	20000578 	.word	0x20000578

08007874 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8007874:	4b01      	ldr	r3, [pc, #4]	; (800787c <LmhpComplianceIsInitialized+0x8>)
 8007876:	7818      	ldrb	r0, [r3, #0]
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	200005dc 	.word	0x200005dc

08007880 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 8007880:	4b01      	ldr	r3, [pc, #4]	; (8007888 <LmhpComplianceIsTxPending+0x8>)
 8007882:	7858      	ldrb	r0, [r3, #1]
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	200005dc 	.word	0x200005dc

0800788c <LmhpComplianceOnMlmeConfirm>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800788c:	4770      	bx	lr

0800788e <LmhpComplianceOnMlmeIndication>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800788e:	4770      	bx	lr

08007890 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 8007890:	b508      	push	{r3, lr}
    ComplianceTestState.IsTxPending = true;
 8007892:	4b03      	ldr	r3, [pc, #12]	; (80078a0 <OnProcessTimer+0x10>)
 8007894:	2201      	movs	r2, #1
 8007896:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 8007898:	4b02      	ldr	r3, [pc, #8]	; (80078a4 <OnProcessTimer+0x14>)
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	4798      	blx	r3
}
 800789e:	bd08      	pop	{r3, pc}
 80078a0:	200005dc 	.word	0x200005dc
 80078a4:	200000c8 	.word	0x200000c8

080078a8 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 80078a8:	4b8d      	ldr	r3, [pc, #564]	; (8007ae0 <LmhpComplianceOnMcpsIndication+0x238>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f000 81fd 	beq.w	8007cac <LmhpComplianceOnMcpsIndication+0x404>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 80078b2:	78c3      	ldrb	r3, [r0, #3]
 80078b4:	b90b      	cbnz	r3, 80078ba <LmhpComplianceOnMcpsIndication+0x12>
 80078b6:	7b83      	ldrb	r3, [r0, #14]
 80078b8:	b11b      	cbz	r3, 80078c2 <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 80078ba:	4a89      	ldr	r2, [pc, #548]	; (8007ae0 <LmhpComplianceOnMcpsIndication+0x238>)
 80078bc:	8a13      	ldrh	r3, [r2, #16]
 80078be:	3301      	adds	r3, #1
 80078c0:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 80078c2:	7b43      	ldrb	r3, [r0, #13]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 81f1 	beq.w	8007cac <LmhpComplianceOnMcpsIndication+0x404>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80078ca:	78c3      	ldrb	r3, [r0, #3]
 80078cc:	2be0      	cmp	r3, #224	; 0xe0
 80078ce:	f040 81ed 	bne.w	8007cac <LmhpComplianceOnMcpsIndication+0x404>
{
 80078d2:	b570      	push	{r4, r5, r6, lr}
 80078d4:	b094      	sub	sp, #80	; 0x50
    ComplianceTestState.DataBufferSize = 0;
 80078d6:	4b82      	ldr	r3, [pc, #520]	; (8007ae0 <LmhpComplianceOnMcpsIndication+0x238>)
 80078d8:	2200      	movs	r2, #0
 80078da:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 80078dc:	6884      	ldr	r4, [r0, #8]
 80078de:	7823      	ldrb	r3, [r4, #0]
 80078e0:	2b7f      	cmp	r3, #127	; 0x7f
 80078e2:	f200 8093 	bhi.w	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
 80078e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80078ea:	0080      	.short	0x0080
 80078ec:	00a600a1 	.word	0x00a600a1
 80078f0:	00b400ac 	.word	0x00b400ac
 80078f4:	00c800c1 	.word	0x00c800c1
 80078f8:	00f200e1 	.word	0x00f200e1
 80078fc:	0133011f 	.word	0x0133011f
 8007900:	00910091 	.word	0x00910091
 8007904:	00910091 	.word	0x00910091
 8007908:	00910091 	.word	0x00910091
 800790c:	00910091 	.word	0x00910091
 8007910:	00910091 	.word	0x00910091
 8007914:	00910091 	.word	0x00910091
 8007918:	00910091 	.word	0x00910091
 800791c:	00910091 	.word	0x00910091
 8007920:	00910091 	.word	0x00910091
 8007924:	00910091 	.word	0x00910091
 8007928:	01370091 	.word	0x01370091
 800792c:	0142013e 	.word	0x0142013e
 8007930:	00910091 	.word	0x00910091
 8007934:	00910091 	.word	0x00910091
 8007938:	00910091 	.word	0x00910091
 800793c:	00910091 	.word	0x00910091
 8007940:	00910091 	.word	0x00910091
 8007944:	00910091 	.word	0x00910091
 8007948:	00910091 	.word	0x00910091
 800794c:	00910091 	.word	0x00910091
 8007950:	00910091 	.word	0x00910091
 8007954:	00910091 	.word	0x00910091
 8007958:	00910091 	.word	0x00910091
 800795c:	00910091 	.word	0x00910091
 8007960:	00910091 	.word	0x00910091
 8007964:	00910091 	.word	0x00910091
 8007968:	00910091 	.word	0x00910091
 800796c:	00910091 	.word	0x00910091
 8007970:	00910091 	.word	0x00910091
 8007974:	00910091 	.word	0x00910091
 8007978:	00910091 	.word	0x00910091
 800797c:	00910091 	.word	0x00910091
 8007980:	00910091 	.word	0x00910091
 8007984:	00910091 	.word	0x00910091
 8007988:	00910091 	.word	0x00910091
 800798c:	00910091 	.word	0x00910091
 8007990:	00910091 	.word	0x00910091
 8007994:	00910091 	.word	0x00910091
 8007998:	00910091 	.word	0x00910091
 800799c:	00910091 	.word	0x00910091
 80079a0:	00910091 	.word	0x00910091
 80079a4:	00910091 	.word	0x00910091
 80079a8:	00910091 	.word	0x00910091
 80079ac:	00910091 	.word	0x00910091
 80079b0:	00910091 	.word	0x00910091
 80079b4:	00910091 	.word	0x00910091
 80079b8:	00910091 	.word	0x00910091
 80079bc:	00910091 	.word	0x00910091
 80079c0:	00910091 	.word	0x00910091
 80079c4:	00910091 	.word	0x00910091
 80079c8:	00910091 	.word	0x00910091
 80079cc:	00910091 	.word	0x00910091
 80079d0:	00910091 	.word	0x00910091
 80079d4:	00910091 	.word	0x00910091
 80079d8:	00910091 	.word	0x00910091
 80079dc:	00910091 	.word	0x00910091
 80079e0:	00910091 	.word	0x00910091
 80079e4:	016e014d 	.word	0x016e014d
 80079e8:	017c      	.short	0x017c
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 80079ea:	4b3d      	ldr	r3, [pc, #244]	; (8007ae0 <LmhpComplianceOnMcpsIndication+0x238>)
 80079ec:	68da      	ldr	r2, [r3, #12]
 80079ee:	2101      	movs	r1, #1
 80079f0:	7299      	strb	r1, [r3, #10]
 80079f2:	2000      	movs	r0, #0
 80079f4:	7010      	strb	r0, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 80079f6:	68d8      	ldr	r0, [r3, #12]
 80079f8:	7a9a      	ldrb	r2, [r3, #10]
 80079fa:	1854      	adds	r4, r2, r1
 80079fc:	729c      	strb	r4, [r3, #10]
 80079fe:	2406      	movs	r4, #6
 8007a00:	5484      	strb	r4, [r0, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8007a02:	68d8      	ldr	r0, [r3, #12]
 8007a04:	7a9a      	ldrb	r2, [r3, #10]
 8007a06:	1854      	adds	r4, r2, r1
 8007a08:	729c      	strb	r4, [r3, #10]
 8007a0a:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 8007a0c:	4b34      	ldr	r3, [pc, #208]	; (8007ae0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007a0e:	7a9b      	ldrb	r3, [r3, #10]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 8144 	beq.w	8007c9e <LmhpComplianceOnMcpsIndication+0x3f6>
        TimerSetValue( &ProcessTimer, 1000 );
 8007a16:	4c33      	ldr	r4, [pc, #204]	; (8007ae4 <LmhpComplianceOnMcpsIndication+0x23c>)
 8007a18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f009 f8ab 	bl	8010b78 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 8007a22:	4620      	mov	r0, r4
 8007a24:	f009 f862 	bl	8010aec <UTIL_TIMER_Start>
}
 8007a28:	b014      	add	sp, #80	; 0x50
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
        ComplianceTestState.IsResetCmdPending = true;
 8007a2c:	4b2c      	ldr	r3, [pc, #176]	; (8007ae0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 8007a34:	e7ea      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8007a36:	4b2c      	ldr	r3, [pc, #176]	; (8007ae8 <LmhpComplianceOnMcpsIndication+0x240>)
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	2002      	movs	r0, #2
 8007a3e:	4798      	blx	r3
        break;
 8007a40:	e7e4      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8007a42:	7862      	ldrb	r2, [r4, #1]
 8007a44:	4b26      	ldr	r3, [pc, #152]	; (8007ae0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007a46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 8007a50:	e7dc      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type            = MIB_ADR;
 8007a52:	2304      	movs	r3, #4
 8007a54:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8007a58:	7863      	ldrb	r3, [r4, #1]
 8007a5a:	3b00      	subs	r3, #0
 8007a5c:	bf18      	it	ne
 8007a5e:	2301      	movne	r3, #1
 8007a60:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007a64:	4668      	mov	r0, sp
 8007a66:	f002 ff3d 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
        break;
 8007a6a:	e7cf      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8007a6c:	7860      	ldrb	r0, [r4, #1]
 8007a6e:	3800      	subs	r0, #0
 8007a70:	bf18      	it	ne
 8007a72:	2001      	movne	r0, #1
 8007a74:	f003 fba4 	bl	800b1c0 <LoRaMacTestSetDutyCycleOn>
        break;
 8007a78:	e7c8      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8007a7a:	466d      	mov	r5, sp
 8007a7c:	4e1b      	ldr	r6, [pc, #108]	; (8007aec <LmhpComplianceOnMcpsIndication+0x244>)
 8007a7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a86:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007a8a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8007a8e:	7863      	ldrb	r3, [r4, #1]
        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8007a90:	2b0a      	cmp	r3, #10
 8007a92:	d8bb      	bhi.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8007a94:	4a16      	ldr	r2, [pc, #88]	; (8007af0 <LmhpComplianceOnMcpsIndication+0x248>)
 8007a96:	6812      	ldr	r2, [r2, #0]
 8007a98:	6852      	ldr	r2, [r2, #4]
 8007a9a:	2a00      	cmp	r2, #0
 8007a9c:	d0b6      	beq.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8007a9e:	a914      	add	r1, sp, #80	; 0x50
 8007aa0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007aa4:	f853 0c50 	ldr.w	r0, [r3, #-80]
 8007aa8:	4790      	blx	r2
        break;
 8007aaa:	e7af      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8007aac:	7862      	ldrb	r2, [r4, #1]
        if( ( frameType == 1 ) || ( frameType == 2 ) )
 8007aae:	1e53      	subs	r3, r2, #1
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d8aa      	bhi.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8007ab6:	1e50      	subs	r0, r2, #1
 8007ab8:	bf18      	it	ne
 8007aba:	2001      	movne	r0, #1
 8007abc:	4b08      	ldr	r3, [pc, #32]	; (8007ae0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007abe:	7218      	strb	r0, [r3, #8]
            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8007ac0:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <LmhpComplianceOnMcpsIndication+0x248>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0a0      	beq.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8007aca:	4798      	blx	r3
 8007acc:	e79e      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8007ace:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <LmhpComplianceOnMcpsIndication+0x238>)
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	7299      	strb	r1, [r3, #10]
 8007ad6:	2308      	movs	r3, #8
 8007ad8:	7013      	strb	r3, [r2, #0]
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8007ada:	460b      	mov	r3, r1
 8007adc:	e01b      	b.n	8007b16 <LmhpComplianceOnMcpsIndication+0x26e>
 8007ade:	bf00      	nop
 8007ae0:	200005dc 	.word	0x200005dc
 8007ae4:	20000614 	.word	0x20000614
 8007ae8:	200000c8 	.word	0x200000c8
 8007aec:	08011084 	.word	0x08011084
 8007af0:	200005d8 	.word	0x200005d8
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8007af4:	6882      	ldr	r2, [r0, #8]
 8007af6:	f101 0c01 	add.w	ip, r1, #1
 8007afa:	5c52      	ldrb	r2, [r2, r1]
 8007afc:	496c      	ldr	r1, [pc, #432]	; (8007cb0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007afe:	68cd      	ldr	r5, [r1, #12]
 8007b00:	7a8c      	ldrb	r4, [r1, #10]
 8007b02:	f104 0e01 	add.w	lr, r4, #1
 8007b06:	f881 e00a 	strb.w	lr, [r1, #10]
 8007b0a:	3201      	adds	r2, #1
 8007b0c:	552a      	strb	r2, [r5, r4]
             i++ )
 8007b0e:	3301      	adds	r3, #1
 8007b10:	b2db      	uxtb	r3, r3
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8007b12:	fa5f f18c 	uxtb.w	r1, ip
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8007b16:	4a66      	ldr	r2, [pc, #408]	; (8007cb0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007b18:	7a52      	ldrb	r2, [r2, #9]
 8007b1a:	7b04      	ldrb	r4, [r0, #12]
 8007b1c:	42a2      	cmp	r2, r4
 8007b1e:	bf28      	it	cs
 8007b20:	4622      	movcs	r2, r4
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d8e6      	bhi.n	8007af4 <LmhpComplianceOnMcpsIndication+0x24c>
 8007b26:	e771      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8007b28:	4b61      	ldr	r3, [pc, #388]	; (8007cb0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	7299      	strb	r1, [r3, #10]
 8007b30:	2109      	movs	r1, #9
 8007b32:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8007b34:	8a18      	ldrh	r0, [r3, #16]
 8007b36:	68d9      	ldr	r1, [r3, #12]
 8007b38:	7a9a      	ldrb	r2, [r3, #10]
 8007b3a:	1c54      	adds	r4, r2, #1
 8007b3c:	729c      	strb	r4, [r3, #10]
 8007b3e:	5488      	strb	r0, [r1, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8007b40:	8a1a      	ldrh	r2, [r3, #16]
 8007b42:	68d8      	ldr	r0, [r3, #12]
 8007b44:	7a99      	ldrb	r1, [r3, #10]
 8007b46:	1c4c      	adds	r4, r1, #1
 8007b48:	729c      	strb	r4, [r3, #10]
 8007b4a:	0a13      	lsrs	r3, r2, #8
 8007b4c:	5443      	strb	r3, [r0, r1]
        break;
 8007b4e:	e75d      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.RxAppCnt = 0;
 8007b50:	4b57      	ldr	r3, [pc, #348]	; (8007cb0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	821a      	strh	r2, [r3, #16]
        break;
 8007b56:	e759      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        mlmeReq.Type = MLME_LINK_CHECK;
 8007b58:	2304      	movs	r3, #4
 8007b5a:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMlmeRequest( &mlmeReq );
 8007b5e:	4668      	mov	r0, sp
 8007b60:	f003 f946 	bl	800adf0 <LoRaMacMlmeRequest>
        break;
 8007b64:	e752      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnDeviceTimeRequest( );
 8007b66:	4b53      	ldr	r3, [pc, #332]	; (8007cb4 <LmhpComplianceOnMcpsIndication+0x40c>)
 8007b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6a:	4798      	blx	r3
        break;
 8007b6c:	e74e      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8007b6e:	7860      	ldrb	r0, [r4, #1]
 8007b70:	4b4f      	ldr	r3, [pc, #316]	; (8007cb0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007b72:	7558      	strb	r0, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8007b74:	4b50      	ldr	r3, [pc, #320]	; (8007cb8 <LmhpComplianceOnMcpsIndication+0x410>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f43f af46 	beq.w	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8007b80:	4798      	blx	r3
 8007b82:	e743      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        if( mcpsIndication->BufferSize == 7 )
 8007b84:	7b03      	ldrb	r3, [r0, #12]
 8007b86:	2b07      	cmp	r3, #7
 8007b88:	f47f af40 	bne.w	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
            mlmeReq.Type = MLME_TXCW;
 8007b8c:	2305      	movs	r3, #5
 8007b8e:	f88d 3000 	strb.w	r3, [sp]
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8007b92:	7863      	ldrb	r3, [r4, #1]
 8007b94:	78a2      	ldrb	r2, [r4, #2]
 8007b96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            mlmeReq.Req.TxCw.Timeout =
 8007b9a:	f8ad 3004 	strh.w	r3, [sp, #4]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007b9e:	78e3      	ldrb	r3, [r4, #3]
 8007ba0:	7922      	ldrb	r2, [r4, #4]
 8007ba2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007ba6:	7962      	ldrb	r2, [r4, #5]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8007ba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8007bac:	2264      	movs	r2, #100	; 0x64
 8007bae:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 8007bb2:	9302      	str	r3, [sp, #8]
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8007bb4:	6883      	ldr	r3, [r0, #8]
 8007bb6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007bba:	f88d 300c 	strb.w	r3, [sp, #12]
            LoRaMacMlmeRequest( &mlmeReq );
 8007bbe:	4668      	mov	r0, sp
 8007bc0:	f003 f916 	bl	800adf0 <LoRaMacMlmeRequest>
        break;
 8007bc4:	e722      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8007bc6:	2339      	movs	r3, #57	; 0x39
 8007bc8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        mibReq.Param.IsCertPortOn = false;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        LoRaMacMibSetRequestConfirm( &mibReq );
 8007bd2:	a80b      	add	r0, sp, #44	; 0x2c
 8007bd4:	f002 fe86 	bl	800a8e4 <LoRaMacMibSetRequestConfirm>
        ComplianceTestState.IsResetCmdPending = true;
 8007bd8:	4b35      	ldr	r3, [pc, #212]	; (8007cb0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 8007be0:	e714      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_LORAWAN_VERSION;
 8007be2:	232a      	movs	r3, #42	; 0x2a
 8007be4:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8007be8:	4668      	mov	r0, sp
 8007bea:	f002 fd2d 	bl	800a648 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8007bee:	9901      	ldr	r1, [sp, #4]
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8007bf0:	9a02      	ldr	r2, [sp, #8]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8007bf2:	4b2f      	ldr	r3, [pc, #188]	; (8007cb0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007bf4:	68dc      	ldr	r4, [r3, #12]
 8007bf6:	7a98      	ldrb	r0, [r3, #10]
 8007bf8:	1c45      	adds	r5, r0, #1
 8007bfa:	729d      	strb	r5, [r3, #10]
 8007bfc:	257f      	movs	r5, #127	; 0x7f
 8007bfe:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8007c00:	482d      	ldr	r0, [pc, #180]	; (8007cb8 <LmhpComplianceOnMcpsIndication+0x410>)
 8007c02:	6800      	ldr	r0, [r0, #0]
 8007c04:	68dd      	ldr	r5, [r3, #12]
 8007c06:	7a9c      	ldrb	r4, [r3, #10]
 8007c08:	1c66      	adds	r6, r4, #1
 8007c0a:	729e      	strb	r6, [r3, #10]
 8007c0c:	78c6      	ldrb	r6, [r0, #3]
 8007c0e:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8007c10:	68dd      	ldr	r5, [r3, #12]
 8007c12:	7a9c      	ldrb	r4, [r3, #10]
 8007c14:	1c66      	adds	r6, r4, #1
 8007c16:	729e      	strb	r6, [r3, #10]
 8007c18:	7886      	ldrb	r6, [r0, #2]
 8007c1a:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8007c1c:	68dd      	ldr	r5, [r3, #12]
 8007c1e:	7a9c      	ldrb	r4, [r3, #10]
 8007c20:	1c66      	adds	r6, r4, #1
 8007c22:	729e      	strb	r6, [r3, #10]
 8007c24:	7846      	ldrb	r6, [r0, #1]
 8007c26:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8007c28:	68dd      	ldr	r5, [r3, #12]
 8007c2a:	7a9c      	ldrb	r4, [r3, #10]
 8007c2c:	1c66      	adds	r6, r4, #1
 8007c2e:	729e      	strb	r6, [r3, #10]
 8007c30:	7800      	ldrb	r0, [r0, #0]
 8007c32:	5528      	strb	r0, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8007c34:	68dc      	ldr	r4, [r3, #12]
 8007c36:	7a98      	ldrb	r0, [r3, #10]
 8007c38:	1c45      	adds	r5, r0, #1
 8007c3a:	729d      	strb	r5, [r3, #10]
 8007c3c:	f3c1 6507 	ubfx	r5, r1, #24, #8
 8007c40:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8007c42:	68dc      	ldr	r4, [r3, #12]
 8007c44:	7a98      	ldrb	r0, [r3, #10]
 8007c46:	1c45      	adds	r5, r0, #1
 8007c48:	729d      	strb	r5, [r3, #10]
 8007c4a:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8007c4e:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8007c50:	68dc      	ldr	r4, [r3, #12]
 8007c52:	7a98      	ldrb	r0, [r3, #10]
 8007c54:	1c45      	adds	r5, r0, #1
 8007c56:	729d      	strb	r5, [r3, #10]
 8007c58:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8007c5c:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8007c5e:	68dc      	ldr	r4, [r3, #12]
 8007c60:	7a98      	ldrb	r0, [r3, #10]
 8007c62:	1c45      	adds	r5, r0, #1
 8007c64:	729d      	strb	r5, [r3, #10]
 8007c66:	5421      	strb	r1, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8007c68:	68d8      	ldr	r0, [r3, #12]
 8007c6a:	7a99      	ldrb	r1, [r3, #10]
 8007c6c:	1c4c      	adds	r4, r1, #1
 8007c6e:	729c      	strb	r4, [r3, #10]
 8007c70:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8007c74:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8007c76:	68d8      	ldr	r0, [r3, #12]
 8007c78:	7a99      	ldrb	r1, [r3, #10]
 8007c7a:	1c4c      	adds	r4, r1, #1
 8007c7c:	729c      	strb	r4, [r3, #10]
 8007c7e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8007c82:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8007c84:	68d8      	ldr	r0, [r3, #12]
 8007c86:	7a99      	ldrb	r1, [r3, #10]
 8007c88:	1c4c      	adds	r4, r1, #1
 8007c8a:	729c      	strb	r4, [r3, #10]
 8007c8c:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8007c90:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8007c92:	68d8      	ldr	r0, [r3, #12]
 8007c94:	7a99      	ldrb	r1, [r3, #10]
 8007c96:	1c4c      	adds	r4, r1, #1
 8007c98:	729c      	strb	r4, [r3, #10]
 8007c9a:	5442      	strb	r2, [r0, r1]
        break;
 8007c9c:	e6b6      	b.n	8007a0c <LmhpComplianceOnMcpsIndication+0x164>
        TimerStop(&ProcessTimer);
 8007c9e:	4807      	ldr	r0, [pc, #28]	; (8007cbc <LmhpComplianceOnMcpsIndication+0x414>)
 8007ca0:	f008 feca 	bl	8010a38 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8007ca4:	4b02      	ldr	r3, [pc, #8]	; (8007cb0 <LmhpComplianceOnMcpsIndication+0x408>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	705a      	strb	r2, [r3, #1]
 8007caa:	e6bd      	b.n	8007a28 <LmhpComplianceOnMcpsIndication+0x180>
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	200005dc 	.word	0x200005dc
 8007cb4:	200000c8 	.word	0x200000c8
 8007cb8:	200005d8 	.word	0x200005d8
 8007cbc:	20000614 	.word	0x20000614

08007cc0 <LmhpComplianceProcess>:
{
 8007cc0:	b530      	push	{r4, r5, lr}
 8007cc2:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8007cc4:	4b28      	ldr	r3, [pc, #160]	; (8007d68 <LmhpComplianceProcess+0xa8>)
 8007cc6:	785b      	ldrb	r3, [r3, #1]
 8007cc8:	b993      	cbnz	r3, 8007cf0 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8007cca:	4b27      	ldr	r3, [pc, #156]	; (8007d68 <LmhpComplianceProcess+0xa8>)
 8007ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d13f      	bne.n	8007d54 <LmhpComplianceProcess+0x94>
    if( ComplianceTestState.IsResetCmdPending == true )
 8007cd4:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <LmhpComplianceProcess+0xa8>)
 8007cd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cda:	b13b      	cbz	r3, 8007cec <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 8007cdc:	4b22      	ldr	r3, [pc, #136]	; (8007d68 <LmhpComplianceProcess+0xa8>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if (CompliancePackage.OnSystemReset != NULL)
 8007ce4:	4b21      	ldr	r3, [pc, #132]	; (8007d6c <LmhpComplianceProcess+0xac>)
 8007ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce8:	b103      	cbz	r3, 8007cec <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 8007cea:	4798      	blx	r3
}
 8007cec:	b003      	add	sp, #12
 8007cee:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 8007cf0:	f008 fe62 	bl	80109b8 <UTIL_TIMER_GetCurrentTime>
 8007cf4:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8007cf6:	4b1c      	ldr	r3, [pc, #112]	; (8007d68 <LmhpComplianceProcess+0xa8>)
 8007cf8:	685d      	ldr	r5, [r3, #4]
 8007cfa:	f7ff f9f5 	bl	80070e8 <LmHandlerGetDutyCycleWaitTime>
 8007cfe:	4405      	add	r5, r0
 8007d00:	42a5      	cmp	r5, r4
 8007d02:	d2e7      	bcs.n	8007cd4 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 8007d04:	4b18      	ldr	r3, [pc, #96]	; (8007d68 <LmhpComplianceProcess+0xa8>)
 8007d06:	7a9b      	ldrb	r3, [r3, #10]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d0e3      	beq.n	8007cd4 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData = {
 8007d0c:	22e0      	movs	r2, #224	; 0xe0
 8007d0e:	f88d 2000 	strb.w	r2, [sp]
 8007d12:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8007d16:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <LmhpComplianceProcess+0xa8>)
 8007d18:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData = {
 8007d1a:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	7a19      	ldrb	r1, [r3, #8]
 8007d20:	4668      	mov	r0, sp
 8007d22:	f7ff f9f9 	bl	8007118 <LmHandlerSend>
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 8007d26:	f110 0f02 	cmn.w	r0, #2
 8007d2a:	d009      	beq.n	8007d40 <LmhpComplianceProcess+0x80>
 8007d2c:	f110 0f06 	cmn.w	r0, #6
 8007d30:	d006      	beq.n	8007d40 <LmhpComplianceProcess+0x80>
                    ComplianceTestState.IsTxPending = false;
 8007d32:	4b0d      	ldr	r3, [pc, #52]	; (8007d68 <LmhpComplianceProcess+0xa8>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8007d38:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 8007d3a:	4b0b      	ldr	r3, [pc, #44]	; (8007d68 <LmhpComplianceProcess+0xa8>)
 8007d3c:	605c      	str	r4, [r3, #4]
 8007d3e:	e7c9      	b.n	8007cd4 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1000 );
 8007d40:	4d0b      	ldr	r5, [pc, #44]	; (8007d70 <LmhpComplianceProcess+0xb0>)
 8007d42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d46:	4628      	mov	r0, r5
 8007d48:	f008 ff16 	bl	8010b78 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f008 fecd 	bl	8010aec <UTIL_TIMER_Start>
 8007d52:	e7f2      	b.n	8007d3a <LmhpComplianceProcess+0x7a>
            ComplianceTestState.IsClassReqCmdPending = false;
 8007d54:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <LmhpComplianceProcess+0xa8>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8007d5c:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 8007d60:	f7ff fa7c 	bl	800725c <LmHandlerRequestClass>
 8007d64:	e7b6      	b.n	8007cd4 <LmhpComplianceProcess+0x14>
 8007d66:	bf00      	nop
 8007d68:	200005dc 	.word	0x200005dc
 8007d6c:	200000c8 	.word	0x200000c8
 8007d70:	20000614 	.word	0x20000614

08007d74 <LmhpComplianceInit>:
{
 8007d74:	b530      	push	{r4, r5, lr}
 8007d76:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8007d78:	b188      	cbz	r0, 8007d9e <LmhpComplianceInit+0x2a>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	b179      	cbz	r1, 8007d9e <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 8007d7e:	4813      	ldr	r0, [pc, #76]	; (8007dcc <LmhpComplianceInit+0x58>)
 8007d80:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8007d82:	4b13      	ldr	r3, [pc, #76]	; (8007dd0 <LmhpComplianceInit+0x5c>)
 8007d84:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8007d86:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8007d88:	2201      	movs	r2, #1
 8007d8a:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	9200      	str	r2, [sp, #0]
 8007d90:	4b10      	ldr	r3, [pc, #64]	; (8007dd4 <LmhpComplianceInit+0x60>)
 8007d92:	f04f 31ff 	mov.w	r1, #4294967295
 8007d96:	4810      	ldr	r0, [pc, #64]	; (8007dd8 <LmhpComplianceInit+0x64>)
 8007d98:	f008 fdf0 	bl	801097c <UTIL_TIMER_Create>
 8007d9c:	e004      	b.n	8007da8 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	4a0a      	ldr	r2, [pc, #40]	; (8007dcc <LmhpComplianceInit+0x58>)
 8007da2:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 8007da4:	4a0a      	ldr	r2, [pc, #40]	; (8007dd0 <LmhpComplianceInit+0x5c>)
 8007da6:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8007da8:	4c09      	ldr	r4, [pc, #36]	; (8007dd0 <LmhpComplianceInit+0x5c>)
 8007daa:	2500      	movs	r5, #0
 8007dac:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8007dae:	2220      	movs	r2, #32
 8007db0:	4629      	mov	r1, r5
 8007db2:	f104 0014 	add.w	r0, r4, #20
 8007db6:	f006 fc5a 	bl	800e66e <memset1>
    ComplianceTestState.IsTxPending = false;
 8007dba:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8007dbc:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8007dbe:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 8007dc2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8007dc6:	b003      	add	sp, #12
 8007dc8:	bd30      	pop	{r4, r5, pc}
 8007dca:	bf00      	nop
 8007dcc:	200005d8 	.word	0x200005d8
 8007dd0:	200005dc 	.word	0x200005dc
 8007dd4:	08007891 	.word	0x08007891
 8007dd8:	20000614 	.word	0x20000614

08007ddc <LmhpCompliancePackageFactory>:
}
 8007ddc:	4800      	ldr	r0, [pc, #0]	; (8007de0 <LmhpCompliancePackageFactory+0x4>)
 8007dde:	4770      	bx	lr
 8007de0:	200000c8 	.word	0x200000c8

08007de4 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 8007de4:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8007de6:	4a06      	ldr	r2, [pc, #24]	; (8007e00 <OnRadioRxError+0x1c>)
 8007de8:	7813      	ldrb	r3, [r2, #0]
 8007dea:	f043 0304 	orr.w	r3, r3, #4
 8007dee:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007df0:	4b04      	ldr	r3, [pc, #16]	; (8007e04 <OnRadioRxError+0x20>)
 8007df2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8007df6:	b113      	cbz	r3, 8007dfe <OnRadioRxError+0x1a>
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	b103      	cbz	r3, 8007dfe <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007dfc:	4798      	blx	r3
    }
}
 8007dfe:	bd08      	pop	{r3, pc}
 8007e00:	2000062c 	.word	0x2000062c
 8007e04:	20000630 	.word	0x20000630

08007e08 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007e08:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <UpdateRxSlotIdleState+0x20>)
 8007e0a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d004      	beq.n	8007e1c <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8007e12:	4b06      	ldr	r3, [pc, #24]	; (8007e2c <UpdateRxSlotIdleState+0x24>)
 8007e14:	2206      	movs	r2, #6
 8007e16:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 8007e1a:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8007e1c:	4b03      	ldr	r3, [pc, #12]	; (8007e2c <UpdateRxSlotIdleState+0x24>)
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	20008000 	.word	0x20008000
 8007e2c:	20000630 	.word	0x20000630

08007e30 <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 8007e30:	4b01      	ldr	r3, [pc, #4]	; (8007e38 <LoRaMacEnableRequests+0x8>)
 8007e32:	f883 0496 	strb.w	r0, [r3, #1174]	; 0x496
}
 8007e36:	4770      	bx	lr
 8007e38:	20000630 	.word	0x20000630

08007e3c <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 8007e3c:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8007e3e:	4b15      	ldr	r3, [pc, #84]	; (8007e94 <LoRaMacHandleIndicationEvents+0x58>)
 8007e40:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007e44:	f013 0f08 	tst.w	r3, #8
 8007e48:	d00e      	beq.n	8007e68 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8007e4a:	4812      	ldr	r0, [pc, #72]	; (8007e94 <LoRaMacHandleIndicationEvents+0x58>)
 8007e4c:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 8007e50:	f36f 03c3 	bfc	r3, #3, #1
 8007e54:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8007e58:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 8007e62:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 8007e66:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007e68:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <LoRaMacHandleIndicationEvents+0x58>)
 8007e6a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007e6e:	f013 0f02 	tst.w	r3, #2
 8007e72:	d00e      	beq.n	8007e92 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8007e74:	4807      	ldr	r0, [pc, #28]	; (8007e94 <LoRaMacHandleIndicationEvents+0x58>)
 8007e76:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 8007e7a:	f36f 0341 	bfc	r3, #1, #1
 8007e7e:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8007e82:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 8007e8c:	f200 4024 	addw	r0, r0, #1060	; 0x424
 8007e90:	4798      	blx	r3
    }
}
 8007e92:	bd08      	pop	{r3, pc}
 8007e94:	20000630 	.word	0x20000630

08007e98 <CheckForMinimumAbpDatarate>:
}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8007e98:	b110      	cbz	r0, 8007ea0 <CheckForMinimumAbpDatarate+0x8>
 8007e9a:	2901      	cmp	r1, #1
 8007e9c:	d001      	beq.n	8007ea2 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 8007e9e:	2000      	movs	r0, #0
}
 8007ea0:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8007ea2:	2a00      	cmp	r2, #0
 8007ea4:	d0fc      	beq.n	8007ea0 <CheckForMinimumAbpDatarate+0x8>
    return false;
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	4770      	bx	lr
	...

08007eac <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8007eac:	4b07      	ldr	r3, [pc, #28]	; (8007ecc <LoRaMacCheckForRxAbort+0x20>)
 8007eae:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8007eb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007eb6:	d008      	beq.n	8007eca <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8007eb8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007ebc:	4a03      	ldr	r2, [pc, #12]	; (8007ecc <LoRaMacCheckForRxAbort+0x20>)
 8007ebe:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8007ec2:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8007ec6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8007eca:	4770      	bx	lr
 8007ecc:	20000630 	.word	0x20000630

08007ed0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8007ed0:	4b06      	ldr	r3, [pc, #24]	; (8007eec <CalculateBackOff+0x1c>)
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed4:	b94b      	cbnz	r3, 8007eea <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007ed6:	4a05      	ldr	r2, [pc, #20]	; (8007eec <CalculateBackOff+0x1c>)
 8007ed8:	f8b2 310c 	ldrh.w	r3, [r2, #268]	; 0x10c
 8007edc:	4904      	ldr	r1, [pc, #16]	; (8007ef0 <CalculateBackOff+0x20>)
 8007ede:	f8d1 1420 	ldr.w	r1, [r1, #1056]	; 0x420
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	fb01 f303 	mul.w	r3, r1, r3
 8007ee8:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8007eea:	4770      	bx	lr
 8007eec:	20008000 	.word	0x20008000
 8007ef0:	20000630 	.word	0x20000630

08007ef4 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8007ef4:	b508      	push	{r3, lr}
 8007ef6:	4684      	mov	ip, r0
 8007ef8:	4608      	mov	r0, r1
 8007efa:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8007efc:	4b06      	ldr	r3, [pc, #24]	; (8007f18 <SetTxContinuousWave+0x24>)
 8007efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f00:	4662      	mov	r2, ip
 8007f02:	b249      	sxtb	r1, r1
 8007f04:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007f06:	4a05      	ldr	r2, [pc, #20]	; (8007f1c <SetTxContinuousWave+0x28>)
 8007f08:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8007f0c:	f043 0302 	orr.w	r3, r3, #2
 8007f10:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8007f14:	2000      	movs	r0, #0
 8007f16:	bd08      	pop	{r3, pc}
 8007f18:	08011dbc 	.word	0x08011dbc
 8007f1c:	20000630 	.word	0x20000630

08007f20 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8007f20:	4602      	mov	r2, r0
 8007f22:	b1f8      	cbz	r0, 8007f64 <DetermineFrameType+0x44>
 8007f24:	b301      	cbz	r1, 8007f68 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8007f26:	7b03      	ldrb	r3, [r0, #12]
 8007f28:	f013 030f 	ands.w	r3, r3, #15
 8007f2c:	d005      	beq.n	8007f3a <DetermineFrameType+0x1a>
 8007f2e:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007f32:	b110      	cbz	r0, 8007f3a <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 8007f34:	2000      	movs	r0, #0
 8007f36:	7008      	strb	r0, [r1, #0]
 8007f38:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8007f3a:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8007f3e:	b910      	cbnz	r0, 8007f46 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 8007f40:	2301      	movs	r3, #1
 8007f42:	700b      	strb	r3, [r1, #0]
 8007f44:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8007f46:	b92b      	cbnz	r3, 8007f54 <DetermineFrameType+0x34>
 8007f48:	f892 0020 	ldrb.w	r0, [r2, #32]
 8007f4c:	b910      	cbnz	r0, 8007f54 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 8007f4e:	2302      	movs	r3, #2
 8007f50:	700b      	strb	r3, [r1, #0]
 8007f52:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8007f54:	b953      	cbnz	r3, 8007f6c <DetermineFrameType+0x4c>
 8007f56:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007f5a:	b14a      	cbz	r2, 8007f70 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 8007f5c:	2203      	movs	r2, #3
 8007f5e:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 8007f60:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8007f62:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8007f64:	2003      	movs	r0, #3
 8007f66:	4770      	bx	lr
 8007f68:	2003      	movs	r0, #3
 8007f6a:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 8007f6c:	2018      	movs	r0, #24
 8007f6e:	4770      	bx	lr
 8007f70:	2018      	movs	r0, #24
}
 8007f72:	4770      	bx	lr

08007f74 <CheckRetrans>:
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 8007f74:	4288      	cmp	r0, r1
 8007f76:	d201      	bcs.n	8007f7c <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 8007f78:	2000      	movs	r0, #0
 8007f7a:	4770      	bx	lr
        return true;
 8007f7c:	2001      	movs	r0, #1
}
 8007f7e:	4770      	bx	lr

08007f80 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8007f80:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8007f82:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <CheckRetransUnconfirmedUplink+0x30>)
 8007f84:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8007f88:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <CheckRetransUnconfirmedUplink+0x34>)
 8007f8a:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 8007f8e:	f7ff fff1 	bl	8007f74 <CheckRetrans>
 8007f92:	b950      	cbnz	r0, 8007faa <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007f94:	4b07      	ldr	r3, [pc, #28]	; (8007fb4 <CheckRetransUnconfirmedUplink+0x34>)
 8007f96:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007f9a:	f013 0f02 	tst.w	r3, #2
 8007f9e:	d004      	beq.n	8007faa <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8007fa0:	4b04      	ldr	r3, [pc, #16]	; (8007fb4 <CheckRetransUnconfirmedUplink+0x34>)
 8007fa2:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d900      	bls.n	8007fac <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 8007faa:	bd08      	pop	{r3, pc}
            return true;
 8007fac:	2001      	movs	r0, #1
 8007fae:	e7fc      	b.n	8007faa <CheckRetransUnconfirmedUplink+0x2a>
 8007fb0:	20008000 	.word	0x20008000
 8007fb4:	20000630 	.word	0x20000630

08007fb8 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8007fb8:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8007fba:	4b09      	ldr	r3, [pc, #36]	; (8007fe0 <CheckRetransConfirmedUplink+0x28>)
 8007fbc:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8007fc0:	4b08      	ldr	r3, [pc, #32]	; (8007fe4 <CheckRetransConfirmedUplink+0x2c>)
 8007fc2:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 8007fc6:	f7ff ffd5 	bl	8007f74 <CheckRetrans>
 8007fca:	b940      	cbnz	r0, 8007fde <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8007fcc:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <CheckRetransConfirmedUplink+0x2c>)
 8007fce:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007fd2:	f013 0f02 	tst.w	r3, #2
 8007fd6:	d002      	beq.n	8007fde <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8007fd8:	4b02      	ldr	r3, [pc, #8]	; (8007fe4 <CheckRetransConfirmedUplink+0x2c>)
 8007fda:	f893 0448 	ldrb.w	r0, [r3, #1096]	; 0x448
        {
            return true;
        }
    }
    return false;
}
 8007fde:	bd08      	pop	{r3, pc}
 8007fe0:	20008000 	.word	0x20008000
 8007fe4:	20000630 	.word	0x20000630

08007fe8 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 8007fe8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007fec:	d000      	beq.n	8007ff0 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 8007fee:	3001      	adds	r0, #1
    }
    return counter;
}
 8007ff0:	4770      	bx	lr
	...

08007ff4 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8007ff4:	b510      	push	{r4, lr}
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8007ff6:	4b12      	ldr	r3, [pc, #72]	; (8008040 <StopRetransmission+0x4c>)
 8007ff8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8007ffc:	f013 0f02 	tst.w	r3, #2
 8008000:	d004      	beq.n	800800c <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8008002:	4b0f      	ldr	r3, [pc, #60]	; (8008040 <StopRetransmission+0x4c>)
 8008004:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008008:	2b01      	cmp	r3, #1
 800800a:	d908      	bls.n	800801e <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800800c:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <StopRetransmission+0x50>)
 800800e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8008012:	b123      	cbz	r3, 800801e <StopRetransmission+0x2a>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8008014:	4c0b      	ldr	r4, [pc, #44]	; (8008044 <StopRetransmission+0x50>)
 8008016:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008018:	f7ff ffe6 	bl	8007fe8 <IncreaseAdrAckCounter>
 800801c:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800801e:	4b08      	ldr	r3, [pc, #32]	; (8008040 <StopRetransmission+0x4c>)
 8008020:	2200      	movs	r2, #0
 8008022:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 8008026:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 800802a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800802e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 8008032:	f022 0202 	bic.w	r2, r2, #2
 8008036:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800803a:	2001      	movs	r0, #1
 800803c:	bd10      	pop	{r4, pc}
 800803e:	bf00      	nop
 8008040:	20000630 	.word	0x20000630
 8008044:	20008000 	.word	0x20008000

08008048 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8008048:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800804a:	4b04      	ldr	r3, [pc, #16]	; (800805c <CallNvmDataChangeCallback+0x14>)
 800804c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008050:	b113      	cbz	r3, 8008058 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8008052:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008054:	b103      	cbz	r3, 8008058 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8008056:	4798      	blx	r3
    }
}
 8008058:	bd08      	pop	{r3, pc}
 800805a:	bf00      	nop
 800805c:	20000630 	.word	0x20000630

08008060 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <IsRequestPending+0x14>)
 8008062:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
 8008066:	f010 0005 	ands.w	r0, r0, #5
 800806a:	d100      	bne.n	800806e <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800806c:	4770      	bx	lr
        return 1;
 800806e:	2001      	movs	r0, #1
 8008070:	e7fc      	b.n	800806c <IsRequestPending+0xc>
 8008072:	bf00      	nop
 8008074:	20000630 	.word	0x20000630

08008078 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8008078:	b500      	push	{lr}
 800807a:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800807c:	4b0d      	ldr	r3, [pc, #52]	; (80080b4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800807e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8008082:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8008086:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800808a:	220d      	movs	r2, #13
 800808c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008090:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008094:	b113      	cbz	r3, 800809c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008096:	230e      	movs	r3, #14
 8008098:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800809c:	a902      	add	r1, sp, #8
 800809e:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 80080a0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80080a4:	f004 f924 	bl	800c2f0 <RegionGetPhyParam>
 80080a8:	9001      	str	r0, [sp, #4]
}
 80080aa:	b2c0      	uxtb	r0, r0
 80080ac:	b005      	add	sp, #20
 80080ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80080b2:	bf00      	nop
 80080b4:	20008000 	.word	0x20008000

080080b8 <ValidatePayloadLength>:
{
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	4605      	mov	r5, r0
 80080bc:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80080be:	4608      	mov	r0, r1
 80080c0:	f7ff ffda 	bl	8008078 <GetMaxAppPayloadWithoutFOptsLength>
 80080c4:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 80080c6:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d303      	bcc.n	80080d4 <ValidatePayloadLength+0x1c>
 80080cc:	2aff      	cmp	r2, #255	; 0xff
 80080ce:	d903      	bls.n	80080d8 <ValidatePayloadLength+0x20>
    return false;
 80080d0:	2000      	movs	r0, #0
 80080d2:	e000      	b.n	80080d6 <ValidatePayloadLength+0x1e>
 80080d4:	2000      	movs	r0, #0
}
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 80080d8:	2001      	movs	r0, #1
 80080da:	e7fc      	b.n	80080d6 <ValidatePayloadLength+0x1e>

080080dc <ProcessRadioTxDone>:
{
 80080dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080de:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80080e0:	4b35      	ldr	r3, [pc, #212]	; (80081b8 <ProcessRadioTxDone+0xdc>)
 80080e2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d002      	beq.n	80080f0 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 80080ea:	4b34      	ldr	r3, [pc, #208]	; (80081bc <ProcessRadioTxDone+0xe0>)
 80080ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ee:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 80080f0:	4c33      	ldr	r4, [pc, #204]	; (80081c0 <ProcessRadioTxDone+0xe4>)
 80080f2:	f504 7560 	add.w	r5, r4, #896	; 0x380
 80080f6:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 80080fa:	4628      	mov	r0, r5
 80080fc:	f008 fd3c 	bl	8010b78 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8008100:	4628      	mov	r0, r5
 8008102:	f008 fcf3 	bl	8010aec <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8008106:	f504 7566 	add.w	r5, r4, #920	; 0x398
 800810a:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800810e:	4628      	mov	r0, r5
 8008110:	f008 fd32 	bl	8010b78 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8008114:	4628      	mov	r0, r5
 8008116:	f008 fce9 	bl	8010aec <UTIL_TIMER_Start>
    if( MacCtx.NodeAckRequested == true )
 800811a:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800811e:	2b00      	cmp	r3, #0
 8008120:	d134      	bne.n	800818c <ProcessRadioTxDone+0xb0>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008122:	4b27      	ldr	r3, [pc, #156]	; (80081c0 <ProcessRadioTxDone+0xe4>)
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800812a:	4b26      	ldr	r3, [pc, #152]	; (80081c4 <ProcessRadioTxDone+0xe8>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4c22      	ldr	r4, [pc, #136]	; (80081b8 <ProcessRadioTxDone+0xdc>)
 8008130:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8008132:	4f23      	ldr	r7, [pc, #140]	; (80081c0 <ProcessRadioTxDone+0xe4>)
 8008134:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 8008138:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800813c:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800813e:	ae0c      	add	r6, sp, #48	; 0x30
 8008140:	4630      	mov	r0, r6
 8008142:	f008 fbad 	bl	80108a0 <SysTimeGetMcuTime>
 8008146:	ad02      	add	r5, sp, #8
 8008148:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8008152:	e896 0006 	ldmia.w	r6, {r1, r2}
 8008156:	4628      	mov	r0, r5
 8008158:	f008 fb3f 	bl	80107da <SysTimeSub>
 800815c:	ab07      	add	r3, sp, #28
 800815e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008162:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8008166:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800816a:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800816c:	2301      	movs	r3, #1
 800816e:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8008172:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8008176:	b90b      	cbnz	r3, 800817c <ProcessRadioTxDone+0xa0>
        txDone.Joined  = false;
 8008178:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800817c:	a904      	add	r1, sp, #16
 800817e:	4b0e      	ldr	r3, [pc, #56]	; (80081b8 <ProcessRadioTxDone+0xdc>)
 8008180:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008184:	f004 f8c5 	bl	800c312 <RegionSetBandTxDone>
}
 8008188:	b00f      	add	sp, #60	; 0x3c
 800818a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800818c:	2315      	movs	r3, #21
 800818e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008192:	a90a      	add	r1, sp, #40	; 0x28
 8008194:	4b08      	ldr	r3, [pc, #32]	; (80081b8 <ProcessRadioTxDone+0xdc>)
 8008196:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800819a:	f004 f8a9 	bl	800c2f0 <RegionGetPhyParam>
 800819e:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80081a0:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 80081a4:	f204 4404 	addw	r4, r4, #1028	; 0x404
 80081a8:	4401      	add	r1, r0
 80081aa:	4620      	mov	r0, r4
 80081ac:	f008 fce4 	bl	8010b78 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 80081b0:	4620      	mov	r0, r4
 80081b2:	f008 fc9b 	bl	8010aec <UTIL_TIMER_Start>
 80081b6:	e7b8      	b.n	800812a <ProcessRadioTxDone+0x4e>
 80081b8:	20008000 	.word	0x20008000
 80081bc:	08011dbc 	.word	0x08011dbc
 80081c0:	20000630 	.word	0x20000630
 80081c4:	20000bf0 	.word	0x20000bf0

080081c8 <OnRetransmitTimeoutTimerEvent>:
{
 80081c8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80081ca:	4c09      	ldr	r4, [pc, #36]	; (80081f0 <OnRetransmitTimeoutTimerEvent+0x28>)
 80081cc:	f204 4004 	addw	r0, r4, #1028	; 0x404
 80081d0:	f008 fc32 	bl	8010a38 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 80081d4:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 80081d8:	b113      	cbz	r3, 80081e0 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 80081da:	2201      	movs	r2, #1
 80081dc:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80081e0:	4b03      	ldr	r3, [pc, #12]	; (80081f0 <OnRetransmitTimeoutTimerEvent+0x28>)
 80081e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80081e6:	b113      	cbz	r3, 80081ee <OnRetransmitTimeoutTimerEvent+0x26>
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	b103      	cbz	r3, 80081ee <OnRetransmitTimeoutTimerEvent+0x26>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80081ec:	4798      	blx	r3
}
 80081ee:	bd10      	pop	{r4, pc}
 80081f0:	20000630 	.word	0x20000630

080081f4 <PrepareRxDoneAbort>:
{
 80081f4:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80081f6:	4b0e      	ldr	r3, [pc, #56]	; (8008230 <PrepareRxDoneAbort+0x3c>)
 80081f8:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80081fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008200:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 8008204:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8008208:	b973      	cbnz	r3, 8008228 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800820a:	4b09      	ldr	r3, [pc, #36]	; (8008230 <PrepareRxDoneAbort+0x3c>)
 800820c:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8008210:	f042 0202 	orr.w	r2, r2, #2
 8008214:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008218:	b2d2      	uxtb	r2, r2
 800821a:	f042 0220 	orr.w	r2, r2, #32
 800821e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 8008222:	f7ff fdf1 	bl	8007e08 <UpdateRxSlotIdleState>
}
 8008226:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 8008228:	2000      	movs	r0, #0
 800822a:	f7ff ffcd 	bl	80081c8 <OnRetransmitTimeoutTimerEvent>
 800822e:	e7ec      	b.n	800820a <PrepareRxDoneAbort+0x16>
 8008230:	20000630 	.word	0x20000630

08008234 <LoRaMacCheckForBeaconAcquisition>:
{
 8008234:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008236:	200b      	movs	r0, #11
 8008238:	f003 faf2 	bl	800b820 <LoRaMacConfirmQueueIsCmdActive>
 800823c:	b188      	cbz	r0, 8008262 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800823e:	4b0b      	ldr	r3, [pc, #44]	; (800826c <LoRaMacCheckForBeaconAcquisition+0x38>)
 8008240:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008244:	f010 0f01 	tst.w	r0, #1
 8008248:	d10d      	bne.n	8008266 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800824a:	f010 0004 	ands.w	r0, r0, #4
 800824e:	d009      	beq.n	8008264 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008250:	461a      	mov	r2, r3
 8008252:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8008256:	f023 0302 	bic.w	r3, r3, #2
 800825a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800825e:	2001      	movs	r0, #1
 8008260:	e000      	b.n	8008264 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8008262:	2000      	movs	r0, #0
}
 8008264:	bd08      	pop	{r3, pc}
    return 0x00;
 8008266:	2000      	movs	r0, #0
 8008268:	e7fc      	b.n	8008264 <LoRaMacCheckForBeaconAcquisition+0x30>
 800826a:	bf00      	nop
 800826c:	20000630 	.word	0x20000630

08008270 <GetFCntDown>:
{
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	9c04      	ldr	r4, [sp, #16]
 8008274:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8008276:	b1f2      	cbz	r2, 80082b6 <GetFCntDown+0x46>
 8008278:	4694      	mov	ip, r2
 800827a:	b1f4      	cbz	r4, 80082ba <GetFCntDown+0x4a>
 800827c:	b1fd      	cbz	r5, 80082be <GetFCntDown+0x4e>
    switch( addrID )
 800827e:	b188      	cbz	r0, 80082a4 <GetFCntDown+0x34>
 8008280:	2801      	cmp	r0, #1
 8008282:	d11e      	bne.n	80082c2 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8008284:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008288:	2b01      	cmp	r3, #1
 800828a:	d002      	beq.n	8008292 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800828c:	2303      	movs	r3, #3
 800828e:	7023      	strb	r3, [r4, #0]
 8008290:	e00a      	b.n	80082a8 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8008292:	b121      	cbz	r1, 800829e <GetFCntDown+0x2e>
 8008294:	2903      	cmp	r1, #3
 8008296:	d002      	beq.n	800829e <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8008298:	2301      	movs	r3, #1
 800829a:	7023      	strb	r3, [r4, #0]
 800829c:	e004      	b.n	80082a8 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800829e:	2302      	movs	r3, #2
 80082a0:	7023      	strb	r3, [r4, #0]
 80082a2:	e001      	b.n	80082a8 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 80082a4:	2304      	movs	r3, #4
 80082a6:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 80082a8:	462a      	mov	r2, r5
 80082aa:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 80082ae:	7820      	ldrb	r0, [r4, #0]
 80082b0:	f003 fcd8 	bl	800bc64 <LoRaMacCryptoGetFCntDown>
}
 80082b4:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80082b6:	2009      	movs	r0, #9
 80082b8:	e7fc      	b.n	80082b4 <GetFCntDown+0x44>
 80082ba:	2009      	movs	r0, #9
 80082bc:	e7fa      	b.n	80082b4 <GetFCntDown+0x44>
 80082be:	2009      	movs	r0, #9
 80082c0:	e7f8      	b.n	80082b4 <GetFCntDown+0x44>
    switch( addrID )
 80082c2:	2005      	movs	r0, #5
 80082c4:	e7f6      	b.n	80082b4 <GetFCntDown+0x44>

080082c6 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80082c6:	2801      	cmp	r0, #1
 80082c8:	d900      	bls.n	80082cc <RemoveMacCommands+0x6>
 80082ca:	4770      	bx	lr
{
 80082cc:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 80082ce:	2a01      	cmp	r2, #1
 80082d0:	d105      	bne.n	80082de <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 80082d2:	f011 0f20 	tst.w	r1, #32
 80082d6:	d004      	beq.n	80082e2 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80082d8:	f003 f93e 	bl	800b558 <LoRaMacCommandsRemoveStickyAnsCmds>
 80082dc:	e001      	b.n	80082e2 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80082de:	f003 f93b 	bl	800b558 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80082e2:	bd08      	pop	{r3, pc}

080082e4 <ProcessMacCommands>:
{
 80082e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e8:	b08f      	sub	sp, #60	; 0x3c
 80082ea:	4698      	mov	r8, r3
    uint8_t status = 0;
 80082ec:	2300      	movs	r3, #0
 80082ee:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80082f2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 80082f6:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	f200 82d9 	bhi.w	80088b2 <ProcessMacCommands+0x5ce>
 8008300:	4605      	mov	r5, r0
 8008302:	460c      	mov	r4, r1
 8008304:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 8008306:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 800830a:	42bc      	cmp	r4, r7
 800830c:	f080 82d1 	bcs.w	80088b2 <ProcessMacCommands+0x5ce>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8008310:	5d28      	ldrb	r0, [r5, r4]
 8008312:	f003 f989 	bl	800b628 <LoRaMacCommandsGetCmdSize>
 8008316:	4420      	add	r0, r4
 8008318:	42b8      	cmp	r0, r7
 800831a:	f300 82ca 	bgt.w	80088b2 <ProcessMacCommands+0x5ce>
        switch( payload[macIndex++] )
 800831e:	1c66      	adds	r6, r4, #1
 8008320:	b2f6      	uxtb	r6, r6
 8008322:	5d2b      	ldrb	r3, [r5, r4]
 8008324:	3b02      	subs	r3, #2
 8008326:	2b11      	cmp	r3, #17
 8008328:	f200 82c3 	bhi.w	80088b2 <ProcessMacCommands+0x5ce>
 800832c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008330:	00280012 	.word	0x00280012
 8008334:	00c000ad 	.word	0x00c000ad
 8008338:	011e0106 	.word	0x011e0106
 800833c:	01740157 	.word	0x01740157
 8008340:	02c101bf 	.word	0x02c101bf
 8008344:	01ef02c1 	.word	0x01ef02c1
 8008348:	02c102c1 	.word	0x02c102c1
 800834c:	02680251 	.word	0x02680251
 8008350:	02a10287 	.word	0x02a10287
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8008354:	2004      	movs	r0, #4
 8008356:	f003 fa63 	bl	800b820 <LoRaMacConfirmQueueIsCmdActive>
 800835a:	b908      	cbnz	r0, 8008360 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800835c:	4634      	mov	r4, r6
 800835e:	e7d4      	b.n	800830a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8008360:	2104      	movs	r1, #4
 8008362:	2000      	movs	r0, #0
 8008364:	f003 fa10 	bl	800b788 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8008368:	1ca3      	adds	r3, r4, #2
 800836a:	b2db      	uxtb	r3, r3
 800836c:	5da9      	ldrb	r1, [r5, r6]
 800836e:	4aa7      	ldr	r2, [pc, #668]	; (800860c <ProcessMacCommands+0x328>)
 8008370:	f882 1460 	strb.w	r1, [r2, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008374:	3403      	adds	r4, #3
 8008376:	b2e4      	uxtb	r4, r4
 8008378:	5ceb      	ldrb	r3, [r5, r3]
 800837a:	f882 3461 	strb.w	r3, [r2, #1121]	; 0x461
 800837e:	e7c4      	b.n	800830a <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 8008380:	2300      	movs	r3, #0
 8008382:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8008386:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800838a:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800838e:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8008392:	f1b9 0f00 	cmp.w	r9, #0
 8008396:	d036      	beq.n	8008406 <ProcessMacCommands+0x122>
                    macIndex += 4;
 8008398:	3405      	adds	r4, #5
 800839a:	b2e4      	uxtb	r4, r4
 800839c:	e7b5      	b.n	800830a <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800839e:	2305      	movs	r3, #5
 80083a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80083a4:	e050      	b.n	8008448 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 80083a6:	4b9a      	ldr	r3, [pc, #616]	; (8008610 <ProcessMacCommands+0x32c>)
 80083a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80083ac:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 80083b0:	4293      	cmp	r3, r2
 80083b2:	da03      	bge.n	80083bc <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 80083b4:	4b96      	ldr	r3, [pc, #600]	; (8008610 <ProcessMacCommands+0x32c>)
 80083b6:	2101      	movs	r1, #1
 80083b8:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80083bc:	4b94      	ldr	r3, [pc, #592]	; (8008610 <ProcessMacCommands+0x32c>)
 80083be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80083c2:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80083c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80083ca:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80083ce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80083d2:	e04d      	b.n	8008470 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80083d4:	2201      	movs	r2, #1
 80083d6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 80083da:	2003      	movs	r0, #3
 80083dc:	f003 f85c 	bl	800b498 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80083e0:	3401      	adds	r4, #1
 80083e2:	b2e4      	uxtb	r4, r4
 80083e4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80083e8:	498a      	ldr	r1, [pc, #552]	; (8008614 <ProcessMacCommands+0x330>)
 80083ea:	fba1 2103 	umull	r2, r1, r1, r3
 80083ee:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 80083f2:	d3ef      	bcc.n	80083d4 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 80083f4:	441e      	add	r6, r3
 80083f6:	b2f6      	uxtb	r6, r6
 80083f8:	1e74      	subs	r4, r6, #1
 80083fa:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 80083fc:	42a7      	cmp	r7, r4
 80083fe:	d93a      	bls.n	8008476 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8008400:	5d2b      	ldrb	r3, [r5, r4]
 8008402:	2b03      	cmp	r3, #3
 8008404:	d136      	bne.n	8008474 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8008406:	1e73      	subs	r3, r6, #1
 8008408:	442b      	add	r3, r5
 800840a:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800840c:	4b80      	ldr	r3, [pc, #512]	; (8008610 <ProcessMacCommands+0x32c>)
 800840e:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8008412:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008416:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
 800841a:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800841e:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 8008422:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008426:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800842a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800842e:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 8008432:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8008436:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800843a:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800843c:	2a00      	cmp	r2, #0
 800843e:	d0ae      	beq.n	800839e <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008440:	1bbb      	subs	r3, r7, r6
 8008442:	3301      	adds	r3, #1
 8008444:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8008448:	ab05      	add	r3, sp, #20
 800844a:	9301      	str	r3, [sp, #4]
 800844c:	ab03      	add	r3, sp, #12
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	f10d 030b 	add.w	r3, sp, #11
 8008454:	f10d 020a 	add.w	r2, sp, #10
 8008458:	a907      	add	r1, sp, #28
 800845a:	486d      	ldr	r0, [pc, #436]	; (8008610 <ProcessMacCommands+0x32c>)
 800845c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 8008460:	f003 ffa6 	bl	800c3b0 <RegionLinkAdrReq>
 8008464:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 8008468:	f000 0007 	and.w	r0, r0, #7
 800846c:	2807      	cmp	r0, #7
 800846e:	d09a      	beq.n	80083a6 <ProcessMacCommands+0xc2>
{
 8008470:	2400      	movs	r4, #0
 8008472:	e7b7      	b.n	80083e4 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8008474:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 8008476:	42bc      	cmp	r4, r7
 8008478:	d204      	bcs.n	8008484 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800847a:	3c01      	subs	r4, #1
 800847c:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800847e:	f04f 0901 	mov.w	r9, #1
 8008482:	e742      	b.n	800830a <ProcessMacCommands+0x26>
 8008484:	f04f 0901 	mov.w	r9, #1
                break;
 8008488:	e73f      	b.n	800830a <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800848a:	3402      	adds	r4, #2
 800848c:	b2e4      	uxtb	r4, r4
 800848e:	5dab      	ldrb	r3, [r5, r6]
 8008490:	f003 030f 	and.w	r3, r3, #15
 8008494:	495e      	ldr	r1, [pc, #376]	; (8008610 <ProcessMacCommands+0x32c>)
 8008496:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800849a:	2201      	movs	r2, #1
 800849c:	fa02 f303 	lsl.w	r3, r2, r3
 80084a0:	f8a1 310c 	strh.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80084a4:	2200      	movs	r2, #0
 80084a6:	a90b      	add	r1, sp, #44	; 0x2c
 80084a8:	2004      	movs	r0, #4
 80084aa:	f002 fff5 	bl	800b498 <LoRaMacCommandsAddCmd>
                break;
 80084ae:	e72c      	b.n	800830a <ProcessMacCommands+0x26>
                status = 0x07;
 80084b0:	2307      	movs	r3, #7
 80084b2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80084b6:	5dab      	ldrb	r3, [r5, r6]
 80084b8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80084bc:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80084c0:	57ab      	ldrsb	r3, [r5, r6]
 80084c2:	f003 030f 	and.w	r3, r3, #15
 80084c6:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 80084ca:	1ca3      	adds	r3, r4, #2
 80084cc:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80084ce:	1ce1      	adds	r1, r4, #3
 80084d0:	b2c9      	uxtb	r1, r1
 80084d2:	5ceb      	ldrb	r3, [r5, r3]
 80084d4:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80084d6:	1d22      	adds	r2, r4, #4
 80084d8:	b2d2      	uxtb	r2, r2
 80084da:	5c69      	ldrb	r1, [r5, r1]
 80084dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80084e0:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80084e2:	3405      	adds	r4, #5
 80084e4:	b2e4      	uxtb	r4, r4
 80084e6:	5caa      	ldrb	r2, [r5, r2]
 80084e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084ec:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 80084ee:	2264      	movs	r2, #100	; 0x64
 80084f0:	fb02 f303 	mul.w	r3, r2, r3
 80084f4:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80084f6:	a907      	add	r1, sp, #28
 80084f8:	4b45      	ldr	r3, [pc, #276]	; (8008610 <ProcessMacCommands+0x32c>)
 80084fa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80084fe:	f003 ff69 	bl	800c3d4 <RegionRxParamSetupReq>
 8008502:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 8008506:	f000 0307 	and.w	r3, r0, #7
 800850a:	2b07      	cmp	r3, #7
 800850c:	d007      	beq.n	800851e <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 800850e:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8008512:	2201      	movs	r2, #1
 8008514:	a90b      	add	r1, sp, #44	; 0x2c
 8008516:	2005      	movs	r0, #5
 8008518:	f002 ffbe 	bl	800b498 <LoRaMacCommandsAddCmd>
                break;
 800851c:	e6f5      	b.n	800830a <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800851e:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8008522:	4b3b      	ldr	r3, [pc, #236]	; (8008610 <ProcessMacCommands+0x32c>)
 8008524:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8008528:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800852c:	9a08      	ldr	r2, [sp, #32]
 800852e:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8008530:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8008532:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8008536:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800853a:	e7e8      	b.n	800850e <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800853c:	4b33      	ldr	r3, [pc, #204]	; (800860c <ProcessMacCommands+0x328>)
 800853e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8008542:	b17b      	cbz	r3, 8008564 <ProcessMacCommands+0x280>
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	b17b      	cbz	r3, 8008568 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8008548:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800854a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800854e:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 8008552:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8008556:	2202      	movs	r2, #2
 8008558:	a90b      	add	r1, sp, #44	; 0x2c
 800855a:	2006      	movs	r0, #6
 800855c:	f002 ff9c 	bl	800b498 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8008560:	4634      	mov	r4, r6
                break;
 8008562:	e6d2      	b.n	800830a <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8008564:	20ff      	movs	r0, #255	; 0xff
 8008566:	e7f0      	b.n	800854a <ProcessMacCommands+0x266>
 8008568:	20ff      	movs	r0, #255	; 0xff
 800856a:	e7ee      	b.n	800854a <ProcessMacCommands+0x266>
                status = 0x03;
 800856c:	2303      	movs	r3, #3
 800856e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8008572:	1ca3      	adds	r3, r4, #2
 8008574:	b2db      	uxtb	r3, r3
 8008576:	57aa      	ldrsb	r2, [r5, r6]
 8008578:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800857c:	aa07      	add	r2, sp, #28
 800857e:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008580:	1ce2      	adds	r2, r4, #3
 8008582:	b2d2      	uxtb	r2, r2
 8008584:	5ceb      	ldrb	r3, [r5, r3]
 8008586:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008588:	1d21      	adds	r1, r4, #4
 800858a:	b2c9      	uxtb	r1, r1
 800858c:	5caa      	ldrb	r2, [r5, r2]
 800858e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008592:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008594:	1d62      	adds	r2, r4, #5
 8008596:	b2d2      	uxtb	r2, r2
 8008598:	5c69      	ldrb	r1, [r5, r1]
 800859a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800859e:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 80085a0:	2164      	movs	r1, #100	; 0x64
 80085a2:	fb01 f303 	mul.w	r3, r1, r3
 80085a6:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 80085ac:	3406      	adds	r4, #6
 80085ae:	b2e4      	uxtb	r4, r4
 80085b0:	56ab      	ldrsb	r3, [r5, r2]
 80085b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80085b6:	a905      	add	r1, sp, #20
 80085b8:	4b15      	ldr	r3, [pc, #84]	; (8008610 <ProcessMacCommands+0x32c>)
 80085ba:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80085be:	f003 ff12 	bl	800c3e6 <RegionNewChannelReq>
 80085c2:	b2c3      	uxtb	r3, r0
 80085c4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80085c8:	2800      	cmp	r0, #0
 80085ca:	f6ff ae9e 	blt.w	800830a <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 80085ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80085d2:	2201      	movs	r2, #1
 80085d4:	a90b      	add	r1, sp, #44	; 0x2c
 80085d6:	2007      	movs	r0, #7
 80085d8:	f002 ff5e 	bl	800b498 <LoRaMacCommandsAddCmd>
                break;
 80085dc:	e695      	b.n	800830a <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 80085de:	3402      	adds	r4, #2
 80085e0:	b2e4      	uxtb	r4, r4
 80085e2:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 80085e4:	f013 030f 	ands.w	r3, r3, #15
 80085e8:	d100      	bne.n	80085ec <ProcessMacCommands+0x308>
                    delay++;
 80085ea:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80085ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085f0:	fb02 f303 	mul.w	r3, r2, r3
 80085f4:	4a06      	ldr	r2, [pc, #24]	; (8008610 <ProcessMacCommands+0x32c>)
 80085f6:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80085f8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80085fc:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80085fe:	2200      	movs	r2, #0
 8008600:	a90b      	add	r1, sp, #44	; 0x2c
 8008602:	2008      	movs	r0, #8
 8008604:	f002 ff48 	bl	800b498 <LoRaMacCommandsAddCmd>
                break;
 8008608:	e67f      	b.n	800830a <ProcessMacCommands+0x26>
 800860a:	bf00      	nop
 800860c:	20000630 	.word	0x20000630
 8008610:	20008000 	.word	0x20008000
 8008614:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 8008618:	3402      	adds	r4, #2
 800861a:	b2e4      	uxtb	r4, r4
 800861c:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800861e:	2200      	movs	r2, #0
 8008620:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 8008624:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008628:	f013 0f20 	tst.w	r3, #32
 800862c:	d002      	beq.n	8008634 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800862e:	2201      	movs	r2, #1
 8008630:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8008634:	f013 0f10 	tst.w	r3, #16
 8008638:	d002      	beq.n	8008640 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 800863a:	2201      	movs	r2, #1
 800863c:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8008640:	f003 030f 	and.w	r3, r3, #15
 8008644:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8008648:	a903      	add	r1, sp, #12
 800864a:	4b9b      	ldr	r3, [pc, #620]	; (80088b8 <ProcessMacCommands+0x5d4>)
 800864c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008650:	f003 fed2 	bl	800c3f8 <RegionTxParamSetupReq>
 8008654:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008658:	f43f ae57 	beq.w	800830a <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800865c:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8008660:	4e95      	ldr	r6, [pc, #596]	; (80088b8 <ProcessMacCommands+0x5d4>)
 8008662:	f886 a074 	strb.w	sl, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8008666:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800866a:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800866e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8008672:	4a92      	ldr	r2, [pc, #584]	; (80088bc <ProcessMacCommands+0x5d8>)
 8008674:	5cd0      	ldrb	r0, [r2, r3]
 8008676:	f7f8 f8a9 	bl	80007cc <__aeabi_ui2f>
 800867a:	67b0      	str	r0, [r6, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800867c:	2302      	movs	r3, #2
 800867e:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008682:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008686:	a907      	add	r1, sp, #28
 8008688:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800868c:	f003 fe30 	bl	800c2f0 <RegionGetPhyParam>
 8008690:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008692:	b240      	sxtb	r0, r0
 8008694:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8008698:	4298      	cmp	r0, r3
 800869a:	bfb8      	it	lt
 800869c:	4618      	movlt	r0, r3
 800869e:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80086a2:	2200      	movs	r2, #0
 80086a4:	a90b      	add	r1, sp, #44	; 0x2c
 80086a6:	2009      	movs	r0, #9
 80086a8:	f002 fef6 	bl	800b498 <LoRaMacCommandsAddCmd>
                break;
 80086ac:	e62d      	b.n	800830a <ProcessMacCommands+0x26>
                status = 0x03;
 80086ae:	2303      	movs	r3, #3
 80086b0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 80086b4:	1ca3      	adds	r3, r4, #2
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	5daa      	ldrb	r2, [r5, r6]
 80086ba:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80086be:	1ce1      	adds	r1, r4, #3
 80086c0:	b2c9      	uxtb	r1, r1
 80086c2:	5ceb      	ldrb	r3, [r5, r3]
 80086c4:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80086c6:	1d22      	adds	r2, r4, #4
 80086c8:	b2d2      	uxtb	r2, r2
 80086ca:	5c69      	ldrb	r1, [r5, r1]
 80086cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80086d0:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80086d2:	3405      	adds	r4, #5
 80086d4:	b2e4      	uxtb	r4, r4
 80086d6:	5caa      	ldrb	r2, [r5, r2]
 80086d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086dc:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 80086de:	2264      	movs	r2, #100	; 0x64
 80086e0:	fb02 f303 	mul.w	r3, r2, r3
 80086e4:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80086e6:	a907      	add	r1, sp, #28
 80086e8:	4b73      	ldr	r3, [pc, #460]	; (80088b8 <ProcessMacCommands+0x5d4>)
 80086ea:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80086ee:	f003 fe8c 	bl	800c40a <RegionDlChannelReq>
 80086f2:	b2c3      	uxtb	r3, r0
 80086f4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80086f8:	2800      	cmp	r0, #0
 80086fa:	f6ff ae06 	blt.w	800830a <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 80086fe:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008702:	2201      	movs	r2, #1
 8008704:	a90b      	add	r1, sp, #44	; 0x2c
 8008706:	200a      	movs	r0, #10
 8008708:	f002 fec6 	bl	800b498 <LoRaMacCommandsAddCmd>
                break;
 800870c:	e5fd      	b.n	800830a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800870e:	2009      	movs	r0, #9
 8008710:	f003 f886 	bl	800b820 <LoRaMacConfirmQueueIsCmdActive>
 8008714:	b928      	cbnz	r0, 8008722 <ProcessMacCommands+0x43e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008716:	4b6a      	ldr	r3, [pc, #424]	; (80088c0 <ProcessMacCommands+0x5dc>)
 8008718:	2200      	movs	r2, #0
 800871a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
        switch( payload[macIndex++] )
 800871e:	4634      	mov	r4, r6
 8008720:	e5f3      	b.n	800830a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8008722:	2109      	movs	r1, #9
 8008724:	2000      	movs	r0, #0
 8008726:	f003 f82f 	bl	800b788 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800872a:	a803      	add	r0, sp, #12
 800872c:	2300      	movs	r3, #0
 800872e:	9303      	str	r3, [sp, #12]
 8008730:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 8008732:	f10d 0a14 	add.w	sl, sp, #20
 8008736:	9305      	str	r3, [sp, #20]
 8008738:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800873a:	f10d 0b1c 	add.w	fp, sp, #28
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8008742:	1ca1      	adds	r1, r4, #2
 8008744:	b2c9      	uxtb	r1, r1
 8008746:	5dab      	ldrb	r3, [r5, r6]
 8008748:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800874a:	1ce2      	adds	r2, r4, #3
 800874c:	b2d2      	uxtb	r2, r2
 800874e:	5c69      	ldrb	r1, [r5, r1]
 8008750:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008754:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8008756:	1d21      	adds	r1, r4, #4
 8008758:	b2c9      	uxtb	r1, r1
 800875a:	5caa      	ldrb	r2, [r5, r2]
 800875c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008760:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8008762:	1d62      	adds	r2, r4, #5
 8008764:	b2d2      	uxtb	r2, r2
 8008766:	5c69      	ldrb	r1, [r5, r1]
 8008768:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800876c:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800876e:	3406      	adds	r4, #6
 8008770:	b2e4      	uxtb	r4, r4
 8008772:	5caa      	ldrb	r2, [r5, r2]
 8008774:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8008778:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800877c:	fb01 f202 	mul.w	r2, r1, r2
 8008780:	0a12      	lsrs	r2, r2, #8
 8008782:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8008786:	c803      	ldmia	r0, {r0, r1}
 8008788:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800878c:	4a4d      	ldr	r2, [pc, #308]	; (80088c4 <ProcessMacCommands+0x5e0>)
 800878e:	441a      	add	r2, r3
 8008790:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8008792:	4658      	mov	r0, fp
 8008794:	f008 f862 	bl	801085c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8008798:	4e49      	ldr	r6, [pc, #292]	; (80088c0 <ProcessMacCommands+0x5dc>)
 800879a:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 80087a4:	e89a 0006 	ldmia.w	sl, {r1, r2}
 80087a8:	a80c      	add	r0, sp, #48	; 0x30
 80087aa:	f008 f816 	bl	80107da <SysTimeSub>
 80087ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087b4:	e89b 0006 	ldmia.w	fp, {r1, r2}
 80087b8:	4650      	mov	r0, sl
 80087ba:	f007 ffef 	bl	801079c <SysTimeAdd>
                    SysTimeSet( sysTime );
 80087be:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80087c2:	f008 f829 	bl	8010818 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80087c6:	f002 fdcb 	bl	800b360 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80087ca:	2301      	movs	r3, #1
 80087cc:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 80087d0:	e59b      	b.n	800830a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80087d2:	200c      	movs	r0, #12
 80087d4:	f003 f824 	bl	800b820 <LoRaMacConfirmQueueIsCmdActive>
 80087d8:	b908      	cbnz	r0, 80087de <ProcessMacCommands+0x4fa>
        switch( payload[macIndex++] )
 80087da:	4634      	mov	r4, r6
 80087dc:	e595      	b.n	800830a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80087de:	210c      	movs	r1, #12
 80087e0:	2000      	movs	r0, #0
 80087e2:	f002 ffd1 	bl	800b788 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80087e6:	4b36      	ldr	r3, [pc, #216]	; (80088c0 <ProcessMacCommands+0x5dc>)
 80087e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80087ec:	3b04      	subs	r3, #4
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d801      	bhi.n	80087f8 <ProcessMacCommands+0x514>
        switch( payload[macIndex++] )
 80087f4:	4634      	mov	r4, r6
 80087f6:	e588      	b.n	800830a <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 80087f8:	f002 fdae 	bl	800b358 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 80087fc:	4634      	mov	r4, r6
 80087fe:	e584      	b.n	800830a <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 8008800:	1ca2      	adds	r2, r4, #2
 8008802:	b2d2      	uxtb	r2, r2
 8008804:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008806:	1ce1      	adds	r1, r4, #3
 8008808:	b2c9      	uxtb	r1, r1
 800880a:	5caa      	ldrb	r2, [r5, r2]
 800880c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008810:	1d22      	adds	r2, r4, #4
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	5c69      	ldrb	r1, [r5, r1]
 8008816:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800881a:	3405      	adds	r4, #5
 800881c:	b2e4      	uxtb	r4, r4
 800881e:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8008820:	2164      	movs	r1, #100	; 0x64
 8008822:	fb03 f101 	mul.w	r1, r3, r1
 8008826:	f000 000f 	and.w	r0, r0, #15
 800882a:	f002 fd96 	bl	800b35a <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800882e:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8008832:	2201      	movs	r2, #1
 8008834:	a90b      	add	r1, sp, #44	; 0x2c
 8008836:	2011      	movs	r0, #17
 8008838:	f002 fe2e 	bl	800b498 <LoRaMacCommandsAddCmd>
                break;
 800883c:	e565      	b.n	800830a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800883e:	200d      	movs	r0, #13
 8008840:	f002 ffee 	bl	800b820 <LoRaMacConfirmQueueIsCmdActive>
 8008844:	b908      	cbnz	r0, 800884a <ProcessMacCommands+0x566>
        switch( payload[macIndex++] )
 8008846:	4634      	mov	r4, r6
 8008848:	e55f      	b.n	800830a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800884a:	210d      	movs	r1, #13
 800884c:	2000      	movs	r0, #0
 800884e:	f002 ff9b 	bl	800b788 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8008852:	1ca2      	adds	r2, r4, #2
 8008854:	b2d2      	uxtb	r2, r2
 8008856:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8008858:	1ce3      	adds	r3, r4, #3
 800885a:	b2db      	uxtb	r3, r3
 800885c:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800885e:	3404      	adds	r4, #4
 8008860:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8008862:	4a19      	ldr	r2, [pc, #100]	; (80088c8 <ProcessMacCommands+0x5e4>)
 8008864:	6812      	ldr	r2, [r2, #0]
 8008866:	5ce9      	ldrb	r1, [r5, r3]
 8008868:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800886c:	f002 fd77 	bl	800b35e <LoRaMacClassBBeaconTimingAns>
 8008870:	e54b      	b.n	800830a <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 8008872:	1ca1      	adds	r1, r4, #2
 8008874:	b2c9      	uxtb	r1, r1
 8008876:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008878:	1ce2      	adds	r2, r4, #3
 800887a:	b2d2      	uxtb	r2, r2
 800887c:	5c68      	ldrb	r0, [r5, r1]
 800887e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008882:	3404      	adds	r4, #4
 8008884:	b2e4      	uxtb	r4, r4
 8008886:	5ca8      	ldrb	r0, [r5, r2]
 8008888:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800888c:	2064      	movs	r0, #100	; 0x64
 800888e:	fb03 f000 	mul.w	r0, r3, r0
 8008892:	f002 fd66 	bl	800b362 <LoRaMacClassBBeaconFreqReq>
 8008896:	b140      	cbz	r0, 80088aa <ProcessMacCommands+0x5c6>
                        macCmdPayload[0] = 1;
 8008898:	2301      	movs	r3, #1
 800889a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800889e:	2201      	movs	r2, #1
 80088a0:	a90b      	add	r1, sp, #44	; 0x2c
 80088a2:	2013      	movs	r0, #19
 80088a4:	f002 fdf8 	bl	800b498 <LoRaMacCommandsAddCmd>
                break;
 80088a8:	e52f      	b.n	800830a <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80088b0:	e7f5      	b.n	800889e <ProcessMacCommands+0x5ba>
}
 80088b2:	b00f      	add	sp, #60	; 0x3c
 80088b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b8:	20008000 	.word	0x20008000
 80088bc:	08011790 	.word	0x08011790
 80088c0:	20000630 	.word	0x20000630
 80088c4:	12d53d80 	.word	0x12d53d80
 80088c8:	20000be0 	.word	0x20000be0

080088cc <ProcessRadioRxDone>:
{
 80088cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088d0:	b0a1      	sub	sp, #132	; 0x84
    uint8_t *payload = RxDoneParams.Payload;
 80088d2:	4b96      	ldr	r3, [pc, #600]	; (8008b2c <ProcessRadioRxDone+0x260>)
 80088d4:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 80088d6:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80088d8:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80088dc:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	9303      	str	r3, [sp, #12]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80088e4:	4a92      	ldr	r2, [pc, #584]	; (8008b30 <ProcessRadioRxDone+0x264>)
 80088e6:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 80088ea:	4a92      	ldr	r2, [pc, #584]	; (8008b34 <ProcessRadioRxDone+0x268>)
 80088ec:	7811      	ldrb	r1, [r2, #0]
 80088ee:	f363 0100 	bfi	r1, r3, #0, #1
 80088f2:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 80088f4:	4c90      	ldr	r4, [pc, #576]	; (8008b38 <ProcessRadioRxDone+0x26c>)
 80088f6:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 80088fa:	f8a4 9490 	strh.w	r9, [r4, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 80088fe:	f884 7492 	strb.w	r7, [r4, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8008902:	f894 2494 	ldrb.w	r2, [r4, #1172]	; 0x494
 8008906:	f884 2493 	strb.w	r2, [r4, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800890a:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800890e:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 8008912:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 8008916:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800891a:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800891e:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 8008922:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008926:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800892a:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800892e:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008932:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8008936:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 800893a:	4b80      	ldr	r3, [pc, #512]	; (8008b3c <ProcessRadioRxDone+0x270>)
 800893c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893e:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8008940:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008944:	b1c3      	cbz	r3, 8008978 <ProcessRadioRxDone+0xac>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008946:	4629      	mov	r1, r5
 8008948:	4630      	mov	r0, r6
 800894a:	f002 fcf2 	bl	800b332 <LoRaMacClassBRxBeacon>
 800894e:	b9c0      	cbnz	r0, 8008982 <ProcessRadioRxDone+0xb6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008950:	4b77      	ldr	r3, [pc, #476]	; (8008b30 <ProcessRadioRxDone+0x264>)
 8008952:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008956:	2b01      	cmp	r3, #1
 8008958:	d019      	beq.n	800898e <ProcessRadioRxDone+0xc2>
    macHdr.Value = payload[pktHeaderLen++];
 800895a:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800895c:	0963      	lsrs	r3, r4, #5
 800895e:	3b01      	subs	r3, #1
 8008960:	2b06      	cmp	r3, #6
 8008962:	f200 82d4 	bhi.w	8008f0e <ProcessRadioRxDone+0x642>
 8008966:	e8df f013 	tbh	[pc, r3, lsl #1]
 800896a:	002f      	.short	0x002f
 800896c:	00b502d2 	.word	0x00b502d2
 8008970:	00b102d2 	.word	0x00b102d2
 8008974:	02a202d2 	.word	0x02a202d2
        TimerStop( &MacCtx.RxWindowTimer2 );
 8008978:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800897c:	f008 f85c 	bl	8010a38 <UTIL_TIMER_Stop>
 8008980:	e7e1      	b.n	8008946 <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008982:	4b6d      	ldr	r3, [pc, #436]	; (8008b38 <ProcessRadioRxDone+0x26c>)
 8008984:	f8a3 9482 	strh.w	r9, [r3, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008988:	f883 7484 	strb.w	r7, [r3, #1156]	; 0x484
        return;
 800898c:	e2bc      	b.n	8008f08 <ProcessRadioRxDone+0x63c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800898e:	f002 fcd4 	bl	800b33a <LoRaMacClassBIsPingExpected>
 8008992:	b150      	cbz	r0, 80089aa <ProcessRadioRxDone+0xde>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008994:	2000      	movs	r0, #0
 8008996:	f002 fcc5 	bl	800b324 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800899a:	2000      	movs	r0, #0
 800899c:	f002 fcc7 	bl	800b32e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80089a0:	4b65      	ldr	r3, [pc, #404]	; (8008b38 <ProcessRadioRxDone+0x26c>)
 80089a2:	2204      	movs	r2, #4
 80089a4:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 80089a8:	e7d7      	b.n	800895a <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80089aa:	f002 fcc8 	bl	800b33e <LoRaMacClassBIsMulticastExpected>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	d0d3      	beq.n	800895a <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80089b2:	2000      	movs	r0, #0
 80089b4:	f002 fcb7 	bl	800b326 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80089b8:	2000      	movs	r0, #0
 80089ba:	f002 fcb9 	bl	800b330 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80089be:	4b5e      	ldr	r3, [pc, #376]	; (8008b38 <ProcessRadioRxDone+0x26c>)
 80089c0:	2205      	movs	r2, #5
 80089c2:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 80089c6:	e7c8      	b.n	800895a <ProcessRadioRxDone+0x8e>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80089c8:	2d10      	cmp	r5, #16
 80089ca:	d962      	bls.n	8008a92 <ProcessRadioRxDone+0x1c6>
            macMsgJoinAccept.Buffer = payload;
 80089cc:	9604      	str	r6, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 80089ce:	b2ed      	uxtb	r5, r5
 80089d0:	f88d 5014 	strb.w	r5, [sp, #20]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80089d4:	4b56      	ldr	r3, [pc, #344]	; (8008b30 <ProcessRadioRxDone+0x264>)
 80089d6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d160      	bne.n	8008aa0 <ProcessRadioRxDone+0x1d4>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 80089de:	f005 fdfd 	bl	800e5dc <SecureElementGetJoinEui>
 80089e2:	4601      	mov	r1, r0
 80089e4:	aa04      	add	r2, sp, #16
 80089e6:	20ff      	movs	r0, #255	; 0xff
 80089e8:	f003 fa90 	bl	800bf0c <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80089ec:	2800      	cmp	r0, #0
 80089ee:	d163      	bne.n	8008ab8 <ProcessRadioRxDone+0x1ec>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80089f0:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80089f4:	4b4e      	ldr	r3, [pc, #312]	; (8008b30 <ProcessRadioRxDone+0x264>)
 80089f6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80089fa:	f89d 101a 	ldrb.w	r1, [sp, #26]
 80089fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008a02:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008a06:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8008a0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008a0e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008a12:	9a07      	ldr	r2, [sp, #28]
 8008a14:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008a18:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8008a1c:	f3c2 1102 	ubfx	r1, r2, #4, #3
 8008a20:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008a24:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8008a28:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008a2c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8008a30:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8008a34:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8008a36:	b90a      	cbnz	r2, 8008a3c <ProcessRadioRxDone+0x170>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8008a38:	2201      	movs	r2, #1
 8008a3a:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008a3c:	4c3c      	ldr	r4, [pc, #240]	; (8008b30 <ProcessRadioRxDone+0x264>)
 8008a3e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008a40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a44:	fb02 f303 	mul.w	r3, r2, r3
 8008a48:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008a4a:	4413      	add	r3, r2
 8008a4c:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008a54:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8008a58:	931e      	str	r3, [sp, #120]	; 0x78
                applyCFList.Size = size - 17;
 8008a5a:	3d11      	subs	r5, #17
 8008a5c:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
                applyCFList.JoinChannel = MacCtx.Channel;
 8008a60:	4b35      	ldr	r3, [pc, #212]	; (8008b38 <ProcessRadioRxDone+0x26c>)
 8008a62:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 8008a66:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008a6a:	a91d      	add	r1, sp, #116	; 0x74
 8008a6c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8008a70:	f003 fc6a 	bl	800c348 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008a74:	2302      	movs	r3, #2
 8008a76:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008a7a:	2001      	movs	r0, #1
 8008a7c:	f002 fed0 	bl	800b820 <LoRaMacConfirmQueueIsCmdActive>
 8008a80:	b9a8      	cbnz	r0, 8008aae <ProcessRadioRxDone+0x1e2>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8008a82:	4a2d      	ldr	r2, [pc, #180]	; (8008b38 <ProcessRadioRxDone+0x26c>)
 8008a84:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008a88:	f043 0308 	orr.w	r3, r3, #8
 8008a8c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 8008a90:	e227      	b.n	8008ee2 <ProcessRadioRxDone+0x616>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008a92:	4b29      	ldr	r3, [pc, #164]	; (8008b38 <ProcessRadioRxDone+0x26c>)
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008a9a:	f7ff fbab 	bl	80081f4 <PrepareRxDoneAbort>
                return;
 8008a9e:	e233      	b.n	8008f08 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008aa0:	4b25      	ldr	r3, [pc, #148]	; (8008b38 <ProcessRadioRxDone+0x26c>)
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008aa8:	f7ff fba4 	bl	80081f4 <PrepareRxDoneAbort>
                return;
 8008aac:	e22c      	b.n	8008f08 <ProcessRadioRxDone+0x63c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8008aae:	2101      	movs	r1, #1
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	f002 fe69 	bl	800b788 <LoRaMacConfirmQueueSetStatus>
 8008ab6:	e7e4      	b.n	8008a82 <ProcessRadioRxDone+0x1b6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008ab8:	2001      	movs	r0, #1
 8008aba:	f002 feb1 	bl	800b820 <LoRaMacConfirmQueueIsCmdActive>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d0df      	beq.n	8008a82 <ProcessRadioRxDone+0x1b6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	2007      	movs	r0, #7
 8008ac6:	f002 fe5f 	bl	800b788 <LoRaMacConfirmQueueSetStatus>
 8008aca:	e7da      	b.n	8008a82 <ProcessRadioRxDone+0x1b6>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008acc:	4b1a      	ldr	r3, [pc, #104]	; (8008b38 <ProcessRadioRxDone+0x26c>)
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008ad4:	4b16      	ldr	r3, [pc, #88]	; (8008b30 <ProcessRadioRxDone+0x264>)
 8008ad6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8008ada:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008ade:	4a16      	ldr	r2, [pc, #88]	; (8008b38 <ProcessRadioRxDone+0x26c>)
 8008ae0:	f992 2428 	ldrsb.w	r2, [r2, #1064]	; 0x428
 8008ae4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008ae8:	220d      	movs	r2, #13
 8008aea:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008aee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008af2:	b113      	cbz	r3, 8008afa <ProcessRadioRxDone+0x22e>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008af4:	230e      	movs	r3, #14
 8008af6:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008afa:	a91b      	add	r1, sp, #108	; 0x6c
 8008afc:	4b0c      	ldr	r3, [pc, #48]	; (8008b30 <ProcessRadioRxDone+0x264>)
 8008afe:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8008b02:	f003 fbf5 	bl	800c2f0 <RegionGetPhyParam>
 8008b06:	901a      	str	r0, [sp, #104]	; 0x68
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008b08:	f1a5 030d 	sub.w	r3, r5, #13
 8008b0c:	b21b      	sxth	r3, r3
 8008b0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008b12:	b200      	sxth	r0, r0
 8008b14:	4283      	cmp	r3, r0
 8008b16:	dc01      	bgt.n	8008b1c <ProcessRadioRxDone+0x250>
 8008b18:	2d0b      	cmp	r5, #11
 8008b1a:	d811      	bhi.n	8008b40 <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008b1c:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <ProcessRadioRxDone+0x26c>)
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008b24:	f7ff fb66 	bl	80081f4 <PrepareRxDoneAbort>
                return;
 8008b28:	e1ee      	b.n	8008f08 <ProcessRadioRxDone+0x63c>
 8008b2a:	bf00      	nop
 8008b2c:	20000be0 	.word	0x20000be0
 8008b30:	20008000 	.word	0x20008000
 8008b34:	2000062c 	.word	0x2000062c
 8008b38:	20000630 	.word	0x20000630
 8008b3c:	08011dbc 	.word	0x08011dbc
            macMsgData.Buffer = payload;
 8008b40:	960e      	str	r6, [sp, #56]	; 0x38
            macMsgData.BufSize = size;
 8008b42:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008b46:	4bba      	ldr	r3, [pc, #744]	; (8008e30 <ProcessRadioRxDone+0x564>)
 8008b48:	9317      	str	r3, [sp, #92]	; 0x5c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008b4a:	23ff      	movs	r3, #255	; 0xff
 8008b4c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008b50:	a80e      	add	r0, sp, #56	; 0x38
 8008b52:	f003 faa1 	bl	800c098 <LoRaMacParserData>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d142      	bne.n	8008be0 <ProcessRadioRxDone+0x314>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008b5a:	4bb6      	ldr	r3, [pc, #728]	; (8008e34 <ProcessRadioRxDone+0x568>)
 8008b5c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d044      	beq.n	8008bee <ProcessRadioRxDone+0x322>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008b64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b66:	4bb4      	ldr	r3, [pc, #720]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008b68:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8008b6c:	f10d 010a 	add.w	r1, sp, #10
 8008b70:	a80e      	add	r0, sp, #56	; 0x38
 8008b72:	f7ff f9d5 	bl	8007f20 <DetermineFrameType>
 8008b76:	4605      	mov	r5, r0
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d163      	bne.n	8008c44 <ProcessRadioRxDone+0x378>
            downLinkCounter = 0;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	9303      	str	r3, [sp, #12]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d065      	beq.n	8008c52 <ProcessRadioRxDone+0x386>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8008b86:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8008b88:	2d01      	cmp	r5, #1
 8008b8a:	d10a      	bne.n	8008ba2 <ProcessRadioRxDone+0x2d6>
 8008b8c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8008b90:	2b03      	cmp	r3, #3
 8008b92:	f040 808a 	bne.w	8008caa <ProcessRadioRxDone+0x3de>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8008b96:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8008b9a:	f013 0f60 	tst.w	r3, #96	; 0x60
 8008b9e:	f040 8084 	bne.w	8008caa <ProcessRadioRxDone+0x3de>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8008ba2:	ab03      	add	r3, sp, #12
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	f10d 030b 	add.w	r3, sp, #11
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	4ba1      	ldr	r3, [pc, #644]	; (8008e34 <ProcessRadioRxDone+0x568>)
 8008bae:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008bb2:	aa0e      	add	r2, sp, #56	; 0x38
 8008bb4:	f89d 100a 	ldrb.w	r1, [sp, #10]
 8008bb8:	4630      	mov	r0, r6
 8008bba:	f7ff fb59 	bl	8008270 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d07f      	beq.n	8008cc2 <ProcessRadioRxDone+0x3f6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8008bc2:	2807      	cmp	r0, #7
 8008bc4:	d078      	beq.n	8008cb8 <ProcessRadioRxDone+0x3ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008bc6:	4b9c      	ldr	r3, [pc, #624]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008bce:	9a03      	ldr	r2, [sp, #12]
 8008bd0:	4b99      	ldr	r3, [pc, #612]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008bd2:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008bd6:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
                PrepareRxDoneAbort( );
 8008bda:	f7ff fb0b 	bl	80081f4 <PrepareRxDoneAbort>
                return;
 8008bde:	e193      	b.n	8008f08 <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008be0:	4b95      	ldr	r3, [pc, #596]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008be8:	f7ff fb04 	bl	80081f4 <PrepareRxDoneAbort>
                return;
 8008bec:	e18c      	b.n	8008f08 <ProcessRadioRxDone+0x63c>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8008bee:	f002 fba4 	bl	800b33a <LoRaMacClassBIsPingExpected>
 8008bf2:	b188      	cbz	r0, 8008c18 <ProcessRadioRxDone+0x34c>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	f002 fb95 	bl	800b324 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f002 fb97 	bl	800b32e <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008c00:	4b8d      	ldr	r3, [pc, #564]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008c02:	2204      	movs	r2, #4
 8008c04:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008c08:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8008c0c:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008c10:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c12:	f002 fbab 	bl	800b36c <LoRaMacClassBSetFPendingBit>
 8008c16:	e7a5      	b.n	8008b64 <ProcessRadioRxDone+0x298>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008c18:	f002 fb91 	bl	800b33e <LoRaMacClassBIsMulticastExpected>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d0a1      	beq.n	8008b64 <ProcessRadioRxDone+0x298>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008c20:	2000      	movs	r0, #0
 8008c22:	f002 fb80 	bl	800b326 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008c26:	2000      	movs	r0, #0
 8008c28:	f002 fb82 	bl	800b330 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008c2c:	4b82      	ldr	r3, [pc, #520]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008c2e:	2205      	movs	r2, #5
 8008c30:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8008c34:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8008c38:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008c3c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c3e:	f002 fb95 	bl	800b36c <LoRaMacClassBSetFPendingBit>
 8008c42:	e78f      	b.n	8008b64 <ProcessRadioRxDone+0x298>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008c44:	4b7c      	ldr	r3, [pc, #496]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008c4c:	f7ff fad2 	bl	80081f4 <PrepareRxDoneAbort>
                return;
 8008c50:	e15a      	b.n	8008f08 <ProcessRadioRxDone+0x63c>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008c52:	4618      	mov	r0, r3
 8008c54:	4a77      	ldr	r2, [pc, #476]	; (8008e34 <ProcessRadioRxDone+0x568>)
 8008c56:	212c      	movs	r1, #44	; 0x2c
 8008c58:	fb01 2203 	mla	r2, r1, r3, r2
 8008c5c:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 8008c60:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008c62:	428a      	cmp	r2, r1
 8008c64:	d002      	beq.n	8008c6c <ProcessRadioRxDone+0x3a0>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8008c66:	3301      	adds	r3, #1
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	e78a      	b.n	8008b82 <ProcessRadioRxDone+0x2b6>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008c6c:	4971      	ldr	r1, [pc, #452]	; (8008e34 <ProcessRadioRxDone+0x568>)
 8008c6e:	262c      	movs	r6, #44	; 0x2c
 8008c70:	fb06 1103 	mla	r1, r6, r3, r1
 8008c74:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008c78:	2900      	cmp	r1, #0
 8008c7a:	d0f4      	beq.n	8008c66 <ProcessRadioRxDone+0x39a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008c7c:	4b6d      	ldr	r3, [pc, #436]	; (8008e34 <ProcessRadioRxDone+0x568>)
 8008c7e:	fb06 3000 	mla	r0, r6, r0, r3
 8008c82:	f890 60db 	ldrb.w	r6, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008c86:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 8008c8a:	6809      	ldr	r1, [r1, #0]
 8008c8c:	9103      	str	r1, [sp, #12]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008c8e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d002      	beq.n	8008c9c <ProcessRadioRxDone+0x3d0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008c96:	4690      	mov	r8, r2
                    multicast = 1;
 8008c98:	2501      	movs	r5, #1
 8008c9a:	e775      	b.n	8008b88 <ProcessRadioRxDone+0x2bc>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008c9c:	4b66      	ldr	r3, [pc, #408]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008c9e:	2103      	movs	r1, #3
 8008ca0:	f883 1493 	strb.w	r1, [r3, #1171]	; 0x493
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8008ca4:	4690      	mov	r8, r2
                    multicast = 1;
 8008ca6:	2501      	movs	r5, #1
 8008ca8:	e76e      	b.n	8008b88 <ProcessRadioRxDone+0x2bc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008caa:	4b63      	ldr	r3, [pc, #396]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008cb2:	f7ff fa9f 	bl	80081f4 <PrepareRxDoneAbort>
                return;
 8008cb6:	e127      	b.n	8008f08 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8008cb8:	4b5f      	ldr	r3, [pc, #380]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008cba:	2208      	movs	r2, #8
 8008cbc:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 8008cc0:	e785      	b.n	8008bce <ProcessRadioRxDone+0x302>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8008cc2:	ab0e      	add	r3, sp, #56	; 0x38
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	9b03      	ldr	r3, [sp, #12]
 8008cc8:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8008ccc:	4641      	mov	r1, r8
 8008cce:	4630      	mov	r0, r6
 8008cd0:	f003 f870 	bl	800bdb4 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d13d      	bne.n	8008d54 <ProcessRadioRxDone+0x488>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008cd8:	4b57      	ldr	r3, [pc, #348]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008cda:	2100      	movs	r1, #0
 8008cdc:	f883 1425 	strb.w	r1, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 8008ce0:	f883 5426 	strb.w	r5, [r3, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8008ce4:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008ce8:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8008cec:	f883 0429 	strb.w	r0, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 8008cf0:	f8c3 142c 	str.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 8008cf4:	f883 1430 	strb.w	r1, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8008cf8:	9803      	ldr	r0, [sp, #12]
 8008cfa:	f8c3 0434 	str.w	r0, [r3, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8008cfe:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008d02:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8008d06:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008d0a:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8008d0e:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008d12:	f893 0493 	ldrb.w	r0, [r3, #1171]	; 0x493
 8008d16:	2801      	cmp	r0, #1
 8008d18:	d92a      	bls.n	8008d70 <ProcessRadioRxDone+0x4a4>
            if( multicast == 1 )
 8008d1a:	2d01      	cmp	r5, #1
 8008d1c:	d02e      	beq.n	8008d7c <ProcessRadioRxDone+0x4b0>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8008d1e:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8008d22:	2ca0      	cmp	r4, #160	; 0xa0
 8008d24:	d02f      	beq.n	8008d86 <ProcessRadioRxDone+0x4ba>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8008d26:	2300      	movs	r3, #0
 8008d28:	4a42      	ldr	r2, [pc, #264]	; (8008e34 <ProcessRadioRxDone+0x568>)
 8008d2a:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008d2e:	4a42      	ldr	r2, [pc, #264]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008d30:	f882 3424 	strb.w	r3, [r2, #1060]	; 0x424
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8008d34:	4b40      	ldr	r3, [pc, #256]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008d36:	f893 2444 	ldrb.w	r2, [r3, #1092]	; 0x444
 8008d3a:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 8008d3e:	f7ff fac2 	bl	80082c6 <RemoveMacCommands>
            switch( fType )
 8008d42:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	f200 809a 	bhi.w	8008e80 <ProcessRadioRxDone+0x5b4>
 8008d4c:	e8df f003 	tbb	[pc, r3]
 8008d50:	88785d36 	.word	0x88785d36
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8008d54:	2802      	cmp	r0, #2
 8008d56:	d006      	beq.n	8008d66 <ProcessRadioRxDone+0x49a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8008d58:	4b37      	ldr	r3, [pc, #220]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008d5a:	220b      	movs	r2, #11
 8008d5c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 8008d60:	f7ff fa48 	bl	80081f4 <PrepareRxDoneAbort>
                return;
 8008d64:	e0d0      	b.n	8008f08 <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8008d66:	4b34      	ldr	r3, [pc, #208]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008d68:	220a      	movs	r2, #10
 8008d6a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 8008d6e:	e7f7      	b.n	8008d60 <ProcessRadioRxDone+0x494>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8008d70:	4b30      	ldr	r3, [pc, #192]	; (8008e34 <ProcessRadioRxDone+0x568>)
 8008d72:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 8008d7a:	e7ce      	b.n	8008d1a <ProcessRadioRxDone+0x44e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8008d7c:	4b2e      	ldr	r3, [pc, #184]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 8008d84:	e7d6      	b.n	8008d34 <ProcessRadioRxDone+0x468>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8008d86:	4b2b      	ldr	r3, [pc, #172]	; (8008e34 <ProcessRadioRxDone+0x568>)
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8008d8e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8008d92:	b913      	cbnz	r3, 8008d9a <ProcessRadioRxDone+0x4ce>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8008d94:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008d96:	4b27      	ldr	r3, [pc, #156]	; (8008e34 <ProcessRadioRxDone+0x568>)
 8008d98:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008d9a:	4b27      	ldr	r3, [pc, #156]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8008da2:	4290      	cmp	r0, r2
 8008da4:	d9c6      	bls.n	8008d34 <ProcessRadioRxDone+0x468>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8008da6:	4b23      	ldr	r3, [pc, #140]	; (8008e34 <ProcessRadioRxDone+0x568>)
 8008da8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008dac:	4b22      	ldr	r3, [pc, #136]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008dae:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8008db2:	4a22      	ldr	r2, [pc, #136]	; (8008e3c <ProcessRadioRxDone+0x570>)
 8008db4:	6812      	ldr	r2, [r2, #0]
 8008db6:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 8008dba:	e7bb      	b.n	8008d34 <ProcessRadioRxDone+0x468>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008dbc:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008dc0:	4c1d      	ldr	r4, [pc, #116]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008dc2:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	463b      	mov	r3, r7
 8008dca:	f002 020f 	and.w	r2, r2, #15
 8008dce:	2100      	movs	r1, #0
 8008dd0:	a812      	add	r0, sp, #72	; 0x48
 8008dd2:	f7ff fa87 	bl	80082e4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008dd6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008dda:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008dde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008de0:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008de4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8008de8:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 8008dec:	2301      	movs	r3, #1
 8008dee:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8008df2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008df6:	2be0      	cmp	r3, #224	; 0xe0
 8008df8:	d049      	beq.n	8008e8e <ProcessRadioRxDone+0x5c2>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008dfa:	4a0f      	ldr	r2, [pc, #60]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008dfc:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008e00:	f043 0302 	orr.w	r3, r3, #2
 8008e04:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 8008e08:	e06b      	b.n	8008ee2 <ProcessRadioRxDone+0x616>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8008e0a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008e0e:	4c0a      	ldr	r4, [pc, #40]	; (8008e38 <ProcessRadioRxDone+0x56c>)
 8008e10:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	463b      	mov	r3, r7
 8008e18:	f002 020f 	and.w	r2, r2, #15
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	a812      	add	r0, sp, #72	; 0x48
 8008e20:	f7ff fa60 	bl	80082e4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008e24:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008e28:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 8008e2c:	e7e1      	b.n	8008df2 <ProcessRadioRxDone+0x526>
 8008e2e:	bf00      	nop
 8008e30:	20000868 	.word	0x20000868
 8008e34:	20008000 	.word	0x20008000
 8008e38:	20000630 	.word	0x20000630
 8008e3c:	20000be0 	.word	0x20000be0
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8008e40:	4c3d      	ldr	r4, [pc, #244]	; (8008f38 <ProcessRadioRxDone+0x66c>)
 8008e42:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 8008e46:	9300      	str	r3, [sp, #0]
 8008e48:	463b      	mov	r3, r7
 8008e4a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 8008e4e:	2100      	movs	r1, #0
 8008e50:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008e52:	f7ff fa47 	bl	80082e4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008e56:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8008e5a:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 8008e5e:	e7c8      	b.n	8008df2 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008e60:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8008e64:	4b34      	ldr	r3, [pc, #208]	; (8008f38 <ProcessRadioRxDone+0x66c>)
 8008e66:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8008e6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e6c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8008e70:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 8008e74:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 8008e7e:	e7b8      	b.n	8008df2 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008e80:	4b2d      	ldr	r3, [pc, #180]	; (8008f38 <ProcessRadioRxDone+0x66c>)
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 8008e88:	f7ff f9b4 	bl	80081f4 <PrepareRxDoneAbort>
                    break;
 8008e8c:	e7b1      	b.n	8008df2 <ProcessRadioRxDone+0x526>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 8008e8e:	4a2b      	ldr	r2, [pc, #172]	; (8008f3c <ProcessRadioRxDone+0x670>)
 8008e90:	f892 210b 	ldrb.w	r2, [r2, #267]	; 0x10b
 8008e94:	2a00      	cmp	r2, #0
 8008e96:	d1b0      	bne.n	8008dfa <ProcessRadioRxDone+0x52e>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8008e98:	4a27      	ldr	r2, [pc, #156]	; (8008f38 <ProcessRadioRxDone+0x66c>)
 8008e9a:	f882 3427 	strb.w	r3, [r2, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 8008ea4:	f882 3430 	strb.w	r3, [r2, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 8008ea8:	f882 3431 	strb.w	r3, [r2, #1073]	; 0x431
 8008eac:	e7a5      	b.n	8008dfa <ProcessRadioRxDone+0x52e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8008eae:	1e6a      	subs	r2, r5, #1
 8008eb0:	4c21      	ldr	r4, [pc, #132]	; (8008f38 <ProcessRadioRxDone+0x66c>)
 8008eb2:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8008eb6:	b292      	uxth	r2, r2
 8008eb8:	1c71      	adds	r1, r6, #1
 8008eba:	4638      	mov	r0, r7
 8008ebc:	f005 fbbf 	bl	800e63e <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8008ecc:	f8c4 742c 	str.w	r7, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8008ed0:	3d01      	subs	r5, #1
 8008ed2:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008ed6:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 8008eda:	f043 0302 	orr.w	r3, r3, #2
 8008ede:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8008ee2:	4b15      	ldr	r3, [pc, #84]	; (8008f38 <ProcessRadioRxDone+0x66c>)
 8008ee4:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d917      	bls.n	8008f1c <ProcessRadioRxDone+0x650>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8008eec:	4b12      	ldr	r3, [pc, #72]	; (8008f38 <ProcessRadioRxDone+0x66c>)
 8008eee:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d006      	beq.n	8008f04 <ProcessRadioRxDone+0x638>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8008ef6:	4a10      	ldr	r2, [pc, #64]	; (8008f38 <ProcessRadioRxDone+0x66c>)
 8008ef8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008efc:	f043 0320 	orr.w	r3, r3, #32
 8008f00:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 8008f04:	f7fe ff80 	bl	8007e08 <UpdateRxSlotIdleState>
}
 8008f08:	b021      	add	sp, #132	; 0x84
 8008f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008f0e:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <ProcessRadioRxDone+0x66c>)
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 8008f16:	f7ff f96d 	bl	80081f4 <PrepareRxDoneAbort>
            break;
 8008f1a:	e7e2      	b.n	8008ee2 <ProcessRadioRxDone+0x616>
        if( MacCtx.NodeAckRequested == true )
 8008f1c:	4b06      	ldr	r3, [pc, #24]	; (8008f38 <ProcessRadioRxDone+0x66c>)
 8008f1e:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0e2      	beq.n	8008eec <ProcessRadioRxDone+0x620>
            if( MacCtx.McpsConfirm.AckReceived == true )
 8008f26:	4b04      	ldr	r3, [pc, #16]	; (8008f38 <ProcessRadioRxDone+0x66c>)
 8008f28:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d0dd      	beq.n	8008eec <ProcessRadioRxDone+0x620>
                OnRetransmitTimeoutTimerEvent( NULL );
 8008f30:	2000      	movs	r0, #0
 8008f32:	f7ff f949 	bl	80081c8 <OnRetransmitTimeoutTimerEvent>
 8008f36:	e7d9      	b.n	8008eec <ProcessRadioRxDone+0x620>
 8008f38:	20000630 	.word	0x20000630
 8008f3c:	20008000 	.word	0x20008000

08008f40 <ProcessRadioTxTimeout>:
{
 8008f40:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008f42:	4b0f      	ldr	r3, [pc, #60]	; (8008f80 <ProcessRadioTxTimeout+0x40>)
 8008f44:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d002      	beq.n	8008f52 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 8008f4c:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <ProcessRadioTxTimeout+0x44>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008f52:	f7fe ff59 	bl	8007e08 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008f56:	4c0c      	ldr	r4, [pc, #48]	; (8008f88 <ProcessRadioTxTimeout+0x48>)
 8008f58:	2002      	movs	r0, #2
 8008f5a:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008f5e:	f002 fc41 	bl	800b7e4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008f62:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8008f66:	b113      	cbz	r3, 8008f6e <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008f6e:	4a06      	ldr	r2, [pc, #24]	; (8008f88 <ProcessRadioTxTimeout+0x48>)
 8008f70:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8008f74:	f043 0320 	orr.w	r3, r3, #32
 8008f78:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 8008f7c:	bd10      	pop	{r4, pc}
 8008f7e:	bf00      	nop
 8008f80:	20008000 	.word	0x20008000
 8008f84:	08011dbc 	.word	0x08011dbc
 8008f88:	20000630 	.word	0x20000630

08008f8c <CheckForClassBCollision>:
{
 8008f8c:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008f8e:	f002 f9d2 	bl	800b336 <LoRaMacClassBIsBeaconExpected>
 8008f92:	b978      	cbnz	r0, 8008fb4 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008f94:	4b09      	ldr	r3, [pc, #36]	; (8008fbc <CheckForClassBCollision+0x30>)
 8008f96:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d001      	beq.n	8008fa2 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 8008f9e:	2000      	movs	r0, #0
}
 8008fa0:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008fa2:	f002 f9ca 	bl	800b33a <LoRaMacClassBIsPingExpected>
 8008fa6:	b938      	cbnz	r0, 8008fb8 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008fa8:	f002 f9c9 	bl	800b33e <LoRaMacClassBIsMulticastExpected>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d0f7      	beq.n	8008fa0 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008fb0:	200f      	movs	r0, #15
 8008fb2:	e7f5      	b.n	8008fa0 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8008fb4:	200e      	movs	r0, #14
 8008fb6:	e7f3      	b.n	8008fa0 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8008fb8:	200f      	movs	r0, #15
 8008fba:	e7f1      	b.n	8008fa0 <CheckForClassBCollision+0x14>
 8008fbc:	20008000 	.word	0x20008000

08008fc0 <HandleRadioRxErrorTimeout>:
{
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008fc6:	4b34      	ldr	r3, [pc, #208]	; (8009098 <HandleRadioRxErrorTimeout+0xd8>)
 8008fc8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d002      	beq.n	8008fd6 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 8008fd0:	4b32      	ldr	r3, [pc, #200]	; (800909c <HandleRadioRxErrorTimeout+0xdc>)
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8008fd6:	f002 f9ae 	bl	800b336 <LoRaMacClassBIsBeaconExpected>
 8008fda:	4606      	mov	r6, r0
 8008fdc:	bb50      	cbnz	r0, 8009034 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008fde:	4b2e      	ldr	r3, [pc, #184]	; (8009098 <HandleRadioRxErrorTimeout+0xd8>)
 8008fe0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d02c      	beq.n	8009042 <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 8008fe8:	2e00      	cmp	r6, #0
 8008fea:	d152      	bne.n	8009092 <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008fec:	4b2c      	ldr	r3, [pc, #176]	; (80090a0 <HandleRadioRxErrorTimeout+0xe0>)
 8008fee:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d13c      	bne.n	8009070 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 8008ff6:	4b2a      	ldr	r3, [pc, #168]	; (80090a0 <HandleRadioRxErrorTimeout+0xe0>)
 8008ff8:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8008ffc:	b113      	cbz	r3, 8009004 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8008ffe:	4b28      	ldr	r3, [pc, #160]	; (80090a0 <HandleRadioRxErrorTimeout+0xe0>)
 8009000:	f883 5445 	strb.w	r5, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8009004:	4628      	mov	r0, r5
 8009006:	f002 fbed 	bl	800b7e4 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800900a:	4b23      	ldr	r3, [pc, #140]	; (8009098 <HandleRadioRxErrorTimeout+0xd8>)
 800900c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800900e:	f007 fcdd 	bl	80109cc <UTIL_TIMER_GetElapsedTime>
 8009012:	4b23      	ldr	r3, [pc, #140]	; (80090a0 <HandleRadioRxErrorTimeout+0xe0>)
 8009014:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8009018:	4298      	cmp	r0, r3
 800901a:	d33a      	bcc.n	8009092 <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800901c:	4c20      	ldr	r4, [pc, #128]	; (80090a0 <HandleRadioRxErrorTimeout+0xe0>)
 800901e:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8009022:	f007 fd09 	bl	8010a38 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8009026:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800902a:	f043 0320 	orr.w	r3, r3, #32
 800902e:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
 8009032:	e02e      	b.n	8009092 <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8009034:	2002      	movs	r0, #2
 8009036:	f002 f974 	bl	800b322 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800903a:	2000      	movs	r0, #0
 800903c:	f002 f976 	bl	800b32c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8009040:	e7cd      	b.n	8008fde <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009042:	f002 f97a 	bl	800b33a <LoRaMacClassBIsPingExpected>
 8009046:	4607      	mov	r7, r0
 8009048:	b950      	cbnz	r0, 8009060 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800904a:	f002 f978 	bl	800b33e <LoRaMacClassBIsMulticastExpected>
 800904e:	2800      	cmp	r0, #0
 8009050:	d0ca      	beq.n	8008fe8 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009052:	2000      	movs	r0, #0
 8009054:	f002 f967 	bl	800b326 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009058:	2000      	movs	r0, #0
 800905a:	f002 f969 	bl	800b330 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800905e:	e018      	b.n	8009092 <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009060:	2000      	movs	r0, #0
 8009062:	f002 f95f 	bl	800b324 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009066:	2000      	movs	r0, #0
 8009068:	f002 f961 	bl	800b32e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800906c:	463e      	mov	r6, r7
 800906e:	e7ec      	b.n	800904a <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 8009070:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <HandleRadioRxErrorTimeout+0xe0>)
 8009072:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 8009076:	b113      	cbz	r3, 800907e <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8009078:	4b09      	ldr	r3, [pc, #36]	; (80090a0 <HandleRadioRxErrorTimeout+0xe0>)
 800907a:	f883 4445 	strb.w	r4, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800907e:	4620      	mov	r0, r4
 8009080:	f002 fbb0 	bl	800b7e4 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 8009084:	4a06      	ldr	r2, [pc, #24]	; (80090a0 <HandleRadioRxErrorTimeout+0xe0>)
 8009086:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800908a:	f043 0320 	orr.w	r3, r3, #32
 800908e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 8009092:	f7fe feb9 	bl	8007e08 <UpdateRxSlotIdleState>
}
 8009096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009098:	20008000 	.word	0x20008000
 800909c:	08011dbc 	.word	0x08011dbc
 80090a0:	20000630 	.word	0x20000630

080090a4 <ProcessRadioRxError>:
{
 80090a4:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80090a6:	2106      	movs	r1, #6
 80090a8:	2005      	movs	r0, #5
 80090aa:	f7ff ff89 	bl	8008fc0 <HandleRadioRxErrorTimeout>
}
 80090ae:	bd08      	pop	{r3, pc}

080090b0 <ProcessRadioRxTimeout>:
{
 80090b0:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80090b2:	2104      	movs	r1, #4
 80090b4:	2003      	movs	r0, #3
 80090b6:	f7ff ff83 	bl	8008fc0 <HandleRadioRxErrorTimeout>
}
 80090ba:	bd08      	pop	{r3, pc}

080090bc <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090bc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80090c0:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 80090c2:	4a14      	ldr	r2, [pc, #80]	; (8009114 <LoRaMacHandleIrqEvents+0x58>)
 80090c4:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 80090c6:	2000      	movs	r0, #0
 80090c8:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ca:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 80090ce:	b303      	cbz	r3, 8009112 <LoRaMacHandleIrqEvents+0x56>
{
 80090d0:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 80090d2:	b2dc      	uxtb	r4, r3
 80090d4:	f013 0f20 	tst.w	r3, #32
 80090d8:	d10c      	bne.n	80090f4 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 80090da:	f014 0f10 	tst.w	r4, #16
 80090de:	d10c      	bne.n	80090fa <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 80090e0:	f014 0f08 	tst.w	r4, #8
 80090e4:	d10c      	bne.n	8009100 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 80090e6:	f014 0f04 	tst.w	r4, #4
 80090ea:	d10c      	bne.n	8009106 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 80090ec:	f014 0f02 	tst.w	r4, #2
 80090f0:	d10c      	bne.n	800910c <LoRaMacHandleIrqEvents+0x50>
}
 80090f2:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 80090f4:	f7fe fff2 	bl	80080dc <ProcessRadioTxDone>
 80090f8:	e7ef      	b.n	80090da <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 80090fa:	f7ff fbe7 	bl	80088cc <ProcessRadioRxDone>
 80090fe:	e7ef      	b.n	80090e0 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8009100:	f7ff ff1e 	bl	8008f40 <ProcessRadioTxTimeout>
 8009104:	e7ef      	b.n	80090e6 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 8009106:	f7ff ffcd 	bl	80090a4 <ProcessRadioRxError>
 800910a:	e7ef      	b.n	80090ec <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800910c:	f7ff ffd0 	bl	80090b0 <ProcessRadioRxTimeout>
}
 8009110:	e7ef      	b.n	80090f2 <LoRaMacHandleIrqEvents+0x36>
 8009112:	4770      	bx	lr
 8009114:	2000062c 	.word	0x2000062c

08009118 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 8009118:	b909      	cbnz	r1, 800911e <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800911a:	2000      	movs	r0, #0
}
 800911c:	4770      	bx	lr
{
 800911e:	b510      	push	{r4, lr}
 8009120:	4604      	mov	r4, r0
 8009122:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8009124:	f007 fc52 	bl	80109cc <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 8009128:	42a0      	cmp	r0, r4
 800912a:	d801      	bhi.n	8009130 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800912c:	2000      	movs	r0, #0
}
 800912e:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 8009130:	4b02      	ldr	r3, [pc, #8]	; (800913c <LoRaMacHandleResponseTimeout+0x24>)
 8009132:	2200      	movs	r2, #0
 8009134:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 8009138:	2001      	movs	r0, #1
 800913a:	e7f8      	b.n	800912e <LoRaMacHandleResponseTimeout+0x16>
 800913c:	20008000 	.word	0x20008000

08009140 <LoRaMacHandleMlmeRequest>:
{
 8009140:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8009142:	4b14      	ldr	r3, [pc, #80]	; (8009194 <LoRaMacHandleMlmeRequest+0x54>)
 8009144:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009148:	f013 0f04 	tst.w	r3, #4
 800914c:	d100      	bne.n	8009150 <LoRaMacHandleMlmeRequest+0x10>
}
 800914e:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009150:	2001      	movs	r0, #1
 8009152:	f002 fb65 	bl	800b820 <LoRaMacConfirmQueueIsCmdActive>
 8009156:	b178      	cbz	r0, 8009178 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8009158:	2001      	movs	r0, #1
 800915a:	f002 fb2b 	bl	800b7b4 <LoRaMacConfirmQueueGetStatus>
 800915e:	b918      	cbnz	r0, 8009168 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 8009160:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <LoRaMacHandleMlmeRequest+0x54>)
 8009162:	2200      	movs	r2, #0
 8009164:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009168:	4a0a      	ldr	r2, [pc, #40]	; (8009194 <LoRaMacHandleMlmeRequest+0x54>)
 800916a:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800916e:	f023 0302 	bic.w	r3, r3, #2
 8009172:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 8009176:	e7ea      	b.n	800914e <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8009178:	2005      	movs	r0, #5
 800917a:	f002 fb51 	bl	800b820 <LoRaMacConfirmQueueIsCmdActive>
 800917e:	2800      	cmp	r0, #0
 8009180:	d0e5      	beq.n	800914e <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009182:	4a04      	ldr	r2, [pc, #16]	; (8009194 <LoRaMacHandleMlmeRequest+0x54>)
 8009184:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8009188:	f023 0302 	bic.w	r3, r3, #2
 800918c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8009190:	e7dd      	b.n	800914e <LoRaMacHandleMlmeRequest+0xe>
 8009192:	bf00      	nop
 8009194:	20000630 	.word	0x20000630

08009198 <SerializeTxFrame>:
{
 8009198:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800919a:	4b0f      	ldr	r3, [pc, #60]	; (80091d8 <SerializeTxFrame+0x40>)
 800919c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80091a0:	b11b      	cbz	r3, 80091aa <SerializeTxFrame+0x12>
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d00a      	beq.n	80091bc <SerializeTxFrame+0x24>
 80091a6:	2003      	movs	r0, #3
}
 80091a8:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80091aa:	480c      	ldr	r0, [pc, #48]	; (80091dc <SerializeTxFrame+0x44>)
 80091ac:	f002 ffd3 	bl	800c156 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80091b0:	b968      	cbnz	r0, 80091ce <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80091b2:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <SerializeTxFrame+0x40>)
 80091b4:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80091b8:	801a      	strh	r2, [r3, #0]
            break;
 80091ba:	e7f5      	b.n	80091a8 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80091bc:	4807      	ldr	r0, [pc, #28]	; (80091dc <SerializeTxFrame+0x44>)
 80091be:	f003 f800 	bl	800c1c2 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80091c2:	b930      	cbnz	r0, 80091d2 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80091c4:	4b04      	ldr	r3, [pc, #16]	; (80091d8 <SerializeTxFrame+0x40>)
 80091c6:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80091ca:	801a      	strh	r2, [r3, #0]
            break;
 80091cc:	e7ec      	b.n	80091a8 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80091ce:	2011      	movs	r0, #17
 80091d0:	e7ea      	b.n	80091a8 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80091d2:	2011      	movs	r0, #17
 80091d4:	e7e8      	b.n	80091a8 <SerializeTxFrame+0x10>
 80091d6:	bf00      	nop
 80091d8:	20000630 	.word	0x20000630
 80091dc:	20000738 	.word	0x20000738

080091e0 <ComputeRxWindowParameters>:
{
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80091e4:	4c1d      	ldr	r4, [pc, #116]	; (800925c <ComputeRxWindowParameters+0x7c>)
 80091e6:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80091ea:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 80091ee:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 80091f2:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 80091f6:	4630      	mov	r0, r6
 80091f8:	f003 f928 	bl	800c44c <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80091fc:	4d18      	ldr	r5, [pc, #96]	; (8009260 <ComputeRxWindowParameters+0x80>)
 80091fe:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009206:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800920a:	b241      	sxtb	r1, r0
 800920c:	4630      	mov	r0, r6
 800920e:	f003 f8ac 	bl	800c36a <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8009212:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800921a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800921e:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 8009222:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009226:	f003 f8a0 	bl	800c36a <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800922a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800922c:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 8009230:	440b      	add	r3, r1
 8009232:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009236:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009238:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800923c:	4413      	add	r3, r2
 800923e:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009242:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009246:	b93b      	cbnz	r3, 8009258 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009248:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800924a:	4419      	add	r1, r3
 800924c:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009250:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009252:	440a      	add	r2, r1
 8009254:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 8009258:	b002      	add	sp, #8
 800925a:	bd70      	pop	{r4, r5, r6, pc}
 800925c:	20008000 	.word	0x20008000
 8009260:	20000630 	.word	0x20000630

08009264 <VerifyTxFrame>:
{
 8009264:	b510      	push	{r4, lr}
 8009266:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 8009268:	2300      	movs	r3, #0
 800926a:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800926c:	4b0d      	ldr	r3, [pc, #52]	; (80092a4 <VerifyTxFrame+0x40>)
 800926e:	f893 411c 	ldrb.w	r4, [r3, #284]	; 0x11c
 8009272:	b914      	cbnz	r4, 800927a <VerifyTxFrame+0x16>
}
 8009274:	4620      	mov	r0, r4
 8009276:	b002      	add	sp, #8
 8009278:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800927a:	a801      	add	r0, sp, #4
 800927c:	f002 f980 	bl	800b580 <LoRaMacCommandsGetSizeSerializedCmds>
 8009280:	4604      	mov	r4, r0
 8009282:	b968      	cbnz	r0, 80092a0 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8009284:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009288:	4b06      	ldr	r3, [pc, #24]	; (80092a4 <VerifyTxFrame+0x40>)
 800928a:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800928e:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <VerifyTxFrame+0x44>)
 8009290:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 8009294:	f7fe ff10 	bl	80080b8 <ValidatePayloadLength>
 8009298:	2800      	cmp	r0, #0
 800929a:	d1eb      	bne.n	8009274 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800929c:	2408      	movs	r4, #8
 800929e:	e7e9      	b.n	8009274 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80092a0:	2413      	movs	r4, #19
 80092a2:	e7e7      	b.n	8009274 <VerifyTxFrame+0x10>
 80092a4:	20008000 	.word	0x20008000
 80092a8:	20000630 	.word	0x20000630

080092ac <SecureFrame>:
{
 80092ac:	b530      	push	{r4, r5, lr}
 80092ae:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 80092b4:	4b18      	ldr	r3, [pc, #96]	; (8009318 <SecureFrame+0x6c>)
 80092b6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80092ba:	b133      	cbz	r3, 80092ca <SecureFrame+0x1e>
 80092bc:	4605      	mov	r5, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	2b04      	cmp	r3, #4
 80092c2:	d00b      	beq.n	80092dc <SecureFrame+0x30>
 80092c4:	2003      	movs	r0, #3
}
 80092c6:	b003      	add	sp, #12
 80092c8:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80092ca:	4814      	ldr	r0, [pc, #80]	; (800931c <SecureFrame+0x70>)
 80092cc:	f002 fd08 	bl	800bce0 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80092d0:	b9d8      	cbnz	r0, 800930a <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80092d2:	4b11      	ldr	r3, [pc, #68]	; (8009318 <SecureFrame+0x6c>)
 80092d4:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80092d8:	801a      	strh	r2, [r3, #0]
            break;
 80092da:	e7f4      	b.n	80092c6 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80092dc:	a801      	add	r0, sp, #4
 80092de:	f002 fcb5 	bl	800bc4c <LoRaMacCryptoGetFCntUp>
 80092e2:	b9a0      	cbnz	r0, 800930e <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80092e4:	4b0c      	ldr	r3, [pc, #48]	; (8009318 <SecureFrame+0x6c>)
 80092e6:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80092ea:	b113      	cbz	r3, 80092f2 <SecureFrame+0x46>
                fCntUp -= 1;
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80092f2:	4b0a      	ldr	r3, [pc, #40]	; (800931c <SecureFrame+0x70>)
 80092f4:	4622      	mov	r2, r4
 80092f6:	4629      	mov	r1, r5
 80092f8:	9801      	ldr	r0, [sp, #4]
 80092fa:	f002 fd17 	bl	800bd2c <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80092fe:	b940      	cbnz	r0, 8009312 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009300:	4b05      	ldr	r3, [pc, #20]	; (8009318 <SecureFrame+0x6c>)
 8009302:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8009306:	801a      	strh	r2, [r3, #0]
            break;
 8009308:	e7dd      	b.n	80092c6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800930a:	2011      	movs	r0, #17
 800930c:	e7db      	b.n	80092c6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800930e:	2012      	movs	r0, #18
 8009310:	e7d9      	b.n	80092c6 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009312:	2011      	movs	r0, #17
 8009314:	e7d7      	b.n	80092c6 <SecureFrame+0x1a>
 8009316:	bf00      	nop
 8009318:	20000630 	.word	0x20000630
 800931c:	20000738 	.word	0x20000738

08009320 <SendFrameOnChannel>:
{
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	4606      	mov	r6, r0
    int8_t txPower = 0;
 8009326:	2300      	movs	r3, #0
 8009328:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800932c:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009330:	4d35      	ldr	r5, [pc, #212]	; (8009408 <SendFrameOnChannel+0xe8>)
 8009332:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 8009336:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800933a:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800933e:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009342:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8009344:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009346:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8009348:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800934a:	4c30      	ldr	r4, [pc, #192]	; (800940c <SendFrameOnChannel+0xec>)
 800934c:	8823      	ldrh	r3, [r4, #0]
 800934e:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009352:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 8009356:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800935a:	f504 6384 	add.w	r3, r4, #1056	; 0x420
 800935e:	f10d 0207 	add.w	r2, sp, #7
 8009362:	a902      	add	r1, sp, #8
 8009364:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 8009368:	f003 f816 	bl	800c398 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009372:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 8009376:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 800937a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800937e:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8009382:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009386:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
 800938a:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800938e:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8009392:	f001 ffd6 	bl	800b342 <LoRaMacClassBIsBeaconModeActive>
 8009396:	bb60      	cbnz	r0, 80093f2 <SendFrameOnChannel+0xd2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009398:	4b1b      	ldr	r3, [pc, #108]	; (8009408 <SendFrameOnChannel+0xe8>)
 800939a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d02f      	beq.n	8009402 <SendFrameOnChannel+0xe2>
    LoRaMacClassBHaltBeaconing( );
 80093a2:	f001 ffd1 	bl	800b348 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80093a6:	4b18      	ldr	r3, [pc, #96]	; (8009408 <SendFrameOnChannel+0xe8>)
 80093a8:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 80093ac:	4b17      	ldr	r3, [pc, #92]	; (800940c <SendFrameOnChannel+0xec>)
 80093ae:	f893 141f 	ldrb.w	r1, [r3, #1055]	; 0x41f
 80093b2:	b2c0      	uxtb	r0, r0
 80093b4:	f7ff ff7a 	bl	80092ac <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 80093b8:	4604      	mov	r4, r0
 80093ba:	b9b8      	cbnz	r0, 80093ec <SendFrameOnChannel+0xcc>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80093bc:	4813      	ldr	r0, [pc, #76]	; (800940c <SendFrameOnChannel+0xec>)
 80093be:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 80093c2:	f043 0302 	orr.w	r3, r3, #2
 80093c6:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 80093ca:	f890 341c 	ldrb.w	r3, [r0, #1052]	; 0x41c
 80093ce:	3301      	adds	r3, #1
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80093d6:	f880 3449 	strb.w	r3, [r0, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 80093da:	2300      	movs	r3, #0
 80093dc:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80093e0:	4b0b      	ldr	r3, [pc, #44]	; (8009410 <SendFrameOnChannel+0xf0>)
 80093e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e4:	f830 1b02 	ldrh.w	r1, [r0], #2
 80093e8:	b2c9      	uxtb	r1, r1
 80093ea:	4798      	blx	r3
}
 80093ec:	4620      	mov	r0, r4
 80093ee:	b006      	add	sp, #24
 80093f0:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80093f2:	f8d4 0420 	ldr.w	r0, [r4, #1056]	; 0x420
 80093f6:	f001 ffb6 	bl	800b366 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d0cc      	beq.n	8009398 <SendFrameOnChannel+0x78>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80093fe:	2410      	movs	r4, #16
 8009400:	e7f4      	b.n	80093ec <SendFrameOnChannel+0xcc>
        LoRaMacClassBStopRxSlots( );
 8009402:	f001 ffb2 	bl	800b36a <LoRaMacClassBStopRxSlots>
 8009406:	e7cc      	b.n	80093a2 <SendFrameOnChannel+0x82>
 8009408:	20008000 	.word	0x20008000
 800940c:	20000630 	.word	0x20000630
 8009410:	08011dbc 	.word	0x08011dbc

08009414 <ScheduleTx>:
{
 8009414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009418:	b08c      	sub	sp, #48	; 0x30
 800941a:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800941c:	f7ff fdb6 	bl	8008f8c <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 8009420:	4604      	mov	r4, r0
 8009422:	b118      	cbz	r0, 800942c <ScheduleTx+0x18>
}
 8009424:	4620      	mov	r0, r4
 8009426:	b00c      	add	sp, #48	; 0x30
 8009428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800942c:	f7fe fd50 	bl	8007ed0 <CalculateBackOff>
    status = SerializeTxFrame( );
 8009430:	f7ff feb2 	bl	8009198 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 8009434:	4604      	mov	r4, r0
 8009436:	2800      	cmp	r0, #0
 8009438:	d1f4      	bne.n	8009424 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800943a:	4e36      	ldr	r6, [pc, #216]	; (8009514 <ScheduleTx+0x100>)
 800943c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800943e:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009440:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 8009444:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8009448:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 800944c:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8009450:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009454:	4640      	mov	r0, r8
 8009456:	f007 fa23 	bl	80108a0 <SysTimeGetMcuTime>
 800945a:	af02      	add	r7, sp, #8
 800945c:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 8009466:	e898 0006 	ldmia.w	r8, {r1, r2}
 800946a:	4638      	mov	r0, r7
 800946c:	f007 f9b5 	bl	80107da <SysTimeSub>
 8009470:	ab07      	add	r3, sp, #28
 8009472:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009476:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800947a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800947c:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800947e:	2300      	movs	r3, #0
 8009480:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 8009484:	2301      	movs	r3, #1
 8009486:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800948a:	4b23      	ldr	r3, [pc, #140]	; (8009518 <ScheduleTx+0x104>)
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009492:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8009496:	b92b      	cbnz	r3, 80094a4 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 8009498:	2301      	movs	r3, #1
 800949a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800949e:	2300      	movs	r3, #0
 80094a0:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80094a4:	4a1c      	ldr	r2, [pc, #112]	; (8009518 <ScheduleTx+0x104>)
 80094a6:	481b      	ldr	r0, [pc, #108]	; (8009514 <ScheduleTx+0x100>)
 80094a8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	f502 6393 	add.w	r3, r2, #1176	; 0x498
 80094b2:	f202 421f 	addw	r2, r2, #1055	; 0x41f
 80094b6:	a904      	add	r1, sp, #16
 80094b8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 80094bc:	f002 ffb9 	bl	800c432 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 80094c0:	b1b0      	cbz	r0, 80094f0 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80094c2:	280b      	cmp	r0, #11
 80094c4:	d122      	bne.n	800950c <ScheduleTx+0xf8>
 80094c6:	b31d      	cbz	r5, 8009510 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80094c8:	4b13      	ldr	r3, [pc, #76]	; (8009518 <ScheduleTx+0x104>)
 80094ca:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 80094ce:	2900      	cmp	r1, #0
 80094d0:	d0a8      	beq.n	8009424 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80094d2:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80094d6:	f042 0220 	orr.w	r2, r2, #32
 80094da:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80094de:	f503 755a 	add.w	r5, r3, #872	; 0x368
 80094e2:	4628      	mov	r0, r5
 80094e4:	f007 fb48 	bl	8010b78 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 80094e8:	4628      	mov	r0, r5
 80094ea:	f007 faff 	bl	8010aec <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 80094ee:	e799      	b.n	8009424 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 80094f0:	f7ff fe76 	bl	80091e0 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 80094f4:	f7ff feb6 	bl	8009264 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 80094f8:	4604      	mov	r4, r0
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d192      	bne.n	8009424 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 80094fe:	4b06      	ldr	r3, [pc, #24]	; (8009518 <ScheduleTx+0x104>)
 8009500:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 8009504:	f7ff ff0c 	bl	8009320 <SendFrameOnChannel>
 8009508:	4604      	mov	r4, r0
 800950a:	e78b      	b.n	8009424 <ScheduleTx+0x10>
            return status;
 800950c:	4604      	mov	r4, r0
 800950e:	e789      	b.n	8009424 <ScheduleTx+0x10>
 8009510:	4604      	mov	r4, r0
 8009512:	e787      	b.n	8009424 <ScheduleTx+0x10>
 8009514:	20008000 	.word	0x20008000
 8009518:	20000630 	.word	0x20000630

0800951c <OnTxDelayedTimerEvent>:
{
 800951c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800951e:	4c16      	ldr	r4, [pc, #88]	; (8009578 <OnTxDelayedTimerEvent+0x5c>)
 8009520:	f504 705a 	add.w	r0, r4, #872	; 0x368
 8009524:	f007 fa88 	bl	8010a38 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009528:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800952c:	f023 0320 	bic.w	r3, r3, #32
 8009530:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8009534:	f8d4 149c 	ldr.w	r1, [r4, #1180]	; 0x49c
 8009538:	4b10      	ldr	r3, [pc, #64]	; (800957c <OnTxDelayedTimerEvent+0x60>)
 800953a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800953e:	f7ff fdeb 	bl	8009118 <LoRaMacHandleResponseTimeout>
 8009542:	b100      	cbz	r0, 8009546 <OnTxDelayedTimerEvent+0x2a>
}
 8009544:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 8009546:	2001      	movs	r0, #1
 8009548:	f7ff ff64 	bl	8009414 <ScheduleTx>
 800954c:	2800      	cmp	r0, #0
 800954e:	d0f9      	beq.n	8009544 <OnTxDelayedTimerEvent+0x28>
 8009550:	280b      	cmp	r0, #11
 8009552:	d0f7      	beq.n	8009544 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009554:	4b09      	ldr	r3, [pc, #36]	; (800957c <OnTxDelayedTimerEvent+0x60>)
 8009556:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800955a:	f884 2446 	strb.w	r2, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800955e:	f894 241c 	ldrb.w	r2, [r4, #1052]	; 0x41c
 8009562:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009566:	2009      	movs	r0, #9
 8009568:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800956c:	f002 f93a 	bl	800b7e4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009570:	f7fe fd40 	bl	8007ff4 <StopRetransmission>
            break;
 8009574:	e7e6      	b.n	8009544 <OnTxDelayedTimerEvent+0x28>
 8009576:	bf00      	nop
 8009578:	20000630 	.word	0x20000630
 800957c:	20008000 	.word	0x20008000

08009580 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009580:	4b1c      	ldr	r3, [pc, #112]	; (80095f4 <LoRaMacHandleMcpsRequest+0x74>)
 8009582:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009586:	f013 0f01 	tst.w	r3, #1
 800958a:	d032      	beq.n	80095f2 <LoRaMacHandleMcpsRequest+0x72>
{
 800958c:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800958e:	4b19      	ldr	r3, [pc, #100]	; (80095f4 <LoRaMacHandleMcpsRequest+0x74>)
 8009590:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8009594:	b12b      	cbz	r3, 80095a2 <LoRaMacHandleMcpsRequest+0x22>
 8009596:	2b03      	cmp	r3, #3
 8009598:	d003      	beq.n	80095a2 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800959a:	2b01      	cmp	r3, #1
 800959c:	d006      	beq.n	80095ac <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800959e:	2000      	movs	r0, #0
 80095a0:	e002      	b.n	80095a8 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80095a2:	f7fe fced 	bl	8007f80 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 80095a6:	b940      	cbnz	r0, 80095ba <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 80095a8:	b1b8      	cbz	r0, 80095da <LoRaMacHandleMcpsRequest+0x5a>
}
 80095aa:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 80095ac:	4b11      	ldr	r3, [pc, #68]	; (80095f4 <LoRaMacHandleMcpsRequest+0x74>)
 80095ae:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 80095b2:	b183      	cbz	r3, 80095d6 <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 80095b4:	f7fe fd00 	bl	8007fb8 <CheckRetransConfirmedUplink>
 80095b8:	e7f5      	b.n	80095a6 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 80095ba:	4c0e      	ldr	r4, [pc, #56]	; (80095f4 <LoRaMacHandleMcpsRequest+0x74>)
 80095bc:	f504 705a 	add.w	r0, r4, #872	; 0x368
 80095c0:	f007 fa3a 	bl	8010a38 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80095c4:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80095c8:	f023 0320 	bic.w	r3, r3, #32
 80095cc:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 80095d0:	f7fe fd10 	bl	8007ff4 <StopRetransmission>
 80095d4:	e7e9      	b.n	80095aa <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 80095d6:	2001      	movs	r0, #1
 80095d8:	e7e6      	b.n	80095a8 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80095da:	4b06      	ldr	r3, [pc, #24]	; (80095f4 <LoRaMacHandleMcpsRequest+0x74>)
 80095dc:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 80095e0:	f36f 1245 	bfc	r2, #5, #1
 80095e4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 80095e8:	f883 041d 	strb.w	r0, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 80095ec:	f7ff ff96 	bl	800951c <OnTxDelayedTimerEvent>
}
 80095f0:	e7db      	b.n	80095aa <LoRaMacHandleMcpsRequest+0x2a>
 80095f2:	4770      	bx	lr
 80095f4:	20000630 	.word	0x20000630

080095f8 <LoRaMacHandleRequestEvents>:
{
 80095f8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 80095fa:	4b22      	ldr	r3, [pc, #136]	; (8009684 <LoRaMacHandleRequestEvents+0x8c>)
 80095fc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009600:	bb7b      	cbnz	r3, 8009662 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009602:	4b20      	ldr	r3, [pc, #128]	; (8009684 <LoRaMacHandleRequestEvents+0x8c>)
 8009604:	f893 4495 	ldrb.w	r4, [r3, #1173]	; 0x495
 8009608:	f014 0501 	ands.w	r5, r4, #1
 800960c:	d005      	beq.n	800961a <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800960e:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 8009612:	f36f 0200 	bfc	r2, #0, #1
 8009616:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800961a:	4b1a      	ldr	r3, [pc, #104]	; (8009684 <LoRaMacHandleRequestEvents+0x8c>)
 800961c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8009620:	f013 0f04 	tst.w	r3, #4
 8009624:	d006      	beq.n	8009634 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009626:	4b17      	ldr	r3, [pc, #92]	; (8009684 <LoRaMacHandleRequestEvents+0x8c>)
 8009628:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800962c:	f36f 0282 	bfc	r2, #2, #1
 8009630:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8009634:	2001      	movs	r0, #1
 8009636:	f7fe fbfb 	bl	8007e30 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800963a:	b135      	cbz	r5, 800964a <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800963c:	4811      	ldr	r0, [pc, #68]	; (8009684 <LoRaMacHandleRequestEvents+0x8c>)
 800963e:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f200 4044 	addw	r0, r0, #1092	; 0x444
 8009648:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800964a:	f014 0f04 	tst.w	r4, #4
 800964e:	d109      	bne.n	8009664 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 8009650:	f001 fe7b 	bl	800b34a <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 8009654:	4b0b      	ldr	r3, [pc, #44]	; (8009684 <LoRaMacHandleRequestEvents+0x8c>)
 8009656:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800965a:	f36f 1245 	bfc	r2, #5, #1
 800965e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
}
 8009662:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8009664:	4808      	ldr	r0, [pc, #32]	; (8009688 <LoRaMacHandleRequestEvents+0x90>)
 8009666:	f002 f8e7 	bl	800b838 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800966a:	f002 f917 	bl	800b89c <LoRaMacConfirmQueueGetCnt>
 800966e:	2800      	cmp	r0, #0
 8009670:	d0ee      	beq.n	8009650 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009672:	4a04      	ldr	r2, [pc, #16]	; (8009684 <LoRaMacHandleRequestEvents+0x8c>)
 8009674:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8009678:	f043 0304 	orr.w	r3, r3, #4
 800967c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 8009680:	e7e6      	b.n	8009650 <LoRaMacHandleRequestEvents+0x58>
 8009682:	bf00      	nop
 8009684:	20000630 	.word	0x20000630
 8009688:	20000a88 	.word	0x20000a88

0800968c <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800968c:	4b07      	ldr	r3, [pc, #28]	; (80096ac <LoRaMacHandleScheduleUplinkEvent+0x20>)
 800968e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009692:	b103      	cbz	r3, 8009696 <LoRaMacHandleScheduleUplinkEvent+0xa>
 8009694:	4770      	bx	lr
{
 8009696:	b500      	push	{lr}
 8009698:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800969a:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800969e:	f10d 0007 	add.w	r0, sp, #7
 80096a2:	f001 ffab 	bl	800b5fc <LoRaMacCommandsStickyCmdsPending>
}
 80096a6:	b003      	add	sp, #12
 80096a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80096ac:	20000630 	.word	0x20000630

080096b0 <OpenContinuousRxCWindow>:
{
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80096b4:	4c16      	ldr	r4, [pc, #88]	; (8009710 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80096b6:	4d17      	ldr	r5, [pc, #92]	; (8009714 <OpenContinuousRxCWindow+0x64>)
 80096b8:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 80096bc:	9600      	str	r6, [sp, #0]
 80096be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80096c0:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80096c4:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 80096c8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80096cc:	f002 fe4d 	bl	800c36a <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80096d0:	2302      	movs	r3, #2
 80096d2:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80096d6:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 80096da:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80096de:	2301      	movs	r3, #1
 80096e0:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80096e4:	f505 6285 	add.w	r2, r5, #1064	; 0x428
 80096e8:	4631      	mov	r1, r6
 80096ea:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80096ee:	f002 fe48 	bl	800c382 <RegionRxConfig>
 80096f2:	b158      	cbz	r0, 800970c <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80096f4:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 80096f8:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 80096fc:	4b06      	ldr	r3, [pc, #24]	; (8009718 <OpenContinuousRxCWindow+0x68>)
 80096fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009700:	2000      	movs	r0, #0
 8009702:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8009704:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 8009708:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 800970c:	b002      	add	sp, #8
 800970e:	bd70      	pop	{r4, r5, r6, pc}
 8009710:	20008000 	.word	0x20008000
 8009714:	20000630 	.word	0x20000630
 8009718:	08011dbc 	.word	0x08011dbc

0800971c <RxWindowSetup>:
{
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 8009720:	f007 f98a 	bl	8010a38 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8009724:	4b0c      	ldr	r3, [pc, #48]	; (8009758 <RxWindowSetup+0x3c>)
 8009726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009728:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800972a:	4a0c      	ldr	r2, [pc, #48]	; (800975c <RxWindowSetup+0x40>)
 800972c:	4621      	mov	r1, r4
 800972e:	4b0c      	ldr	r3, [pc, #48]	; (8009760 <RxWindowSetup+0x44>)
 8009730:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8009734:	f002 fe25 	bl	800c382 <RegionRxConfig>
 8009738:	b160      	cbz	r0, 8009754 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800973a:	4d0a      	ldr	r5, [pc, #40]	; (8009764 <RxWindowSetup+0x48>)
 800973c:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 8009740:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8009744:	4b04      	ldr	r3, [pc, #16]	; (8009758 <RxWindowSetup+0x3c>)
 8009746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009748:	4a05      	ldr	r2, [pc, #20]	; (8009760 <RxWindowSetup+0x44>)
 800974a:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800974c:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800974e:	7ce3      	ldrb	r3, [r4, #19]
 8009750:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 8009754:	bd38      	pop	{r3, r4, r5, pc}
 8009756:	bf00      	nop
 8009758:	08011dbc 	.word	0x08011dbc
 800975c:	20000a58 	.word	0x20000a58
 8009760:	20008000 	.word	0x20008000
 8009764:	20000630 	.word	0x20000630

08009768 <OnRxWindow2TimerEvent>:
{
 8009768:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800976a:	4b13      	ldr	r3, [pc, #76]	; (80097b8 <OnRxWindow2TimerEvent+0x50>)
 800976c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8009770:	b903      	cbnz	r3, 8009774 <OnRxWindow2TimerEvent+0xc>
}
 8009772:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009774:	4810      	ldr	r0, [pc, #64]	; (80097b8 <OnRxWindow2TimerEvent+0x50>)
 8009776:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800977a:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800977e:	4b0f      	ldr	r3, [pc, #60]	; (80097bc <OnRxWindow2TimerEvent+0x54>)
 8009780:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009782:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009786:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800978a:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800978e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8009792:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009796:	2200      	movs	r2, #0
 8009798:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800979c:	2201      	movs	r2, #1
 800979e:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80097a2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80097a6:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80097aa:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 80097ae:	f500 7066 	add.w	r0, r0, #920	; 0x398
 80097b2:	f7ff ffb3 	bl	800971c <RxWindowSetup>
 80097b6:	e7dc      	b.n	8009772 <OnRxWindow2TimerEvent+0xa>
 80097b8:	20000630 	.word	0x20000630
 80097bc:	20008000 	.word	0x20008000

080097c0 <OnRxWindow1TimerEvent>:
{
 80097c0:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80097c2:	4811      	ldr	r0, [pc, #68]	; (8009808 <OnRxWindow1TimerEvent+0x48>)
 80097c4:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 80097c8:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80097cc:	4b0f      	ldr	r3, [pc, #60]	; (800980c <OnRxWindow1TimerEvent+0x4c>)
 80097ce:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 80097d2:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80097d6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80097da:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80097de:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80097e2:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80097e6:	2200      	movs	r2, #0
 80097e8:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80097ec:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80097f0:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80097f4:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80097f8:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 80097fc:	f500 7060 	add.w	r0, r0, #896	; 0x380
 8009800:	f7ff ff8c 	bl	800971c <RxWindowSetup>
}
 8009804:	bd08      	pop	{r3, pc}
 8009806:	bf00      	nop
 8009808:	20000630 	.word	0x20000630
 800980c:	20008000 	.word	0x20008000

08009810 <LoRaMacHandleNvm>:
{
 8009810:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 8009812:	4b30      	ldr	r3, [pc, #192]	; (80098d4 <LoRaMacHandleNvm+0xc4>)
 8009814:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009818:	b103      	cbz	r3, 800981c <LoRaMacHandleNvm+0xc>
}
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800981e:	2124      	movs	r1, #36	; 0x24
 8009820:	f004 ff2e 	bl	800e680 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8009824:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009826:	4283      	cmp	r3, r0
 8009828:	d052      	beq.n	80098d0 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800982a:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800982c:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800982e:	2114      	movs	r1, #20
 8009830:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009834:	f004 ff24 	bl	800e680 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8009838:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800983a:	4283      	cmp	r3, r0
 800983c:	d002      	beq.n	8009844 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800983e:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8009840:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8009844:	21e0      	movs	r1, #224	; 0xe0
 8009846:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800984a:	f004 ff19 	bl	800e680 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800984e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8009852:	4283      	cmp	r3, r0
 8009854:	d003      	beq.n	800985e <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 8009856:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800985a:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800985e:	21bc      	movs	r1, #188	; 0xbc
 8009860:	f504 7092 	add.w	r0, r4, #292	; 0x124
 8009864:	f004 ff0c 	bl	800e680 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8009868:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800986c:	4283      	cmp	r3, r0
 800986e:	d003      	beq.n	8009878 <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 8009870:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8009874:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8009878:	2100      	movs	r1, #0
 800987a:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800987e:	f004 feff 	bl	800e680 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8009882:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
 8009886:	4283      	cmp	r3, r0
 8009888:	d003      	beq.n	8009892 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800988a:	f8c4 01e4 	str.w	r0, [r4, #484]	; 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800988e:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8009892:	f44f 715e 	mov.w	r1, #888	; 0x378
 8009896:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
 800989a:	f004 fef1 	bl	800e680 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800989e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
 80098a2:	4283      	cmp	r3, r0
 80098a4:	d003      	beq.n	80098ae <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 80098a6:	f8c4 0560 	str.w	r0, [r4, #1376]	; 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80098aa:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80098ae:	2114      	movs	r1, #20
 80098b0:	f204 5064 	addw	r0, r4, #1380	; 0x564
 80098b4:	f004 fee4 	bl	800e680 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 80098b8:	f8d4 3578 	ldr.w	r3, [r4, #1400]	; 0x578
 80098bc:	4283      	cmp	r3, r0
 80098be:	d003      	beq.n	80098c8 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 80098c0:	f8c4 0578 	str.w	r0, [r4, #1400]	; 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80098c4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 80098c8:	4628      	mov	r0, r5
 80098ca:	f7fe fbbd 	bl	8008048 <CallNvmDataChangeCallback>
 80098ce:	e7a4      	b.n	800981a <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80098d0:	2500      	movs	r5, #0
 80098d2:	e7ac      	b.n	800982e <LoRaMacHandleNvm+0x1e>
 80098d4:	20000630 	.word	0x20000630

080098d8 <RestoreNvmData>:
{
 80098d8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80098da:	4b34      	ldr	r3, [pc, #208]	; (80099ac <RestoreNvmData+0xd4>)
 80098dc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d001      	beq.n	80098e8 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 80098e4:	2001      	movs	r0, #1
}
 80098e6:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80098e8:	4c31      	ldr	r4, [pc, #196]	; (80099b0 <RestoreNvmData+0xd8>)
 80098ea:	2124      	movs	r1, #36	; 0x24
 80098ec:	4620      	mov	r0, r4
 80098ee:	f004 fec7 	bl	800e680 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 80098f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098f4:	4283      	cmp	r3, r0
 80098f6:	d001      	beq.n	80098fc <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80098f8:	2017      	movs	r0, #23
 80098fa:	e7f4      	b.n	80098e6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80098fc:	2114      	movs	r1, #20
 80098fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8009902:	f004 febd 	bl	800e680 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8009906:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009908:	4283      	cmp	r3, r0
 800990a:	d001      	beq.n	8009910 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800990c:	2017      	movs	r0, #23
 800990e:	e7ea      	b.n	80098e6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8009910:	21e0      	movs	r1, #224	; 0xe0
 8009912:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8009916:	f004 feb3 	bl	800e680 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800991a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800991e:	4283      	cmp	r3, r0
 8009920:	d001      	beq.n	8009926 <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009922:	2017      	movs	r0, #23
 8009924:	e7df      	b.n	80098e6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8009926:	21bc      	movs	r1, #188	; 0xbc
 8009928:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800992c:	f004 fea8 	bl	800e680 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 8009930:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 8009934:	4283      	cmp	r3, r0
 8009936:	d001      	beq.n	800993c <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009938:	2017      	movs	r0, #23
 800993a:	e7d4      	b.n	80098e6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800993c:	2100      	movs	r1, #0
 800993e:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 8009942:	f004 fe9d 	bl	800e680 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8009946:	f8d4 31e4 	ldr.w	r3, [r4, #484]	; 0x1e4
 800994a:	4283      	cmp	r3, r0
 800994c:	d001      	beq.n	8009952 <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800994e:	2017      	movs	r0, #23
 8009950:	e7c9      	b.n	80098e6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8009952:	2114      	movs	r1, #20
 8009954:	f204 5064 	addw	r0, r4, #1380	; 0x564
 8009958:	f004 fe92 	bl	800e680 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800995c:	f8d4 3578 	ldr.w	r3, [r4, #1400]	; 0x578
 8009960:	4283      	cmp	r3, r0
 8009962:	d001      	beq.n	8009968 <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8009964:	2017      	movs	r0, #23
 8009966:	e7be      	b.n	80098e6 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8009968:	4625      	mov	r5, r4
 800996a:	4c12      	ldr	r4, [pc, #72]	; (80099b4 <RestoreNvmData+0xdc>)
 800996c:	f240 527c 	movw	r2, #1404	; 0x57c
 8009970:	4629      	mov	r1, r5
 8009972:	4620      	mov	r0, r4
 8009974:	f004 fe63 	bl	800e63e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8009978:	f240 527c 	movw	r2, #1404	; 0x57c
 800997c:	2100      	movs	r1, #0
 800997e:	4628      	mov	r0, r5
 8009980:	f004 fe75 	bl	800e66e <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009984:	4b09      	ldr	r3, [pc, #36]	; (80099ac <RestoreNvmData+0xd4>)
 8009986:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800998a:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800998e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8009990:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009994:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 8009998:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800999c:	2201      	movs	r2, #1
 800999e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80099a2:	2202      	movs	r2, #2
 80099a4:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    return LORAMAC_STATUS_OK;
 80099a8:	2000      	movs	r0, #0
 80099aa:	e79c      	b.n	80098e6 <RestoreNvmData+0xe>
 80099ac:	20000630 	.word	0x20000630
 80099b0:	2000857c 	.word	0x2000857c
 80099b4:	20008000 	.word	0x20008000

080099b8 <OnRadioRxTimeout>:
{
 80099b8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80099ba:	4a09      	ldr	r2, [pc, #36]	; (80099e0 <OnRadioRxTimeout+0x28>)
 80099bc:	7813      	ldrb	r3, [r2, #0]
 80099be:	f043 0302 	orr.w	r3, r3, #2
 80099c2:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80099c4:	4b07      	ldr	r3, [pc, #28]	; (80099e4 <OnRadioRxTimeout+0x2c>)
 80099c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80099ca:	b113      	cbz	r3, 80099d2 <OnRadioRxTimeout+0x1a>
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	b103      	cbz	r3, 80099d2 <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80099d0:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 80099d2:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <OnRadioRxTimeout+0x30>)
 80099d4:	2201      	movs	r2, #1
 80099d6:	2100      	movs	r1, #0
 80099d8:	2002      	movs	r0, #2
 80099da:	f006 fcd9 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 80099de:	bd08      	pop	{r3, pc}
 80099e0:	2000062c 	.word	0x2000062c
 80099e4:	20000630 	.word	0x20000630
 80099e8:	08011750 	.word	0x08011750

080099ec <OnRadioTxTimeout>:
{
 80099ec:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80099ee:	4a09      	ldr	r2, [pc, #36]	; (8009a14 <OnRadioTxTimeout+0x28>)
 80099f0:	7813      	ldrb	r3, [r2, #0]
 80099f2:	f043 0308 	orr.w	r3, r3, #8
 80099f6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80099f8:	4b07      	ldr	r3, [pc, #28]	; (8009a18 <OnRadioTxTimeout+0x2c>)
 80099fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80099fe:	b113      	cbz	r3, 8009a06 <OnRadioTxTimeout+0x1a>
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	b103      	cbz	r3, 8009a06 <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009a04:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8009a06:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <OnRadioTxTimeout+0x30>)
 8009a08:	2201      	movs	r2, #1
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	2002      	movs	r0, #2
 8009a0e:	f006 fcbf 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 8009a12:	bd08      	pop	{r3, pc}
 8009a14:	2000062c 	.word	0x2000062c
 8009a18:	20000630 	.word	0x20000630
 8009a1c:	08011760 	.word	0x08011760

08009a20 <OnRadioRxDone>:
{
 8009a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a24:	4680      	mov	r8, r0
 8009a26:	460f      	mov	r7, r1
 8009a28:	4616      	mov	r6, r2
 8009a2a:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8009a2c:	f006 ffc4 	bl	80109b8 <UTIL_TIMER_GetCurrentTime>
 8009a30:	4c0f      	ldr	r4, [pc, #60]	; (8009a70 <OnRadioRxDone+0x50>)
 8009a32:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 8009a34:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 8009a38:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 8009a3a:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 8009a3c:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8009a3e:	4b0d      	ldr	r3, [pc, #52]	; (8009a74 <OnRadioRxDone+0x54>)
 8009a40:	781a      	ldrb	r2, [r3, #0]
 8009a42:	f042 0210 	orr.w	r2, r2, #16
 8009a46:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8009a48:	b2d2      	uxtb	r2, r2
 8009a4a:	f042 0201 	orr.w	r2, r2, #1
 8009a4e:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009a50:	4b09      	ldr	r3, [pc, #36]	; (8009a78 <OnRadioRxDone+0x58>)
 8009a52:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8009a56:	b113      	cbz	r3, 8009a5e <OnRadioRxDone+0x3e>
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	b103      	cbz	r3, 8009a5e <OnRadioRxDone+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009a5c:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8009a5e:	4b07      	ldr	r3, [pc, #28]	; (8009a7c <OnRadioRxDone+0x5c>)
 8009a60:	2201      	movs	r2, #1
 8009a62:	2100      	movs	r1, #0
 8009a64:	2002      	movs	r0, #2
 8009a66:	f006 fc93 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 8009a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a6e:	bf00      	nop
 8009a70:	20000be0 	.word	0x20000be0
 8009a74:	2000062c 	.word	0x2000062c
 8009a78:	20000630 	.word	0x20000630
 8009a7c:	08011770 	.word	0x08011770

08009a80 <OnRadioTxDone>:
{
 8009a80:	b530      	push	{r4, r5, lr}
 8009a82:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8009a84:	f006 ff98 	bl	80109b8 <UTIL_TIMER_GetCurrentTime>
 8009a88:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <OnRadioTxDone+0x48>)
 8009a8a:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8009a8c:	4d0f      	ldr	r5, [pc, #60]	; (8009acc <OnRadioTxDone+0x4c>)
 8009a8e:	466c      	mov	r4, sp
 8009a90:	4620      	mov	r0, r4
 8009a92:	f006 fee3 	bl	801085c <SysTimeGet>
 8009a96:	f505 734e 	add.w	r3, r5, #824	; 0x338
 8009a9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009a9e:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8009aa2:	4a0b      	ldr	r2, [pc, #44]	; (8009ad0 <OnRadioTxDone+0x50>)
 8009aa4:	7813      	ldrb	r3, [r2, #0]
 8009aa6:	f043 0320 	orr.w	r3, r3, #32
 8009aaa:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009aac:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8009ab0:	b113      	cbz	r3, 8009ab8 <OnRadioTxDone+0x38>
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	b103      	cbz	r3, 8009ab8 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009ab6:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8009ab8:	4b06      	ldr	r3, [pc, #24]	; (8009ad4 <OnRadioTxDone+0x54>)
 8009aba:	2201      	movs	r2, #1
 8009abc:	2100      	movs	r1, #0
 8009abe:	2002      	movs	r0, #2
 8009ac0:	f006 fc66 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 8009ac4:	b003      	add	sp, #12
 8009ac6:	bd30      	pop	{r4, r5, pc}
 8009ac8:	20000bf0 	.word	0x20000bf0
 8009acc:	20000630 	.word	0x20000630
 8009ad0:	2000062c 	.word	0x2000062c
 8009ad4:	08011780 	.word	0x08011780

08009ad8 <ResetMacParameters>:
{
 8009ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ada:	b091      	sub	sp, #68	; 0x44
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8009adc:	4c53      	ldr	r4, [pc, #332]	; (8009c2c <ResetMacParameters+0x154>)
 8009ade:	2600      	movs	r6, #0
 8009ae0:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
    Nvm.MacGroup1.AdrAckCounter = 0;
 8009ae4:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 8009ae6:	4d52      	ldr	r5, [pc, #328]	; (8009c30 <ResetMacParameters+0x158>)
 8009ae8:	f885 641c 	strb.w	r6, [r5, #1052]	; 0x41c
    MacCtx.RetransmitTimeoutRetry = false;
 8009aec:	f885 641d 	strb.w	r6, [r5, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 8009af0:	f8c5 649c 	str.w	r6, [r5, #1180]	; 0x49c
    Nvm.MacGroup2.MaxDCycle = 0;
 8009af4:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8009af8:	2701      	movs	r7, #1
 8009afa:	f8a4 710c 	strh.w	r7, [r4, #268]	; 0x10c
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009afe:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 8009b02:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009b06:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 8009b0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8009b0e:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 8009b12:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8009b16:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8009b1a:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 8009b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b22:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8009b26:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8009b2a:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 8009b2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b32:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8009b36:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 8009b3a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8009b3e:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8009b42:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8009b46:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8009b4a:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009b4c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8009b50:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 8009b52:	f885 641e 	strb.w	r6, [r5, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8009b56:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8009b5a:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8009b5e:	f884 610a 	strb.w	r6, [r4, #266]	; 0x10a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8009b62:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8009b66:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 8009b6a:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8009b6c:	f504 73f4 	add.w	r3, r4, #488	; 0x1e8
 8009b70:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 8009b72:	4b30      	ldr	r3, [pc, #192]	; (8009c34 <ResetMacParameters+0x15c>)
 8009b74:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009b76:	a901      	add	r1, sp, #4
 8009b78:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8009b7c:	f002 fbd1 	bl	800c322 <RegionInitDefaults>
    MacCtx.Channel = 0;
 8009b80:	f885 641f 	strb.w	r6, [r5, #1055]	; 0x41f
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009b84:	f885 63d0 	strb.w	r6, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8009b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b8a:	f8c5 33d4 	str.w	r3, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b8e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8009b92:	f885 33e0 	strb.w	r3, [r5, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009b96:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8009b9a:	f885 33e1 	strb.w	r3, [r5, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009b9e:	f885 63e2 	strb.w	r6, [r5, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8009ba2:	f885 73e3 	strb.w	r7, [r5, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009ba6:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009baa:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009bae:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 8009bb2:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
 8009bb6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009bbc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009bc0:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009bc4:	f885 73fa 	strb.w	r7, [r5, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009bc8:	2302      	movs	r3, #2
 8009bca:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 8009bce:	960e      	str	r6, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8009bd0:	960f      	str	r6, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 8009bd2:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 8009bd6:	b11b      	cbz	r3, 8009be0 <ResetMacParameters+0x108>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8009bd8:	685a      	ldr	r2, [r3, #4]
 8009bda:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8009be0:	4b13      	ldr	r3, [pc, #76]	; (8009c30 <ResetMacParameters+0x158>)
 8009be2:	f203 426c 	addw	r2, r3, #1132	; 0x46c
 8009be6:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8009be8:	f203 4224 	addw	r2, r3, #1060	; 0x424
 8009bec:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8009bee:	f503 628b 	add.w	r2, r3, #1112	; 0x458
 8009bf2:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8009bf4:	f203 4395 	addw	r3, r3, #1173	; 0x495
 8009bf8:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8009bfa:	4a0c      	ldr	r2, [pc, #48]	; (8009c2c <ResetMacParameters+0x154>)
 8009bfc:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 8009c00:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8009c02:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8009c06:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8009c08:	f102 0344 	add.w	r3, r2, #68	; 0x44
 8009c0c:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8009c0e:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 8009c12:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8009c14:	f502 738e 	add.w	r3, r2, #284	; 0x11c
 8009c18:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8009c1a:	f202 5264 	addw	r2, r2, #1380	; 0x564
 8009c1e:	a90e      	add	r1, sp, #56	; 0x38
 8009c20:	a805      	add	r0, sp, #20
 8009c22:	f001 fb7d 	bl	800b320 <LoRaMacClassBInit>
}
 8009c26:	b011      	add	sp, #68	; 0x44
 8009c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	20008000 	.word	0x20008000
 8009c30:	20000630 	.word	0x20000630
 8009c34:	20000b50 	.word	0x20000b50

08009c38 <SwitchClass>:
{
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 8009c3c:	4b3e      	ldr	r3, [pc, #248]	; (8009d38 <SwitchClass+0x100>)
 8009c3e:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 8009c42:	2d01      	cmp	r5, #1
 8009c44:	d065      	beq.n	8009d12 <SwitchClass+0xda>
 8009c46:	2d02      	cmp	r5, #2
 8009c48:	d06b      	beq.n	8009d22 <SwitchClass+0xea>
 8009c4a:	b10d      	cbz	r5, 8009c50 <SwitchClass+0x18>
 8009c4c:	2003      	movs	r0, #3
}
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 8009c50:	b930      	cbnz	r0, 8009c60 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8009c52:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8009c56:	3364      	adds	r3, #100	; 0x64
 8009c58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c5c:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 8009c60:	2c01      	cmp	r4, #1
 8009c62:	d022      	beq.n	8009caa <SwitchClass+0x72>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009c64:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 8009c66:	2c02      	cmp	r4, #2
 8009c68:	d1f1      	bne.n	8009c4e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009c6a:	4b33      	ldr	r3, [pc, #204]	; (8009d38 <SwitchClass+0x100>)
 8009c6c:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009c70:	4e32      	ldr	r6, [pc, #200]	; (8009d3c <SwitchClass+0x104>)
 8009c72:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 8009c76:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 8009c7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009c80:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8009c84:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009c88:	2302      	movs	r3, #2
 8009c8a:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009c8e:	2300      	movs	r3, #0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	dd13      	ble.n	8009cbc <SwitchClass+0x84>
                MacCtx.NodeAckRequested = false;
 8009c94:	4b29      	ldr	r3, [pc, #164]	; (8009d3c <SwitchClass+0x104>)
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                Radio.Sleep( );
 8009c9c:	4b28      	ldr	r3, [pc, #160]	; (8009d40 <SwitchClass+0x108>)
 8009c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca0:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8009ca2:	f7ff fd05 	bl	80096b0 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	e7d1      	b.n	8009c4e <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 8009caa:	4620      	mov	r0, r4
 8009cac:	f001 fb4e 	bl	800b34c <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d1d8      	bne.n	8009c66 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8009cb4:	4b20      	ldr	r3, [pc, #128]	; (8009d38 <SwitchClass+0x100>)
 8009cb6:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 8009cba:	e7d4      	b.n	8009c66 <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	4a1e      	ldr	r2, [pc, #120]	; (8009d38 <SwitchClass+0x100>)
 8009cc0:	212c      	movs	r1, #44	; 0x2c
 8009cc2:	fb01 2203 	mla	r2, r1, r3, r2
 8009cc6:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 8009cca:	b912      	cbnz	r2, 8009cd2 <SwitchClass+0x9a>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009ccc:	3301      	adds	r3, #1
 8009cce:	b25b      	sxtb	r3, r3
 8009cd0:	e7de      	b.n	8009c90 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8009cd2:	4a19      	ldr	r2, [pc, #100]	; (8009d38 <SwitchClass+0x100>)
 8009cd4:	fb01 2000 	mla	r0, r1, r0, r2
 8009cd8:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 8009cdc:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009cde:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 8009ce2:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009ce6:	4b15      	ldr	r3, [pc, #84]	; (8009d3c <SwitchClass+0x104>)
 8009ce8:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 8009cec:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009cf0:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009cf4:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 8009cf8:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8009cfc:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 8009d00:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009d04:	2203      	movs	r2, #3
 8009d06:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 8009d10:	e7c0      	b.n	8009c94 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8009d12:	f001 fb1b 	bl	800b34c <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d199      	bne.n	8009c4e <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009d1a:	4b07      	ldr	r3, [pc, #28]	; (8009d38 <SwitchClass+0x100>)
 8009d1c:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 8009d20:	e795      	b.n	8009c4e <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 8009d22:	b938      	cbnz	r0, 8009d34 <SwitchClass+0xfc>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8009d24:	4b04      	ldr	r3, [pc, #16]	; (8009d38 <SwitchClass+0x100>)
 8009d26:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 8009d2a:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <SwitchClass+0x108>)
 8009d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2e:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009d30:	4620      	mov	r0, r4
 8009d32:	e78c      	b.n	8009c4e <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009d34:	2003      	movs	r0, #3
 8009d36:	e78a      	b.n	8009c4e <SwitchClass+0x16>
 8009d38:	20008000 	.word	0x20008000
 8009d3c:	20000630 	.word	0x20000630
 8009d40:	08011dbc 	.word	0x08011dbc

08009d44 <SendReJoinReq>:
{
 8009d44:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 8009d46:	28ff      	cmp	r0, #255	; 0xff
 8009d48:	d003      	beq.n	8009d52 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 8009d4a:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 8009d4c:	f7ff fb62 	bl	8009414 <ScheduleTx>
}
 8009d50:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 8009d52:	2000      	movs	r0, #0
 8009d54:	f7ff ff70 	bl	8009c38 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009d58:	4d0e      	ldr	r5, [pc, #56]	; (8009d94 <SendReJoinReq+0x50>)
 8009d5a:	2400      	movs	r4, #0
 8009d5c:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009d60:	1cab      	adds	r3, r5, #2
 8009d62:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009d66:	23ff      	movs	r3, #255	; 0xff
 8009d68:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8009d6c:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8009d70:	f004 fc34 	bl	800e5dc <SecureElementGetJoinEui>
 8009d74:	4601      	mov	r1, r0
 8009d76:	2208      	movs	r2, #8
 8009d78:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 8009d7c:	f004 fc5f 	bl	800e63e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8009d80:	f004 fc16 	bl	800e5b0 <SecureElementGetDevEui>
 8009d84:	4601      	mov	r1, r0
 8009d86:	2208      	movs	r2, #8
 8009d88:	f505 708b 	add.w	r0, r5, #278	; 0x116
 8009d8c:	f004 fc57 	bl	800e63e <memcpy1>
            allowDelayedTx = false;
 8009d90:	4620      	mov	r0, r4
            break;
 8009d92:	e7db      	b.n	8009d4c <SendReJoinReq+0x8>
 8009d94:	20000630 	.word	0x20000630

08009d98 <PrepareFrame>:
{
 8009d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d9c:	b083      	sub	sp, #12
 8009d9e:	4605      	mov	r5, r0
 8009da0:	460e      	mov	r6, r1
 8009da2:	4617      	mov	r7, r2
 8009da4:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 8009da8:	4959      	ldr	r1, [pc, #356]	; (8009f10 <PrepareFrame+0x178>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 8009dae:	f881 241e 	strb.w	r2, [r1, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 8009db2:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 8009db4:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 8009db6:	4698      	mov	r8, r3
 8009db8:	b1cb      	cbz	r3, 8009dee <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8009dba:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8009f10 <PrepareFrame+0x178>
 8009dbe:	4622      	mov	r2, r4
 8009dc0:	4641      	mov	r1, r8
 8009dc2:	f509 709c 	add.w	r0, r9, #312	; 0x138
 8009dc6:	f004 fc3a 	bl	800e63e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8009dca:	b2e0      	uxtb	r0, r4
 8009dcc:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8009dd0:	782b      	ldrb	r3, [r5, #0]
 8009dd2:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 8009dd6:	782b      	ldrb	r3, [r5, #0]
 8009dd8:	095b      	lsrs	r3, r3, #5
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	d009      	beq.n	8009df2 <PrepareFrame+0x5a>
 8009dde:	2b07      	cmp	r3, #7
 8009de0:	d079      	beq.n	8009ed6 <PrepareFrame+0x13e>
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d009      	beq.n	8009dfa <PrepareFrame+0x62>
 8009de6:	2002      	movs	r0, #2
}
 8009de8:	b003      	add	sp, #12
 8009dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 8009dee:	4614      	mov	r4, r2
 8009df0:	e7e3      	b.n	8009dba <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 8009df2:	4b47      	ldr	r3, [pc, #284]	; (8009f10 <PrepareFrame+0x178>)
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8009dfa:	4b45      	ldr	r3, [pc, #276]	; (8009f10 <PrepareFrame+0x178>)
 8009dfc:	2204      	movs	r2, #4
 8009dfe:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8009e02:	1c9a      	adds	r2, r3, #2
 8009e04:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009e08:	22ff      	movs	r2, #255	; 0xff
 8009e0a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8009e0e:	782a      	ldrb	r2, [r5, #0]
 8009e10:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8009e14:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8009e18:	4a3e      	ldr	r2, [pc, #248]	; (8009f14 <PrepareFrame+0x17c>)
 8009e1a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8009e1e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009e22:	7832      	ldrb	r2, [r6, #0]
 8009e24:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8009e28:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8009e2c:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8009e30:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009e34:	a801      	add	r0, sp, #4
 8009e36:	f001 ff09 	bl	800bc4c <LoRaMacCryptoGetFCntUp>
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	d15c      	bne.n	8009ef8 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8009e3e:	9a01      	ldr	r2, [sp, #4]
 8009e40:	4b33      	ldr	r3, [pc, #204]	; (8009f10 <PrepareFrame+0x178>)
 8009e42:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 8009e46:	2100      	movs	r1, #0
 8009e48:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
            MacCtx.McpsConfirm.AckReceived = false;
 8009e4c:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8009e50:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009e54:	4668      	mov	r0, sp
 8009e56:	f001 fb93 	bl	800b580 <LoRaMacCommandsGetSizeSerializedCmds>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d14e      	bne.n	8009efc <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 8009e5e:	9b00      	ldr	r3, [sp, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d0c1      	beq.n	8009de8 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8009e64:	4b2b      	ldr	r3, [pc, #172]	; (8009f14 <PrepareFrame+0x17c>)
 8009e66:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 8009e6a:	f7fe f905 	bl	8008078 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009e6e:	4b28      	ldr	r3, [pc, #160]	; (8009f10 <PrepareFrame+0x178>)
 8009e70:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8009e74:	b113      	cbz	r3, 8009e7c <PrepareFrame+0xe4>
 8009e76:	9a00      	ldr	r2, [sp, #0]
 8009e78:	2a0f      	cmp	r2, #15
 8009e7a:	d915      	bls.n	8009ea8 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8009e7c:	b113      	cbz	r3, 8009e84 <PrepareFrame+0xec>
 8009e7e:	9b00      	ldr	r3, [sp, #0]
 8009e80:	2b0f      	cmp	r3, #15
 8009e82:	d821      	bhi.n	8009ec8 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009e84:	4a24      	ldr	r2, [pc, #144]	; (8009f18 <PrepareFrame+0x180>)
 8009e86:	4669      	mov	r1, sp
 8009e88:	f001 fb86 	bl	800b598 <LoRaMacCommandsSerializeCmds>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d13b      	bne.n	8009f08 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8009e90:	4b1f      	ldr	r3, [pc, #124]	; (8009f10 <PrepareFrame+0x178>)
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8009e98:	f503 6294 	add.w	r2, r3, #1184	; 0x4a0
 8009e9c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8009ea0:	9a00      	ldr	r2, [sp, #0]
 8009ea2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8009ea6:	e79f      	b.n	8009de8 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8009ea8:	4a1c      	ldr	r2, [pc, #112]	; (8009f1c <PrepareFrame+0x184>)
 8009eaa:	4669      	mov	r1, sp
 8009eac:	200f      	movs	r0, #15
 8009eae:	f001 fb73 	bl	800b598 <LoRaMacCommandsSerializeCmds>
 8009eb2:	bb28      	cbnz	r0, 8009f00 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8009eb4:	7833      	ldrb	r3, [r6, #0]
 8009eb6:	9a00      	ldr	r2, [sp, #0]
 8009eb8:	f362 0303 	bfi	r3, r2, #0, #4
 8009ebc:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	4b13      	ldr	r3, [pc, #76]	; (8009f10 <PrepareFrame+0x178>)
 8009ec2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 8009ec6:	e78f      	b.n	8009de8 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8009ec8:	4a13      	ldr	r2, [pc, #76]	; (8009f18 <PrepareFrame+0x180>)
 8009eca:	4669      	mov	r1, sp
 8009ecc:	f001 fb64 	bl	800b598 <LoRaMacCommandsSerializeCmds>
 8009ed0:	b1c0      	cbz	r0, 8009f04 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009ed2:	2013      	movs	r0, #19
 8009ed4:	e788      	b.n	8009de8 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8009ed6:	f1b8 0f00 	cmp.w	r8, #0
 8009eda:	d017      	beq.n	8009f0c <PrepareFrame+0x174>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d083      	beq.n	8009de8 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8009ee0:	4c0b      	ldr	r4, [pc, #44]	; (8009f10 <PrepareFrame+0x178>)
 8009ee2:	b282      	uxth	r2, r0
 8009ee4:	4641      	mov	r1, r8
 8009ee6:	1ce0      	adds	r0, r4, #3
 8009ee8:	f004 fba9 	bl	800e63e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8009eec:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	e777      	b.n	8009de8 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009ef8:	2012      	movs	r0, #18
 8009efa:	e775      	b.n	8009de8 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009efc:	2013      	movs	r0, #19
 8009efe:	e773      	b.n	8009de8 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009f00:	2013      	movs	r0, #19
 8009f02:	e771      	b.n	8009de8 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8009f04:	200a      	movs	r0, #10
 8009f06:	e76f      	b.n	8009de8 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009f08:	2013      	movs	r0, #19
 8009f0a:	e76d      	b.n	8009de8 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e76b      	b.n	8009de8 <PrepareFrame+0x50>
 8009f10:	20000630 	.word	0x20000630
 8009f14:	20008000 	.word	0x20008000
 8009f18:	20000ad0 	.word	0x20000ad0
 8009f1c:	20000748 	.word	0x20000748

08009f20 <Send>:
{
 8009f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f24:	b08a      	sub	sp, #40	; 0x28
 8009f26:	4617      	mov	r7, r2
 8009f28:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009f2a:	4c45      	ldr	r4, [pc, #276]	; (800a040 <Send+0x120>)
 8009f2c:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8009f30:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009f34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009f36:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009f38:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d07c      	beq.n	800a03a <Send+0x11a>
 8009f40:	4605      	mov	r5, r0
 8009f42:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8009f44:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 8009f48:	b90b      	cbnz	r3, 8009f4e <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8009f54:	483a      	ldr	r0, [pc, #232]	; (800a040 <Send+0x120>)
 8009f56:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 8009f5a:	f361 13c7 	bfi	r3, r1, #7, #1
 8009f5e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009f62:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d054      	beq.n	800a014 <Send+0xf4>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8009f6a:	4b35      	ldr	r3, [pc, #212]	; (800a040 <Send+0x120>)
 8009f6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009f70:	b12b      	cbz	r3, 8009f7e <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 8009f72:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009f76:	f043 0320 	orr.w	r3, r3, #32
 8009f7a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8009f84:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009f88:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8009f8a:	4b2e      	ldr	r3, [pc, #184]	; (800a044 <Send+0x124>)
 8009f8c:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8009f90:	f8ad 2014 	strh.w	r2, [sp, #20]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8009f94:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8009f98:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009f9c:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009fa0:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8009fa4:	4926      	ldr	r1, [pc, #152]	; (800a040 <Send+0x120>)
 8009fa6:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 8009faa:	f88d 301a 	strb.w	r3, [sp, #26]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009fae:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 8009fb2:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 8009fb6:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8009fba:	f88d 301c 	strb.w	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8009fbe:	ab08      	add	r3, sp, #32
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	f101 0360 	add.w	r3, r1, #96	; 0x60
 8009fc6:	f101 0238 	add.w	r2, r1, #56	; 0x38
 8009fca:	3139      	adds	r1, #57	; 0x39
 8009fcc:	a803      	add	r0, sp, #12
 8009fce:	f001 f92d 	bl	800b22c <LoRaMacAdrCalcNext>
 8009fd2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8009fd6:	f360 1386 	bfi	r3, r0, #6, #1
 8009fda:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8009fde:	f8cd 8000 	str.w	r8, [sp]
 8009fe2:	463b      	mov	r3, r7
 8009fe4:	4632      	mov	r2, r6
 8009fe6:	a909      	add	r1, sp, #36	; 0x24
 8009fe8:	4628      	mov	r0, r5
 8009fea:	f7ff fed5 	bl	8009d98 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8009fee:	4604      	mov	r4, r0
 8009ff0:	b108      	cbz	r0, 8009ff6 <Send+0xd6>
 8009ff2:	280a      	cmp	r0, #10
 8009ff4:	d104      	bne.n	800a000 <Send+0xe0>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8009ff6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8009ffa:	f7ff fa0b 	bl	8009414 <ScheduleTx>
 8009ffe:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800a000:	b17c      	cbz	r4, 800a022 <Send+0x102>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800a002:	4b0f      	ldr	r3, [pc, #60]	; (800a040 <Send+0x120>)
 800a004:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800a008:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800a00c:	4620      	mov	r0, r4
 800a00e:	b00a      	add	sp, #40	; 0x28
 800a010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800a014:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800a018:	f043 0310 	orr.w	r3, r3, #16
 800a01c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800a020:	e7a3      	b.n	8009f6a <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800a022:	4b07      	ldr	r3, [pc, #28]	; (800a040 <Send+0x120>)
 800a024:	2200      	movs	r2, #0
 800a026:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800a02a:	9a08      	ldr	r2, [sp, #32]
 800a02c:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800a02e:	f001 fa7b 	bl	800b528 <LoRaMacCommandsRemoveNoneStickyCmds>
 800a032:	2800      	cmp	r0, #0
 800a034:	d0ea      	beq.n	800a00c <Send+0xec>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a036:	2413      	movs	r4, #19
 800a038:	e7e8      	b.n	800a00c <Send+0xec>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800a03a:	2407      	movs	r4, #7
 800a03c:	e7e6      	b.n	800a00c <Send+0xec>
 800a03e:	bf00      	nop
 800a040:	20008000 	.word	0x20008000
 800a044:	20000630 	.word	0x20000630

0800a048 <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800a048:	4b0a      	ldr	r3, [pc, #40]	; (800a074 <LoRaMacIsBusy+0x2c>)
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	f013 0f01 	tst.w	r3, #1
 800a050:	d10a      	bne.n	800a068 <LoRaMacIsBusy+0x20>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a052:	4b09      	ldr	r3, [pc, #36]	; (800a078 <LoRaMacIsBusy+0x30>)
 800a054:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a058:	b943      	cbnz	r3, 800a06c <LoRaMacIsBusy+0x24>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800a05a:	4b07      	ldr	r3, [pc, #28]	; (800a078 <LoRaMacIsBusy+0x30>)
 800a05c:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a060:	2b01      	cmp	r3, #1
 800a062:	d005      	beq.n	800a070 <LoRaMacIsBusy+0x28>
    return true;
 800a064:	2001      	movs	r0, #1
 800a066:	4770      	bx	lr
        return true;
 800a068:	2001      	movs	r0, #1
 800a06a:	4770      	bx	lr
    return true;
 800a06c:	2001      	movs	r0, #1
 800a06e:	4770      	bx	lr
        return false;
 800a070:	2000      	movs	r0, #0
}
 800a072:	4770      	bx	lr
 800a074:	2000062c 	.word	0x2000062c
 800a078:	20000630 	.word	0x20000630

0800a07c <LoRaMacProcess>:
{
 800a07c:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800a07e:	f7ff f81d 	bl	80090bc <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800a082:	f001 f974 	bl	800b36e <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a086:	4b20      	ldr	r3, [pc, #128]	; (800a108 <LoRaMacProcess+0x8c>)
 800a088:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800a08c:	f013 0f20 	tst.w	r3, #32
 800a090:	d10d      	bne.n	800a0ae <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800a092:	f7fd fed3 	bl	8007e3c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a096:	4b1c      	ldr	r3, [pc, #112]	; (800a108 <LoRaMacProcess+0x8c>)
 800a098:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d024      	beq.n	800a0ea <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800a0a0:	4b19      	ldr	r3, [pc, #100]	; (800a108 <LoRaMacProcess+0x8c>)
 800a0a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800a0a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a0aa:	d121      	bne.n	800a0f0 <LoRaMacProcess+0x74>
}
 800a0ac:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	f7fd febe 	bl	8007e30 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800a0b4:	f7fd fefa 	bl	8007eac <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800a0b8:	f7fd ffd2 	bl	8008060 <IsRequestPending>
 800a0bc:	b110      	cbz	r0, 800a0c4 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800a0be:	f7fe f8b9 	bl	8008234 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800a0c2:	b918      	cbnz	r0, 800a0cc <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800a0c4:	f7ff f83c 	bl	8009140 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800a0c8:	f7ff fa5a 	bl	8009580 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800a0cc:	f7ff fa94 	bl	80095f8 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800a0d0:	f7ff fadc 	bl	800968c <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	f7fd feab 	bl	8007e30 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800a0da:	4a0b      	ldr	r2, [pc, #44]	; (800a108 <LoRaMacProcess+0x8c>)
 800a0dc:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a0e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0e4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800a0e8:	e7d3      	b.n	800a092 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800a0ea:	f7ff fae1 	bl	80096b0 <OpenContinuousRxCWindow>
 800a0ee:	e7d7      	b.n	800a0a0 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800a0f0:	4b05      	ldr	r3, [pc, #20]	; (800a108 <LoRaMacProcess+0x8c>)
 800a0f2:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800a0f6:	f36f 1286 	bfc	r2, #6, #1
 800a0fa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 800a0fe:	4803      	ldr	r0, [pc, #12]	; (800a10c <LoRaMacProcess+0x90>)
 800a100:	f7ff fb86 	bl	8009810 <LoRaMacHandleNvm>
}
 800a104:	e7d2      	b.n	800a0ac <LoRaMacProcess+0x30>
 800a106:	bf00      	nop
 800a108:	20000630 	.word	0x20000630
 800a10c:	20008000 	.word	0x20008000

0800a110 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800a116:	2800      	cmp	r0, #0
 800a118:	f000 81a4 	beq.w	800a464 <LoRaMacInitialization+0x354>
 800a11c:	460f      	mov	r7, r1
 800a11e:	4691      	mov	r9, r2
 800a120:	4680      	mov	r8, r0
 800a122:	2900      	cmp	r1, #0
 800a124:	f000 81a0 	beq.w	800a468 <LoRaMacInitialization+0x358>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a128:	6803      	ldr	r3, [r0, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f000 819e 	beq.w	800a46c <LoRaMacInitialization+0x35c>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a130:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 819c 	beq.w	800a470 <LoRaMacInitialization+0x360>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a138:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 819a 	beq.w	800a474 <LoRaMacInitialization+0x364>
        ( primitives->MacMlmeIndication == NULL ) )
 800a140:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a142:	2b00      	cmp	r3, #0
 800a144:	f000 8198 	beq.w	800a478 <LoRaMacInitialization+0x368>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a148:	4610      	mov	r0, r2
 800a14a:	f002 f8cb 	bl	800c2e4 <RegionIsActive>
 800a14e:	2800      	cmp	r0, #0
 800a150:	f000 8194 	beq.w	800a47c <LoRaMacInitialization+0x36c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800a154:	4640      	mov	r0, r8
 800a156:	f001 fac9 	bl	800b6ec <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800a15a:	4ccc      	ldr	r4, [pc, #816]	; (800a48c <LoRaMacInitialization+0x37c>)
 800a15c:	f240 527c 	movw	r2, #1404	; 0x57c
 800a160:	2100      	movs	r1, #0
 800a162:	4620      	mov	r0, r4
 800a164:	f004 fa83 	bl	800e66e <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a168:	4dc9      	ldr	r5, [pc, #804]	; (800a490 <LoRaMacInitialization+0x380>)
 800a16a:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800a16e:	2100      	movs	r1, #0
 800a170:	4628      	mov	r0, r5
 800a172:	f004 fa7c 	bl	800e66e <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800a176:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800a17a:	2600      	movs	r6, #0
 800a17c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800a180:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800a184:	4bc3      	ldr	r3, [pc, #780]	; (800a494 <LoRaMacInitialization+0x384>)
 800a186:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a18a:	f88d 6020 	strb.w	r6, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800a18e:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800a192:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800a194:	f504 73f4 	add.w	r3, r4, #488	; 0x1e8
 800a198:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800a19a:	4bbf      	ldr	r3, [pc, #764]	; (800a498 <LoRaMacInitialization+0x388>)
 800a19c:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800a19e:	a905      	add	r1, sp, #20
 800a1a0:	4648      	mov	r0, r9
 800a1a2:	f002 f8be 	bl	800c322 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a1a6:	230f      	movs	r3, #15
 800a1a8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1ac:	a90a      	add	r1, sp, #40	; 0x28
 800a1ae:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a1b2:	f002 f89d 	bl	800c2f0 <RegionGetPhyParam>
 800a1b6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800a1b8:	1b80      	subs	r0, r0, r6
 800a1ba:	bf18      	it	ne
 800a1bc:	2001      	movne	r0, #1
 800a1be:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a1c2:	f04f 0a0a 	mov.w	sl, #10
 800a1c6:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1ca:	a90a      	add	r1, sp, #40	; 0x28
 800a1cc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a1d0:	f002 f88e 	bl	800c2f0 <RegionGetPhyParam>
 800a1d4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800a1d6:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a1da:	f04f 0906 	mov.w	r9, #6
 800a1de:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1e2:	a90a      	add	r1, sp, #40	; 0x28
 800a1e4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a1e8:	f002 f882 	bl	800c2f0 <RegionGetPhyParam>
 800a1ec:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800a1ee:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a1f2:	2310      	movs	r3, #16
 800a1f4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a1f8:	a90a      	add	r1, sp, #40	; 0x28
 800a1fa:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a1fe:	f002 f877 	bl	800c2f0 <RegionGetPhyParam>
 800a202:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a204:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a208:	2311      	movs	r3, #17
 800a20a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a20e:	a90a      	add	r1, sp, #40	; 0x28
 800a210:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a214:	f002 f86c 	bl	800c2f0 <RegionGetPhyParam>
 800a218:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a21a:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a21e:	2312      	movs	r3, #18
 800a220:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a224:	a90a      	add	r1, sp, #40	; 0x28
 800a226:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a22a:	f002 f861 	bl	800c2f0 <RegionGetPhyParam>
 800a22e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a230:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a234:	2313      	movs	r3, #19
 800a236:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a23a:	a90a      	add	r1, sp, #40	; 0x28
 800a23c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a240:	f002 f856 	bl	800c2f0 <RegionGetPhyParam>
 800a244:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a246:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a24a:	2314      	movs	r3, #20
 800a24c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a250:	a90a      	add	r1, sp, #40	; 0x28
 800a252:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a256:	f002 f84b 	bl	800c2f0 <RegionGetPhyParam>
 800a25a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a25c:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a260:	2316      	movs	r3, #22
 800a262:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a266:	a90a      	add	r1, sp, #40	; 0x28
 800a268:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a26c:	f002 f840 	bl	800c2f0 <RegionGetPhyParam>
 800a270:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a272:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a276:	2317      	movs	r3, #23
 800a278:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a27c:	a90a      	add	r1, sp, #40	; 0x28
 800a27e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a282:	f002 f835 	bl	800c2f0 <RegionGetPhyParam>
 800a286:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a288:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a28c:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a290:	2318      	movs	r3, #24
 800a292:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a296:	a90a      	add	r1, sp, #40	; 0x28
 800a298:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a29c:	f002 f828 	bl	800c2f0 <RegionGetPhyParam>
 800a2a0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a2a2:	b2c0      	uxtb	r0, r0
 800a2a4:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a2a8:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a2ac:	231d      	movs	r3, #29
 800a2ae:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a2b2:	a90a      	add	r1, sp, #40	; 0x28
 800a2b4:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a2b8:	f002 f81a 	bl	800c2f0 <RegionGetPhyParam>
 800a2bc:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a2be:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a2c2:	231e      	movs	r3, #30
 800a2c4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a2c8:	a90a      	add	r1, sp, #40	; 0x28
 800a2ca:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a2ce:	f002 f80f 	bl	800c2f0 <RegionGetPhyParam>
 800a2d2:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a2d4:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a2d8:	231f      	movs	r3, #31
 800a2da:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a2de:	a90a      	add	r1, sp, #40	; 0x28
 800a2e0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a2e4:	f002 f804 	bl	800c2f0 <RegionGetPhyParam>
 800a2e8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a2ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ec:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a2f0:	2320      	movs	r3, #32
 800a2f2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a2f6:	a90a      	add	r1, sp, #40	; 0x28
 800a2f8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a2fc:	f001 fff8 	bl	800c2f0 <RegionGetPhyParam>
 800a300:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a304:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a308:	230b      	movs	r3, #11
 800a30a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a30e:	a90a      	add	r1, sp, #40	; 0x28
 800a310:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a314:	f001 ffec 	bl	800c2f0 <RegionGetPhyParam>
 800a318:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800a31a:	f8a5 0400 	strh.w	r0, [r5, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a31e:	230c      	movs	r3, #12
 800a320:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a324:	a90a      	add	r1, sp, #40	; 0x28
 800a326:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800a32a:	f001 ffe1 	bl	800c2f0 <RegionGetPhyParam>
 800a32e:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800a330:	f8a5 0402 	strh.w	r0, [r5, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800a334:	f04f 0b01 	mov.w	fp, #1
 800a338:	f884 b0a4 	strb.w	fp, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800a33c:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800a340:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800a344:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800a348:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800a34c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a350:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800a352:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a356:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800a358:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800a35c:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800a35e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800a362:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800a364:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800a368:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800a36a:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800a36e:	f884 b10b 	strb.w	fp, [r4, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800a372:	f8c5 7348 	str.w	r7, [r5, #840]	; 0x348
    ResetMacParameters( );
 800a376:	f7ff fbaf 	bl	8009ad8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800a37a:	f884 b105 	strb.w	fp, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 800a37e:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800a382:	f885 6495 	strb.w	r6, [r5, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 800a386:	f8c5 b340 	str.w	fp, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800a38a:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a38c:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a38e:	9600      	str	r6, [sp, #0]
 800a390:	4b42      	ldr	r3, [pc, #264]	; (800a49c <LoRaMacInitialization+0x38c>)
 800a392:	4632      	mov	r2, r6
 800a394:	f04f 31ff 	mov.w	r1, #4294967295
 800a398:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800a39c:	f006 faee 	bl	801097c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a3a0:	9600      	str	r6, [sp, #0]
 800a3a2:	4b3f      	ldr	r3, [pc, #252]	; (800a4a0 <LoRaMacInitialization+0x390>)
 800a3a4:	4632      	mov	r2, r6
 800a3a6:	f04f 31ff 	mov.w	r1, #4294967295
 800a3aa:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800a3ae:	f006 fae5 	bl	801097c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a3b2:	9600      	str	r6, [sp, #0]
 800a3b4:	4b3b      	ldr	r3, [pc, #236]	; (800a4a4 <LoRaMacInitialization+0x394>)
 800a3b6:	4632      	mov	r2, r6
 800a3b8:	f04f 31ff 	mov.w	r1, #4294967295
 800a3bc:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800a3c0:	f006 fadc 	bl	801097c <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800a3c4:	9600      	str	r6, [sp, #0]
 800a3c6:	4b38      	ldr	r3, [pc, #224]	; (800a4a8 <LoRaMacInitialization+0x398>)
 800a3c8:	4632      	mov	r2, r6
 800a3ca:	f04f 31ff 	mov.w	r1, #4294967295
 800a3ce:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800a3d2:	f006 fad3 	bl	801097c <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800a3d6:	f10d 0808 	add.w	r8, sp, #8
 800a3da:	4640      	mov	r0, r8
 800a3dc:	f006 fa60 	bl	80108a0 <SysTimeGetMcuTime>
 800a3e0:	f504 7388 	add.w	r3, r4, #272	; 0x110
 800a3e4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a3e8:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800a3ec:	4b2f      	ldr	r3, [pc, #188]	; (800a4ac <LoRaMacInitialization+0x39c>)
 800a3ee:	601e      	str	r6, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800a3f0:	4b2f      	ldr	r3, [pc, #188]	; (800a4b0 <LoRaMacInitialization+0x3a0>)
 800a3f2:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800a3f6:	4b2f      	ldr	r3, [pc, #188]	; (800a4b4 <LoRaMacInitialization+0x3a4>)
 800a3f8:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800a3fc:	4b2e      	ldr	r3, [pc, #184]	; (800a4b8 <LoRaMacInitialization+0x3a8>)
 800a3fe:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800a402:	4b2e      	ldr	r3, [pc, #184]	; (800a4bc <LoRaMacInitialization+0x3ac>)
 800a404:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800a408:	4b2d      	ldr	r3, [pc, #180]	; (800a4c0 <LoRaMacInitialization+0x3b0>)
 800a40a:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800a40e:	4b2d      	ldr	r3, [pc, #180]	; (800a4c4 <LoRaMacInitialization+0x3b4>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800a416:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800a418:	68b9      	ldr	r1, [r7, #8]
 800a41a:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800a41e:	f003 fe69 	bl	800e0f4 <SecureElementInit>
 800a422:	bb80      	cbnz	r0, 800a486 <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800a424:	4620      	mov	r0, r4
 800a426:	f001 fbf1 	bl	800bc0c <LoRaMacCryptoInit>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d14c      	bne.n	800a4c8 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800a42e:	f001 f823 	bl	800b478 <LoRaMacCommandsInit>
 800a432:	2800      	cmp	r0, #0
 800a434:	d14a      	bne.n	800a4cc <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800a436:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800a43a:	f001 fc39 	bl	800bcb0 <LoRaMacCryptoSetMulticastReference>
 800a43e:	4604      	mov	r4, r0
 800a440:	2800      	cmp	r0, #0
 800a442:	d145      	bne.n	800a4d0 <LoRaMacInitialization+0x3c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800a444:	4d1f      	ldr	r5, [pc, #124]	; (800a4c4 <LoRaMacInitialization+0x3b4>)
 800a446:	696b      	ldr	r3, [r5, #20]
 800a448:	4798      	blx	r3
 800a44a:	f004 f8e5 	bl	800e618 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800a44e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800a450:	4a0e      	ldr	r2, [pc, #56]	; (800a48c <LoRaMacInitialization+0x37c>)
 800a452:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 800a456:	4798      	blx	r3
    Radio.Sleep( );
 800a458:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a45a:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a45c:	4658      	mov	r0, fp
 800a45e:	f7fd fce7 	bl	8007e30 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800a462:	e00c      	b.n	800a47e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a464:	2403      	movs	r4, #3
 800a466:	e00a      	b.n	800a47e <LoRaMacInitialization+0x36e>
 800a468:	2403      	movs	r4, #3
 800a46a:	e008      	b.n	800a47e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a46c:	2403      	movs	r4, #3
 800a46e:	e006      	b.n	800a47e <LoRaMacInitialization+0x36e>
 800a470:	2403      	movs	r4, #3
 800a472:	e004      	b.n	800a47e <LoRaMacInitialization+0x36e>
 800a474:	2403      	movs	r4, #3
 800a476:	e002      	b.n	800a47e <LoRaMacInitialization+0x36e>
 800a478:	2403      	movs	r4, #3
 800a47a:	e000      	b.n	800a47e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a47c:	2409      	movs	r4, #9
}
 800a47e:	4620      	mov	r0, r4
 800a480:	b00d      	add	sp, #52	; 0x34
 800a482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a486:	2411      	movs	r4, #17
 800a488:	e7f9      	b.n	800a47e <LoRaMacInitialization+0x36e>
 800a48a:	bf00      	nop
 800a48c:	20008000 	.word	0x20008000
 800a490:	20000630 	.word	0x20000630
 800a494:	01000400 	.word	0x01000400
 800a498:	20000b50 	.word	0x20000b50
 800a49c:	0800951d 	.word	0x0800951d
 800a4a0:	080097c1 	.word	0x080097c1
 800a4a4:	08009769 	.word	0x08009769
 800a4a8:	080081c9 	.word	0x080081c9
 800a4ac:	2000062c 	.word	0x2000062c
 800a4b0:	08009a81 	.word	0x08009a81
 800a4b4:	08009a21 	.word	0x08009a21
 800a4b8:	08007de5 	.word	0x08007de5
 800a4bc:	080099ed 	.word	0x080099ed
 800a4c0:	080099b9 	.word	0x080099b9
 800a4c4:	08011dbc 	.word	0x08011dbc
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a4c8:	2411      	movs	r4, #17
 800a4ca:	e7d8      	b.n	800a47e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a4cc:	2413      	movs	r4, #19
 800a4ce:	e7d6      	b.n	800a47e <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800a4d0:	2411      	movs	r4, #17
 800a4d2:	e7d4      	b.n	800a47e <LoRaMacInitialization+0x36e>

0800a4d4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	4b02      	ldr	r3, [pc, #8]	; (800a4e0 <LoRaMacStart+0xc>)
 800a4d8:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	20000630 	.word	0x20000630

0800a4e4 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800a4e4:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800a4e6:	f7ff fdaf 	bl	800a048 <LoRaMacIsBusy>
 800a4ea:	b130      	cbz	r0, 800a4fa <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800a4ec:	4b06      	ldr	r3, [pc, #24]	; (800a508 <LoRaMacStop+0x24>)
 800a4ee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d006      	beq.n	800a504 <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800a4f6:	2001      	movs	r0, #1
}
 800a4f8:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 800a4fa:	4b03      	ldr	r3, [pc, #12]	; (800a508 <LoRaMacStop+0x24>)
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800a502:	e7f9      	b.n	800a4f8 <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 800a504:	2000      	movs	r0, #0
 800a506:	e7f7      	b.n	800a4f8 <LoRaMacStop+0x14>
 800a508:	20000630 	.word	0x20000630

0800a50c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800a50c:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800a50e:	4c14      	ldr	r4, [pc, #80]	; (800a560 <LoRaMacHalt+0x54>)
 800a510:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a514:	f006 fa90 	bl	8010a38 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800a518:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800a51c:	f006 fa8c 	bl	8010a38 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a520:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a524:	f006 fa88 	bl	8010a38 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800a528:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800a52c:	f006 fa84 	bl	8010a38 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800a530:	f000 ff0a 	bl	800b348 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800a534:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <LoRaMacHalt+0x58>)
 800a536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a538:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800a53a:	2500      	movs	r5, #0
 800a53c:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800a540:	4e09      	ldr	r6, [pc, #36]	; (800a568 <LoRaMacHalt+0x5c>)
 800a542:	4630      	mov	r0, r6
 800a544:	f7ff f964 	bl	8009810 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800a548:	f240 527c 	movw	r2, #1404	; 0x57c
 800a54c:	4631      	mov	r1, r6
 800a54e:	4807      	ldr	r0, [pc, #28]	; (800a56c <LoRaMacHalt+0x60>)
 800a550:	f004 f875 	bl	800e63e <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800a554:	2301      	movs	r3, #1
 800a556:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800a55a:	4628      	mov	r0, r5
 800a55c:	bd70      	pop	{r4, r5, r6, pc}
 800a55e:	bf00      	nop
 800a560:	20000630 	.word	0x20000630
 800a564:	08011dbc 	.word	0x08011dbc
 800a568:	20008000 	.word	0x20008000
 800a56c:	2000857c 	.word	0x2000857c

0800a570 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800a570:	b530      	push	{r4, r5, lr}
 800a572:	b08b      	sub	sp, #44	; 0x2c
 800a574:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a576:	4b32      	ldr	r3, [pc, #200]	; (800a640 <LoRaMacQueryTxPossible+0xd0>)
 800a578:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a57a:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a57c:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800a580:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a584:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800a588:	f88d 300e 	strb.w	r3, [sp, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800a58c:	4b2d      	ldr	r3, [pc, #180]	; (800a644 <LoRaMacQueryTxPossible+0xd4>)
 800a58e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800a592:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800a596:	2300      	movs	r3, #0
 800a598:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800a59a:	2900      	cmp	r1, #0
 800a59c:	d049      	beq.n	800a632 <LoRaMacQueryTxPossible+0xc2>
 800a59e:	460d      	mov	r5, r1

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800a5a0:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800a5a4:	4b26      	ldr	r3, [pc, #152]	; (800a640 <LoRaMacQueryTxPossible+0xd0>)
 800a5a6:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800a5aa:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a5ae:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a5b0:	4924      	ldr	r1, [pc, #144]	; (800a644 <LoRaMacQueryTxPossible+0xd4>)
 800a5b2:	f8b1 0400 	ldrh.w	r0, [r1, #1024]	; 0x400
 800a5b6:	f8ad 001c 	strh.w	r0, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800a5ba:	f8b1 1402 	ldrh.w	r1, [r1, #1026]	; 0x402
 800a5be:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a5c2:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800a5c6:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a5ca:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800a5ce:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800a5d2:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a5d6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a5da:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800a5de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800a5e6:	ab04      	add	r3, sp, #16
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	f10d 030d 	add.w	r3, sp, #13
 800a5ee:	f10d 020e 	add.w	r2, sp, #14
 800a5f2:	f10d 010f 	add.w	r1, sp, #15
 800a5f6:	a805      	add	r0, sp, #20
 800a5f8:	f000 fe18 	bl	800b22c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800a5fc:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800a600:	f7fd fd3a 	bl	8008078 <GetMaxAppPayloadWithoutFOptsLength>
 800a604:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a606:	a802      	add	r0, sp, #8
 800a608:	f000 ffba 	bl	800b580 <LoRaMacCommandsGetSizeSerializedCmds>
 800a60c:	b998      	cbnz	r0, 800a636 <LoRaMacQueryTxPossible+0xc6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800a60e:	9b02      	ldr	r3, [sp, #8]
 800a610:	2b0f      	cmp	r3, #15
 800a612:	d80a      	bhi.n	800a62a <LoRaMacQueryTxPossible+0xba>
 800a614:	786a      	ldrb	r2, [r5, #1]
 800a616:	4293      	cmp	r3, r2
 800a618:	d807      	bhi.n	800a62a <LoRaMacQueryTxPossible+0xba>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800a61e:	9b02      	ldr	r3, [sp, #8]
 800a620:	441c      	add	r4, r3
 800a622:	42a2      	cmp	r2, r4
 800a624:	d309      	bcc.n	800a63a <LoRaMacQueryTxPossible+0xca>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800a626:	b00b      	add	sp, #44	; 0x2c
 800a628:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800a62e:	2008      	movs	r0, #8
 800a630:	e7f9      	b.n	800a626 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a632:	2003      	movs	r0, #3
 800a634:	e7f7      	b.n	800a626 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a636:	2013      	movs	r0, #19
 800a638:	e7f5      	b.n	800a626 <LoRaMacQueryTxPossible+0xb6>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800a63a:	2008      	movs	r0, #8
 800a63c:	e7f3      	b.n	800a626 <LoRaMacQueryTxPossible+0xb6>
 800a63e:	bf00      	nop
 800a640:	20008000 	.word	0x20008000
 800a644:	20000630 	.word	0x20000630

0800a648 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800a648:	2800      	cmp	r0, #0
 800a64a:	f000 813d 	beq.w	800a8c8 <LoRaMacMibGetRequestConfirm+0x280>
{
 800a64e:	b510      	push	{r4, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800a654:	7800      	ldrb	r0, [r0, #0]
 800a656:	2839      	cmp	r0, #57	; 0x39
 800a658:	f200 8132 	bhi.w	800a8c0 <LoRaMacMibGetRequestConfirm+0x278>
 800a65c:	e8df f010 	tbh	[pc, r0, lsl #1]
 800a660:	0040003a 	.word	0x0040003a
 800a664:	004b0046 	.word	0x004b0046
 800a668:	00560050 	.word	0x00560050
 800a66c:	0130005c 	.word	0x0130005c
 800a670:	01300130 	.word	0x01300130
 800a674:	01300130 	.word	0x01300130
 800a678:	01300130 	.word	0x01300130
 800a67c:	00620130 	.word	0x00620130
 800a680:	006e0068 	.word	0x006e0068
 800a684:	0083007b 	.word	0x0083007b
 800a688:	0093008b 	.word	0x0093008b
 800a68c:	009b00a8 	.word	0x009b00a8
 800a690:	00bb00b5 	.word	0x00bb00b5
 800a694:	00c500c0 	.word	0x00c500c0
 800a698:	00cf00ca 	.word	0x00cf00ca
 800a69c:	00e500d4 	.word	0x00e500d4
 800a6a0:	00f700eb 	.word	0x00f700eb
 800a6a4:	00fd00f1 	.word	0x00fd00f1
 800a6a8:	01080102 	.word	0x01080102
 800a6ac:	010d0115 	.word	0x010d0115
 800a6b0:	01300111 	.word	0x01300111
 800a6b4:	0130011b 	.word	0x0130011b
 800a6b8:	01300130 	.word	0x01300130
 800a6bc:	01300130 	.word	0x01300130
 800a6c0:	01300130 	.word	0x01300130
 800a6c4:	01300130 	.word	0x01300130
 800a6c8:	01300130 	.word	0x01300130
 800a6cc:	01300130 	.word	0x01300130
 800a6d0:	012a0124 	.word	0x012a0124
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800a6d4:	4b7d      	ldr	r3, [pc, #500]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a6d6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a6da:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800a6dc:	b004      	add	sp, #16
 800a6de:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a6e0:	4b7a      	ldr	r3, [pc, #488]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a6e2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800a6e6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6e8:	2000      	movs	r0, #0
            break;
 800a6ea:	e7f7      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800a6ec:	f003 ff60 	bl	800e5b0 <SecureElementGetDevEui>
 800a6f0:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6f2:	2000      	movs	r0, #0
            break;
 800a6f4:	e7f2      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800a6f6:	f003 ff71 	bl	800e5dc <SecureElementGetJoinEui>
 800a6fa:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a6fc:	2000      	movs	r0, #0
            break;
 800a6fe:	e7ed      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800a700:	4b72      	ldr	r3, [pc, #456]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a702:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800a706:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a708:	2000      	movs	r0, #0
            break;
 800a70a:	e7e7      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800a70c:	4b6f      	ldr	r3, [pc, #444]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a70e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800a712:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a714:	2000      	movs	r0, #0
            break;
 800a716:	e7e1      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800a718:	4b6c      	ldr	r3, [pc, #432]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a71a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a71e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a720:	2000      	movs	r0, #0
            break;
 800a722:	e7db      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800a724:	4b69      	ldr	r3, [pc, #420]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a726:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800a72a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a72c:	2000      	movs	r0, #0
            break;
 800a72e:	e7d5      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800a730:	4b66      	ldr	r3, [pc, #408]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a732:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a736:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a738:	2000      	movs	r0, #0
            break;
 800a73a:	e7cf      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS;
 800a73c:	231c      	movs	r3, #28
 800a73e:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a742:	a902      	add	r1, sp, #8
 800a744:	4b61      	ldr	r3, [pc, #388]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a746:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a74a:	f001 fdd1 	bl	800c2f0 <RegionGetPhyParam>
 800a74e:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800a750:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a752:	2000      	movs	r0, #0
            break;
 800a754:	e7c2      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800a756:	3404      	adds	r4, #4
 800a758:	4b5d      	ldr	r3, [pc, #372]	; (800a8d0 <LoRaMacMibGetRequestConfirm+0x288>)
 800a75a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a75e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a762:	2000      	movs	r0, #0
            break;
 800a764:	e7ba      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800a766:	3404      	adds	r4, #4
 800a768:	4b5a      	ldr	r3, [pc, #360]	; (800a8d4 <LoRaMacMibGetRequestConfirm+0x28c>)
 800a76a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a76e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a772:	2000      	movs	r0, #0
            break;
 800a774:	e7b2      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800a776:	3404      	adds	r4, #4
 800a778:	4b57      	ldr	r3, [pc, #348]	; (800a8d8 <LoRaMacMibGetRequestConfirm+0x290>)
 800a77a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a77e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a782:	2000      	movs	r0, #0
            break;
 800a784:	e7aa      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800a786:	3404      	adds	r4, #4
 800a788:	4b54      	ldr	r3, [pc, #336]	; (800a8dc <LoRaMacMibGetRequestConfirm+0x294>)
 800a78a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a78e:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a792:	2000      	movs	r0, #0
            break;
 800a794:	e7a2      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800a796:	231a      	movs	r3, #26
 800a798:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a79c:	a902      	add	r1, sp, #8
 800a79e:	4b4b      	ldr	r3, [pc, #300]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a7a0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a7a4:	f001 fda4 	bl	800c2f0 <RegionGetPhyParam>
 800a7a8:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800a7aa:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7ac:	2000      	movs	r0, #0
            break;
 800a7ae:	e795      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800a7b0:	2319      	movs	r3, #25
 800a7b2:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a7b6:	a902      	add	r1, sp, #8
 800a7b8:	4b44      	ldr	r3, [pc, #272]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a7ba:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a7be:	f001 fd97 	bl	800c2f0 <RegionGetPhyParam>
 800a7c2:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800a7c4:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7c6:	2000      	movs	r0, #0
            break;
 800a7c8:	e788      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800a7ca:	4b40      	ldr	r3, [pc, #256]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a7cc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a7d0:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7d2:	2000      	movs	r0, #0
            break;
 800a7d4:	e782      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800a7d6:	4b3d      	ldr	r3, [pc, #244]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a7d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7da:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7dc:	2000      	movs	r0, #0
            break;
 800a7de:	e77d      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800a7e0:	4b3a      	ldr	r3, [pc, #232]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7e4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7e6:	2000      	movs	r0, #0
            break;
 800a7e8:	e778      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800a7ea:	4b38      	ldr	r3, [pc, #224]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ee:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7f0:	2000      	movs	r0, #0
            break;
 800a7f2:	e773      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800a7f4:	4b35      	ldr	r3, [pc, #212]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a7fa:	2000      	movs	r0, #0
            break;
 800a7fc:	e76e      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800a7fe:	4b33      	ldr	r3, [pc, #204]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a802:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a804:	2000      	movs	r0, #0
            break;
 800a806:	e769      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_MIN_TX_DR;
 800a808:	2302      	movs	r3, #2
 800a80a:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a80e:	4b2f      	ldr	r3, [pc, #188]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a810:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800a814:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a818:	a902      	add	r1, sp, #8
 800a81a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800a81e:	f001 fd67 	bl	800c2f0 <RegionGetPhyParam>
 800a822:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800a824:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a826:	2000      	movs	r0, #0
            break;
 800a828:	e758      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800a82a:	4b28      	ldr	r3, [pc, #160]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a82c:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800a830:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a832:	2000      	movs	r0, #0
            break;
 800a834:	e752      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800a836:	4b25      	ldr	r3, [pc, #148]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a838:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800a83c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a83e:	2000      	movs	r0, #0
            break;
 800a840:	e74c      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800a842:	4b22      	ldr	r3, [pc, #136]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a844:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800a848:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a84a:	2000      	movs	r0, #0
            break;
 800a84c:	e746      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a84e:	4b1f      	ldr	r3, [pc, #124]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a850:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800a854:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a856:	2000      	movs	r0, #0
            break;
 800a858:	e740      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800a85a:	4b1c      	ldr	r3, [pc, #112]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a85e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a860:	2000      	movs	r0, #0
            break;
 800a862:	e73b      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800a864:	4b19      	ldr	r3, [pc, #100]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a866:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800a86a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a86c:	2000      	movs	r0, #0
            break;
 800a86e:	e735      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a870:	4b16      	ldr	r3, [pc, #88]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a874:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a876:	2000      	movs	r0, #0
            break;
 800a878:	e730      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Contexts = &Nvm;
 800a87a:	4b14      	ldr	r3, [pc, #80]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a87c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a87e:	2000      	movs	r0, #0
            break;
 800a880:	e72c      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.BackupContexts = &NvmBackup;
 800a882:	4b17      	ldr	r3, [pc, #92]	; (800a8e0 <LoRaMacMibGetRequestConfirm+0x298>)
 800a884:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a886:	2000      	movs	r0, #0
            break;
 800a888:	e728      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800a88a:	4b10      	ldr	r3, [pc, #64]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a88c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a890:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a892:	2000      	movs	r0, #0
            break;
 800a894:	e722      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800a896:	4b0d      	ldr	r3, [pc, #52]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a898:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800a89c:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800a89e:	f001 fde1 	bl	800c464 <RegionGetVersion>
 800a8a2:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8a4:	2000      	movs	r0, #0
            break;
 800a8a6:	e719      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800a8a8:	4b08      	ldr	r3, [pc, #32]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a8aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8ae:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8b0:	2000      	movs	r0, #0
            break;
 800a8b2:	e713      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800a8b4:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <LoRaMacMibGetRequestConfirm+0x284>)
 800a8b6:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800a8ba:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a8bc:	2000      	movs	r0, #0
            break;
 800a8be:	e70d      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f000 fd45 	bl	800b350 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800a8c6:	e709      	b.n	800a6dc <LoRaMacMibGetRequestConfirm+0x94>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a8c8:	2003      	movs	r0, #3
}
 800a8ca:	4770      	bx	lr
 800a8cc:	20008000 	.word	0x20008000
 800a8d0:	20008064 	.word	0x20008064
 800a8d4:	200080a8 	.word	0x200080a8
 800a8d8:	2000806c 	.word	0x2000806c
 800a8dc:	200080b0 	.word	0x200080b0
 800a8e0:	2000857c 	.word	0x2000857c

0800a8e4 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	f000 8254 	beq.w	800ad92 <LoRaMacMibSetRequestConfirm+0x4ae>
{
 800a8ea:	b530      	push	{r4, r5, lr}
 800a8ec:	b085      	sub	sp, #20
 800a8ee:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800a8f0:	4ba3      	ldr	r3, [pc, #652]	; (800ab80 <LoRaMacMibSetRequestConfirm+0x29c>)
 800a8f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a8f6:	f013 0f02 	tst.w	r3, #2
 800a8fa:	f040 824c 	bne.w	800ad96 <LoRaMacMibSetRequestConfirm+0x4b2>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800a8fe:	7805      	ldrb	r5, [r0, #0]
 800a900:	2d39      	cmp	r5, #57	; 0x39
 800a902:	f200 8243 	bhi.w	800ad8c <LoRaMacMibSetRequestConfirm+0x4a8>
 800a906:	e8df f015 	tbh	[pc, r5, lsl #1]
 800a90a:	003a      	.short	0x003a
 800a90c:	00500047 	.word	0x00500047
 800a910:	005e0057 	.word	0x005e0057
 800a914:	006a0064 	.word	0x006a0064
 800a918:	007b0070 	.word	0x007b0070
 800a91c:	00910086 	.word	0x00910086
 800a920:	00a7009c 	.word	0x00a7009c
 800a924:	00bd00b2 	.word	0x00bd00b2
 800a928:	00d400c9 	.word	0x00d400c9
 800a92c:	00da0241 	.word	0x00da0241
 800a930:	011a0100 	.word	0x011a0100
 800a934:	017d0153 	.word	0x017d0153
 800a938:	018d016d 	.word	0x018d016d
 800a93c:	019d0198 	.word	0x019d0198
 800a940:	01a701a2 	.word	0x01a701a2
 800a944:	024101ac 	.word	0x024101ac
 800a948:	01c601b1 	.word	0x01c601b1
 800a94c:	01df01f3 	.word	0x01df01f3
 800a950:	020e0207 	.word	0x020e0207
 800a954:	021b0216 	.word	0x021b0216
 800a958:	02410221 	.word	0x02410221
 800a95c:	02410224 	.word	0x02410224
 800a960:	02410241 	.word	0x02410241
 800a964:	02410241 	.word	0x02410241
 800a968:	02410241 	.word	0x02410241
 800a96c:	02410241 	.word	0x02410241
 800a970:	02410241 	.word	0x02410241
 800a974:	02410241 	.word	0x02410241
 800a978:	02350241 	.word	0x02350241
 800a97c:	023b      	.short	0x023b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800a97e:	7900      	ldrb	r0, [r0, #4]
 800a980:	f7ff f95a 	bl	8009c38 <SwitchClass>
            break;
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 800a984:	b930      	cbnz	r0, 800a994 <LoRaMacMibSetRequestConfirm+0xb0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800a986:	4a7e      	ldr	r2, [pc, #504]	; (800ab80 <LoRaMacMibSetRequestConfirm+0x29c>)
 800a988:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800a98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a990:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800a994:	b005      	add	sp, #20
 800a996:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800a998:	7903      	ldrb	r3, [r0, #4]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	f000 81fd 	beq.w	800ad9a <LoRaMacMibSetRequestConfirm+0x4b6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800a9a0:	4a78      	ldr	r2, [pc, #480]	; (800ab84 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a9a2:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9a6:	2000      	movs	r0, #0
 800a9a8:	e7ed      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800a9aa:	6840      	ldr	r0, [r0, #4]
 800a9ac:	f003 fdf2 	bl	800e594 <SecureElementSetDevEui>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d0e8      	beq.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9b4:	2003      	movs	r0, #3
 800a9b6:	e7ed      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800a9b8:	6840      	ldr	r0, [r0, #4]
 800a9ba:	f003 fdff 	bl	800e5bc <SecureElementSetJoinEui>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d0e1      	beq.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	e7e6      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800a9c6:	7902      	ldrb	r2, [r0, #4]
 800a9c8:	4b6e      	ldr	r3, [pc, #440]	; (800ab84 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a9ca:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	e7d9      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800a9d2:	6842      	ldr	r2, [r0, #4]
 800a9d4:	4b6b      	ldr	r3, [pc, #428]	; (800ab84 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a9d6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9da:	2000      	movs	r0, #0
 800a9dc:	e7d3      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800a9de:	6842      	ldr	r2, [r0, #4]
 800a9e0:	4b68      	ldr	r3, [pc, #416]	; (800ab84 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800a9e2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	e7cd      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            if( mibSet->Param.AppKey != NULL )
 800a9ea:	6841      	ldr	r1, [r0, #4]
 800a9ec:	2900      	cmp	r1, #0
 800a9ee:	f000 81d6 	beq.w	800ad9e <LoRaMacMibSetRequestConfirm+0x4ba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	f001 fa6e 	bl	800bed4 <LoRaMacCryptoSetKey>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d0c4      	beq.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800a9fc:	2011      	movs	r0, #17
 800a9fe:	e7c9      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkKey != NULL )
 800aa00:	6841      	ldr	r1, [r0, #4]
 800aa02:	2900      	cmp	r1, #0
 800aa04:	f000 81cd 	beq.w	800ada2 <LoRaMacMibSetRequestConfirm+0x4be>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800aa08:	2001      	movs	r0, #1
 800aa0a:	f001 fa63 	bl	800bed4 <LoRaMacCryptoSetKey>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d0b9      	beq.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa12:	2011      	movs	r0, #17
 800aa14:	e7be      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkSKey != NULL )
 800aa16:	6841      	ldr	r1, [r0, #4]
 800aa18:	2900      	cmp	r1, #0
 800aa1a:	f000 81c4 	beq.w	800ada6 <LoRaMacMibSetRequestConfirm+0x4c2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800aa1e:	2002      	movs	r0, #2
 800aa20:	f001 fa58 	bl	800bed4 <LoRaMacCryptoSetKey>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d0ae      	beq.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa28:	2011      	movs	r0, #17
 800aa2a:	e7b3      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AppSKey != NULL )
 800aa2c:	6841      	ldr	r1, [r0, #4]
 800aa2e:	2900      	cmp	r1, #0
 800aa30:	f000 81bb 	beq.w	800adaa <LoRaMacMibSetRequestConfirm+0x4c6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800aa34:	2003      	movs	r0, #3
 800aa36:	f001 fa4d 	bl	800bed4 <LoRaMacCryptoSetKey>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d0a3      	beq.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa3e:	2011      	movs	r0, #17
 800aa40:	e7a8      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKEKey != NULL )
 800aa42:	6841      	ldr	r1, [r0, #4]
 800aa44:	2900      	cmp	r1, #0
 800aa46:	f000 81b2 	beq.w	800adae <LoRaMacMibSetRequestConfirm+0x4ca>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800aa4a:	207f      	movs	r0, #127	; 0x7f
 800aa4c:	f001 fa42 	bl	800bed4 <LoRaMacCryptoSetKey>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	d098      	beq.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa54:	2011      	movs	r0, #17
 800aa56:	e79d      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKey0 != NULL )
 800aa58:	6841      	ldr	r1, [r0, #4]
 800aa5a:	2900      	cmp	r1, #0
 800aa5c:	f000 81a9 	beq.w	800adb2 <LoRaMacMibSetRequestConfirm+0x4ce>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800aa60:	2080      	movs	r0, #128	; 0x80
 800aa62:	f001 fa37 	bl	800bed4 <LoRaMacCryptoSetKey>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d08d      	beq.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa6a:	2011      	movs	r0, #17
 800aa6c:	e792      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800aa6e:	6841      	ldr	r1, [r0, #4]
 800aa70:	2900      	cmp	r1, #0
 800aa72:	f000 81a0 	beq.w	800adb6 <LoRaMacMibSetRequestConfirm+0x4d2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800aa76:	2081      	movs	r0, #129	; 0x81
 800aa78:	f001 fa2c 	bl	800bed4 <LoRaMacCryptoSetKey>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d082      	beq.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa80:	2011      	movs	r0, #17
 800aa82:	e787      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800aa84:	6841      	ldr	r1, [r0, #4]
 800aa86:	2900      	cmp	r1, #0
 800aa88:	f000 8197 	beq.w	800adba <LoRaMacMibSetRequestConfirm+0x4d6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800aa8c:	2082      	movs	r0, #130	; 0x82
 800aa8e:	f001 fa21 	bl	800bed4 <LoRaMacCryptoSetKey>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	f43f af77 	beq.w	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa98:	2011      	movs	r0, #17
 800aa9a:	e77b      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800aa9c:	7900      	ldrb	r0, [r0, #4]
 800aa9e:	4b39      	ldr	r3, [pc, #228]	; (800ab84 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800aaa0:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800aaa4:	4c38      	ldr	r4, [pc, #224]	; (800ab88 <LoRaMacMibSetRequestConfirm+0x2a4>)
 800aaa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aaa8:	4798      	blx	r3
            Radio.Sleep( );
 800aaaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aaac:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaae:	2000      	movs	r0, #0
 800aab0:	e769      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800aab2:	7902      	ldrb	r2, [r0, #4]
 800aab4:	4b33      	ldr	r3, [pc, #204]	; (800ab84 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800aab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800aaba:	2000      	movs	r0, #0
 800aabc:	e763      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800aabe:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800aac2:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aac6:	4b2f      	ldr	r3, [pc, #188]	; (800ab84 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800aac8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800aacc:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800aad0:	2207      	movs	r2, #7
 800aad2:	a901      	add	r1, sp, #4
 800aad4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aad8:	f001 fc2b 	bl	800c332 <RegionVerify>
 800aadc:	b908      	cbnz	r0, 800aae2 <LoRaMacMibSetRequestConfirm+0x1fe>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800aade:	2003      	movs	r0, #3
 800aae0:	e750      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800aae2:	6863      	ldr	r3, [r4, #4]
 800aae4:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800aae6:	2200      	movs	r2, #0
 800aae8:	a901      	add	r1, sp, #4
 800aaea:	4b26      	ldr	r3, [pc, #152]	; (800ab84 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800aaec:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800aaf0:	f001 fc1f 	bl	800c332 <RegionVerify>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	f000 8162 	beq.w	800adbe <LoRaMacMibSetRequestConfirm+0x4da>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800aafa:	4b24      	ldr	r3, [pc, #144]	; (800ab8c <LoRaMacMibSetRequestConfirm+0x2a8>)
 800aafc:	3404      	adds	r4, #4
 800aafe:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ab02:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab06:	2000      	movs	r0, #0
 800ab08:	e73c      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ab0a:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ab0e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ab12:	4b1c      	ldr	r3, [pc, #112]	; (800ab84 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ab14:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ab18:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ab1c:	2207      	movs	r2, #7
 800ab1e:	a901      	add	r1, sp, #4
 800ab20:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ab24:	f001 fc05 	bl	800c332 <RegionVerify>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	f000 814a 	beq.w	800adc2 <LoRaMacMibSetRequestConfirm+0x4de>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800ab2e:	4b18      	ldr	r3, [pc, #96]	; (800ab90 <LoRaMacMibSetRequestConfirm+0x2ac>)
 800ab30:	3404      	adds	r4, #4
 800ab32:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ab36:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	e722      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ab3e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ab42:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ab46:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ab48:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ab4c:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ab50:	2207      	movs	r2, #7
 800ab52:	a901      	add	r1, sp, #4
 800ab54:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ab58:	f001 fbeb 	bl	800c332 <RegionVerify>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	f000 8132 	beq.w	800adc6 <LoRaMacMibSetRequestConfirm+0x4e2>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800ab62:	4b08      	ldr	r3, [pc, #32]	; (800ab84 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ab64:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800ab68:	3404      	adds	r4, #4
 800ab6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ab6e:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ab72:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d00c      	beq.n	800ab94 <LoRaMacMibSetRequestConfirm+0x2b0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	e702      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
 800ab7e:	bf00      	nop
 800ab80:	20000630 	.word	0x20000630
 800ab84:	20008000 	.word	0x20008000
 800ab88:	08011dbc 	.word	0x08011dbc
 800ab8c:	20008064 	.word	0x20008064
 800ab90:	200080a8 	.word	0x200080a8
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ab94:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800ab98:	f893 011c 	ldrb.w	r0, [r3, #284]	; 0x11c
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	f43f aef1 	beq.w	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
                    Radio.Sleep( );
 800aba2:	4b90      	ldr	r3, [pc, #576]	; (800ade4 <LoRaMacMibSetRequestConfirm+0x500>)
 800aba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba6:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800aba8:	f7fe fd82 	bl	80096b0 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abac:	2000      	movs	r0, #0
 800abae:	e6e9      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800abb0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800abb4:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800abb8:	4b8b      	ldr	r3, [pc, #556]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800abba:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800abbe:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800abc2:	2207      	movs	r2, #7
 800abc4:	a901      	add	r1, sp, #4
 800abc6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800abca:	f001 fbb2 	bl	800c332 <RegionVerify>
 800abce:	2800      	cmp	r0, #0
 800abd0:	f000 80fb 	beq.w	800adca <LoRaMacMibSetRequestConfirm+0x4e6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800abd4:	4b85      	ldr	r3, [pc, #532]	; (800adec <LoRaMacMibSetRequestConfirm+0x508>)
 800abd6:	3404      	adds	r4, #4
 800abd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800abdc:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abe0:	2000      	movs	r0, #0
 800abe2:	e6cf      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800abe4:	6843      	ldr	r3, [r0, #4]
 800abe6:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800abe8:	2301      	movs	r3, #1
 800abea:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800abee:	a902      	add	r1, sp, #8
 800abf0:	4b7d      	ldr	r3, [pc, #500]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800abf2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800abf6:	f001 fbaf 	bl	800c358 <RegionChanMaskSet>
 800abfa:	b108      	cbz	r0, 800ac00 <LoRaMacMibSetRequestConfirm+0x31c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800abfc:	2000      	movs	r0, #0
 800abfe:	e6c1      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac00:	2003      	movs	r0, #3
 800ac02:	e6c7      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800ac04:	6843      	ldr	r3, [r0, #4]
 800ac06:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ac0e:	a902      	add	r1, sp, #8
 800ac10:	4b75      	ldr	r3, [pc, #468]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac12:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ac16:	f001 fb9f 	bl	800c358 <RegionChanMaskSet>
 800ac1a:	b108      	cbz	r0, 800ac20 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e6b1      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ac20:	2003      	movs	r0, #3
 800ac22:	e6b7      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ac24:	7902      	ldrb	r2, [r0, #4]
 800ac26:	1e53      	subs	r3, r2, #1
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	2b0e      	cmp	r3, #14
 800ac2c:	f200 80cf 	bhi.w	800adce <LoRaMacMibSetRequestConfirm+0x4ea>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800ac30:	4b6d      	ldr	r3, [pc, #436]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac32:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac36:	2000      	movs	r0, #0
 800ac38:	e6a4      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800ac3a:	6842      	ldr	r2, [r0, #4]
 800ac3c:	4b6a      	ldr	r3, [pc, #424]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac3e:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac40:	2000      	movs	r0, #0
 800ac42:	e6a0      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ac44:	6842      	ldr	r2, [r0, #4]
 800ac46:	4b68      	ldr	r3, [pc, #416]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac48:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	e69b      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800ac4e:	6842      	ldr	r2, [r0, #4]
 800ac50:	4b65      	ldr	r3, [pc, #404]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac52:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac54:	2000      	movs	r0, #0
 800ac56:	e696      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800ac58:	6842      	ldr	r2, [r0, #4]
 800ac5a:	4b63      	ldr	r3, [pc, #396]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac5c:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac5e:	2000      	movs	r0, #0
 800ac60:	e691      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800ac62:	6842      	ldr	r2, [r0, #4]
 800ac64:	4b60      	ldr	r3, [pc, #384]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac66:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac68:	2000      	movs	r0, #0
 800ac6a:	e68c      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800ac6c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ac70:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800ac74:	2206      	movs	r2, #6
 800ac76:	a901      	add	r1, sp, #4
 800ac78:	4b5b      	ldr	r3, [pc, #364]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac7a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ac7e:	f001 fb58 	bl	800c332 <RegionVerify>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	f000 80a5 	beq.w	800add2 <LoRaMacMibSetRequestConfirm+0x4ee>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800ac88:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ac8c:	4b56      	ldr	r3, [pc, #344]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ac8e:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ac92:	2000      	movs	r0, #0
 800ac94:	e676      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800ac96:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ac9a:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ac9e:	4b52      	ldr	r3, [pc, #328]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800aca0:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800aca4:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800aca8:	2205      	movs	r2, #5
 800acaa:	a901      	add	r1, sp, #4
 800acac:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800acb0:	f001 fb3f 	bl	800c332 <RegionVerify>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	f000 808e 	beq.w	800add6 <LoRaMacMibSetRequestConfirm+0x4f2>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800acba:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800acbe:	4b4a      	ldr	r3, [pc, #296]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800acc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acc4:	2000      	movs	r0, #0
 800acc6:	e65d      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800acc8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800accc:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800acd0:	220a      	movs	r2, #10
 800acd2:	a901      	add	r1, sp, #4
 800acd4:	4b44      	ldr	r3, [pc, #272]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800acd6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800acda:	f001 fb2a 	bl	800c332 <RegionVerify>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d07b      	beq.n	800adda <LoRaMacMibSetRequestConfirm+0x4f6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800ace2:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ace6:	4b40      	ldr	r3, [pc, #256]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ace8:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800acec:	2000      	movs	r0, #0
 800acee:	e649      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800acf0:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800acf4:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800acf8:	2209      	movs	r2, #9
 800acfa:	a901      	add	r1, sp, #4
 800acfc:	4b3a      	ldr	r3, [pc, #232]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800acfe:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ad02:	f001 fb16 	bl	800c332 <RegionVerify>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d069      	beq.n	800adde <LoRaMacMibSetRequestConfirm+0x4fa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800ad0a:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ad0e:	4b36      	ldr	r3, [pc, #216]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ad10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad14:	2000      	movs	r0, #0
 800ad16:	e635      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800ad18:	6842      	ldr	r2, [r0, #4]
 800ad1a:	4b33      	ldr	r3, [pc, #204]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ad1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ad20:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad22:	2000      	movs	r0, #0
 800ad24:	e62f      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800ad26:	7902      	ldrb	r2, [r0, #4]
 800ad28:	4b2f      	ldr	r3, [pc, #188]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ad2a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800ad2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad32:	2000      	movs	r0, #0
 800ad34:	e627      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800ad36:	6842      	ldr	r2, [r0, #4]
 800ad38:	4b2b      	ldr	r3, [pc, #172]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ad3a:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e622      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800ad40:	6842      	ldr	r2, [r0, #4]
 800ad42:	4b29      	ldr	r3, [pc, #164]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ad44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad48:	2000      	movs	r0, #0
 800ad4a:	e61c      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            status = RestoreNvmData( );
 800ad4c:	f7fe fdc4 	bl	80098d8 <RestoreNvmData>
            break;
 800ad50:	e618      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800ad52:	7983      	ldrb	r3, [r0, #6]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d901      	bls.n	800ad5c <LoRaMacMibSetRequestConfirm+0x478>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad58:	2003      	movs	r0, #3
 800ad5a:	e61b      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800ad5c:	6842      	ldr	r2, [r0, #4]
 800ad5e:	4b22      	ldr	r3, [pc, #136]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ad60:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800ad64:	6840      	ldr	r0, [r0, #4]
 800ad66:	f000 ff69 	bl	800bc3c <LoRaMacCryptoSetLrWanVersion>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	f43f ae0a 	beq.w	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ad70:	2011      	movs	r0, #17
 800ad72:	e60f      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800ad74:	6842      	ldr	r2, [r0, #4]
 800ad76:	4b1c      	ldr	r3, [pc, #112]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ad78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	e602      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800ad80:	7902      	ldrb	r2, [r0, #4]
 800ad82:	4b19      	ldr	r3, [pc, #100]	; (800ade8 <LoRaMacMibSetRequestConfirm+0x504>)
 800ad84:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ad88:	2000      	movs	r0, #0
 800ad8a:	e5fc      	b.n	800a986 <LoRaMacMibSetRequestConfirm+0xa2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800ad8c:	f000 fae2 	bl	800b354 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800ad90:	e5f8      	b.n	800a984 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ad92:	2003      	movs	r0, #3
}
 800ad94:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800ad96:	2001      	movs	r0, #1
 800ad98:	e5fc      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad9a:	2003      	movs	r0, #3
 800ad9c:	e5fa      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ad9e:	2003      	movs	r0, #3
 800ada0:	e5f8      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ada2:	2003      	movs	r0, #3
 800ada4:	e5f6      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ada6:	2003      	movs	r0, #3
 800ada8:	e5f4      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adaa:	2003      	movs	r0, #3
 800adac:	e5f2      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adae:	2003      	movs	r0, #3
 800adb0:	e5f0      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adb2:	2003      	movs	r0, #3
 800adb4:	e5ee      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adb6:	2003      	movs	r0, #3
 800adb8:	e5ec      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adba:	2003      	movs	r0, #3
 800adbc:	e5ea      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adbe:	2003      	movs	r0, #3
 800adc0:	e5e8      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adc2:	2003      	movs	r0, #3
 800adc4:	e5e6      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adc6:	2003      	movs	r0, #3
 800adc8:	e5e4      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adca:	2003      	movs	r0, #3
 800adcc:	e5e2      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adce:	2003      	movs	r0, #3
 800add0:	e5e0      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800add2:	2003      	movs	r0, #3
 800add4:	e5de      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800add6:	2003      	movs	r0, #3
 800add8:	e5dc      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adda:	2003      	movs	r0, #3
 800addc:	e5da      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800adde:	2003      	movs	r0, #3
 800ade0:	e5d8      	b.n	800a994 <LoRaMacMibSetRequestConfirm+0xb0>
 800ade2:	bf00      	nop
 800ade4:	08011dbc 	.word	0x08011dbc
 800ade8:	20008000 	.word	0x20008000
 800adec:	200080b0 	.word	0x200080b0

0800adf0 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800adf0:	b570      	push	{r4, r5, r6, lr}
 800adf2:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800adf4:	2300      	movs	r3, #0
 800adf6:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800adfa:	2800      	cmp	r0, #0
 800adfc:	f000 80ea 	beq.w	800afd4 <LoRaMacMlmeRequest+0x1e4>
 800ae00:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800ae02:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800ae04:	f7ff f920 	bl	800a048 <LoRaMacIsBusy>
 800ae08:	b118      	cbz	r0, 800ae12 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800ae0a:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	b006      	add	sp, #24
 800ae10:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800ae12:	f000 fd49 	bl	800b8a8 <LoRaMacConfirmQueueIsFull>
 800ae16:	b108      	cbz	r0, 800ae1c <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800ae18:	2401      	movs	r4, #1
 800ae1a:	e7f7      	b.n	800ae0c <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ae1c:	f000 fd3e 	bl	800b89c <LoRaMacConfirmQueueGetCnt>
 800ae20:	b308      	cbz	r0, 800ae66 <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ae22:	4b6d      	ldr	r3, [pc, #436]	; (800afd8 <LoRaMacMlmeRequest+0x1e8>)
 800ae24:	2101      	movs	r1, #1
 800ae26:	f883 1459 	strb.w	r1, [r3, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ae2a:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800ae2e:	f042 0204 	orr.w	r2, r2, #4
 800ae32:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 800ae36:	782b      	ldrb	r3, [r5, #0]
 800ae38:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ae3c:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800ae40:	2200      	movs	r2, #0
 800ae42:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800ae46:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800ae4a:	461c      	mov	r4, r3
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	2b0c      	cmp	r3, #12
 800ae50:	f200 80a6 	bhi.w	800afa0 <LoRaMacMlmeRequest+0x1b0>
 800ae54:	e8df f003 	tbb	[pc, r3]
 800ae58:	5aa4a40d 	.word	0x5aa4a40d
 800ae5c:	a4a4a464 	.word	0xa4a4a464
 800ae60:	7695a46d 	.word	0x7695a46d
 800ae64:	8c          	.byte	0x8c
 800ae65:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800ae66:	2214      	movs	r2, #20
 800ae68:	2100      	movs	r1, #0
 800ae6a:	485c      	ldr	r0, [pc, #368]	; (800afdc <LoRaMacMlmeRequest+0x1ec>)
 800ae6c:	f003 fbff 	bl	800e66e <memset1>
 800ae70:	e7d7      	b.n	800ae22 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800ae72:	4b59      	ldr	r3, [pc, #356]	; (800afd8 <LoRaMacMlmeRequest+0x1e8>)
 800ae74:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ae78:	f013 0f20 	tst.w	r3, #32
 800ae7c:	d1c6      	bne.n	800ae0c <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800ae7e:	792b      	ldrb	r3, [r5, #4]
 800ae80:	2b02      	cmp	r3, #2
 800ae82:	d003      	beq.n	800ae8c <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d021      	beq.n	800aecc <LoRaMacMlmeRequest+0xdc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ae88:	2402      	movs	r4, #2
 800ae8a:	e08a      	b.n	800afa2 <LoRaMacMlmeRequest+0x1b2>
                ResetMacParameters( );
 800ae8c:	f7fe fe24 	bl	8009ad8 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800ae90:	4c53      	ldr	r4, [pc, #332]	; (800afe0 <LoRaMacMlmeRequest+0x1f0>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800ae98:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800ae9c:	f001 fabe 	bl	800c41c <RegionAlternateDr>
 800aea0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800aea4:	2307      	movs	r3, #7
 800aea6:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800aeaa:	20ff      	movs	r0, #255	; 0xff
 800aeac:	f7fe ff4a 	bl	8009d44 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d075      	beq.n	800afa2 <LoRaMacMlmeRequest+0x1b2>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800aeb6:	4e4a      	ldr	r6, [pc, #296]	; (800afe0 <LoRaMacMlmeRequest+0x1f0>)
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800aebe:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800aec2:	f001 faab 	bl	800c41c <RegionAlternateDr>
 800aec6:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800aeca:	e06a      	b.n	800afa2 <LoRaMacMlmeRequest+0x1b2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800aecc:	4e44      	ldr	r6, [pc, #272]	; (800afe0 <LoRaMacMlmeRequest+0x1f0>)
 800aece:	2400      	movs	r4, #0
 800aed0:	f886 4109 	strb.w	r4, [r6, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800aed4:	2302      	movs	r3, #2
 800aed6:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800aeda:	4669      	mov	r1, sp
 800aedc:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800aee0:	f001 fa1f 	bl	800c322 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800aee4:	792b      	ldrb	r3, [r5, #4]
 800aee6:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800aeea:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800aeee:	2301      	movs	r3, #1
 800aef0:	f88d 3016 	strb.w	r3, [sp, #22]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800aef4:	4e38      	ldr	r6, [pc, #224]	; (800afd8 <LoRaMacMlmeRequest+0x1e8>)
 800aef6:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 800aefe:	f896 3495 	ldrb.w	r3, [r6, #1173]	; 0x495
 800af02:	f043 0320 	orr.w	r3, r3, #32
 800af06:	f886 3495 	strb.w	r3, [r6, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 800af0a:	e04a      	b.n	800afa2 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800af0c:	2200      	movs	r2, #0
 800af0e:	a904      	add	r1, sp, #16
 800af10:	2002      	movs	r0, #2
 800af12:	f000 fac1 	bl	800b498 <LoRaMacCommandsAddCmd>
 800af16:	4604      	mov	r4, r0
 800af18:	2800      	cmp	r0, #0
 800af1a:	d042      	beq.n	800afa2 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800af1c:	2413      	movs	r4, #19
 800af1e:	e040      	b.n	800afa2 <LoRaMacMlmeRequest+0x1b2>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800af20:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800af24:	b2d2      	uxtb	r2, r2
 800af26:	68a9      	ldr	r1, [r5, #8]
 800af28:	88a8      	ldrh	r0, [r5, #4]
 800af2a:	f7fc ffe3 	bl	8007ef4 <SetTxContinuousWave>
 800af2e:	4604      	mov	r4, r0
            break;
 800af30:	e037      	b.n	800afa2 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800af32:	2200      	movs	r2, #0
 800af34:	a904      	add	r1, sp, #16
 800af36:	200d      	movs	r0, #13
 800af38:	f000 faae 	bl	800b498 <LoRaMacCommandsAddCmd>
 800af3c:	4604      	mov	r4, r0
 800af3e:	b380      	cbz	r0, 800afa2 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800af40:	2413      	movs	r4, #19
 800af42:	e02e      	b.n	800afa2 <LoRaMacMlmeRequest+0x1b2>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800af44:	4b26      	ldr	r3, [pc, #152]	; (800afe0 <LoRaMacMlmeRequest+0x1f0>)
 800af46:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800af4a:	b10b      	cbz	r3, 800af50 <LoRaMacMlmeRequest+0x160>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800af4c:	2402      	movs	r4, #2
 800af4e:	e028      	b.n	800afa2 <LoRaMacMlmeRequest+0x1b2>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800af50:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800af52:	f004 0007 	and.w	r0, r4, #7
 800af56:	f000 f9f6 	bl	800b346 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800af5a:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800af5e:	2201      	movs	r2, #1
 800af60:	a904      	add	r1, sp, #16
 800af62:	2010      	movs	r0, #16
 800af64:	f000 fa98 	bl	800b498 <LoRaMacCommandsAddCmd>
 800af68:	4604      	mov	r4, r0
 800af6a:	b1d0      	cbz	r0, 800afa2 <LoRaMacMlmeRequest+0x1b2>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800af6c:	2413      	movs	r4, #19
 800af6e:	e018      	b.n	800afa2 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800af70:	2200      	movs	r2, #0
 800af72:	a904      	add	r1, sp, #16
 800af74:	2012      	movs	r0, #18
 800af76:	f000 fa8f 	bl	800b498 <LoRaMacCommandsAddCmd>
 800af7a:	4604      	mov	r4, r0
 800af7c:	b188      	cbz	r0, 800afa2 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800af7e:	2413      	movs	r4, #19
 800af80:	e00f      	b.n	800afa2 <LoRaMacMlmeRequest+0x1b2>
            queueElement.RestrictCommonReadyToHandle = true;
 800af82:	2301      	movs	r3, #1
 800af84:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800af88:	f000 f9ce 	bl	800b328 <LoRaMacClassBIsAcquisitionInProgress>
 800af8c:	b108      	cbz	r0, 800af92 <LoRaMacMlmeRequest+0x1a2>
                status = LORAMAC_STATUS_BUSY;
 800af8e:	2401      	movs	r4, #1
 800af90:	e007      	b.n	800afa2 <LoRaMacMlmeRequest+0x1b2>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800af92:	f000 f9c6 	bl	800b322 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800af96:	2000      	movs	r0, #0
 800af98:	f000 f9c8 	bl	800b32c <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800af9c:	2400      	movs	r4, #0
 800af9e:	e000      	b.n	800afa2 <LoRaMacMlmeRequest+0x1b2>
    switch( mlmeRequest->Type )
 800afa0:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800afa2:	4b0d      	ldr	r3, [pc, #52]	; (800afd8 <LoRaMacMlmeRequest+0x1e8>)
 800afa4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800afa8:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800afaa:	b17c      	cbz	r4, 800afcc <LoRaMacMlmeRequest+0x1dc>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800afac:	f000 fc76 	bl	800b89c <LoRaMacConfirmQueueGetCnt>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	f47f af2b 	bne.w	800ae0c <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800afb6:	4b08      	ldr	r3, [pc, #32]	; (800afd8 <LoRaMacMlmeRequest+0x1e8>)
 800afb8:	2100      	movs	r1, #0
 800afba:	f883 141e 	strb.w	r1, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800afbe:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800afc2:	f361 0282 	bfi	r2, r1, #2, #1
 800afc6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800afca:	e71f      	b.n	800ae0c <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800afcc:	a805      	add	r0, sp, #20
 800afce:	f000 fba1 	bl	800b714 <LoRaMacConfirmQueueAdd>
 800afd2:	e71b      	b.n	800ae0c <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800afd4:	2403      	movs	r4, #3
 800afd6:	e719      	b.n	800ae0c <LoRaMacMlmeRequest+0x1c>
 800afd8:	20000630 	.word	0x20000630
 800afdc:	20000a88 	.word	0x20000a88
 800afe0:	20008000 	.word	0x20008000

0800afe4 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800afe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe8:	b091      	sub	sp, #68	; 0x44
 800afea:	9103      	str	r1, [sp, #12]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800afec:	2800      	cmp	r0, #0
 800afee:	f000 80de 	beq.w	800b1ae <LoRaMacMcpsRequest+0x1ca>
 800aff2:	f04f 0a00 	mov.w	sl, #0
 800aff6:	4605      	mov	r5, r0
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800aff8:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800affc:	f7ff f824 	bl	800a048 <LoRaMacIsBusy>
 800b000:	4680      	mov	r8, r0
 800b002:	b118      	cbz	r0, 800b00c <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800b004:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800b006:	b011      	add	sp, #68	; 0x44
 800b008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800b00c:	ac06      	add	r4, sp, #24
 800b00e:	462e      	mov	r6, r5
 800b010:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b014:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800b018:	4651      	mov	r1, sl
 800b01a:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b01e:	4c66      	ldr	r4, [pc, #408]	; (800b1b8 <LoRaMacMcpsRequest+0x1d4>)
 800b020:	2214      	movs	r2, #20
 800b022:	f204 4044 	addw	r0, r4, #1092	; 0x444
 800b026:	f003 fb22 	bl	800e66e <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800b030:	4b62      	ldr	r3, [pc, #392]	; (800b1bc <LoRaMacMcpsRequest+0x1d8>)
 800b032:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b036:	2b02      	cmp	r3, #2
 800b038:	d065      	beq.n	800b106 <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800b03a:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800b03e:	2f01      	cmp	r7, #1
 800b040:	f000 8086 	beq.w	800b150 <LoRaMacMcpsRequest+0x16c>
 800b044:	2f03      	cmp	r7, #3
 800b046:	f000 8096 	beq.w	800b176 <LoRaMacMcpsRequest+0x192>
 800b04a:	2f00      	cmp	r7, #0
 800b04c:	d06d      	beq.n	800b12a <LoRaMacMcpsRequest+0x146>
 800b04e:	f04f 0b00 	mov.w	fp, #0
 800b052:	f8cd b014 	str.w	fp, [sp, #20]
 800b056:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b05a:	2302      	movs	r3, #2
 800b05c:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b060:	4e56      	ldr	r6, [pc, #344]	; (800b1bc <LoRaMacMcpsRequest+0x1d8>)
 800b062:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 800b066:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b06a:	a90e      	add	r1, sp, #56	; 0x38
 800b06c:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800b070:	f001 f93e 	bl	800c2f0 <RegionGetPhyParam>
 800b074:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b076:	b244      	sxtb	r4, r0
 800b078:	45a3      	cmp	fp, r4
 800b07a:	bfb8      	it	lt
 800b07c:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800b07e:	f896 9106 	ldrb.w	r9, [r6, #262]	; 0x106
 800b082:	f896 2109 	ldrb.w	r2, [r6, #265]	; 0x109
 800b086:	f896 111c 	ldrb.w	r1, [r6, #284]	; 0x11c
 800b08a:	4648      	mov	r0, r9
 800b08c:	f7fc ff04 	bl	8007e98 <CheckForMinimumAbpDatarate>
 800b090:	4603      	mov	r3, r0
 800b092:	b900      	cbnz	r0, 800b096 <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b094:	465c      	mov	r4, fp
    if( readyToSend == true )
 800b096:	f1b8 0f00 	cmp.w	r8, #0
 800b09a:	f000 8082 	beq.w	800b1a2 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800b09e:	f1b9 0f00 	cmp.w	r9, #0
 800b0a2:	d000      	beq.n	800b0a6 <LoRaMacMcpsRequest+0xc2>
 800b0a4:	b19b      	cbz	r3, 800b0ce <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800b0a6:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b0aa:	4b44      	ldr	r3, [pc, #272]	; (800b1bc <LoRaMacMcpsRequest+0x1d8>)
 800b0ac:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800b0b0:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800b0b4:	2205      	movs	r2, #5
 800b0b6:	a90b      	add	r1, sp, #44	; 0x2c
 800b0b8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b0bc:	f001 f939 	bl	800c332 <RegionVerify>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d076      	beq.n	800b1b2 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b0c4:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800b0c8:	4b3c      	ldr	r3, [pc, #240]	; (800b1bc <LoRaMacMcpsRequest+0x1d8>)
 800b0ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800b0ce:	4b3a      	ldr	r3, [pc, #232]	; (800b1b8 <LoRaMacMcpsRequest+0x1d4>)
 800b0d0:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 800b0d4:	4b39      	ldr	r3, [pc, #228]	; (800b1bc <LoRaMacMcpsRequest+0x1d8>)
 800b0d6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800b0da:	f7fe f81d 	bl	8009118 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800b0de:	9b03      	ldr	r3, [sp, #12]
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	4653      	mov	r3, sl
 800b0e4:	9a05      	ldr	r2, [sp, #20]
 800b0e6:	9904      	ldr	r1, [sp, #16]
 800b0e8:	a80c      	add	r0, sp, #48	; 0x30
 800b0ea:	f7fe ff19 	bl	8009f20 <Send>
        if( status == LORAMAC_STATUS_OK )
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	d152      	bne.n	800b198 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800b0f2:	4b31      	ldr	r3, [pc, #196]	; (800b1b8 <LoRaMacMcpsRequest+0x1d4>)
 800b0f4:	f883 7444 	strb.w	r7, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b0f8:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800b0fc:	f042 0201 	orr.w	r2, r2, #1
 800b100:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800b104:	e04e      	b.n	800b1a4 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800b106:	4b2d      	ldr	r3, [pc, #180]	; (800b1bc <LoRaMacMcpsRequest+0x1d8>)
 800b108:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d194      	bne.n	800b03a <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b110:	4b2a      	ldr	r3, [pc, #168]	; (800b1bc <LoRaMacMcpsRequest+0x1d8>)
 800b112:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800b116:	2b00      	cmp	r3, #0
 800b118:	d18f      	bne.n	800b03a <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800b11a:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d18b      	bne.n	800b03a <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800b122:	2301      	movs	r3, #1
 800b124:	f88d 3018 	strb.w	r3, [sp, #24]
 800b128:	e787      	b.n	800b03a <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b12a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b12e:	2202      	movs	r2, #2
 800b130:	f362 1347 	bfi	r3, r2, #5, #3
 800b134:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800b138:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b13c:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800b13e:	9b08      	ldr	r3, [sp, #32]
 800b140:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800b142:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800b146:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800b14a:	f04f 0801 	mov.w	r8, #1
            break;
 800b14e:	e784      	b.n	800b05a <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b150:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b154:	2204      	movs	r2, #4
 800b156:	f362 1347 	bfi	r3, r2, #5, #3
 800b15a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800b15e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800b162:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800b164:	9b08      	ldr	r3, [sp, #32]
 800b166:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800b168:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800b16c:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800b170:	f04f 0801 	mov.w	r8, #1
            break;
 800b174:	e771      	b.n	800b05a <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b176:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800b17a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800b17e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800b182:	9b07      	ldr	r3, [sp, #28]
 800b184:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800b186:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800b18a:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800b18e:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	9304      	str	r3, [sp, #16]
            break;
 800b196:	e760      	b.n	800b05a <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800b198:	4b07      	ldr	r3, [pc, #28]	; (800b1b8 <LoRaMacMcpsRequest+0x1d4>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800b1a0:	e000      	b.n	800b1a4 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b1a2:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b1a4:	4b04      	ldr	r3, [pc, #16]	; (800b1b8 <LoRaMacMcpsRequest+0x1d4>)
 800b1a6:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800b1aa:	612b      	str	r3, [r5, #16]
    return status;
 800b1ac:	e72b      	b.n	800b006 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b1ae:	2003      	movs	r0, #3
 800b1b0:	e729      	b.n	800b006 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800b1b2:	2003      	movs	r0, #3
 800b1b4:	e727      	b.n	800b006 <LoRaMacMcpsRequest+0x22>
 800b1b6:	bf00      	nop
 800b1b8:	20000630 	.word	0x20000630
 800b1bc:	20008000 	.word	0x20008000

0800b1c0 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b1c0:	b510      	push	{r4, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800b1c6:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b1ca:	220f      	movs	r2, #15
 800b1cc:	a901      	add	r1, sp, #4
 800b1ce:	4b05      	ldr	r3, [pc, #20]	; (800b1e4 <LoRaMacTestSetDutyCycleOn+0x24>)
 800b1d0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b1d4:	f001 f8ad 	bl	800c332 <RegionVerify>
 800b1d8:	b110      	cbz	r0, 800b1e0 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800b1da:	4b02      	ldr	r3, [pc, #8]	; (800b1e4 <LoRaMacTestSetDutyCycleOn+0x24>)
 800b1dc:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800b1e0:	b002      	add	sp, #8
 800b1e2:	bd10      	pop	{r4, pc}
 800b1e4:	20008000 	.word	0x20008000

0800b1e8 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800b1e8:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800b1ea:	f7ff f97b 	bl	800a4e4 <LoRaMacStop>
 800b1ee:	b110      	cbz	r0, 800b1f6 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800b1f0:	2401      	movs	r4, #1
    }
}
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	bd38      	pop	{r3, r4, r5, pc}
 800b1f6:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800b1f8:	4d0a      	ldr	r5, [pc, #40]	; (800b224 <LoRaMacDeInitialization+0x3c>)
 800b1fa:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800b1fe:	f005 fc1b 	bl	8010a38 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800b202:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800b206:	f005 fc17 	bl	8010a38 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800b20a:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800b20e:	f005 fc13 	bl	8010a38 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800b212:	f000 f899 	bl	800b348 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800b216:	f7fe fc5f 	bl	8009ad8 <ResetMacParameters>
        Radio.Sleep( );
 800b21a:	4b03      	ldr	r3, [pc, #12]	; (800b228 <LoRaMacDeInitialization+0x40>)
 800b21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21e:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800b220:	e7e7      	b.n	800b1f2 <LoRaMacDeInitialization+0xa>
 800b222:	bf00      	nop
 800b224:	20000630 	.word	0x20000630
 800b228:	08011dbc 	.word	0x08011dbc

0800b22c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b230:	b08b      	sub	sp, #44	; 0x2c
 800b232:	460f      	mov	r7, r1
 800b234:	4616      	mov	r6, r2
 800b236:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800b238:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800b23c:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800b240:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800b244:	6842      	ldr	r2, [r0, #4]
 800b246:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b248:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800b24a:	f890 8001 	ldrb.w	r8, [r0, #1]
 800b24e:	f1b8 0f00 	cmp.w	r8, #0
 800b252:	d109      	bne.n	800b268 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800b254:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800b258:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800b25c:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800b260:	4640      	mov	r0, r8
 800b262:	b00b      	add	sp, #44	; 0x2c
 800b264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b268:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b26a:	2302      	movs	r3, #2
 800b26c:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b270:	7bc3      	ldrb	r3, [r0, #15]
 800b272:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b276:	a908      	add	r1, sp, #32
 800b278:	7c00      	ldrb	r0, [r0, #16]
 800b27a:	f001 f839 	bl	800c2f0 <RegionGetPhyParam>
 800b27e:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800b280:	b243      	sxtb	r3, r0
 800b282:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800b284:	454b      	cmp	r3, r9
 800b286:	bfb8      	it	lt
 800b288:	464b      	movlt	r3, r9
 800b28a:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800b28c:	6862      	ldr	r2, [r4, #4]
 800b28e:	8923      	ldrh	r3, [r4, #8]
 800b290:	429a      	cmp	r2, r3
 800b292:	d201      	bcs.n	800b298 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800b294:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b298:	8961      	ldrh	r1, [r4, #10]
 800b29a:	440b      	add	r3, r1
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d224      	bcs.n	800b2ea <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800b2a0:	6863      	ldr	r3, [r4, #4]
 800b2a2:	8921      	ldrh	r1, [r4, #8]
 800b2a4:	8962      	ldrh	r2, [r4, #10]
 800b2a6:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800b2aa:	4283      	cmp	r3, r0
 800b2ac:	d332      	bcc.n	800b314 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800b2ae:	1a5b      	subs	r3, r3, r1
 800b2b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2b4:	fb02 3311 	mls	r3, r2, r1, r3
 800b2b8:	bb7b      	cbnz	r3, 800b31a <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800b2ba:	9b01      	ldr	r3, [sp, #4]
 800b2bc:	4599      	cmp	r9, r3
 800b2be:	dc03      	bgt.n	800b2c8 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800b2c0:	7823      	ldrb	r3, [r4, #0]
 800b2c2:	b9eb      	cbnz	r3, 800b300 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800b2c4:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b2c8:	2321      	movs	r3, #33	; 0x21
 800b2ca:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800b2ce:	9b00      	ldr	r3, [sp, #0]
 800b2d0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b2d4:	7be3      	ldrb	r3, [r4, #15]
 800b2d6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b2da:	a908      	add	r1, sp, #32
 800b2dc:	7c20      	ldrb	r0, [r4, #16]
 800b2de:	f001 f807 	bl	800c2f0 <RegionGetPhyParam>
 800b2e2:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800b2e4:	fa4f f980 	sxtb.w	r9, r0
 800b2e8:	e7b4      	b.n	800b254 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800b2ea:	230a      	movs	r3, #10
 800b2ec:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b2f0:	a908      	add	r1, sp, #32
 800b2f2:	7c20      	ldrb	r0, [r4, #16]
 800b2f4:	f000 fffc 	bl	800c2f0 <RegionGetPhyParam>
 800b2f8:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800b2fa:	fa4f fa80 	sxtb.w	sl, r0
 800b2fe:	e7cf      	b.n	800b2a0 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b300:	2302      	movs	r3, #2
 800b302:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800b306:	a903      	add	r1, sp, #12
 800b308:	7c20      	ldrb	r0, [r4, #16]
 800b30a:	f001 f80a 	bl	800c322 <RegionInitDefaults>
                    nbTrans = 1;
 800b30e:	f04f 0b01 	mov.w	fp, #1
 800b312:	e7d9      	b.n	800b2c8 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800b314:	f8dd 9000 	ldr.w	r9, [sp]
 800b318:	e79c      	b.n	800b254 <LoRaMacAdrCalcNext+0x28>
 800b31a:	f8dd 9000 	ldr.w	r9, [sp]
 800b31e:	e799      	b.n	800b254 <LoRaMacAdrCalcNext+0x28>

0800b320 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b320:	4770      	bx	lr

0800b322 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b322:	4770      	bx	lr

0800b324 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b324:	4770      	bx	lr

0800b326 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b326:	4770      	bx	lr

0800b328 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b328:	2000      	movs	r0, #0
 800b32a:	4770      	bx	lr

0800b32c <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b32c:	4770      	bx	lr

0800b32e <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b32e:	4770      	bx	lr

0800b330 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b330:	4770      	bx	lr

0800b332 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b332:	2000      	movs	r0, #0
 800b334:	4770      	bx	lr

0800b336 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b336:	2000      	movs	r0, #0
 800b338:	4770      	bx	lr

0800b33a <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b33a:	2000      	movs	r0, #0
 800b33c:	4770      	bx	lr

0800b33e <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b33e:	2000      	movs	r0, #0
 800b340:	4770      	bx	lr

0800b342 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b342:	2000      	movs	r0, #0
 800b344:	4770      	bx	lr

0800b346 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b346:	4770      	bx	lr

0800b348 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b348:	4770      	bx	lr

0800b34a <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b34a:	4770      	bx	lr

0800b34c <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b34c:	2002      	movs	r0, #2
 800b34e:	4770      	bx	lr

0800b350 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b350:	2002      	movs	r0, #2
 800b352:	4770      	bx	lr

0800b354 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b354:	2002      	movs	r0, #2
 800b356:	4770      	bx	lr

0800b358 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b358:	4770      	bx	lr

0800b35a <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b35a:	2000      	movs	r0, #0
 800b35c:	4770      	bx	lr

0800b35e <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b35e:	4770      	bx	lr

0800b360 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b360:	4770      	bx	lr

0800b362 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b362:	2000      	movs	r0, #0
 800b364:	4770      	bx	lr

0800b366 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b366:	2000      	movs	r0, #0
 800b368:	4770      	bx	lr

0800b36a <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b36a:	4770      	bx	lr

0800b36c <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b36c:	4770      	bx	lr

0800b36e <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800b36e:	4770      	bx	lr

0800b370 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b370:	2300      	movs	r3, #0
 800b372:	2b0f      	cmp	r3, #15
 800b374:	d804      	bhi.n	800b380 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800b376:	5cc2      	ldrb	r2, [r0, r3]
 800b378:	b922      	cbnz	r2, 800b384 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b37a:	3301      	adds	r3, #1
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	e7f8      	b.n	800b372 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800b380:	2001      	movs	r0, #1
 800b382:	4770      	bx	lr
            return false;
 800b384:	2000      	movs	r0, #0
}
 800b386:	4770      	bx	lr

0800b388 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800b388:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800b38a:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800b38c:	0125      	lsls	r5, r4, #4
 800b38e:	f105 0308 	add.w	r3, r5, #8
 800b392:	4d06      	ldr	r5, [pc, #24]	; (800b3ac <MallocNewMacCommandSlot+0x24>)
 800b394:	441d      	add	r5, r3
 800b396:	4628      	mov	r0, r5
 800b398:	f7ff ffea 	bl	800b370 <IsSlotFree>
 800b39c:	b920      	cbnz	r0, 800b3a8 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800b39e:	3401      	adds	r4, #1
 800b3a0:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800b3a2:	2c20      	cmp	r4, #32
 800b3a4:	d1f2      	bne.n	800b38c <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800b3a6:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	bd38      	pop	{r3, r4, r5, pc}
 800b3ac:	20000bf4 	.word	0x20000bf4

0800b3b0 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800b3b0:	b120      	cbz	r0, 800b3bc <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800b3b6:	6042      	str	r2, [r0, #4]

    return true;
 800b3b8:	2001      	movs	r0, #1
 800b3ba:	4770      	bx	lr
        return false;
 800b3bc:	2000      	movs	r0, #0
}
 800b3be:	4770      	bx	lr

0800b3c0 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	b160      	cbz	r0, 800b3de <LinkedListAdd+0x1e>
 800b3c4:	b169      	cbz	r1, 800b3e2 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800b3c6:	6802      	ldr	r2, [r0, #0]
 800b3c8:	b13a      	cbz	r2, 800b3da <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	b102      	cbz	r2, 800b3d0 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800b3ce:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800b3d4:	6059      	str	r1, [r3, #4]

    return true;
 800b3d6:	2001      	movs	r0, #1
 800b3d8:	4770      	bx	lr
        list->First = element;
 800b3da:	6001      	str	r1, [r0, #0]
 800b3dc:	e7f5      	b.n	800b3ca <LinkedListAdd+0xa>
        return false;
 800b3de:	2000      	movs	r0, #0
 800b3e0:	4770      	bx	lr
 800b3e2:	2000      	movs	r0, #0
}
 800b3e4:	4770      	bx	lr

0800b3e6 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b3e6:	b160      	cbz	r0, 800b402 <LinkedListGetPrevious+0x1c>
 800b3e8:	b161      	cbz	r1, 800b404 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800b3ea:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800b3ec:	4281      	cmp	r1, r0
 800b3ee:	d102      	bne.n	800b3f6 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800b3f0:	2000      	movs	r0, #0
    }

    return curElement;
}
 800b3f2:	4770      	bx	lr
            curElement = curElement->Next;
 800b3f4:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d0fb      	beq.n	800b3f2 <LinkedListGetPrevious+0xc>
 800b3fa:	6803      	ldr	r3, [r0, #0]
 800b3fc:	428b      	cmp	r3, r1
 800b3fe:	d1f9      	bne.n	800b3f4 <LinkedListGetPrevious+0xe>
 800b400:	4770      	bx	lr
 800b402:	4770      	bx	lr
        return NULL;
 800b404:	4608      	mov	r0, r1
 800b406:	4770      	bx	lr

0800b408 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800b408:	b1b8      	cbz	r0, 800b43a <LinkedListRemove+0x32>
{
 800b40a:	b538      	push	{r3, r4, r5, lr}
 800b40c:	460c      	mov	r4, r1
 800b40e:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800b410:	b1a9      	cbz	r1, 800b43e <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800b412:	f7ff ffe8 	bl	800b3e6 <LinkedListGetPrevious>

    if( list->First == element )
 800b416:	682b      	ldr	r3, [r5, #0]
 800b418:	42a3      	cmp	r3, r4
 800b41a:	d009      	beq.n	800b430 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800b41c:	686b      	ldr	r3, [r5, #4]
 800b41e:	42a3      	cmp	r3, r4
 800b420:	d009      	beq.n	800b436 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800b422:	b108      	cbz	r0, 800b428 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800b428:	2300      	movs	r3, #0
 800b42a:	6023      	str	r3, [r4, #0]

    return true;
 800b42c:	2001      	movs	r0, #1
}
 800b42e:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800b430:	6823      	ldr	r3, [r4, #0]
 800b432:	602b      	str	r3, [r5, #0]
 800b434:	e7f2      	b.n	800b41c <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800b436:	6068      	str	r0, [r5, #4]
 800b438:	e7f3      	b.n	800b422 <LinkedListRemove+0x1a>
        return false;
 800b43a:	2000      	movs	r0, #0
}
 800b43c:	4770      	bx	lr
        return false;
 800b43e:	2000      	movs	r0, #0
 800b440:	e7f5      	b.n	800b42e <LinkedListRemove+0x26>
	...

0800b444 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800b444:	2811      	cmp	r0, #17
 800b446:	d808      	bhi.n	800b45a <IsSticky+0x16>
 800b448:	2301      	movs	r3, #1
 800b44a:	fa03 f000 	lsl.w	r0, r3, r0
 800b44e:	4b04      	ldr	r3, [pc, #16]	; (800b460 <IsSticky+0x1c>)
 800b450:	4218      	tst	r0, r3
 800b452:	bf14      	ite	ne
 800b454:	2001      	movne	r0, #1
 800b456:	2000      	moveq	r0, #0
 800b458:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800b45a:	2000      	movs	r0, #0
    }
}
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	00020720 	.word	0x00020720

0800b464 <FreeMacCommandSlot>:
    if( slot == NULL )
 800b464:	b130      	cbz	r0, 800b474 <FreeMacCommandSlot+0x10>
{
 800b466:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b468:	2210      	movs	r2, #16
 800b46a:	2100      	movs	r1, #0
 800b46c:	f003 f8ff 	bl	800e66e <memset1>
    return true;
 800b470:	2001      	movs	r0, #1
}
 800b472:	bd08      	pop	{r3, pc}
        return false;
 800b474:	2000      	movs	r0, #0
}
 800b476:	4770      	bx	lr

0800b478 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800b478:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800b47a:	4c06      	ldr	r4, [pc, #24]	; (800b494 <LoRaMacCommandsInit+0x1c>)
 800b47c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800b480:	2100      	movs	r1, #0
 800b482:	4620      	mov	r0, r4
 800b484:	f003 f8f3 	bl	800e66e <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800b488:	4620      	mov	r0, r4
 800b48a:	f7ff ff91 	bl	800b3b0 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b48e:	2000      	movs	r0, #0
 800b490:	bd10      	pop	{r4, pc}
 800b492:	bf00      	nop
 800b494:	20000bf4 	.word	0x20000bf4

0800b498 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800b498:	b301      	cbz	r1, 800b4dc <LoRaMacCommandsAddCmd+0x44>
{
 800b49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49c:	4605      	mov	r5, r0
 800b49e:	4614      	mov	r4, r2
 800b4a0:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800b4a2:	f7ff ff71 	bl	800b388 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800b4a6:	4606      	mov	r6, r0
 800b4a8:	b1d0      	cbz	r0, 800b4e0 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	480e      	ldr	r0, [pc, #56]	; (800b4e8 <LoRaMacCommandsAddCmd+0x50>)
 800b4ae:	f7ff ff87 	bl	800b3c0 <LinkedListAdd>
 800b4b2:	b1b8      	cbz	r0, 800b4e4 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800b4b4:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800b4b6:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b4b8:	b2a2      	uxth	r2, r4
 800b4ba:	4639      	mov	r1, r7
 800b4bc:	1d70      	adds	r0, r6, #5
 800b4be:	f003 f8be 	bl	800e63e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	f7ff ffbe 	bl	800b444 <IsSticky>
 800b4c8:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b4ca:	4b07      	ldr	r3, [pc, #28]	; (800b4e8 <LoRaMacCommandsAddCmd+0x50>)
 800b4cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b4d0:	4414      	add	r4, r2
 800b4d2:	3401      	adds	r4, #1
 800b4d4:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800b4d8:	2000      	movs	r0, #0
}
 800b4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b4dc:	2001      	movs	r0, #1
}
 800b4de:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b4e0:	2002      	movs	r0, #2
 800b4e2:	e7fa      	b.n	800b4da <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800b4e4:	2005      	movs	r0, #5
 800b4e6:	e7f8      	b.n	800b4da <LoRaMacCommandsAddCmd+0x42>
 800b4e8:	20000bf4 	.word	0x20000bf4

0800b4ec <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800b4ec:	b1a0      	cbz	r0, 800b518 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800b4ee:	b510      	push	{r4, lr}
 800b4f0:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800b4f2:	4601      	mov	r1, r0
 800b4f4:	480b      	ldr	r0, [pc, #44]	; (800b524 <LoRaMacCommandsRemoveCmd+0x38>)
 800b4f6:	f7ff ff87 	bl	800b408 <LinkedListRemove>
 800b4fa:	b178      	cbz	r0, 800b51c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b4fc:	68a1      	ldr	r1, [r4, #8]
 800b4fe:	4a09      	ldr	r2, [pc, #36]	; (800b524 <LoRaMacCommandsRemoveCmd+0x38>)
 800b500:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800b504:	1a5b      	subs	r3, r3, r1
 800b506:	3b01      	subs	r3, #1
 800b508:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800b50c:	4620      	mov	r0, r4
 800b50e:	f7ff ffa9 	bl	800b464 <FreeMacCommandSlot>
 800b512:	b128      	cbz	r0, 800b520 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b514:	2000      	movs	r0, #0
}
 800b516:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b518:	2001      	movs	r0, #1
}
 800b51a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800b51c:	2003      	movs	r0, #3
 800b51e:	e7fa      	b.n	800b516 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800b520:	2005      	movs	r0, #5
 800b522:	e7f8      	b.n	800b516 <LoRaMacCommandsRemoveCmd+0x2a>
 800b524:	20000bf4 	.word	0x20000bf4

0800b528 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b528:	4b0a      	ldr	r3, [pc, #40]	; (800b554 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800b52a:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b52c:	b120      	cbz	r0, 800b538 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800b52e:	7b03      	ldrb	r3, [r0, #12]
 800b530:	b11b      	cbz	r3, 800b53a <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800b532:	6800      	ldr	r0, [r0, #0]
 800b534:	e7fa      	b.n	800b52c <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b536:	bd10      	pop	{r4, pc}
 800b538:	4770      	bx	lr
{
 800b53a:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800b53c:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800b53e:	f7ff ffd5 	bl	800b4ec <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800b542:	4620      	mov	r0, r4
    while( curElement != NULL )
 800b544:	2800      	cmp	r0, #0
 800b546:	d0f6      	beq.n	800b536 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800b548:	7b03      	ldrb	r3, [r0, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d0f6      	beq.n	800b53c <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800b54e:	6800      	ldr	r0, [r0, #0]
 800b550:	e7f8      	b.n	800b544 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800b552:	bf00      	nop
 800b554:	20000bf4 	.word	0x20000bf4

0800b558 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800b558:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800b55a:	4b08      	ldr	r3, [pc, #32]	; (800b57c <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800b55c:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b55e:	e000      	b.n	800b562 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800b560:	462c      	mov	r4, r5
    while( curElement != NULL )
 800b562:	b14c      	cbz	r4, 800b578 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800b564:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800b566:	7920      	ldrb	r0, [r4, #4]
 800b568:	f7ff ff6c 	bl	800b444 <IsSticky>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d0f7      	beq.n	800b560 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800b570:	4620      	mov	r0, r4
 800b572:	f7ff ffbb 	bl	800b4ec <LoRaMacCommandsRemoveCmd>
 800b576:	e7f3      	b.n	800b560 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b578:	2000      	movs	r0, #0
 800b57a:	bd38      	pop	{r3, r4, r5, pc}
 800b57c:	20000bf4 	.word	0x20000bf4

0800b580 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800b580:	b128      	cbz	r0, 800b58e <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800b582:	4a04      	ldr	r2, [pc, #16]	; (800b594 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800b584:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800b588:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800b58a:	2000      	movs	r0, #0
 800b58c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b58e:	2001      	movs	r0, #1
}
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	20000bf4 	.word	0x20000bf4

0800b598 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800b598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800b59c:	4b16      	ldr	r3, [pc, #88]	; (800b5f8 <LoRaMacCommandsSerializeCmds+0x60>)
 800b59e:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800b5a0:	b32a      	cbz	r2, 800b5ee <LoRaMacCommandsSerializeCmds+0x56>
 800b5a2:	4607      	mov	r7, r0
 800b5a4:	4688      	mov	r8, r1
 800b5a6:	4616      	mov	r6, r2
 800b5a8:	b319      	cbz	r1, 800b5f2 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800b5aa:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800b5ac:	b194      	cbz	r4, 800b5d4 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800b5ae:	1a7a      	subs	r2, r7, r1
 800b5b0:	68a3      	ldr	r3, [r4, #8]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d30d      	bcc.n	800b5d4 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800b5b8:	1c4d      	adds	r5, r1, #1
 800b5ba:	b2ed      	uxtb	r5, r5
 800b5bc:	7923      	ldrb	r3, [r4, #4]
 800b5be:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800b5c0:	8922      	ldrh	r2, [r4, #8]
 800b5c2:	1d61      	adds	r1, r4, #5
 800b5c4:	1970      	adds	r0, r6, r5
 800b5c6:	f003 f83a 	bl	800e63e <memcpy1>
            itr += curElement->PayloadSize;
 800b5ca:	68a3      	ldr	r3, [r4, #8]
 800b5cc:	441d      	add	r5, r3
 800b5ce:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800b5d0:	6824      	ldr	r4, [r4, #0]
 800b5d2:	e7eb      	b.n	800b5ac <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800b5d4:	b12c      	cbz	r4, 800b5e2 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800b5d6:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f7ff ff87 	bl	800b4ec <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800b5de:	462c      	mov	r4, r5
 800b5e0:	e7f8      	b.n	800b5d4 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800b5e2:	4640      	mov	r0, r8
 800b5e4:	f7ff ffcc 	bl	800b580 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800b5e8:	2000      	movs	r0, #0
}
 800b5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b5ee:	2001      	movs	r0, #1
 800b5f0:	e7fb      	b.n	800b5ea <LoRaMacCommandsSerializeCmds+0x52>
 800b5f2:	2001      	movs	r0, #1
 800b5f4:	e7f9      	b.n	800b5ea <LoRaMacCommandsSerializeCmds+0x52>
 800b5f6:	bf00      	nop
 800b5f8:	20000bf4 	.word	0x20000bf4

0800b5fc <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800b5fc:	4601      	mov	r1, r0
 800b5fe:	b170      	cbz	r0, 800b61e <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800b600:	4b08      	ldr	r3, [pc, #32]	; (800b624 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800b602:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800b604:	2200      	movs	r2, #0
 800b606:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b608:	b13b      	cbz	r3, 800b61a <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800b60a:	7b1a      	ldrb	r2, [r3, #12]
 800b60c:	b90a      	cbnz	r2, 800b612 <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	e7fa      	b.n	800b608 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800b612:	2301      	movs	r3, #1
 800b614:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800b616:	2000      	movs	r0, #0
 800b618:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800b61a:	2000      	movs	r0, #0
 800b61c:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b61e:	2001      	movs	r0, #1
}
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	20000bf4 	.word	0x20000bf4

0800b628 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800b628:	1e83      	subs	r3, r0, #2
 800b62a:	2b11      	cmp	r3, #17
 800b62c:	d80a      	bhi.n	800b644 <LoRaMacCommandsGetCmdSize+0x1c>
 800b62e:	e8df f003 	tbb	[pc, r3]
 800b632:	0b23      	.short	0x0b23
 800b634:	110f240d 	.word	0x110f240d
 800b638:	09171513 	.word	0x09171513
 800b63c:	09091909 	.word	0x09091909
 800b640:	211f1d1b 	.word	0x211f1d1b
 800b644:	2000      	movs	r0, #0
 800b646:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800b648:	2005      	movs	r0, #5
            break;
 800b64a:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800b64c:	2002      	movs	r0, #2
            break;
 800b64e:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800b650:	2001      	movs	r0, #1
            break;
 800b652:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800b654:	2006      	movs	r0, #6
            break;
 800b656:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800b658:	2002      	movs	r0, #2
            break;
 800b65a:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800b65c:	2002      	movs	r0, #2
            break;
 800b65e:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800b660:	2005      	movs	r0, #5
            break;
 800b662:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800b664:	2006      	movs	r0, #6
            break;
 800b666:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800b668:	2001      	movs	r0, #1
            break;
 800b66a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800b66c:	2005      	movs	r0, #5
            break;
 800b66e:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800b670:	2004      	movs	r0, #4
            break;
 800b672:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800b674:	2004      	movs	r0, #4
            break;
 800b676:	4770      	bx	lr
            cidSize = 3;
 800b678:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800b67a:	4770      	bx	lr

0800b67c <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800b67c:	4b03      	ldr	r3, [pc, #12]	; (800b68c <IncreaseBufferPointer+0x10>)
 800b67e:	4298      	cmp	r0, r3
 800b680:	d001      	beq.n	800b686 <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800b682:	3004      	adds	r0, #4
 800b684:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b686:	4802      	ldr	r0, [pc, #8]	; (800b690 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	20000e1c 	.word	0x20000e1c
 800b690:	20000e0c 	.word	0x20000e0c

0800b694 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800b694:	b108      	cbz	r0, 800b69a <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800b696:	2000      	movs	r0, #0
 800b698:	4770      	bx	lr
        return true;
 800b69a:	2001      	movs	r0, #1
}
 800b69c:	4770      	bx	lr

0800b69e <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800b69e:	2804      	cmp	r0, #4
 800b6a0:	d801      	bhi.n	800b6a6 <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	4770      	bx	lr
        return true;
 800b6a6:	2001      	movs	r0, #1
}
 800b6a8:	4770      	bx	lr
	...

0800b6ac <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b6b2:	4b0d      	ldr	r3, [pc, #52]	; (800b6e8 <GetElement+0x3c>)
 800b6b4:	f893 7020 	ldrb.w	r7, [r3, #32]
 800b6b8:	4638      	mov	r0, r7
 800b6ba:	f7ff ffeb 	bl	800b694 <IsListEmpty>
 800b6be:	b970      	cbnz	r0, 800b6de <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b6c0:	2500      	movs	r5, #0
 800b6c2:	42af      	cmp	r7, r5
 800b6c4:	d909      	bls.n	800b6da <GetElement+0x2e>
    {
        if( element->Request == request )
 800b6c6:	7823      	ldrb	r3, [r4, #0]
 800b6c8:	42b3      	cmp	r3, r6
 800b6ca:	d00a      	beq.n	800b6e2 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f7ff ffd5 	bl	800b67c <IncreaseBufferPointer>
 800b6d2:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800b6d4:	3501      	adds	r5, #1
 800b6d6:	b2ed      	uxtb	r5, r5
 800b6d8:	e7f3      	b.n	800b6c2 <GetElement+0x16>
    }

    return NULL;
 800b6da:	2000      	movs	r0, #0
}
 800b6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800b6de:	2000      	movs	r0, #0
 800b6e0:	e7fc      	b.n	800b6dc <GetElement+0x30>
            return element;
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	e7fa      	b.n	800b6dc <GetElement+0x30>
 800b6e6:	bf00      	nop
 800b6e8:	20000e00 	.word	0x20000e00

0800b6ec <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800b6ec:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800b6ee:	4c08      	ldr	r4, [pc, #32]	; (800b710 <LoRaMacConfirmQueueInit+0x24>)
 800b6f0:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b6f8:	f104 000c 	add.w	r0, r4, #12
 800b6fc:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800b6fe:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800b700:	2214      	movs	r2, #20
 800b702:	21ff      	movs	r1, #255	; 0xff
 800b704:	f002 ffb3 	bl	800e66e <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800b70e:	bd10      	pop	{r4, pc}
 800b710:	20000e00 	.word	0x20000e00

0800b714 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800b714:	b538      	push	{r3, r4, r5, lr}
 800b716:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b718:	4b0f      	ldr	r3, [pc, #60]	; (800b758 <LoRaMacConfirmQueueAdd+0x44>)
 800b71a:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b71e:	f7ff ffbe 	bl	800b69e <IsListFull>
 800b722:	b9b8      	cbnz	r0, 800b754 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800b724:	4c0c      	ldr	r4, [pc, #48]	; (800b758 <LoRaMacConfirmQueueAdd+0x44>)
 800b726:	68a3      	ldr	r3, [r4, #8]
 800b728:	782a      	ldrb	r2, [r5, #0]
 800b72a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800b72c:	68a3      	ldr	r3, [r4, #8]
 800b72e:	786a      	ldrb	r2, [r5, #1]
 800b730:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800b732:	68a3      	ldr	r3, [r4, #8]
 800b734:	78ea      	ldrb	r2, [r5, #3]
 800b736:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800b738:	68a3      	ldr	r3, [r4, #8]
 800b73a:	78aa      	ldrb	r2, [r5, #2]
 800b73c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800b73e:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b742:	3301      	adds	r3, #1
 800b744:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800b748:	68a0      	ldr	r0, [r4, #8]
 800b74a:	f7ff ff97 	bl	800b67c <IncreaseBufferPointer>
 800b74e:	60a0      	str	r0, [r4, #8]

    return true;
 800b750:	2001      	movs	r0, #1
}
 800b752:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b754:	2000      	movs	r0, #0
 800b756:	e7fc      	b.n	800b752 <LoRaMacConfirmQueueAdd+0x3e>
 800b758:	20000e00 	.word	0x20000e00

0800b75c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800b75c:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b75e:	4b09      	ldr	r3, [pc, #36]	; (800b784 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b760:	f893 4020 	ldrb.w	r4, [r3, #32]
 800b764:	4620      	mov	r0, r4
 800b766:	f7ff ff95 	bl	800b694 <IsListEmpty>
 800b76a:	b948      	cbnz	r0, 800b780 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800b76c:	4d05      	ldr	r5, [pc, #20]	; (800b784 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800b76e:	3c01      	subs	r4, #1
 800b770:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800b774:	6868      	ldr	r0, [r5, #4]
 800b776:	f7ff ff81 	bl	800b67c <IncreaseBufferPointer>
 800b77a:	6068      	str	r0, [r5, #4]

    return true;
 800b77c:	2001      	movs	r0, #1
}
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800b780:	2000      	movs	r0, #0
 800b782:	e7fc      	b.n	800b77e <LoRaMacConfirmQueueRemoveFirst+0x22>
 800b784:	20000e00 	.word	0x20000e00

0800b788 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4605      	mov	r5, r0
 800b78c:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b78e:	4b08      	ldr	r3, [pc, #32]	; (800b7b0 <LoRaMacConfirmQueueSetStatus+0x28>)
 800b790:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b794:	f7ff ff7e 	bl	800b694 <IsListEmpty>
 800b798:	b948      	cbnz	r0, 800b7ae <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b79a:	4b05      	ldr	r3, [pc, #20]	; (800b7b0 <LoRaMacConfirmQueueSetStatus+0x28>)
 800b79c:	689a      	ldr	r2, [r3, #8]
 800b79e:	6859      	ldr	r1, [r3, #4]
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f7ff ff83 	bl	800b6ac <GetElement>
        if( element != NULL )
 800b7a6:	b110      	cbz	r0, 800b7ae <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800b7a8:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	20000e00 	.word	0x20000e00

0800b7b4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800b7b4:	b510      	push	{r4, lr}
 800b7b6:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b7b8:	4b09      	ldr	r3, [pc, #36]	; (800b7e0 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b7ba:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b7be:	f7ff ff69 	bl	800b694 <IsListEmpty>
 800b7c2:	b940      	cbnz	r0, 800b7d6 <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800b7c4:	4b06      	ldr	r3, [pc, #24]	; (800b7e0 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800b7c6:	689a      	ldr	r2, [r3, #8]
 800b7c8:	6859      	ldr	r1, [r3, #4]
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f7ff ff6e 	bl	800b6ac <GetElement>
        if( element != NULL )
 800b7d0:	b118      	cbz	r0, 800b7da <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800b7d2:	7840      	ldrb	r0, [r0, #1]
 800b7d4:	e000      	b.n	800b7d8 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b7d6:	2001      	movs	r0, #1
}
 800b7d8:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b7da:	2001      	movs	r0, #1
 800b7dc:	e7fc      	b.n	800b7d8 <LoRaMacConfirmQueueGetStatus+0x24>
 800b7de:	bf00      	nop
 800b7e0:	20000e00 	.word	0x20000e00

0800b7e4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800b7e8:	4b0c      	ldr	r3, [pc, #48]	; (800b81c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b7ea:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800b7ec:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800b7f0:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b7f4:	f7ff ff4e 	bl	800b694 <IsListEmpty>
 800b7f8:	b150      	cbz	r0, 800b810 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800b7fa:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800b800:	4620      	mov	r0, r4
 800b802:	f7ff ff3b 	bl	800b67c <IncreaseBufferPointer>
 800b806:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800b808:	4b04      	ldr	r3, [pc, #16]	; (800b81c <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	4283      	cmp	r3, r0
 800b80e:	d0f4      	beq.n	800b7fa <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800b810:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800b812:	78e3      	ldrb	r3, [r4, #3]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d1f3      	bne.n	800b800 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800b818:	e7f0      	b.n	800b7fc <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800b81a:	bf00      	nop
 800b81c:	20000e00 	.word	0x20000e00

0800b820 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800b820:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800b822:	4b04      	ldr	r3, [pc, #16]	; (800b834 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800b824:	689a      	ldr	r2, [r3, #8]
 800b826:	6859      	ldr	r1, [r3, #4]
 800b828:	f7ff ff40 	bl	800b6ac <GetElement>
 800b82c:	b100      	cbz	r0, 800b830 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800b82e:	2001      	movs	r0, #1
    }
    return false;
}
 800b830:	bd08      	pop	{r3, pc}
 800b832:	bf00      	nop
 800b834:	20000e00 	.word	0x20000e00

0800b838 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800b838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b83a:	b083      	sub	sp, #12
 800b83c:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800b83e:	4b16      	ldr	r3, [pc, #88]	; (800b898 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b840:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800b844:	2400      	movs	r4, #0
 800b846:	e00d      	b.n	800b864 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800b848:	781a      	ldrb	r2, [r3, #0]
 800b84a:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800b84e:	785a      	ldrb	r2, [r3, #1]
 800b850:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800b854:	78db      	ldrb	r3, [r3, #3]
 800b856:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800b85a:	f7ff ff7f 	bl	800b75c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800b85e:	b1a5      	cbz	r5, 800b88a <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800b860:	3401      	adds	r4, #1
 800b862:	b2e4      	uxtb	r4, r4
 800b864:	42bc      	cmp	r4, r7
 800b866:	d214      	bcs.n	800b892 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800b868:	4b0b      	ldr	r3, [pc, #44]	; (800b898 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	7812      	ldrb	r2, [r2, #0]
 800b86e:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800b870:	685a      	ldr	r2, [r3, #4]
 800b872:	7852      	ldrb	r2, [r2, #1]
 800b874:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800b87a:	2d00      	cmp	r5, #0
 800b87c:	d0e4      	beq.n	800b848 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800b87e:	4b06      	ldr	r3, [pc, #24]	; (800b898 <LoRaMacConfirmQueueHandleCb+0x60>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	4630      	mov	r0, r6
 800b886:	4798      	blx	r3
 800b888:	e7e7      	b.n	800b85a <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800b88a:	a801      	add	r0, sp, #4
 800b88c:	f7ff ff42 	bl	800b714 <LoRaMacConfirmQueueAdd>
 800b890:	e7e6      	b.n	800b860 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800b892:	b003      	add	sp, #12
 800b894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b896:	bf00      	nop
 800b898:	20000e00 	.word	0x20000e00

0800b89c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800b89c:	4b01      	ldr	r3, [pc, #4]	; (800b8a4 <LoRaMacConfirmQueueGetCnt+0x8>)
 800b89e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b8a2:	4770      	bx	lr
 800b8a4:	20000e00 	.word	0x20000e00

0800b8a8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800b8a8:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800b8aa:	4b03      	ldr	r3, [pc, #12]	; (800b8b8 <LoRaMacConfirmQueueIsFull+0x10>)
 800b8ac:	f893 0020 	ldrb.w	r0, [r3, #32]
 800b8b0:	f7ff fef5 	bl	800b69e <IsListFull>
    }
    else
    {
        return false;
    }
}
 800b8b4:	bd08      	pop	{r3, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20000e00 	.word	0x20000e00

0800b8bc <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800b8bc:	b410      	push	{r4}
 800b8be:	9c01      	ldr	r4, [sp, #4]
 800b8c0:	9902      	ldr	r1, [sp, #8]
 800b8c2:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800b8c4:	b1da      	cbz	r2, 800b8fe <PrepareB0+0x42>
 800b8c6:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800b8c8:	2049      	movs	r0, #73	; 0x49
 800b8ca:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800b8d0:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800b8d2:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800b8d4:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800b8d6:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800b8d8:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800b8da:	0a23      	lsrs	r3, r4, #8
 800b8dc:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800b8de:	0c23      	lsrs	r3, r4, #16
 800b8e0:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800b8e2:	0e24      	lsrs	r4, r4, #24
 800b8e4:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800b8e6:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800b8e8:	0a0b      	lsrs	r3, r1, #8
 800b8ea:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800b8ec:	0c0b      	lsrs	r3, r1, #16
 800b8ee:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800b8f0:	0e09      	lsrs	r1, r1, #24
 800b8f2:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800b8f4:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800b8f6:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800b8fa:	bc10      	pop	{r4}
 800b8fc:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b8fe:	2009      	movs	r0, #9
 800b900:	e7fb      	b.n	800b8fa <PrepareB0+0x3e>
	...

0800b904 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b904:	2300      	movs	r3, #0
 800b906:	2b01      	cmp	r3, #1
 800b908:	d80e      	bhi.n	800b928 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800b90a:	469c      	mov	ip, r3
 800b90c:	4a07      	ldr	r2, [pc, #28]	; (800b92c <GetKeyAddrItem+0x28>)
 800b90e:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800b912:	4282      	cmp	r2, r0
 800b914:	d002      	beq.n	800b91c <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800b916:	3301      	adds	r3, #1
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	e7f4      	b.n	800b906 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800b91c:	4b03      	ldr	r3, [pc, #12]	; (800b92c <GetKeyAddrItem+0x28>)
 800b91e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800b922:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800b924:	2000      	movs	r0, #0
 800b926:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800b928:	200b      	movs	r0, #11
}
 800b92a:	4770      	bx	lr
 800b92c:	20000100 	.word	0x20000100

0800b930 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800b930:	460b      	mov	r3, r1
 800b932:	2900      	cmp	r1, #0
 800b934:	d024      	beq.n	800b980 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800b936:	3801      	subs	r0, #1
 800b938:	2803      	cmp	r0, #3
 800b93a:	d823      	bhi.n	800b984 <GetLastFcntDown+0x54>
 800b93c:	e8df f000 	tbb	[pc, r0]
 800b940:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800b944:	4a10      	ldr	r2, [pc, #64]	; (800b988 <GetLastFcntDown+0x58>)
 800b946:	6812      	ldr	r2, [r2, #0]
 800b948:	6911      	ldr	r1, [r2, #16]
 800b94a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800b94c:	6913      	ldr	r3, [r2, #16]
 800b94e:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800b950:	2000      	movs	r0, #0
            break;
 800b952:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800b954:	4a0c      	ldr	r2, [pc, #48]	; (800b988 <GetLastFcntDown+0x58>)
 800b956:	6812      	ldr	r2, [r2, #0]
 800b958:	6951      	ldr	r1, [r2, #20]
 800b95a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800b95c:	6953      	ldr	r3, [r2, #20]
 800b95e:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800b960:	2000      	movs	r0, #0
            break;
 800b962:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800b964:	4a08      	ldr	r2, [pc, #32]	; (800b988 <GetLastFcntDown+0x58>)
 800b966:	6812      	ldr	r2, [r2, #0]
 800b968:	6991      	ldr	r1, [r2, #24]
 800b96a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800b96c:	6993      	ldr	r3, [r2, #24]
 800b96e:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800b970:	2000      	movs	r0, #0
            break;
 800b972:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800b974:	4a04      	ldr	r2, [pc, #16]	; (800b988 <GetLastFcntDown+0x58>)
 800b976:	6812      	ldr	r2, [r2, #0]
 800b978:	69d2      	ldr	r2, [r2, #28]
 800b97a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800b97c:	2000      	movs	r0, #0
            break;
 800b97e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b980:	2009      	movs	r0, #9
 800b982:	4770      	bx	lr
    switch( fCntID )
 800b984:	2005      	movs	r0, #5
}
 800b986:	4770      	bx	lr
 800b988:	20000e24 	.word	0x20000e24

0800b98c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800b98c:	b510      	push	{r4, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800b992:	2300      	movs	r3, #0
 800b994:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800b996:	a901      	add	r1, sp, #4
 800b998:	f7ff ffca 	bl	800b930 <GetLastFcntDown>
 800b99c:	b948      	cbnz	r0, 800b9b2 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800b99e:	9b01      	ldr	r3, [sp, #4]
 800b9a0:	42a3      	cmp	r3, r4
 800b9a2:	d309      	bcc.n	800b9b8 <CheckFCntDown+0x2c>
 800b9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a8:	d001      	beq.n	800b9ae <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800b9aa:	2000      	movs	r0, #0
 800b9ac:	e002      	b.n	800b9b4 <CheckFCntDown+0x28>
        return true;
 800b9ae:	2001      	movs	r0, #1
 800b9b0:	e000      	b.n	800b9b4 <CheckFCntDown+0x28>
        return false;
 800b9b2:	2000      	movs	r0, #0
    }
}
 800b9b4:	b002      	add	sp, #8
 800b9b6:	bd10      	pop	{r4, pc}
        return true;
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	e7fb      	b.n	800b9b4 <CheckFCntDown+0x28>

0800b9bc <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800b9bc:	3801      	subs	r0, #1
 800b9be:	2803      	cmp	r0, #3
 800b9c0:	d812      	bhi.n	800b9e8 <UpdateFCntDown+0x2c>
 800b9c2:	e8df f000 	tbb	[pc, r0]
 800b9c6:	0602      	.short	0x0602
 800b9c8:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800b9ca:	4b08      	ldr	r3, [pc, #32]	; (800b9ec <UpdateFCntDown+0x30>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	6119      	str	r1, [r3, #16]
            break;
 800b9d0:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800b9d2:	4b06      	ldr	r3, [pc, #24]	; (800b9ec <UpdateFCntDown+0x30>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	6159      	str	r1, [r3, #20]
            break;
 800b9d8:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800b9da:	4b04      	ldr	r3, [pc, #16]	; (800b9ec <UpdateFCntDown+0x30>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6199      	str	r1, [r3, #24]
            break;
 800b9e0:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800b9e2:	4b02      	ldr	r3, [pc, #8]	; (800b9ec <UpdateFCntDown+0x30>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	20000e24 	.word	0x20000e24

0800b9f0 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800b9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ba1c <ResetFCnts+0x2c>)
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b9f8:	f04f 31ff 	mov.w	r1, #4294967295
 800b9fc:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800b9fe:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ba00:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800ba02:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	dd00      	ble.n	800ba0a <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800ba08:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800ba0a:	1d99      	adds	r1, r3, #6
 800ba0c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ba10:	f04f 30ff 	mov.w	r0, #4294967295
 800ba14:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ba16:	3301      	adds	r3, #1
 800ba18:	e7f4      	b.n	800ba04 <ResetFCnts+0x14>
 800ba1a:	bf00      	nop
 800ba1c:	20000e24 	.word	0x20000e24

0800ba20 <ComputeCmacB0>:
{
 800ba20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba24:	b088      	sub	sp, #32
 800ba26:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800ba28:	b1f0      	cbz	r0, 800ba68 <ComputeCmacB0+0x48>
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	4615      	mov	r5, r2
 800ba2e:	461a      	mov	r2, r3
 800ba30:	4680      	mov	r8, r0
 800ba32:	b1de      	cbz	r6, 800ba6c <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ba34:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ba38:	d81a      	bhi.n	800ba70 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ba3a:	af04      	add	r7, sp, #16
 800ba3c:	9702      	str	r7, [sp, #8]
 800ba3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba40:	9301      	str	r3, [sp, #4]
 800ba42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f7ff ff35 	bl	800b8bc <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ba52:	9600      	str	r6, [sp, #0]
 800ba54:	462b      	mov	r3, r5
 800ba56:	4622      	mov	r2, r4
 800ba58:	4641      	mov	r1, r8
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	f002 fc97 	bl	800e38e <SecureElementComputeAesCmac>
 800ba60:	b940      	cbnz	r0, 800ba74 <ComputeCmacB0+0x54>
}
 800ba62:	b008      	add	sp, #32
 800ba64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ba68:	2009      	movs	r0, #9
 800ba6a:	e7fa      	b.n	800ba62 <ComputeCmacB0+0x42>
 800ba6c:	2009      	movs	r0, #9
 800ba6e:	e7f8      	b.n	800ba62 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800ba70:	200d      	movs	r0, #13
 800ba72:	e7f6      	b.n	800ba62 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ba74:	200e      	movs	r0, #14
 800ba76:	e7f4      	b.n	800ba62 <ComputeCmacB0+0x42>

0800ba78 <DeriveSessionKey10x>:
{
 800ba78:	b510      	push	{r4, lr}
 800ba7a:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800ba7c:	2400      	movs	r4, #0
 800ba7e:	9400      	str	r4, [sp, #0]
 800ba80:	9401      	str	r4, [sp, #4]
 800ba82:	9402      	str	r4, [sp, #8]
 800ba84:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800ba86:	2802      	cmp	r0, #2
 800ba88:	d003      	beq.n	800ba92 <DeriveSessionKey10x+0x1a>
 800ba8a:	2803      	cmp	r0, #3
 800ba8c:	d025      	beq.n	800bada <DeriveSessionKey10x+0x62>
 800ba8e:	200a      	movs	r0, #10
 800ba90:	e021      	b.n	800bad6 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800ba92:	2401      	movs	r4, #1
 800ba94:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800ba98:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800ba9c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800baa0:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800baa4:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800baa8:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800baac:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800bab0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800bab4:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800bab8:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800babc:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800bac0:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800bac4:	0a1b      	lsrs	r3, r3, #8
 800bac6:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800baca:	4602      	mov	r2, r0
 800bacc:	2101      	movs	r1, #1
 800bace:	4668      	mov	r0, sp
 800bad0:	f002 fcfc 	bl	800e4cc <SecureElementDeriveAndStoreKey>
 800bad4:	b928      	cbnz	r0, 800bae2 <DeriveSessionKey10x+0x6a>
}
 800bad6:	b004      	add	sp, #16
 800bad8:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800bada:	2402      	movs	r4, #2
 800badc:	f88d 4000 	strb.w	r4, [sp]
            break;
 800bae0:	e7da      	b.n	800ba98 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bae2:	200e      	movs	r0, #14
 800bae4:	e7f7      	b.n	800bad6 <DeriveSessionKey10x+0x5e>

0800bae6 <PayloadEncrypt>:
{
 800bae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baea:	b088      	sub	sp, #32
 800baec:	4690      	mov	r8, r2
 800baee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d052      	beq.n	800bb9a <PayloadEncrypt+0xb4>
 800baf4:	460d      	mov	r5, r1
 800baf6:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800baf8:	2600      	movs	r6, #0
 800bafa:	9604      	str	r6, [sp, #16]
 800bafc:	9605      	str	r6, [sp, #20]
 800bafe:	9606      	str	r6, [sp, #24]
 800bb00:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800bb02:	9600      	str	r6, [sp, #0]
 800bb04:	9601      	str	r6, [sp, #4]
 800bb06:	9602      	str	r6, [sp, #8]
 800bb08:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800bb0a:	2701      	movs	r7, #1
 800bb0c:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800bb10:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800bb14:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800bb18:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800bb1c:	0a19      	lsrs	r1, r3, #8
 800bb1e:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800bb22:	0c19      	lsrs	r1, r3, #16
 800bb24:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800bb28:	0e1b      	lsrs	r3, r3, #24
 800bb2a:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800bb2e:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800bb32:	0a13      	lsrs	r3, r2, #8
 800bb34:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800bb38:	0c13      	lsrs	r3, r2, #16
 800bb3a:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bb3e:	0e12      	lsrs	r2, r2, #24
 800bb40:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800bb44:	e014      	b.n	800bb70 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bb46:	18f2      	adds	r2, r6, r3
 800bb48:	5ca0      	ldrb	r0, [r4, r2]
 800bb4a:	f103 0120 	add.w	r1, r3, #32
 800bb4e:	4469      	add	r1, sp
 800bb50:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800bb54:	4048      	eors	r0, r1
 800bb56:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bb58:	3301      	adds	r3, #1
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	462a      	mov	r2, r5
 800bb5e:	2d10      	cmp	r5, #16
 800bb60:	bfa8      	it	ge
 800bb62:	2210      	movge	r2, #16
 800bb64:	4293      	cmp	r3, r2
 800bb66:	dbee      	blt.n	800bb46 <PayloadEncrypt+0x60>
        size -= 16;
 800bb68:	3d10      	subs	r5, #16
 800bb6a:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800bb6c:	3610      	adds	r6, #16
 800bb6e:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800bb70:	2d00      	cmp	r5, #0
 800bb72:	dd0e      	ble.n	800bb92 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800bb74:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800bb78:	3701      	adds	r7, #1
 800bb7a:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bb7c:	ab04      	add	r3, sp, #16
 800bb7e:	4642      	mov	r2, r8
 800bb80:	2110      	movs	r1, #16
 800bb82:	4668      	mov	r0, sp
 800bb84:	f002 fc28 	bl	800e3d8 <SecureElementAesEncrypt>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d0e6      	beq.n	800bb5c <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bb8e:	200e      	movs	r0, #14
 800bb90:	e000      	b.n	800bb94 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800bb92:	2000      	movs	r0, #0
}
 800bb94:	b008      	add	sp, #32
 800bb96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bb9a:	2009      	movs	r0, #9
 800bb9c:	e7fa      	b.n	800bb94 <PayloadEncrypt+0xae>

0800bb9e <VerifyCmacB0>:
    if( msg == 0 )
 800bb9e:	b370      	cbz	r0, 800bbfe <VerifyCmacB0+0x60>
{
 800bba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba4:	b0c8      	sub	sp, #288	; 0x120
 800bba6:	460c      	mov	r4, r1
 800bba8:	4615      	mov	r5, r2
 800bbaa:	461e      	mov	r6, r3
 800bbac:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800bbae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bbb2:	d826      	bhi.n	800bc02 <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800bbb4:	af04      	add	r7, sp, #16
 800bbb6:	f44f 7288 	mov.w	r2, #272	; 0x110
 800bbba:	2100      	movs	r1, #0
 800bbbc:	4638      	mov	r0, r7
 800bbbe:	f002 fd56 	bl	800e66e <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800bbc2:	9702      	str	r7, [sp, #8]
 800bbc4:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800bbd0:	4632      	mov	r2, r6
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f7ff fe71 	bl	800b8bc <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800bbda:	4622      	mov	r2, r4
 800bbdc:	4641      	mov	r1, r8
 800bbde:	a808      	add	r0, sp, #32
 800bbe0:	f002 fd2d 	bl	800e63e <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800bbe4:	f104 0110 	add.w	r1, r4, #16
 800bbe8:	462b      	mov	r3, r5
 800bbea:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800bbec:	b289      	uxth	r1, r1
 800bbee:	4638      	mov	r0, r7
 800bbf0:	f002 fbdc 	bl	800e3ac <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800bbf4:	b130      	cbz	r0, 800bc04 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800bbf6:	2801      	cmp	r0, #1
 800bbf8:	d004      	beq.n	800bc04 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bbfa:	200e      	movs	r0, #14
 800bbfc:	e002      	b.n	800bc04 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bbfe:	2009      	movs	r0, #9
}
 800bc00:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800bc02:	200d      	movs	r0, #13
}
 800bc04:	b048      	add	sp, #288	; 0x120
 800bc06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800bc0c <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800bc0c:	b188      	cbz	r0, 800bc32 <LoRaMacCryptoInit+0x26>
{
 800bc0e:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800bc10:	4c09      	ldr	r4, [pc, #36]	; (800bc38 <LoRaMacCryptoInit+0x2c>)
 800bc12:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800bc14:	2228      	movs	r2, #40	; 0x28
 800bc16:	2100      	movs	r1, #0
 800bc18:	f002 fd29 	bl	800e66e <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800bc1c:	6823      	ldr	r3, [r4, #0]
 800bc1e:	2201      	movs	r2, #1
 800bc20:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800bc22:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800bc24:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800bc26:	2400      	movs	r4, #0
 800bc28:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800bc2a:	f7ff fee1 	bl	800b9f0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800bc2e:	4620      	mov	r0, r4
}
 800bc30:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800bc32:	2008      	movs	r0, #8
}
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	20000e24 	.word	0x20000e24

0800bc3c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800bc3c:	4b02      	ldr	r3, [pc, #8]	; (800bc48 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800bc42:	2000      	movs	r0, #0
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	20000e24 	.word	0x20000e24

0800bc4c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800bc4c:	b130      	cbz	r0, 800bc5c <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800bc4e:	4b04      	ldr	r3, [pc, #16]	; (800bc60 <LoRaMacCryptoGetFCntUp+0x14>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	3301      	adds	r3, #1
 800bc56:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800bc58:	2000      	movs	r0, #0
 800bc5a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bc5c:	2009      	movs	r0, #9
}
 800bc5e:	4770      	bx	lr
 800bc60:	20000e24 	.word	0x20000e24

0800bc64 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800bc64:	b530      	push	{r4, r5, lr}
 800bc66:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800bc6c:	b1f2      	cbz	r2, 800bcac <LoRaMacCryptoGetFCntDown+0x48>
 800bc6e:	460c      	mov	r4, r1
 800bc70:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800bc72:	a901      	add	r1, sp, #4
 800bc74:	f7ff fe5c 	bl	800b930 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800bc78:	b948      	cbnz	r0, 800bc8e <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800bc7a:	9b01      	ldr	r3, [sp, #4]
 800bc7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc80:	d007      	beq.n	800bc92 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800bc86:	2a00      	cmp	r2, #0
 800bc88:	dd05      	ble.n	800bc96 <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800bc8a:	4413      	add	r3, r2
 800bc8c:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bc8e:	b003      	add	sp, #12
 800bc90:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800bc92:	602c      	str	r4, [r5, #0]
 800bc94:	e7fb      	b.n	800bc8e <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800bc96:	b132      	cbz	r2, 800bca6 <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800bc98:	0c1b      	lsrs	r3, r3, #16
 800bc9a:	041b      	lsls	r3, r3, #16
 800bc9c:	4423      	add	r3, r4
 800bc9e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800bca2:	602b      	str	r3, [r5, #0]
 800bca4:	e7f3      	b.n	800bc8e <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800bca6:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800bca8:	2007      	movs	r0, #7
 800bcaa:	e7f0      	b.n	800bc8e <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bcac:	2009      	movs	r0, #9
 800bcae:	e7ee      	b.n	800bc8e <LoRaMacCryptoGetFCntDown+0x2a>

0800bcb0 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800bcb0:	4601      	mov	r1, r0
 800bcb2:	b908      	cbnz	r0, 800bcb8 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bcb4:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bcb6:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bcb8:	2300      	movs	r3, #0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	dd01      	ble.n	800bcc2 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800bcc2:	4a06      	ldr	r2, [pc, #24]	; (800bcdc <LoRaMacCryptoSetMulticastReference+0x2c>)
 800bcc4:	6812      	ldr	r2, [r2, #0]
 800bcc6:	202c      	movs	r0, #44	; 0x2c
 800bcc8:	fb00 1003 	mla	r0, r0, r3, r1
 800bccc:	f103 0c06 	add.w	ip, r3, #6
 800bcd0:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800bcd4:	3204      	adds	r2, #4
 800bcd6:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bcd8:	3301      	adds	r3, #1
 800bcda:	e7ee      	b.n	800bcba <LoRaMacCryptoSetMulticastReference+0xa>
 800bcdc:	20000e24 	.word	0x20000e24

0800bce0 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800bce0:	b1d8      	cbz	r0, 800bd1a <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800bce2:	b510      	push	{r4, lr}
 800bce4:	b082      	sub	sp, #8
 800bce6:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800bce8:	4b0f      	ldr	r3, [pc, #60]	; (800bd28 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	8893      	ldrh	r3, [r2, #4]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800bcf4:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bcf6:	f000 fa2e 	bl	800c156 <LoRaMacSerializerJoinRequest>
 800bcfa:	b980      	cbnz	r0, 800bd1e <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800bcfc:	4623      	mov	r3, r4
 800bcfe:	f853 1b18 	ldr.w	r1, [r3], #24
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	2301      	movs	r3, #1
 800bd06:	2213      	movs	r2, #19
 800bd08:	f002 fb41 	bl	800e38e <SecureElementComputeAesCmac>
 800bd0c:	b950      	cbnz	r0, 800bd24 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f000 fa21 	bl	800c156 <LoRaMacSerializerJoinRequest>
 800bd14:	b120      	cbz	r0, 800bd20 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bd16:	2010      	movs	r0, #16
 800bd18:	e002      	b.n	800bd20 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd1a:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800bd1c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bd1e:	2010      	movs	r0, #16
}
 800bd20:	b002      	add	sp, #8
 800bd22:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bd24:	200e      	movs	r0, #14
 800bd26:	e7fb      	b.n	800bd20 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800bd28:	20000e24 	.word	0x20000e24

0800bd2c <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d036      	beq.n	800bd9e <LoRaMacCryptoSecureMessage+0x72>
{
 800bd30:	b530      	push	{r4, r5, lr}
 800bd32:	b085      	sub	sp, #20
 800bd34:	4604      	mov	r4, r0
 800bd36:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800bd38:	4b1d      	ldr	r3, [pc, #116]	; (800bdb0 <LoRaMacCryptoSecureMessage+0x84>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	4283      	cmp	r3, r0
 800bd40:	d82f      	bhi.n	800bda2 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800bd42:	f895 2020 	ldrb.w	r2, [r5, #32]
 800bd46:	b342      	cbz	r2, 800bd9a <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800bd48:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800bd4a:	42a3      	cmp	r3, r4
 800bd4c:	d209      	bcs.n	800bd62 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800bd4e:	9401      	str	r4, [sp, #4]
 800bd50:	2300      	movs	r3, #0
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	68ab      	ldr	r3, [r5, #8]
 800bd56:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800bd5a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bd5c:	f7ff fec3 	bl	800bae6 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bd60:	bb10      	cbnz	r0, 800bda8 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bd62:	4628      	mov	r0, r5
 800bd64:	f000 fa2d 	bl	800c1c2 <LoRaMacSerializerData>
 800bd68:	b9e8      	cbnz	r0, 800bda6 <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800bd6a:	7929      	ldrb	r1, [r5, #4]
 800bd6c:	3904      	subs	r1, #4
 800bd6e:	462b      	mov	r3, r5
 800bd70:	f853 0b2c 	ldr.w	r0, [r3], #44
 800bd74:	9303      	str	r3, [sp, #12]
 800bd76:	9402      	str	r4, [sp, #8]
 800bd78:	68ab      	ldr	r3, [r5, #8]
 800bd7a:	9301      	str	r3, [sp, #4]
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9300      	str	r3, [sp, #0]
 800bd80:	2202      	movs	r2, #2
 800bd82:	b289      	uxth	r1, r1
 800bd84:	f7ff fe4c 	bl	800ba20 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bd88:	b970      	cbnz	r0, 800bda8 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	f000 fa19 	bl	800c1c2 <LoRaMacSerializerData>
 800bd90:	b960      	cbnz	r0, 800bdac <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800bd92:	4b07      	ldr	r3, [pc, #28]	; (800bdb0 <LoRaMacCryptoSecureMessage+0x84>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800bd98:	e006      	b.n	800bda8 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	e7d5      	b.n	800bd4a <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd9e:	2009      	movs	r0, #9
}
 800bda0:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bda2:	2006      	movs	r0, #6
 800bda4:	e000      	b.n	800bda8 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bda6:	2010      	movs	r0, #16
}
 800bda8:	b005      	add	sp, #20
 800bdaa:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bdac:	2010      	movs	r0, #16
 800bdae:	e7fb      	b.n	800bda8 <LoRaMacCryptoSecureMessage+0x7c>
 800bdb0:	20000e24 	.word	0x20000e24

0800bdb4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800bdb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdb8:	b087      	sub	sp, #28
 800bdba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800bdbc:	2e00      	cmp	r6, #0
 800bdbe:	d049      	beq.n	800be54 <LoRaMacCryptoUnsecureMessage+0xa0>
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	4688      	mov	r8, r1
 800bdc4:	4617      	mov	r7, r2
 800bdc6:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800bdc8:	4619      	mov	r1, r3
 800bdca:	4610      	mov	r0, r2
 800bdcc:	f7ff fdde 	bl	800b98c <CheckFCntDown>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d041      	beq.n	800be58 <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bdd4:	4630      	mov	r0, r6
 800bdd6:	f000 f95f 	bl	800c098 <LoRaMacParserData>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d141      	bne.n	800be62 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800bdde:	a905      	add	r1, sp, #20
 800bde0:	4628      	mov	r0, r5
 800bde2:	f7ff fd8f 	bl	800b904 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bde6:	4605      	mov	r5, r0
 800bde8:	2800      	cmp	r0, #0
 800bdea:	d136      	bne.n	800be5a <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800bdec:	9b05      	ldr	r3, [sp, #20]
 800bdee:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800bdf2:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800bdf4:	68b3      	ldr	r3, [r6, #8]
 800bdf6:	4543      	cmp	r3, r8
 800bdf8:	d135      	bne.n	800be66 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800bdfa:	7b33      	ldrb	r3, [r6, #12]
 800bdfc:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800be00:	491a      	ldr	r1, [pc, #104]	; (800be6c <LoRaMacCryptoUnsecureMessage+0xb8>)
 800be02:	6809      	ldr	r1, [r1, #0]
 800be04:	7889      	ldrb	r1, [r1, #2]
 800be06:	b901      	cbnz	r1, 800be0a <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800be08:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800be0a:	7931      	ldrb	r1, [r6, #4]
 800be0c:	3904      	subs	r1, #4
 800be0e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800be10:	9003      	str	r0, [sp, #12]
 800be12:	9402      	str	r4, [sp, #8]
 800be14:	f8cd 8004 	str.w	r8, [sp, #4]
 800be18:	2001      	movs	r0, #1
 800be1a:	9000      	str	r0, [sp, #0]
 800be1c:	b289      	uxth	r1, r1
 800be1e:	6830      	ldr	r0, [r6, #0]
 800be20:	f7ff febd 	bl	800bb9e <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800be24:	4605      	mov	r5, r0
 800be26:	b9c0      	cbnz	r0, 800be5a <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800be28:	f896 3020 	ldrb.w	r3, [r6, #32]
 800be2c:	b90b      	cbnz	r3, 800be32 <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800be2e:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800be32:	9401      	str	r4, [sp, #4]
 800be34:	2301      	movs	r3, #1
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	4643      	mov	r3, r8
 800be3a:	464a      	mov	r2, r9
 800be3c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800be40:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800be42:	f7ff fe50 	bl	800bae6 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800be46:	4605      	mov	r5, r0
 800be48:	b938      	cbnz	r0, 800be5a <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800be4a:	4621      	mov	r1, r4
 800be4c:	4638      	mov	r0, r7
 800be4e:	f7ff fdb5 	bl	800b9bc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800be52:	e002      	b.n	800be5a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800be54:	2509      	movs	r5, #9
 800be56:	e000      	b.n	800be5a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800be58:	2506      	movs	r5, #6
}
 800be5a:	4628      	mov	r0, r5
 800be5c:	b007      	add	sp, #28
 800be5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800be62:	250f      	movs	r5, #15
 800be64:	e7f9      	b.n	800be5a <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800be66:	2502      	movs	r5, #2
 800be68:	e7f7      	b.n	800be5a <LoRaMacCryptoUnsecureMessage+0xa6>
 800be6a:	bf00      	nop
 800be6c:	20000e24 	.word	0x20000e24

0800be70 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800be70:	b9b1      	cbnz	r1, 800bea0 <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800be72:	b500      	push	{lr}
 800be74:	b085      	sub	sp, #20
 800be76:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800be78:	2300      	movs	r3, #0
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	9301      	str	r3, [sp, #4]
 800be7e:	9302      	str	r3, [sp, #8]
 800be80:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800be82:	2801      	cmp	r0, #1
 800be84:	d008      	beq.n	800be98 <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800be86:	2204      	movs	r2, #4
 800be88:	4661      	mov	r1, ip
 800be8a:	4668      	mov	r0, sp
 800be8c:	f002 fb1e 	bl	800e4cc <SecureElementDeriveAndStoreKey>
 800be90:	b940      	cbnz	r0, 800bea4 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800be92:	b005      	add	sp, #20
 800be94:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800be98:	2320      	movs	r3, #32
 800be9a:	f88d 3000 	strb.w	r3, [sp]
 800be9e:	e7f2      	b.n	800be86 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800bea0:	200a      	movs	r0, #10
}
 800bea2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bea4:	200e      	movs	r0, #14
 800bea6:	e7f4      	b.n	800be92 <LoRaMacCryptoDeriveMcRootKey+0x22>

0800bea8 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800bea8:	2804      	cmp	r0, #4
 800beaa:	d001      	beq.n	800beb0 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800beac:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800beae:	4770      	bx	lr
{
 800beb0:	b500      	push	{lr}
 800beb2:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800beb4:	2300      	movs	r3, #0
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	9301      	str	r3, [sp, #4]
 800beba:	9302      	str	r3, [sp, #8]
 800bebc:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800bebe:	227f      	movs	r2, #127	; 0x7f
 800bec0:	4601      	mov	r1, r0
 800bec2:	4668      	mov	r0, sp
 800bec4:	f002 fb02 	bl	800e4cc <SecureElementDeriveAndStoreKey>
 800bec8:	b910      	cbnz	r0, 800bed0 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800beca:	b005      	add	sp, #20
 800becc:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bed0:	200e      	movs	r0, #14
 800bed2:	e7fa      	b.n	800beca <LoRaMacCryptoDeriveMcKEKey+0x22>

0800bed4 <LoRaMacCryptoSetKey>:
{
 800bed4:	b510      	push	{r4, lr}
 800bed6:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800bed8:	f002 fab6 	bl	800e448 <SecureElementSetKey>
 800bedc:	b978      	cbnz	r0, 800befe <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800bede:	b104      	cbz	r4, 800bee2 <LoRaMacCryptoSetKey+0xe>
}
 800bee0:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800bee2:	4b09      	ldr	r3, [pc, #36]	; (800bf08 <LoRaMacCryptoSetKey+0x34>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4621      	mov	r1, r4
 800bee8:	7898      	ldrb	r0, [r3, #2]
 800beea:	f7ff ffc1 	bl	800be70 <LoRaMacCryptoDeriveMcRootKey>
 800beee:	b940      	cbnz	r0, 800bf02 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800bef0:	2004      	movs	r0, #4
 800bef2:	f7ff ffd9 	bl	800bea8 <LoRaMacCryptoDeriveMcKEKey>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d0f2      	beq.n	800bee0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800befa:	200e      	movs	r0, #14
 800befc:	e7f0      	b.n	800bee0 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800befe:	200e      	movs	r0, #14
 800bf00:	e7ee      	b.n	800bee0 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bf02:	200e      	movs	r0, #14
 800bf04:	e7ec      	b.n	800bee0 <LoRaMacCryptoSetKey+0xc>
 800bf06:	bf00      	nop
 800bf08:	20000e24 	.word	0x20000e24

0800bf0c <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800bf0c:	2a00      	cmp	r2, #0
 800bf0e:	d064      	beq.n	800bfda <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800bf10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf12:	b08f      	sub	sp, #60	; 0x3c
 800bf14:	4607      	mov	r7, r0
 800bf16:	460d      	mov	r5, r1
 800bf18:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800bf1a:	2900      	cmp	r1, #0
 800bf1c:	d05f      	beq.n	800bfde <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800bf1e:	2600      	movs	r6, #0
 800bf20:	9605      	str	r6, [sp, #20]
 800bf22:	221d      	movs	r2, #29
 800bf24:	4631      	mov	r1, r6
 800bf26:	a806      	add	r0, sp, #24
 800bf28:	f005 f80a 	bl	8010f40 <memset>
    uint8_t versionMinor         = 0;
 800bf2c:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800bf30:	4b2f      	ldr	r3, [pc, #188]	; (800bff0 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800bf36:	f10d 0313 	add.w	r3, sp, #19
 800bf3a:	9302      	str	r3, [sp, #8]
 800bf3c:	ab05      	add	r3, sp, #20
 800bf3e:	9301      	str	r3, [sp, #4]
 800bf40:	7923      	ldrb	r3, [r4, #4]
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	6823      	ldr	r3, [r4, #0]
 800bf46:	4632      	mov	r2, r6
 800bf48:	4629      	mov	r1, r5
 800bf4a:	4638      	mov	r0, r7
 800bf4c:	f002 fade 	bl	800e50c <SecureElementProcessJoinAccept>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d146      	bne.n	800bfe2 <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800bf54:	7922      	ldrb	r2, [r4, #4]
 800bf56:	a905      	add	r1, sp, #20
 800bf58:	6820      	ldr	r0, [r4, #0]
 800bf5a:	f002 fb70 	bl	800e63e <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 f848 	bl	800bff4 <LoRaMacParserJoinAccept>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	d13f      	bne.n	800bfe8 <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800bf68:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800bf6a:	79e3      	ldrb	r3, [r4, #7]
 800bf6c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800bf70:	7a23      	ldrb	r3, [r4, #8]
 800bf72:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800bf76:	4b1e      	ldr	r3, [pc, #120]	; (800bff0 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	689a      	ldr	r2, [r3, #8]
 800bf7c:	42aa      	cmp	r2, r5
 800bf7e:	d035      	beq.n	800bfec <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800bf80:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800bf82:	2100      	movs	r1, #0
 800bf84:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800bf88:	f7ff ff72 	bl	800be70 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bf8c:	bb50      	cbnz	r0, 800bfe4 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800bf8e:	2004      	movs	r0, #4
 800bf90:	f7ff ff8a 	bl	800bea8 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bf94:	bb30      	cbnz	r0, 800bfe4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800bf96:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800bf98:	7aa2      	ldrb	r2, [r4, #10]
 800bf9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800bf9e:	7ae4      	ldrb	r4, [r4, #11]
 800bfa0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800bfa4:	4633      	mov	r3, r6
 800bfa6:	4622      	mov	r2, r4
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	2003      	movs	r0, #3
 800bfac:	f7ff fd64 	bl	800ba78 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bfb0:	b9c0      	cbnz	r0, 800bfe4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800bfb2:	4633      	mov	r3, r6
 800bfb4:	4622      	mov	r2, r4
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	2002      	movs	r0, #2
 800bfba:	f7ff fd5d 	bl	800ba78 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800bfbe:	b988      	cbnz	r0, 800bfe4 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800bfc0:	4b0b      	ldr	r3, [pc, #44]	; (800bff0 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800bfc8:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800bfca:	2200      	movs	r2, #0
 800bfcc:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800bfce:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd2:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bfd4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bfd6:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800bfd8:	e004      	b.n	800bfe4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bfda:	2009      	movs	r0, #9
}
 800bfdc:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bfde:	2009      	movs	r0, #9
 800bfe0:	e000      	b.n	800bfe4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bfe2:	200e      	movs	r0, #14
}
 800bfe4:	b00f      	add	sp, #60	; 0x3c
 800bfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800bfe8:	200f      	movs	r0, #15
 800bfea:	e7fb      	b.n	800bfe4 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800bfec:	2003      	movs	r0, #3
 800bfee:	e7f9      	b.n	800bfe4 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800bff0:	20000e24 	.word	0x20000e24

0800bff4 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d049      	beq.n	800c08c <LoRaMacParserJoinAccept+0x98>
{
 800bff8:	b510      	push	{r4, lr}
 800bffa:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800bffc:	6801      	ldr	r1, [r0, #0]
 800bffe:	2900      	cmp	r1, #0
 800c000:	d046      	beq.n	800c090 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c002:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c006:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800c008:	2203      	movs	r2, #3
 800c00a:	3006      	adds	r0, #6
 800c00c:	f002 fb17 	bl	800e63e <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800c010:	4620      	mov	r0, r4
 800c012:	f850 1b09 	ldr.w	r1, [r0], #9
 800c016:	2203      	movs	r2, #3
 800c018:	3104      	adds	r1, #4
 800c01a:	f002 fb10 	bl	800e63e <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c01e:	6821      	ldr	r1, [r4, #0]
 800c020:	79cb      	ldrb	r3, [r1, #7]
 800c022:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c024:	7a0a      	ldrb	r2, [r1, #8]
 800c026:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c02a:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c02c:	7a4a      	ldrb	r2, [r1, #9]
 800c02e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c032:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c034:	7a8a      	ldrb	r2, [r1, #10]
 800c036:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c03a:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800c03c:	7acb      	ldrb	r3, [r1, #11]
 800c03e:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c040:	7b0b      	ldrb	r3, [r1, #12]
 800c042:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800c044:	7923      	ldrb	r3, [r4, #4]
 800c046:	2b21      	cmp	r3, #33	; 0x21
 800c048:	d018      	beq.n	800c07c <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800c04a:	2b11      	cmp	r3, #17
 800c04c:	dc22      	bgt.n	800c094 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800c04e:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800c050:	6821      	ldr	r1, [r4, #0]
 800c052:	f102 0c01 	add.w	ip, r2, #1
 800c056:	5c8b      	ldrb	r3, [r1, r2]
 800c058:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c05a:	1c90      	adds	r0, r2, #2
 800c05c:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800c060:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800c064:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c066:	3203      	adds	r2, #3
 800c068:	5c08      	ldrb	r0, [r1, r0]
 800c06a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c06e:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c070:	5c8a      	ldrb	r2, [r1, r2]
 800c072:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c076:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800c078:	2000      	movs	r0, #0
}
 800c07a:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800c07c:	2210      	movs	r2, #16
 800c07e:	310d      	adds	r1, #13
 800c080:	f104 0012 	add.w	r0, r4, #18
 800c084:	f002 fadb 	bl	800e63e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800c088:	221d      	movs	r2, #29
 800c08a:	e7e1      	b.n	800c050 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800c08c:	2002      	movs	r0, #2
}
 800c08e:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c090:	2002      	movs	r0, #2
 800c092:	e7f2      	b.n	800c07a <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800c094:	2001      	movs	r0, #1
 800c096:	e7f0      	b.n	800c07a <LoRaMacParserJoinAccept+0x86>

0800c098 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c098:	2800      	cmp	r0, #0
 800c09a:	d058      	beq.n	800c14e <LoRaMacParserData+0xb6>
{
 800c09c:	b510      	push	{r4, lr}
 800c09e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c0a0:	6801      	ldr	r1, [r0, #0]
 800c0a2:	2900      	cmp	r1, #0
 800c0a4:	d055      	beq.n	800c152 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c0a6:	780b      	ldrb	r3, [r1, #0]
 800c0a8:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c0aa:	784b      	ldrb	r3, [r1, #1]
 800c0ac:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c0ae:	788a      	ldrb	r2, [r1, #2]
 800c0b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c0b4:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c0b6:	78ca      	ldrb	r2, [r1, #3]
 800c0b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0bc:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c0be:	790a      	ldrb	r2, [r1, #4]
 800c0c0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c0c4:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800c0c6:	794b      	ldrb	r3, [r1, #5]
 800c0c8:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800c0ca:	798b      	ldrb	r3, [r1, #6]
 800c0cc:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c0ce:	79ca      	ldrb	r2, [r1, #7]
 800c0d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c0d4:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c0d6:	7b02      	ldrb	r2, [r0, #12]
 800c0d8:	f002 020f 	and.w	r2, r2, #15
 800c0dc:	3108      	adds	r1, #8
 800c0de:	3010      	adds	r0, #16
 800c0e0:	f002 faad 	bl	800e63e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c0e4:	7b23      	ldrb	r3, [r4, #12]
 800c0e6:	f003 030f 	and.w	r3, r3, #15
 800c0ea:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800c0f4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c0f8:	7922      	ldrb	r2, [r4, #4]
 800c0fa:	1a11      	subs	r1, r2, r0
 800c0fc:	2904      	cmp	r1, #4
 800c0fe:	dc16      	bgt.n	800c12e <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c100:	6822      	ldr	r2, [r4, #0]
 800c102:	7923      	ldrb	r3, [r4, #4]
 800c104:	441a      	add	r2, r3
 800c106:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800c10a:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c10c:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800c110:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c114:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c116:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800c11a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c11e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c120:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800c124:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c128:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800c12a:	2000      	movs	r0, #0
}
 800c12c:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c12e:	6821      	ldr	r1, [r4, #0]
 800c130:	3309      	adds	r3, #9
 800c132:	5c08      	ldrb	r0, [r1, r0]
 800c134:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c138:	1ad2      	subs	r2, r2, r3
 800c13a:	b2d2      	uxtb	r2, r2
 800c13c:	3a04      	subs	r2, #4
 800c13e:	b2d2      	uxtb	r2, r2
 800c140:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800c144:	4419      	add	r1, r3
 800c146:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c148:	f002 fa79 	bl	800e63e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800c14c:	e7d8      	b.n	800c100 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800c14e:	2002      	movs	r0, #2
}
 800c150:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800c152:	2002      	movs	r0, #2
 800c154:	e7ea      	b.n	800c12c <LoRaMacParserData+0x94>

0800c156 <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c156:	b370      	cbz	r0, 800c1b6 <LoRaMacSerializerJoinRequest+0x60>
{
 800c158:	b510      	push	{r4, lr}
 800c15a:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c15c:	6803      	ldr	r3, [r0, #0]
 800c15e:	b363      	cbz	r3, 800c1ba <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c160:	7902      	ldrb	r2, [r0, #4]
 800c162:	2a16      	cmp	r2, #22
 800c164:	d92b      	bls.n	800c1be <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c166:	7942      	ldrb	r2, [r0, #5]
 800c168:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c16a:	4601      	mov	r1, r0
 800c16c:	f851 0b06 	ldr.w	r0, [r1], #6
 800c170:	2208      	movs	r2, #8
 800c172:	3001      	adds	r0, #1
 800c174:	f002 fa6e 	bl	800e654 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c178:	4621      	mov	r1, r4
 800c17a:	f851 0b0e 	ldr.w	r0, [r1], #14
 800c17e:	2208      	movs	r2, #8
 800c180:	3009      	adds	r0, #9
 800c182:	f002 fa67 	bl	800e654 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c186:	8ae2      	ldrh	r2, [r4, #22]
 800c188:	6823      	ldr	r3, [r4, #0]
 800c18a:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c18c:	8ae3      	ldrh	r3, [r4, #22]
 800c18e:	6822      	ldr	r2, [r4, #0]
 800c190:	0a1b      	lsrs	r3, r3, #8
 800c192:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c194:	69a2      	ldr	r2, [r4, #24]
 800c196:	6823      	ldr	r3, [r4, #0]
 800c198:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c19a:	69a3      	ldr	r3, [r4, #24]
 800c19c:	0a1b      	lsrs	r3, r3, #8
 800c19e:	6822      	ldr	r2, [r4, #0]
 800c1a0:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c1a2:	8b62      	ldrh	r2, [r4, #26]
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c1a8:	7ee2      	ldrb	r2, [r4, #27]
 800c1aa:	6823      	ldr	r3, [r4, #0]
 800c1ac:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800c1ae:	2317      	movs	r3, #23
 800c1b0:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c1b2:	2000      	movs	r0, #0
}
 800c1b4:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c1b6:	2001      	movs	r0, #1
}
 800c1b8:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c1ba:	2001      	movs	r0, #1
 800c1bc:	e7fa      	b.n	800c1b4 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c1be:	2002      	movs	r0, #2
 800c1c0:	e7f8      	b.n	800c1b4 <LoRaMacSerializerJoinRequest+0x5e>

0800c1c2 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d066      	beq.n	800c294 <LoRaMacSerializerData+0xd2>
{
 800c1c6:	b538      	push	{r3, r4, r5, lr}
 800c1c8:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c1ca:	6801      	ldr	r1, [r0, #0]
 800c1cc:	2900      	cmp	r1, #0
 800c1ce:	d063      	beq.n	800c298 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c1d0:	7b02      	ldrb	r2, [r0, #12]
 800c1d2:	f002 020f 	and.w	r2, r2, #15
 800c1d6:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c1da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c1de:	b10b      	cbz	r3, 800c1e4 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800c1e0:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800c1e4:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800c1ea:	7922      	ldrb	r2, [r4, #4]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d355      	bcc.n	800c29c <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c1f0:	7963      	ldrb	r3, [r4, #5]
 800c1f2:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c1f4:	68a2      	ldr	r2, [r4, #8]
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c1fa:	68a3      	ldr	r3, [r4, #8]
 800c1fc:	0a1b      	lsrs	r3, r3, #8
 800c1fe:	6822      	ldr	r2, [r4, #0]
 800c200:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c202:	8962      	ldrh	r2, [r4, #10]
 800c204:	6823      	ldr	r3, [r4, #0]
 800c206:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c208:	7ae2      	ldrb	r2, [r4, #11]
 800c20a:	6823      	ldr	r3, [r4, #0]
 800c20c:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c20e:	6823      	ldr	r3, [r4, #0]
 800c210:	7b22      	ldrb	r2, [r4, #12]
 800c212:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c214:	89e2      	ldrh	r2, [r4, #14]
 800c216:	6823      	ldr	r3, [r4, #0]
 800c218:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c21a:	89e3      	ldrh	r3, [r4, #14]
 800c21c:	6822      	ldr	r2, [r4, #0]
 800c21e:	0a1b      	lsrs	r3, r3, #8
 800c220:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c222:	4621      	mov	r1, r4
 800c224:	f851 0b10 	ldr.w	r0, [r1], #16
 800c228:	7b22      	ldrb	r2, [r4, #12]
 800c22a:	f002 020f 	and.w	r2, r2, #15
 800c22e:	3008      	adds	r0, #8
 800c230:	f002 fa05 	bl	800e63e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c234:	7b23      	ldrb	r3, [r4, #12]
 800c236:	f003 030f 	and.w	r3, r3, #15
 800c23a:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800c23e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800c242:	b12a      	cbz	r2, 800c250 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c244:	6822      	ldr	r2, [r4, #0]
 800c246:	f894 1020 	ldrb.w	r1, [r4, #32]
 800c24a:	5551      	strb	r1, [r2, r5]
 800c24c:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c250:	6820      	ldr	r0, [r4, #0]
 800c252:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800c256:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c258:	4428      	add	r0, r5
 800c25a:	f002 f9f0 	bl	800e63e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c25e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c262:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c264:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c266:	6821      	ldr	r1, [r4, #0]
 800c268:	1c5a      	adds	r2, r3, #1
 800c26a:	b292      	uxth	r2, r2
 800c26c:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c26e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c270:	0a08      	lsrs	r0, r1, #8
 800c272:	6825      	ldr	r5, [r4, #0]
 800c274:	1c99      	adds	r1, r3, #2
 800c276:	b289      	uxth	r1, r1
 800c278:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c27a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800c27c:	6820      	ldr	r0, [r4, #0]
 800c27e:	1cda      	adds	r2, r3, #3
 800c280:	b292      	uxth	r2, r2
 800c282:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c284:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800c288:	6821      	ldr	r1, [r4, #0]
 800c28a:	3304      	adds	r3, #4
 800c28c:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800c28e:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800c290:	2000      	movs	r0, #0
}
 800c292:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c294:	2001      	movs	r0, #1
}
 800c296:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c298:	2001      	movs	r0, #1
 800c29a:	e7fa      	b.n	800c292 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c29c:	2002      	movs	r0, #2
 800c29e:	e7f8      	b.n	800c292 <LoRaMacSerializerData+0xd0>

0800c2a0 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800c2a0:	4b02      	ldr	r3, [pc, #8]	; (800c2ac <NvmDataMgmtEvent+0xc>)
 800c2a2:	881a      	ldrh	r2, [r3, #0]
 800c2a4:	4310      	orrs	r0, r2
 800c2a6:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	20000e28 	.word	0x20000e28

0800c2b0 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800c2b0:	b508      	push	{r3, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800c2b2:	4b06      	ldr	r3, [pc, #24]	; (800c2cc <NvmDataMgmtStoreBegin+0x1c>)
 800c2b4:	881b      	ldrh	r3, [r3, #0]
 800c2b6:	b11b      	cbz	r3, 800c2c0 <NvmDataMgmtStoreBegin+0x10>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800c2b8:	f7fe f914 	bl	800a4e4 <LoRaMacStop>
 800c2bc:	b918      	cbnz	r0, 800c2c6 <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c2be:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800c2c0:	f06f 0001 	mvn.w	r0, #1
 800c2c4:	e7fb      	b.n	800c2be <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800c2c6:	f06f 0002 	mvn.w	r0, #2
 800c2ca:	e7f8      	b.n	800c2be <NvmDataMgmtStoreBegin+0xe>
 800c2cc:	20000e28 	.word	0x20000e28

0800c2d0 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800c2d0:	b510      	push	{r4, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800c2d2:	2400      	movs	r4, #0
 800c2d4:	4b02      	ldr	r3, [pc, #8]	; (800c2e0 <NvmDataMgmtStoreEnd+0x10>)
 800c2d6:	801c      	strh	r4, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800c2d8:	f7fe f8fc 	bl	800a4d4 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c2dc:	4620      	mov	r0, r4
 800c2de:	bd10      	pop	{r4, pc}
 800c2e0:	20000e28 	.word	0x20000e28

0800c2e4 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800c2e4:	2805      	cmp	r0, #5
 800c2e6:	d001      	beq.n	800c2ec <RegionIsActive+0x8>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800c2e8:	2000      	movs	r0, #0
        }
    }
}
 800c2ea:	4770      	bx	lr
        EU868_IS_ACTIVE( );
 800c2ec:	2001      	movs	r0, #1
 800c2ee:	4770      	bx	lr

0800c2f0 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c2f0:	b500      	push	{lr}
 800c2f2:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	9300      	str	r3, [sp, #0]
    switch( region )
 800c2f8:	2805      	cmp	r0, #5
 800c2fa:	d005      	beq.n	800c308 <RegionGetPhyParam+0x18>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800c2fc:	9b00      	ldr	r3, [sp, #0]
 800c2fe:	9301      	str	r3, [sp, #4]
        }
    }
}
 800c300:	9801      	ldr	r0, [sp, #4]
 800c302:	b003      	add	sp, #12
 800c304:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_GET_PHY_PARAM( );
 800c308:	4608      	mov	r0, r1
 800c30a:	f000 fd0f 	bl	800cd2c <RegionEU868GetPhyParam>
 800c30e:	9001      	str	r0, [sp, #4]
 800c310:	e7f6      	b.n	800c300 <RegionGetPhyParam+0x10>

0800c312 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 800c312:	2805      	cmp	r0, #5
 800c314:	d000      	beq.n	800c318 <RegionSetBandTxDone+0x6>
 800c316:	4770      	bx	lr
{
 800c318:	b508      	push	{r3, lr}
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 800c31a:	4608      	mov	r0, r1
 800c31c:	f000 fdc2 	bl	800cea4 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800c320:	bd08      	pop	{r3, pc}

0800c322 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 800c322:	2805      	cmp	r0, #5
 800c324:	d000      	beq.n	800c328 <RegionInitDefaults+0x6>
 800c326:	4770      	bx	lr
{
 800c328:	b508      	push	{r3, lr}
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 800c32a:	4608      	mov	r0, r1
 800c32c:	f000 fdd8 	bl	800cee0 <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 800c330:	bd08      	pop	{r3, pc}

0800c332 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 800c332:	2805      	cmp	r0, #5
 800c334:	d001      	beq.n	800c33a <RegionVerify+0x8>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800c336:	2000      	movs	r0, #0
        }
    }
}
 800c338:	4770      	bx	lr
{
 800c33a:	b508      	push	{r3, lr}
 800c33c:	460b      	mov	r3, r1
        EU868_VERIFY( );
 800c33e:	4611      	mov	r1, r2
 800c340:	4618      	mov	r0, r3
 800c342:	f000 fe39 	bl	800cfb8 <RegionEU868Verify>
}
 800c346:	bd08      	pop	{r3, pc}

0800c348 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 800c348:	2805      	cmp	r0, #5
 800c34a:	d000      	beq.n	800c34e <RegionApplyCFList+0x6>
 800c34c:	4770      	bx	lr
{
 800c34e:	b508      	push	{r3, lr}
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 800c350:	4608      	mov	r0, r1
 800c352:	f001 f9ff 	bl	800d754 <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800c356:	bd08      	pop	{r3, pc}

0800c358 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 800c358:	2805      	cmp	r0, #5
 800c35a:	d001      	beq.n	800c360 <RegionChanMaskSet+0x8>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800c35c:	2000      	movs	r0, #0
        }
    }
}
 800c35e:	4770      	bx	lr
{
 800c360:	b508      	push	{r3, lr}
        EU868_CHAN_MASK_SET( );
 800c362:	4608      	mov	r0, r1
 800c364:	f000 fe6e 	bl	800d044 <RegionEU868ChanMaskSet>
}
 800c368:	bd08      	pop	{r3, pc}

0800c36a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 800c36a:	2805      	cmp	r0, #5
 800c36c:	d000      	beq.n	800c370 <RegionComputeRxWindowParameters+0x6>
 800c36e:	4770      	bx	lr
{
 800c370:	b508      	push	{r3, lr}
 800c372:	468c      	mov	ip, r1
 800c374:	4611      	mov	r1, r2
 800c376:	461a      	mov	r2, r3
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c378:	9b02      	ldr	r3, [sp, #8]
 800c37a:	4660      	mov	r0, ip
 800c37c:	f000 fe80 	bl	800d080 <RegionEU868ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800c380:	bd08      	pop	{r3, pc}

0800c382 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 800c382:	2805      	cmp	r0, #5
 800c384:	d001      	beq.n	800c38a <RegionRxConfig+0x8>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800c386:	2000      	movs	r0, #0
        }
    }
}
 800c388:	4770      	bx	lr
{
 800c38a:	b508      	push	{r3, lr}
 800c38c:	460b      	mov	r3, r1
        EU868_RX_CONFIG( );
 800c38e:	4611      	mov	r1, r2
 800c390:	4618      	mov	r0, r3
 800c392:	f000 feab 	bl	800d0ec <RegionEU868RxConfig>
}
 800c396:	bd08      	pop	{r3, pc}

0800c398 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 800c398:	2805      	cmp	r0, #5
 800c39a:	d001      	beq.n	800c3a0 <RegionTxConfig+0x8>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800c39c:	2000      	movs	r0, #0
        }
    }
}
 800c39e:	4770      	bx	lr
{
 800c3a0:	b508      	push	{r3, lr}
 800c3a2:	468c      	mov	ip, r1
 800c3a4:	4611      	mov	r1, r2
        EU868_TX_CONFIG( );
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	4660      	mov	r0, ip
 800c3aa:	f000 ff23 	bl	800d1f4 <RegionEU868TxConfig>
}
 800c3ae:	bd08      	pop	{r3, pc}

0800c3b0 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 800c3b0:	2805      	cmp	r0, #5
 800c3b2:	d001      	beq.n	800c3b8 <RegionLinkAdrReq+0x8>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800c3b4:	2000      	movs	r0, #0
        }
    }
}
 800c3b6:	4770      	bx	lr
{
 800c3b8:	b500      	push	{lr}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	468c      	mov	ip, r1
 800c3be:	4611      	mov	r1, r2
 800c3c0:	461a      	mov	r2, r3
        EU868_LINK_ADR_REQ( );
 800c3c2:	9b05      	ldr	r3, [sp, #20]
 800c3c4:	9300      	str	r3, [sp, #0]
 800c3c6:	9b04      	ldr	r3, [sp, #16]
 800c3c8:	4660      	mov	r0, ip
 800c3ca:	f000 ffab 	bl	800d324 <RegionEU868LinkAdrReq>
}
 800c3ce:	b003      	add	sp, #12
 800c3d0:	f85d fb04 	ldr.w	pc, [sp], #4

0800c3d4 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 800c3d4:	2805      	cmp	r0, #5
 800c3d6:	d001      	beq.n	800c3dc <RegionRxParamSetupReq+0x8>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c3d8:	2000      	movs	r0, #0
        }
    }
}
 800c3da:	4770      	bx	lr
{
 800c3dc:	b508      	push	{r3, lr}
        EU868_RX_PARAM_SETUP_REQ( );
 800c3de:	4608      	mov	r0, r1
 800c3e0:	f001 f864 	bl	800d4ac <RegionEU868RxParamSetupReq>
}
 800c3e4:	bd08      	pop	{r3, pc}

0800c3e6 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 800c3e6:	2805      	cmp	r0, #5
 800c3e8:	d001      	beq.n	800c3ee <RegionNewChannelReq+0x8>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c3ea:	2000      	movs	r0, #0
        }
    }
}
 800c3ec:	4770      	bx	lr
{
 800c3ee:	b508      	push	{r3, lr}
        EU868_NEW_CHANNEL_REQ( );
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	f001 f9f0 	bl	800d7d6 <RegionEU868NewChannelReq>
}
 800c3f6:	bd08      	pop	{r3, pc}

0800c3f8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 800c3f8:	2805      	cmp	r0, #5
 800c3fa:	d001      	beq.n	800c400 <RegionTxParamSetupReq+0x8>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c3fc:	2000      	movs	r0, #0
        }
    }
}
 800c3fe:	4770      	bx	lr
{
 800c400:	b508      	push	{r3, lr}
        EU868_TX_PARAM_SETUP_REQ( );
 800c402:	4608      	mov	r0, r1
 800c404:	f001 f876 	bl	800d4f4 <RegionEU868TxParamSetupReq>
}
 800c408:	bd08      	pop	{r3, pc}

0800c40a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 800c40a:	2805      	cmp	r0, #5
 800c40c:	d001      	beq.n	800c412 <RegionDlChannelReq+0x8>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c40e:	2000      	movs	r0, #0
        }
    }
}
 800c410:	4770      	bx	lr
{
 800c412:	b508      	push	{r3, lr}
        EU868_DL_CHANNEL_REQ( );
 800c414:	4608      	mov	r0, r1
 800c416:	f001 f871 	bl	800d4fc <RegionEU868DlChannelReq>
}
 800c41a:	bd08      	pop	{r3, pc}

0800c41c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 800c41c:	2805      	cmp	r0, #5
 800c41e:	d001      	beq.n	800c424 <RegionAlternateDr+0x8>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800c420:	2000      	movs	r0, #0
        }
    }
}
 800c422:	4770      	bx	lr
{
 800c424:	b508      	push	{r3, lr}
 800c426:	460b      	mov	r3, r1
        EU868_ALTERNATE_DR( );
 800c428:	4611      	mov	r1, r2
 800c42a:	4618      	mov	r0, r3
 800c42c:	f001 f88e 	bl	800d54c <RegionEU868AlternateDr>
}
 800c430:	bd08      	pop	{r3, pc}

0800c432 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 800c432:	2805      	cmp	r0, #5
 800c434:	d001      	beq.n	800c43a <RegionNextChannel+0x8>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800c436:	2009      	movs	r0, #9
        }
    }
}
 800c438:	4770      	bx	lr
{
 800c43a:	b508      	push	{r3, lr}
 800c43c:	468c      	mov	ip, r1
 800c43e:	4611      	mov	r1, r2
 800c440:	461a      	mov	r2, r3
        EU868_NEXT_CHANNEL( );
 800c442:	9b02      	ldr	r3, [sp, #8]
 800c444:	4660      	mov	r0, ip
 800c446:	f001 f883 	bl	800d550 <RegionEU868NextChannel>
}
 800c44a:	bd08      	pop	{r3, pc}

0800c44c <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c44c:	468c      	mov	ip, r1
 800c44e:	4611      	mov	r1, r2
    switch( region )
 800c450:	2805      	cmp	r0, #5
 800c452:	d001      	beq.n	800c458 <RegionApplyDrOffset+0xc>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800c454:	b2d0      	uxtb	r0, r2
        }
    }
}
 800c456:	4770      	bx	lr
{
 800c458:	b508      	push	{r3, lr}
        EU868_APPLY_DR_OFFSET( );
 800c45a:	461a      	mov	r2, r3
 800c45c:	4660      	mov	r0, ip
 800c45e:	f001 f9e5 	bl	800d82c <RegionEU868ApplyDrOffset>
}
 800c462:	bd08      	pop	{r3, pc}

0800c464 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c464:	4800      	ldr	r0, [pc, #0]	; (800c468 <RegionGetVersion+0x4>)
 800c466:	4770      	bx	lr
 800c468:	02010001 	.word	0x02010001

0800c46c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c46c:	b082      	sub	sp, #8
 800c46e:	f10d 0c08 	add.w	ip, sp, #8
 800c472:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800c476:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800c478:	b971      	cbnz	r1, 800c498 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800c47a:	4613      	mov	r3, r2
 800c47c:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800c480:	d306      	bcc.n	800c490 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800c482:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800c486:	4293      	cmp	r3, r2
 800c488:	d80a      	bhi.n	800c4a0 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800c48a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c48e:	e000      	b.n	800c492 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800c490:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800c492:	4298      	cmp	r0, r3
 800c494:	bf38      	it	cc
 800c496:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800c498:	b900      	cbnz	r0, 800c49c <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800c49a:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800c49c:	b002      	add	sp, #8
 800c49e:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800c4a0:	f242 7310 	movw	r3, #10000	; 0x2710
 800c4a4:	e7f5      	b.n	800c492 <GetDutyCycle+0x26>

0800c4a6 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800c4a6:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800c4a8:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800c4aa:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800c4ac:	e001      	b.n	800c4b2 <CountChannels+0xc>
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	428b      	cmp	r3, r1
 800c4b4:	d207      	bcs.n	800c4c6 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	409a      	lsls	r2, r3
 800c4ba:	ea32 020c 	bics.w	r2, r2, ip
 800c4be:	d1f6      	bne.n	800c4ae <CountChannels+0x8>
        {
            nbActiveBits++;
 800c4c0:	3001      	adds	r0, #1
 800c4c2:	b2c0      	uxtb	r0, r0
 800c4c4:	e7f3      	b.n	800c4ae <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800c4c6:	4770      	bx	lr

0800c4c8 <SetMaxTimeCredits>:
{
 800c4c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4cc:	b089      	sub	sp, #36	; 0x24
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	460e      	mov	r6, r1
 800c4d2:	ad02      	add	r5, sp, #8
 800c4d4:	e885 000c 	stmia.w	r5, {r2, r3}
 800c4d8:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800c4dc:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800c4e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c4e4:	f004 f9f2 	bl	80108cc <SysTimeToMs>
 800c4e8:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	9304      	str	r3, [sp, #16]
 800c4ee:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800c4f0:	e895 000c 	ldmia.w	r5, {r2, r3}
 800c4f4:	4631      	mov	r1, r6
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f7ff ffb8 	bl	800c46c <GetDutyCycle>
 800c4fc:	4605      	mov	r5, r0
    if( joined == false )
 800c4fe:	2e00      	cmp	r6, #0
 800c500:	d14c      	bne.n	800c59c <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c502:	2864      	cmp	r0, #100	; 0x64
 800c504:	d025      	beq.n	800c552 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c506:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c50a:	d025      	beq.n	800c558 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800c50c:	4e27      	ldr	r6, [pc, #156]	; (800c5ac <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800c50e:	68a1      	ldr	r1, [r4, #8]
 800c510:	a806      	add	r0, sp, #24
 800c512:	f004 f9fb 	bl	801090c <SysTimeFromMs>
 800c516:	9b07      	ldr	r3, [sp, #28]
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	9b06      	ldr	r3, [sp, #24]
 800c51c:	aa02      	add	r2, sp, #8
 800c51e:	ca06      	ldmia	r2, {r1, r2}
 800c520:	a804      	add	r0, sp, #16
 800c522:	f004 f95a 	bl	80107da <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c526:	f1b8 0f00 	cmp.w	r8, #0
 800c52a:	d102      	bne.n	800c532 <SetMaxTimeCredits+0x6a>
 800c52c:	f1b9 0f00 	cmp.w	r9, #0
 800c530:	d002      	beq.n	800c538 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800c532:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800c534:	42b3      	cmp	r3, r6
 800c536:	d012      	beq.n	800c55e <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800c538:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c53a:	9b02      	ldr	r3, [sp, #8]
 800c53c:	4a1c      	ldr	r2, [pc, #112]	; (800c5b0 <SetMaxTimeCredits+0xe8>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d812      	bhi.n	800c568 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800c542:	6863      	ldr	r3, [r4, #4]
 800c544:	b903      	cbnz	r3, 800c548 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800c546:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800c548:	6126      	str	r6, [r4, #16]
}
 800c54a:	4628      	mov	r0, r5
 800c54c:	b009      	add	sp, #36	; 0x24
 800c54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800c552:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c554:	4e17      	ldr	r6, [pc, #92]	; (800c5b4 <SetMaxTimeCredits+0xec>)
 800c556:	e7da      	b.n	800c50e <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800c558:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800c55a:	4e17      	ldr	r6, [pc, #92]	; (800c5b8 <SetMaxTimeCredits+0xf0>)
 800c55c:	e7d7      	b.n	800c50e <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800c55e:	9a04      	ldr	r2, [sp, #16]
 800c560:	4b16      	ldr	r3, [pc, #88]	; (800c5bc <SetMaxTimeCredits+0xf4>)
 800c562:	429a      	cmp	r2, r3
 800c564:	d9ed      	bls.n	800c542 <SetMaxTimeCredits+0x7a>
 800c566:	e7e7      	b.n	800c538 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800c568:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800c56c:	3b30      	subs	r3, #48	; 0x30
 800c56e:	4a14      	ldr	r2, [pc, #80]	; (800c5c0 <SetMaxTimeCredits+0xf8>)
 800c570:	fba2 2303 	umull	r2, r3, r2, r3
 800c574:	0c1b      	lsrs	r3, r3, #16
 800c576:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800c578:	4a12      	ldr	r2, [pc, #72]	; (800c5c4 <SetMaxTimeCredits+0xfc>)
 800c57a:	fb02 f303 	mul.w	r3, r2, r3
 800c57e:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c580:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800c584:	3330      	adds	r3, #48	; 0x30
 800c586:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800c588:	2300      	movs	r3, #0
 800c58a:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800c58e:	ab04      	add	r3, sp, #16
 800c590:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c594:	f004 f99a 	bl	80108cc <SysTimeToMs>
 800c598:	60a0      	str	r0, [r4, #8]
 800c59a:	e7d2      	b.n	800c542 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800c59c:	f1b8 0f00 	cmp.w	r8, #0
 800c5a0:	d102      	bne.n	800c5a8 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800c5a2:	4e04      	ldr	r6, [pc, #16]	; (800c5b4 <SetMaxTimeCredits+0xec>)
 800c5a4:	60e6      	str	r6, [r4, #12]
 800c5a6:	e7cc      	b.n	800c542 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800c5a8:	4e02      	ldr	r6, [pc, #8]	; (800c5b4 <SetMaxTimeCredits+0xec>)
 800c5aa:	e7ca      	b.n	800c542 <SetMaxTimeCredits+0x7a>
 800c5ac:	02932e00 	.word	0x02932e00
 800c5b0:	0001ec2f 	.word	0x0001ec2f
 800c5b4:	001b7740 	.word	0x001b7740
 800c5b8:	0112a880 	.word	0x0112a880
 800c5bc:	0001517f 	.word	0x0001517f
 800c5c0:	c22e4507 	.word	0xc22e4507
 800c5c4:	00015180 	.word	0x00015180

0800c5c8 <UpdateTimeCredits>:
{
 800c5c8:	b570      	push	{r4, r5, r6, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800c5d0:	9301      	str	r3, [sp, #4]
 800c5d2:	9200      	str	r2, [sp, #0]
 800c5d4:	ab06      	add	r3, sp, #24
 800c5d6:	cb0c      	ldmia	r3, {r2, r3}
 800c5d8:	f7ff ff76 	bl	800c4c8 <SetMaxTimeCredits>
 800c5dc:	4605      	mov	r5, r0
    if( joined == true )
 800c5de:	b94e      	cbnz	r6, 800c5f4 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800c5e0:	68e2      	ldr	r2, [r4, #12]
 800c5e2:	6923      	ldr	r3, [r4, #16]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d900      	bls.n	800c5ea <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800c5e8:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800c5ea:	9b08      	ldr	r3, [sp, #32]
 800c5ec:	6063      	str	r3, [r4, #4]
}
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	b002      	add	sp, #8
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800c5f4:	6860      	ldr	r0, [r4, #4]
 800c5f6:	f004 f9e9 	bl	80109cc <UTIL_TIMER_GetElapsedTime>
 800c5fa:	68e3      	ldr	r3, [r4, #12]
 800c5fc:	4403      	add	r3, r0
 800c5fe:	60e3      	str	r3, [r4, #12]
 800c600:	e7ee      	b.n	800c5e0 <UpdateTimeCredits+0x18>

0800c602 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800c602:	4288      	cmp	r0, r1
 800c604:	db03      	blt.n	800c60e <RegionCommonValueInRange+0xc>
 800c606:	4290      	cmp	r0, r2
 800c608:	dd03      	ble.n	800c612 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800c60a:	2000      	movs	r0, #0
 800c60c:	4770      	bx	lr
 800c60e:	2000      	movs	r0, #0
 800c610:	4770      	bx	lr
        return 1;
 800c612:	2001      	movs	r0, #1
}
 800c614:	4770      	bx	lr

0800c616 <RegionCommonChanVerifyDr>:
{
 800c616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c61a:	4682      	mov	sl, r0
 800c61c:	460e      	mov	r6, r1
 800c61e:	4690      	mov	r8, r2
 800c620:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800c624:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800c628:	4619      	mov	r1, r3
 800c62a:	4640      	mov	r0, r8
 800c62c:	f7ff ffe9 	bl	800c602 <RegionCommonValueInRange>
 800c630:	b338      	cbz	r0, 800c682 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c632:	2500      	movs	r5, #0
 800c634:	462f      	mov	r7, r5
 800c636:	e01e      	b.n	800c676 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800c638:	3401      	adds	r4, #1
 800c63a:	b2e4      	uxtb	r4, r4
 800c63c:	2c0f      	cmp	r4, #15
 800c63e:	d816      	bhi.n	800c66e <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800c640:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800c644:	4123      	asrs	r3, r4
 800c646:	f013 0f01 	tst.w	r3, #1
 800c64a:	d0f5      	beq.n	800c638 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800c64c:	193b      	adds	r3, r7, r4
 800c64e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c652:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800c656:	7a19      	ldrb	r1, [r3, #8]
 800c658:	090a      	lsrs	r2, r1, #4
 800c65a:	f001 010f 	and.w	r1, r1, #15
 800c65e:	4640      	mov	r0, r8
 800c660:	f7ff ffcf 	bl	800c602 <RegionCommonValueInRange>
 800c664:	2801      	cmp	r0, #1
 800c666:	d1e7      	bne.n	800c638 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800c668:	2001      	movs	r0, #1
}
 800c66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800c66e:	3710      	adds	r7, #16
 800c670:	b2ff      	uxtb	r7, r7
 800c672:	3501      	adds	r5, #1
 800c674:	b2ed      	uxtb	r5, r5
 800c676:	4557      	cmp	r7, sl
 800c678:	d201      	bcs.n	800c67e <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800c67a:	2400      	movs	r4, #0
 800c67c:	e7de      	b.n	800c63c <RegionCommonChanVerifyDr+0x26>
    return false;
 800c67e:	2000      	movs	r0, #0
 800c680:	e7f3      	b.n	800c66a <RegionCommonChanVerifyDr+0x54>
        return false;
 800c682:	2000      	movs	r0, #0
 800c684:	e7f1      	b.n	800c66a <RegionCommonChanVerifyDr+0x54>

0800c686 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800c686:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800c68a:	0913      	lsrs	r3, r2, #4
 800c68c:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800c690:	d30e      	bcc.n	800c6b0 <RegionCommonChanDisable+0x2a>
 800c692:	4291      	cmp	r1, r2
 800c694:	d20e      	bcs.n	800c6b4 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800c696:	f001 010f 	and.w	r1, r1, #15
 800c69a:	2301      	movs	r3, #1
 800c69c:	fa03 f101 	lsl.w	r1, r3, r1
 800c6a0:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800c6a4:	ea22 0101 	bic.w	r1, r2, r1
 800c6a8:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	4770      	bx	lr
        return false;
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	4770      	bx	lr
 800c6b4:	2000      	movs	r0, #0
}
 800c6b6:	4770      	bx	lr

0800c6b8 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800c6ba:	b188      	cbz	r0, 800c6e0 <RegionCommonCountChannels+0x28>
 800c6bc:	460c      	mov	r4, r1
 800c6be:	4616      	mov	r6, r2
 800c6c0:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800c6c2:	2500      	movs	r5, #0
 800c6c4:	e008      	b.n	800c6d8 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800c6c6:	2110      	movs	r1, #16
 800c6c8:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800c6cc:	f7ff feeb 	bl	800c4a6 <CountChannels>
 800c6d0:	4405      	add	r5, r0
 800c6d2:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800c6d4:	3401      	adds	r4, #1
 800c6d6:	b2e4      	uxtb	r4, r4
 800c6d8:	42b4      	cmp	r4, r6
 800c6da:	d3f4      	bcc.n	800c6c6 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800c6dc:	4628      	mov	r0, r5
 800c6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800c6e0:	2500      	movs	r5, #0
 800c6e2:	e7fb      	b.n	800c6dc <RegionCommonCountChannels+0x24>

0800c6e4 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800c6e4:	4684      	mov	ip, r0
 800c6e6:	b158      	cbz	r0, 800c700 <RegionCommonChanMaskCopy+0x1c>
 800c6e8:	b109      	cbz	r1, 800c6ee <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	e006      	b.n	800c6fc <RegionCommonChanMaskCopy+0x18>
 800c6ee:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800c6f0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800c6f4:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d3f7      	bcc.n	800c6f0 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800c700:	4770      	bx	lr

0800c702 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800c702:	b082      	sub	sp, #8
 800c704:	b538      	push	{r3, r4, r5, lr}
 800c706:	4604      	mov	r4, r0
 800c708:	460d      	mov	r5, r1
 800c70a:	4611      	mov	r1, r2
 800c70c:	aa04      	add	r2, sp, #16
 800c70e:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800c712:	ca0c      	ldmia	r2, {r2, r3}
 800c714:	f7ff feaa 	bl	800c46c <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800c718:	68e3      	ldr	r3, [r4, #12]
 800c71a:	fb05 f000 	mul.w	r0, r5, r0
 800c71e:	4283      	cmp	r3, r0
 800c720:	d905      	bls.n	800c72e <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800c722:	1a18      	subs	r0, r3, r0
 800c724:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800c726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c72a:	b002      	add	sp, #8
 800c72c:	4770      	bx	lr
        band->TimeCredits = 0;
 800c72e:	2300      	movs	r3, #0
 800c730:	60e3      	str	r3, [r4, #12]
}
 800c732:	e7f8      	b.n	800c726 <RegionCommonSetBandTxDone+0x24>

0800c734 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800c734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c738:	b089      	sub	sp, #36	; 0x24
 800c73a:	4607      	mov	r7, r0
 800c73c:	468b      	mov	fp, r1
 800c73e:	4691      	mov	r9, r2
 800c740:	4698      	mov	r8, r3
 800c742:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800c746:	f004 f937 	bl	80109b8 <UTIL_TIMER_GetCurrentTime>
 800c74a:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800c74c:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800c74e:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800c750:	f04f 33ff 	mov.w	r3, #4294967295
 800c754:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800c756:	e005      	b.n	800c764 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800c758:	2301      	movs	r3, #1
 800c75a:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800c75c:	441e      	add	r6, r3
 800c75e:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800c760:	3401      	adds	r4, #1
 800c762:	b2e4      	uxtb	r4, r4
 800c764:	454c      	cmp	r4, r9
 800c766:	d25d      	bcs.n	800c824 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800c768:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800c76c:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800c770:	9b04      	ldr	r3, [sp, #16]
 800c772:	9302      	str	r3, [sp, #8]
 800c774:	ab13      	add	r3, sp, #76	; 0x4c
 800c776:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c77a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c77e:	4653      	mov	r3, sl
 800c780:	4642      	mov	r2, r8
 800c782:	4639      	mov	r1, r7
 800c784:	4628      	mov	r0, r5
 800c786:	f7ff ff1f 	bl	800c5c8 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800c78a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c78c:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800c790:	68ea      	ldr	r2, [r5, #12]
 800c792:	429a      	cmp	r2, r3
 800c794:	d8e0      	bhi.n	800c758 <RegionCommonUpdateBandTimeOff+0x24>
 800c796:	f1b8 0f00 	cmp.w	r8, #0
 800c79a:	d101      	bne.n	800c7a0 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800c79c:	2f00      	cmp	r7, #0
 800c79e:	d1db      	bne.n	800c758 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800c7a4:	6929      	ldr	r1, [r5, #16]
 800c7a6:	4299      	cmp	r1, r3
 800c7a8:	d907      	bls.n	800c7ba <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800c7aa:	1a9b      	subs	r3, r3, r2
 800c7ac:	9a05      	ldr	r2, [sp, #20]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	bf28      	it	cs
 800c7b2:	461a      	movcs	r2, r3
 800c7b4:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800c7b6:	3601      	adds	r6, #1
 800c7b8:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800c7ba:	2f00      	cmp	r7, #0
 800c7bc:	d1d0      	bne.n	800c760 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800c7be:	2300      	movs	r3, #0
 800c7c0:	9306      	str	r3, [sp, #24]
 800c7c2:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800c7c6:	2864      	cmp	r0, #100	; 0x64
 800c7c8:	d024      	beq.n	800c814 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800c7ca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800c7ce:	d025      	beq.n	800c81c <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800c7d0:	4b19      	ldr	r3, [pc, #100]	; (800c838 <RegionCommonUpdateBandTimeOff+0x104>)
 800c7d2:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800c7d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c7d6:	4a18      	ldr	r2, [pc, #96]	; (800c838 <RegionCommonUpdateBandTimeOff+0x104>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d90c      	bls.n	800c7f6 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800c7dc:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800c7e0:	3b30      	subs	r3, #48	; 0x30
 800c7e2:	4a16      	ldr	r2, [pc, #88]	; (800c83c <RegionCommonUpdateBandTimeOff+0x108>)
 800c7e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c7e8:	0c1b      	lsrs	r3, r3, #16
 800c7ea:	4a15      	ldr	r2, [pc, #84]	; (800c840 <RegionCommonUpdateBandTimeOff+0x10c>)
 800c7ec:	fb03 2202 	mla	r2, r3, r2, r2
 800c7f0:	9b06      	ldr	r3, [sp, #24]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800c7f6:	ad06      	add	r5, sp, #24
 800c7f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7fa:	9300      	str	r3, [sp, #0]
 800c7fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c7fe:	e895 0006 	ldmia.w	r5, {r1, r2}
 800c802:	4628      	mov	r0, r5
 800c804:	f003 ffe9 	bl	80107da <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800c808:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c80c:	f004 f85e 	bl	80108cc <SysTimeToMs>
 800c810:	9005      	str	r0, [sp, #20]
 800c812:	e7a5      	b.n	800c760 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800c814:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800c818:	9306      	str	r3, [sp, #24]
 800c81a:	e7db      	b.n	800c7d4 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800c81c:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800c820:	9306      	str	r3, [sp, #24]
 800c822:	e7d7      	b.n	800c7d4 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800c824:	b11e      	cbz	r6, 800c82e <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800c826:	9805      	ldr	r0, [sp, #20]
 800c828:	b009      	add	sp, #36	; 0x24
 800c82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800c82e:	f04f 33ff 	mov.w	r3, #4294967295
 800c832:	9305      	str	r3, [sp, #20]
 800c834:	e7f7      	b.n	800c826 <RegionCommonUpdateBandTimeOff+0xf2>
 800c836:	bf00      	nop
 800c838:	0001ec30 	.word	0x0001ec30
 800c83c:	c22e4507 	.word	0xc22e4507
 800c840:	00015180 	.word	0x00015180

0800c844 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800c844:	7803      	ldrb	r3, [r0, #0]
 800c846:	2b03      	cmp	r3, #3
 800c848:	d001      	beq.n	800c84e <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800c84a:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800c84c:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800c84e:	7842      	ldrb	r2, [r0, #1]
 800c850:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800c854:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800c856:	f003 030f 	and.w	r3, r3, #15
 800c85a:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800c85c:	0913      	lsrs	r3, r2, #4
 800c85e:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800c860:	7883      	ldrb	r3, [r0, #2]
 800c862:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800c864:	78c2      	ldrb	r2, [r0, #3]
 800c866:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c86a:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800c86c:	7903      	ldrb	r3, [r0, #4]
 800c86e:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800c870:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800c874:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800c876:	f003 030f 	and.w	r3, r3, #15
 800c87a:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800c87c:	2005      	movs	r0, #5
 800c87e:	4770      	bx	lr

0800c880 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800c880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c884:	b085      	sub	sp, #20
 800c886:	4604      	mov	r4, r0
 800c888:	4688      	mov	r8, r1
 800c88a:	4617      	mov	r7, r2
 800c88c:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800c88e:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800c890:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800c894:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800c898:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800c89c:	7943      	ldrb	r3, [r0, #5]
 800c89e:	b92b      	cbnz	r3, 800c8ac <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800c8a0:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800c8a4:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800c8a8:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800c8ac:	b355      	cbz	r5, 800c904 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800c8ae:	f1ba 0f0f 	cmp.w	sl, #15
 800c8b2:	d114      	bne.n	800c8de <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800c8b4:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800c8b8:	f1b9 0f0f 	cmp.w	r9, #15
 800c8bc:	d020      	beq.n	800c900 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800c8be:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800c8c2:	9303      	str	r3, [sp, #12]
 800c8c4:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800c8c8:	461c      	mov	r4, r3
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	4648      	mov	r0, r9
 800c8ce:	f7ff fe98 	bl	800c602 <RegionCommonValueInRange>
 800c8d2:	b9b8      	cbnz	r0, 800c904 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800c8d4:	454c      	cmp	r4, r9
 800c8d6:	dc21      	bgt.n	800c91c <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800c8d8:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800c8dc:	e012      	b.n	800c904 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800c8de:	69a3      	ldr	r3, [r4, #24]
 800c8e0:	9301      	str	r3, [sp, #4]
 800c8e2:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800c8e6:	9300      	str	r3, [sp, #0]
 800c8e8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800c8ec:	4652      	mov	r2, sl
 800c8ee:	6921      	ldr	r1, [r4, #16]
 800c8f0:	7b20      	ldrb	r0, [r4, #12]
 800c8f2:	f7ff fe90 	bl	800c616 <RegionCommonChanVerifyDr>
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	d1de      	bne.n	800c8b8 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800c8fa:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800c8fe:	e7db      	b.n	800c8b8 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800c900:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800c904:	2d07      	cmp	r5, #7
 800c906:	d00c      	beq.n	800c922 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800c908:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800c90c:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800c910:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800c914:	4628      	mov	r0, r5
 800c916:	b005      	add	sp, #20
 800c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800c91c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c920:	e7f0      	b.n	800c904 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800c922:	f1bb 0f00 	cmp.w	fp, #0
 800c926:	d1ef      	bne.n	800c908 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800c928:	f04f 0b01 	mov.w	fp, #1
 800c92c:	e7ec      	b.n	800c908 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800c930 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800c930:	4b02      	ldr	r3, [pc, #8]	; (800c93c <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800c932:	fa03 f000 	lsl.w	r0, r3, r0
}
 800c936:	fbb0 f0f1 	udiv	r0, r0, r1
 800c93a:	4770      	bx	lr
 800c93c:	000f4240 	.word	0x000f4240

0800c940 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800c940:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800c944:	fbb3 f0f0 	udiv	r0, r3, r0
 800c948:	4770      	bx	lr
	...

0800c94c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800c94c:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800c94e:	f1a1 0c04 	sub.w	ip, r1, #4
 800c952:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800c956:	fb0e f202 	mul.w	r2, lr, r2
 800c95a:	fb00 220c 	mla	r2, r0, ip, r2
 800c95e:	0052      	lsls	r2, r2, #1
 800c960:	d021      	beq.n	800c9a6 <RegionCommonComputeRxWindowParameters+0x5a>
 800c962:	4402      	add	r2, r0
 800c964:	3a01      	subs	r2, #1
 800c966:	fbb2 f2f0 	udiv	r2, r2, r0
 800c96a:	4291      	cmp	r1, r2
 800c96c:	bf38      	it	cc
 800c96e:	4611      	movcc	r1, r2
 800c970:	9a01      	ldr	r2, [sp, #4]
 800c972:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800c974:	0082      	lsls	r2, r0, #2
 800c976:	fb00 f101 	mul.w	r1, r0, r1
 800c97a:	b1b9      	cbz	r1, 800c9ac <RegionCommonComputeRxWindowParameters+0x60>
 800c97c:	3101      	adds	r1, #1
 800c97e:	0849      	lsrs	r1, r1, #1
 800c980:	1a51      	subs	r1, r2, r1
 800c982:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c986:	fb02 1313 	mls	r3, r2, r3, r1
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	dd10      	ble.n	800c9b0 <RegionCommonComputeRxWindowParameters+0x64>
 800c98e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800c992:	4a0b      	ldr	r2, [pc, #44]	; (800c9c0 <RegionCommonComputeRxWindowParameters+0x74>)
 800c994:	fb82 1203 	smull	r1, r2, r2, r3
 800c998:	17db      	asrs	r3, r3, #31
 800c99a:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800c99e:	9a02      	ldr	r2, [sp, #8]
 800c9a0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800c9a2:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800c9a6:	fbb2 f2f0 	udiv	r2, r2, r0
 800c9aa:	e7de      	b.n	800c96a <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800c9ac:	0849      	lsrs	r1, r1, #1
 800c9ae:	e7e7      	b.n	800c980 <RegionCommonComputeRxWindowParameters+0x34>
 800c9b0:	4a03      	ldr	r2, [pc, #12]	; (800c9c0 <RegionCommonComputeRxWindowParameters+0x74>)
 800c9b2:	fb82 1203 	smull	r1, r2, r2, r3
 800c9b6:	17db      	asrs	r3, r3, #31
 800c9b8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800c9bc:	e7ef      	b.n	800c99e <RegionCommonComputeRxWindowParameters+0x52>
 800c9be:	bf00      	nop
 800c9c0:	10624dd3 	.word	0x10624dd3

0800c9c4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800c9c4:	b538      	push	{r3, r4, r5, lr}
 800c9c6:	460d      	mov	r5, r1
 800c9c8:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800c9ca:	0040      	lsls	r0, r0, #1
 800c9cc:	f7f3 fefe 	bl	80007cc <__aeabi_ui2f>
 800c9d0:	4601      	mov	r1, r0
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	f7f3 fe48 	bl	8000668 <__aeabi_fsub>
 800c9d8:	4621      	mov	r1, r4
 800c9da:	f7f3 fe45 	bl	8000668 <__aeabi_fsub>
 800c9de:	f7f3 fd37 	bl	8000450 <__aeabi_f2d>
 800c9e2:	f004 fab5 	bl	8010f50 <floor>
 800c9e6:	f7f3 fe13 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800c9ea:	b240      	sxtb	r0, r0
 800c9ec:	bd38      	pop	{r3, r4, r5, pc}

0800c9ee <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800c9ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	4605      	mov	r5, r0
 800c9f6:	468b      	mov	fp, r1
 800c9f8:	9200      	str	r2, [sp, #0]
 800c9fa:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800c9fc:	2600      	movs	r6, #0
 800c9fe:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800ca00:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800ca02:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800ca04:	e04a      	b.n	800ca9c <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800ca06:	7a3a      	ldrb	r2, [r7, #8]
 800ca08:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800ca0c:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800ca10:	b252      	sxtb	r2, r2
 800ca12:	b249      	sxtb	r1, r1
 800ca14:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800ca18:	f7ff fdf3 	bl	800c602 <RegionCommonValueInRange>
 800ca1c:	b178      	cbz	r0, 800ca3e <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800ca1e:	68ea      	ldr	r2, [r5, #12]
 800ca20:	7a7b      	ldrb	r3, [r7, #9]
 800ca22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ca26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca2a:	7d1b      	ldrb	r3, [r3, #20]
 800ca2c:	b35b      	cbz	r3, 800ca86 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800ca2e:	f109 0301 	add.w	r3, r9, #1
 800ca32:	eb08 0204 	add.w	r2, r8, r4
 800ca36:	f80b 2009 	strb.w	r2, [fp, r9]
 800ca3a:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800ca3e:	3401      	adds	r4, #1
 800ca40:	b2e4      	uxtb	r4, r4
 800ca42:	2c0f      	cmp	r4, #15
 800ca44:	d824      	bhi.n	800ca90 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800ca46:	686b      	ldr	r3, [r5, #4]
 800ca48:	0072      	lsls	r2, r6, #1
 800ca4a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800ca4e:	4123      	asrs	r3, r4
 800ca50:	f013 0f01 	tst.w	r3, #1
 800ca54:	d0f3      	beq.n	800ca3e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800ca56:	68a8      	ldr	r0, [r5, #8]
 800ca58:	eb08 0304 	add.w	r3, r8, r4
 800ca5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ca60:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800ca64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d0e8      	beq.n	800ca3e <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800ca6c:	782b      	ldrb	r3, [r5, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1c9      	bne.n	800ca06 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800ca72:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d0c6      	beq.n	800ca06 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800ca78:	5a9b      	ldrh	r3, [r3, r2]
 800ca7a:	fa43 f104 	asr.w	r1, r3, r4
 800ca7e:	f011 0f01 	tst.w	r1, #1
 800ca82:	d1c0      	bne.n	800ca06 <RegionCommonCountNbOfEnabledChannels+0x18>
 800ca84:	e7db      	b.n	800ca3e <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800ca86:	f10a 0a01 	add.w	sl, sl, #1
 800ca8a:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800ca8e:	e7d6      	b.n	800ca3e <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800ca90:	f108 0810 	add.w	r8, r8, #16
 800ca94:	fa5f f888 	uxtb.w	r8, r8
 800ca98:	3601      	adds	r6, #1
 800ca9a:	b2f6      	uxtb	r6, r6
 800ca9c:	fa1f f388 	uxth.w	r3, r8
 800caa0:	8a2a      	ldrh	r2, [r5, #16]
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d201      	bcs.n	800caaa <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800caa6:	2400      	movs	r4, #0
 800caa8:	e7cb      	b.n	800ca42 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800caaa:	9b00      	ldr	r3, [sp, #0]
 800caac:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800cab0:	9b01      	ldr	r3, [sp, #4]
 800cab2:	f883 a000 	strb.w	sl, [r3]
}
 800cab6:	b003      	add	sp, #12
 800cab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cabc <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800cabc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cac0:	b085      	sub	sp, #20
 800cac2:	4604      	mov	r4, r0
 800cac4:	460f      	mov	r7, r1
 800cac6:	4616      	mov	r6, r2
 800cac8:	461d      	mov	r5, r3
 800caca:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800cace:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800cad2:	6840      	ldr	r0, [r0, #4]
 800cad4:	f003 ff7a 	bl	80109cc <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	1a1b      	subs	r3, r3, r0
 800cadc:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800cae0:	2301      	movs	r3, #1
 800cae2:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800cae6:	2300      	movs	r3, #0
 800cae8:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800caea:	6863      	ldr	r3, [r4, #4]
 800caec:	b113      	cbz	r3, 800caf4 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800caee:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800caf0:	4283      	cmp	r3, r0
 800caf2:	d81e      	bhi.n	800cb32 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800caf4:	2300      	movs	r3, #0
 800caf6:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800caf8:	69e3      	ldr	r3, [r4, #28]
 800cafa:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800cafe:	781f      	ldrb	r7, [r3, #0]
 800cb00:	69a3      	ldr	r3, [r4, #24]
 800cb02:	9303      	str	r3, [sp, #12]
 800cb04:	ab01      	add	r3, sp, #4
 800cb06:	f104 020c 	add.w	r2, r4, #12
 800cb0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cb0e:	e883 0003 	stmia.w	r3, {r0, r1}
 800cb12:	7d23      	ldrb	r3, [r4, #20]
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	7a23      	ldrb	r3, [r4, #8]
 800cb18:	7a62      	ldrb	r2, [r4, #9]
 800cb1a:	4661      	mov	r1, ip
 800cb1c:	4638      	mov	r0, r7
 800cb1e:	f7ff fe09 	bl	800c734 <RegionCommonUpdateBandTimeOff>
 800cb22:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800cb26:	4643      	mov	r3, r8
 800cb28:	462a      	mov	r2, r5
 800cb2a:	4631      	mov	r1, r6
 800cb2c:	69e0      	ldr	r0, [r4, #28]
 800cb2e:	f7ff ff5e 	bl	800c9ee <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800cb32:	782b      	ldrb	r3, [r5, #0]
 800cb34:	b923      	cbnz	r3, 800cb40 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800cb36:	f898 3000 	ldrb.w	r3, [r8]
 800cb3a:	b13b      	cbz	r3, 800cb4c <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800cb3c:	200b      	movs	r0, #11
 800cb3e:	e002      	b.n	800cb46 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800cb40:	2000      	movs	r0, #0
 800cb42:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800cb46:	b005      	add	sp, #20
 800cb48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800cb4c:	200c      	movs	r0, #12
 800cb4e:	e7fa      	b.n	800cb46 <RegionCommonIdentifyChannels+0x8a>

0800cb50 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800cb50:	b570      	push	{r4, r5, r6, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800cb56:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800cb5a:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800cb5e:	42a6      	cmp	r6, r4
 800cb60:	d011      	beq.n	800cb86 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800cb62:	3c01      	subs	r4, #1
 800cb64:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800cb66:	42a6      	cmp	r6, r4
 800cb68:	d00e      	beq.n	800cb88 <RegionCommonGetNextLowerTxDr+0x38>
 800cb6a:	68ab      	ldr	r3, [r5, #8]
 800cb6c:	9301      	str	r3, [sp, #4]
 800cb6e:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	4633      	mov	r3, r6
 800cb76:	4622      	mov	r2, r4
 800cb78:	6869      	ldr	r1, [r5, #4]
 800cb7a:	78e8      	ldrb	r0, [r5, #3]
 800cb7c:	f7ff fd4b 	bl	800c616 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d0ee      	beq.n	800cb62 <RegionCommonGetNextLowerTxDr+0x12>
 800cb84:	e000      	b.n	800cb88 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800cb86:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800cb88:	4620      	mov	r0, r4
 800cb8a:	b002      	add	sp, #8
 800cb8c:	bd70      	pop	{r4, r5, r6, pc}

0800cb8e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800cb8e:	4288      	cmp	r0, r1
 800cb90:	bfb8      	it	lt
 800cb92:	4608      	movlt	r0, r1
 800cb94:	4770      	bx	lr
	...

0800cb98 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800cb98:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800cb9c:	4a05      	ldr	r2, [pc, #20]	; (800cbb4 <RegionCommonGetBandwidth+0x1c>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d004      	beq.n	800cbac <RegionCommonGetBandwidth+0x14>
 800cba2:	4a05      	ldr	r2, [pc, #20]	; (800cbb8 <RegionCommonGetBandwidth+0x20>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d103      	bne.n	800cbb0 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800cba8:	2002      	movs	r0, #2
 800cbaa:	4770      	bx	lr
            return 1;
 800cbac:	2001      	movs	r0, #1
 800cbae:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800cbb0:	2000      	movs	r0, #0
    }
}
 800cbb2:	4770      	bx	lr
 800cbb4:	0003d090 	.word	0x0003d090
 800cbb8:	0007a120 	.word	0x0007a120

0800cbbc <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800cbbc:	b500      	push	{lr}
 800cbbe:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800cbc0:	2805      	cmp	r0, #5
 800cbc2:	d80e      	bhi.n	800cbe2 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800cbc4:	9202      	str	r2, [sp, #8]
 800cbc6:	9101      	str	r1, [sp, #4]
 800cbc8:	4b0a      	ldr	r3, [pc, #40]	; (800cbf4 <RegionCommonRxConfigPrint+0x38>)
 800cbca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	4b09      	ldr	r3, [pc, #36]	; (800cbf8 <RegionCommonRxConfigPrint+0x3c>)
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	2002      	movs	r0, #2
 800cbd8:	f003 fbda 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800cbdc:	b005      	add	sp, #20
 800cbde:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800cbe2:	9201      	str	r2, [sp, #4]
 800cbe4:	9100      	str	r1, [sp, #0]
 800cbe6:	4b05      	ldr	r3, [pc, #20]	; (800cbfc <RegionCommonRxConfigPrint+0x40>)
 800cbe8:	2201      	movs	r2, #1
 800cbea:	2100      	movs	r1, #0
 800cbec:	2002      	movs	r0, #2
 800cbee:	f003 fbcf 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 800cbf2:	e7f3      	b.n	800cbdc <RegionCommonRxConfigPrint+0x20>
 800cbf4:	08011808 	.word	0x08011808
 800cbf8:	080117a0 	.word	0x080117a0
 800cbfc:	080117c0 	.word	0x080117c0

0800cc00 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800cc00:	b500      	push	{lr}
 800cc02:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800cc04:	9101      	str	r1, [sp, #4]
 800cc06:	9000      	str	r0, [sp, #0]
 800cc08:	4b04      	ldr	r3, [pc, #16]	; (800cc1c <RegionCommonTxConfigPrint+0x1c>)
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	2002      	movs	r0, #2
 800cc10:	f003 fbbe 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 800cc14:	b003      	add	sp, #12
 800cc16:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc1a:	bf00      	nop
 800cc1c:	080117dc 	.word	0x080117dc

0800cc20 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	4604      	mov	r4, r0
 800cc24:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800cc26:	4b1b      	ldr	r3, [pc, #108]	; (800cc94 <VerifyRfFreq+0x74>)
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	4798      	blx	r3
 800cc2c:	b130      	cbz	r0, 800cc3c <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800cc2e:	4b1a      	ldr	r3, [pc, #104]	; (800cc98 <VerifyRfFreq+0x78>)
 800cc30:	4423      	add	r3, r4
 800cc32:	4a1a      	ldr	r2, [pc, #104]	; (800cc9c <VerifyRfFreq+0x7c>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d802      	bhi.n	800cc3e <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800cc38:	2302      	movs	r3, #2
 800cc3a:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800cc3c:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800cc3e:	4b18      	ldr	r3, [pc, #96]	; (800cca0 <VerifyRfFreq+0x80>)
 800cc40:	4423      	add	r3, r4
 800cc42:	4a18      	ldr	r2, [pc, #96]	; (800cca4 <VerifyRfFreq+0x84>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d802      	bhi.n	800cc4e <VerifyRfFreq+0x2e>
        *band = 0;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	702b      	strb	r3, [r5, #0]
 800cc4c:	e7f6      	b.n	800cc3c <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800cc4e:	4b16      	ldr	r3, [pc, #88]	; (800cca8 <VerifyRfFreq+0x88>)
 800cc50:	4423      	add	r3, r4
 800cc52:	4a16      	ldr	r2, [pc, #88]	; (800ccac <VerifyRfFreq+0x8c>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d802      	bhi.n	800cc5e <VerifyRfFreq+0x3e>
        *band = 1;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	702b      	strb	r3, [r5, #0]
 800cc5c:	e7ee      	b.n	800cc3c <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800cc5e:	4b14      	ldr	r3, [pc, #80]	; (800ccb0 <VerifyRfFreq+0x90>)
 800cc60:	4423      	add	r3, r4
 800cc62:	4a14      	ldr	r2, [pc, #80]	; (800ccb4 <VerifyRfFreq+0x94>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d802      	bhi.n	800cc6e <VerifyRfFreq+0x4e>
        *band = 5;
 800cc68:	2305      	movs	r3, #5
 800cc6a:	702b      	strb	r3, [r5, #0]
 800cc6c:	e7e6      	b.n	800cc3c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800cc6e:	4b12      	ldr	r3, [pc, #72]	; (800ccb8 <VerifyRfFreq+0x98>)
 800cc70:	4423      	add	r3, r4
 800cc72:	4a12      	ldr	r2, [pc, #72]	; (800ccbc <VerifyRfFreq+0x9c>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d802      	bhi.n	800cc7e <VerifyRfFreq+0x5e>
        *band = 3;
 800cc78:	2303      	movs	r3, #3
 800cc7a:	702b      	strb	r3, [r5, #0]
 800cc7c:	e7de      	b.n	800cc3c <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800cc7e:	4b10      	ldr	r3, [pc, #64]	; (800ccc0 <VerifyRfFreq+0xa0>)
 800cc80:	4423      	add	r3, r4
 800cc82:	4a10      	ldr	r2, [pc, #64]	; (800ccc4 <VerifyRfFreq+0xa4>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d802      	bhi.n	800cc8e <VerifyRfFreq+0x6e>
        *band = 4;
 800cc88:	2304      	movs	r3, #4
 800cc8a:	702b      	strb	r3, [r5, #0]
 800cc8c:	e7d6      	b.n	800cc3c <VerifyRfFreq+0x1c>
        return false;
 800cc8e:	2000      	movs	r0, #0
 800cc90:	e7d4      	b.n	800cc3c <VerifyRfFreq+0x1c>
 800cc92:	bf00      	nop
 800cc94:	08011dbc 	.word	0x08011dbc
 800cc98:	cc8faa40 	.word	0xcc8faa40
 800cc9c:	001e847f 	.word	0x001e847f
 800cca0:	cc7125c0 	.word	0xcc7125c0
 800cca4:	002dc6c0 	.word	0x002dc6c0
 800cca8:	cc435eff 	.word	0xcc435eff
 800ccac:	000927bf 	.word	0x000927bf
 800ccb0:	cc38b0a0 	.word	0xcc38b0a0
 800ccb4:	0007a120 	.word	0x0007a120
 800ccb8:	cc2e0240 	.word	0xcc2e0240
 800ccbc:	0003d090 	.word	0x0003d090
 800ccc0:	cc296e60 	.word	0xcc296e60
 800ccc4:	000493e0 	.word	0x000493e0

0800ccc8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800ccc8:	b570      	push	{r4, r5, r6, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	4605      	mov	r5, r0
 800ccce:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800ccd0:	4b13      	ldr	r3, [pc, #76]	; (800cd20 <GetTimeOnAir+0x58>)
 800ccd2:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800ccd4:	4913      	ldr	r1, [pc, #76]	; (800cd24 <GetTimeOnAir+0x5c>)
 800ccd6:	f7ff ff5f 	bl	800cb98 <RegionCommonGetBandwidth>
 800ccda:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800ccdc:	2d07      	cmp	r5, #7
 800ccde:	d00e      	beq.n	800ccfe <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800cce0:	4b11      	ldr	r3, [pc, #68]	; (800cd28 <GetTimeOnAir+0x60>)
 800cce2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800cce4:	2001      	movs	r0, #1
 800cce6:	9003      	str	r0, [sp, #12]
 800cce8:	b2e4      	uxtb	r4, r4
 800ccea:	9402      	str	r4, [sp, #8]
 800ccec:	2300      	movs	r3, #0
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	2308      	movs	r3, #8
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	4632      	mov	r2, r6
 800ccf8:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800ccfa:	b004      	add	sp, #16
 800ccfc:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800ccfe:	4b0a      	ldr	r3, [pc, #40]	; (800cd28 <GetTimeOnAir+0x60>)
 800cd00:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800cd02:	2301      	movs	r3, #1
 800cd04:	9303      	str	r3, [sp, #12]
 800cd06:	b2e4      	uxtb	r4, r4
 800cd08:	9402      	str	r4, [sp, #8]
 800cd0a:	2000      	movs	r0, #0
 800cd0c:	9001      	str	r0, [sp, #4]
 800cd0e:	2305      	movs	r3, #5
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	4603      	mov	r3, r0
 800cd14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cd18:	fb06 f202 	mul.w	r2, r6, r2
 800cd1c:	47a8      	blx	r5
 800cd1e:	e7ec      	b.n	800ccfa <GetTimeOnAir+0x32>
 800cd20:	08011840 	.word	0x08011840
 800cd24:	08011820 	.word	0x08011820
 800cd28:	08011dbc 	.word	0x08011dbc

0800cd2c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800cd2c:	b500      	push	{lr}
 800cd2e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800cd30:	2300      	movs	r3, #0
 800cd32:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800cd34:	7803      	ldrb	r3, [r0, #0]
 800cd36:	3b0b      	subs	r3, #11
 800cd38:	2b2d      	cmp	r3, #45	; 0x2d
 800cd3a:	d82f      	bhi.n	800cd9c <RegionEU868GetPhyParam+0x70>
 800cd3c:	e8df f003 	tbb	[pc, r3]
 800cd40:	3f393633 	.word	0x3f393633
 800cd44:	504c4845 	.word	0x504c4845
 800cd48:	2e5c5854 	.word	0x2e5c5854
 800cd4c:	6e682e65 	.word	0x6e682e65
 800cd50:	2e2e7774 	.word	0x2e2e7774
 800cd54:	2e177f7b 	.word	0x2e177f7b
 800cd58:	2e2e2e2e 	.word	0x2e2e2e2e
 800cd5c:	2e2e2e2e 	.word	0x2e2e2e2e
 800cd60:	2e2e2e2e 	.word	0x2e2e2e2e
 800cd64:	2e8c8582 	.word	0x2e8c8582
 800cd68:	2e928f2e 	.word	0x2e928f2e
 800cd6c:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800cd6e:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800cd72:	f88d 3004 	strb.w	r3, [sp, #4]
 800cd76:	2307      	movs	r3, #7
 800cd78:	f88d 3005 	strb.w	r3, [sp, #5]
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	f88d 3006 	strb.w	r3, [sp, #6]
 800cd82:	2310      	movs	r3, #16
 800cd84:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800cd88:	4b3e      	ldr	r3, [pc, #248]	; (800ce84 <RegionEU868GetPhyParam+0x158>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800cd90:	9202      	str	r2, [sp, #8]
 800cd92:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800cd94:	a801      	add	r0, sp, #4
 800cd96:	f7ff fedb 	bl	800cb50 <RegionCommonGetNextLowerTxDr>
 800cd9a:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800cd9c:	9804      	ldr	r0, [sp, #16]
 800cd9e:	9005      	str	r0, [sp, #20]
}
 800cda0:	b007      	add	sp, #28
 800cda2:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800cda6:	2340      	movs	r3, #64	; 0x40
 800cda8:	9304      	str	r3, [sp, #16]
            break;
 800cdaa:	e7f7      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800cdac:	2320      	movs	r3, #32
 800cdae:	9304      	str	r3, [sp, #16]
            break;
 800cdb0:	e7f4      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800cdb2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cdb6:	4a34      	ldr	r2, [pc, #208]	; (800ce88 <RegionEU868GetPhyParam+0x15c>)
 800cdb8:	5cd3      	ldrb	r3, [r2, r3]
 800cdba:	9304      	str	r3, [sp, #16]
            break;
 800cdbc:	e7ee      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800cdbe:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800cdc2:	4a32      	ldr	r2, [pc, #200]	; (800ce8c <RegionEU868GetPhyParam+0x160>)
 800cdc4:	5cd3      	ldrb	r3, [r2, r3]
 800cdc6:	9304      	str	r3, [sp, #16]
            break;
 800cdc8:	e7e8      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	9304      	str	r3, [sp, #16]
            break;
 800cdce:	e7e5      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800cdd0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800cdd4:	9304      	str	r3, [sp, #16]
            break;
 800cdd6:	e7e1      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800cdd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cddc:	9304      	str	r3, [sp, #16]
            break;
 800cdde:	e7dd      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800cde0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cde4:	9304      	str	r3, [sp, #16]
            break;
 800cde6:	e7d9      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800cde8:	f241 3388 	movw	r3, #5000	; 0x1388
 800cdec:	9304      	str	r3, [sp, #16]
            break;
 800cdee:	e7d5      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800cdf0:	f241 7370 	movw	r3, #6000	; 0x1770
 800cdf4:	9304      	str	r3, [sp, #16]
            break;
 800cdf6:	e7d1      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800cdf8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cdfc:	4824      	ldr	r0, [pc, #144]	; (800ce90 <RegionEU868GetPhyParam+0x164>)
 800cdfe:	f001 fc11 	bl	800e624 <randr>
 800ce02:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800ce06:	9004      	str	r0, [sp, #16]
            break;
 800ce08:	e7c8      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800ce0a:	4b22      	ldr	r3, [pc, #136]	; (800ce94 <RegionEU868GetPhyParam+0x168>)
 800ce0c:	9304      	str	r3, [sp, #16]
            break;
 800ce0e:	e7c5      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ce10:	4b1c      	ldr	r3, [pc, #112]	; (800ce84 <RegionEU868GetPhyParam+0x158>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ce18:	9304      	str	r3, [sp, #16]
            break;
 800ce1a:	e7bf      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800ce1c:	4b19      	ldr	r3, [pc, #100]	; (800ce84 <RegionEU868GetPhyParam+0x158>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800ce24:	9304      	str	r3, [sp, #16]
            break;
 800ce26:	e7b9      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800ce28:	2310      	movs	r3, #16
 800ce2a:	9304      	str	r3, [sp, #16]
            break;
 800ce2c:	e7b6      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800ce2e:	4b15      	ldr	r3, [pc, #84]	; (800ce84 <RegionEU868GetPhyParam+0x158>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	9304      	str	r3, [sp, #16]
            break;
 800ce34:	e7b2      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800ce36:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800ce3a:	9304      	str	r3, [sp, #16]
            break;
 800ce3c:	e7ae      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800ce3e:	4b16      	ldr	r3, [pc, #88]	; (800ce98 <RegionEU868GetPhyParam+0x16c>)
 800ce40:	9304      	str	r3, [sp, #16]
            break;
 800ce42:	e7ab      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800ce44:	4b13      	ldr	r3, [pc, #76]	; (800ce94 <RegionEU868GetPhyParam+0x168>)
 800ce46:	9304      	str	r3, [sp, #16]
            break;
 800ce48:	e7a8      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800ce4a:	2311      	movs	r3, #17
 800ce4c:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800ce50:	2301      	movs	r3, #1
 800ce52:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800ce56:	e7a1      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	9304      	str	r3, [sp, #16]
            break;
 800ce5c:	e79e      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800ce5e:	4b0d      	ldr	r3, [pc, #52]	; (800ce94 <RegionEU868GetPhyParam+0x168>)
 800ce60:	9304      	str	r3, [sp, #16]
            break;
 800ce62:	e79b      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800ce64:	2303      	movs	r3, #3
 800ce66:	9304      	str	r3, [sp, #16]
            break;
 800ce68:	e798      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800ce6a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ce6e:	4a0b      	ldr	r2, [pc, #44]	; (800ce9c <RegionEU868GetPhyParam+0x170>)
 800ce70:	5cd3      	ldrb	r3, [r2, r3]
 800ce72:	9304      	str	r3, [sp, #16]
            break;
 800ce74:	e792      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800ce76:	490a      	ldr	r1, [pc, #40]	; (800cea0 <RegionEU868GetPhyParam+0x174>)
 800ce78:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800ce7c:	f7ff fe8c 	bl	800cb98 <RegionCommonGetBandwidth>
 800ce80:	9004      	str	r0, [sp, #16]
            break;
 800ce82:	e78b      	b.n	800cd9c <RegionEU868GetPhyParam+0x70>
 800ce84:	20000e30 	.word	0x20000e30
 800ce88:	08011848 	.word	0x08011848
 800ce8c:	08011850 	.word	0x08011850
 800ce90:	fffffc18 	.word	0xfffffc18
 800ce94:	33d3e608 	.word	0x33d3e608
 800ce98:	4009999a 	.word	0x4009999a
 800ce9c:	08011840 	.word	0x08011840
 800cea0:	08011820 	.word	0x08011820

0800cea4 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800cea4:	b510      	push	{r4, lr}
 800cea6:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800cea8:	4b0b      	ldr	r3, [pc, #44]	; (800ced8 <RegionEU868SetBandTxDone+0x34>)
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	7803      	ldrb	r3, [r0, #0]
 800ceae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ceb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ceb6:	7a5b      	ldrb	r3, [r3, #9]
 800ceb8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800cebc:	4b07      	ldr	r3, [pc, #28]	; (800cedc <RegionEU868SetBandTxDone+0x38>)
 800cebe:	681c      	ldr	r4, [r3, #0]
 800cec0:	6903      	ldr	r3, [r0, #16]
 800cec2:	9300      	str	r3, [sp, #0]
 800cec4:	68c3      	ldr	r3, [r0, #12]
 800cec6:	7842      	ldrb	r2, [r0, #1]
 800cec8:	6881      	ldr	r1, [r0, #8]
 800ceca:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800cece:	f7ff fc18 	bl	800c702 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800ced2:	b002      	add	sp, #8
 800ced4:	bd10      	pop	{r4, pc}
 800ced6:	bf00      	nop
 800ced8:	20000e30 	.word	0x20000e30
 800cedc:	20000e2c 	.word	0x20000e2c

0800cee0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800cee0:	b530      	push	{r4, r5, lr}
 800cee2:	b0a5      	sub	sp, #148	; 0x94
 800cee4:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800cee6:	2290      	movs	r2, #144	; 0x90
 800cee8:	2100      	movs	r1, #0
 800ceea:	4668      	mov	r0, sp
 800ceec:	f004 f828 	bl	8010f40 <memset>
 800cef0:	2364      	movs	r3, #100	; 0x64
 800cef2:	f8ad 3000 	strh.w	r3, [sp]
 800cef6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800cefa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cefe:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800cf02:	210a      	movs	r1, #10
 800cf04:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800cf08:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800cf0c:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800cf10:	7b23      	ldrb	r3, [r4, #12]
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d032      	beq.n	800cf7c <RegionEU868InitDefaults+0x9c>
 800cf16:	2b02      	cmp	r3, #2
 800cf18:	d03e      	beq.n	800cf98 <RegionEU868InitDefaults+0xb8>
 800cf1a:	b10b      	cbz	r3, 800cf20 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800cf1c:	b025      	add	sp, #148	; 0x94
 800cf1e:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d0fa      	beq.n	800cf1c <RegionEU868InitDefaults+0x3c>
 800cf26:	6863      	ldr	r3, [r4, #4]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d0f7      	beq.n	800cf1c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800cf2c:	4d1f      	ldr	r5, [pc, #124]	; (800cfac <RegionEU868InitDefaults+0xcc>)
 800cf2e:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 800cf30:	68a0      	ldr	r0, [r4, #8]
 800cf32:	4b1f      	ldr	r3, [pc, #124]	; (800cfb0 <RegionEU868InitDefaults+0xd0>)
 800cf34:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800cf36:	2290      	movs	r2, #144	; 0x90
 800cf38:	4669      	mov	r1, sp
 800cf3a:	f001 fb80 	bl	800e63e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800cf3e:	682c      	ldr	r4, [r5, #0]
 800cf40:	4b1c      	ldr	r3, [pc, #112]	; (800cfb4 <RegionEU868InitDefaults+0xd4>)
 800cf42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800cf4a:	f104 0c0c 	add.w	ip, r4, #12
 800cf4e:	f103 020c 	add.w	r2, r3, #12
 800cf52:	ca07      	ldmia	r2, {r0, r1, r2}
 800cf54:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800cf58:	f104 0c18 	add.w	ip, r4, #24
 800cf5c:	3318      	adds	r3, #24
 800cf5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf62:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800cf66:	2307      	movs	r3, #7
 800cf68:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800cf72:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800cf76:	f7ff fbb5 	bl	800c6e4 <RegionCommonChanMaskCopy>
            break;
 800cf7a:	e7cf      	b.n	800cf1c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800cf7c:	4b0b      	ldr	r3, [pc, #44]	; (800cfac <RegionEU868InitDefaults+0xcc>)
 800cf7e:	6818      	ldr	r0, [r3, #0]
 800cf80:	2300      	movs	r3, #0
 800cf82:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800cf84:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800cf86:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800cf8e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800cf92:	f7ff fba7 	bl	800c6e4 <RegionCommonChanMaskCopy>
            break;
 800cf96:	e7c1      	b.n	800cf1c <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800cf98:	4b04      	ldr	r3, [pc, #16]	; (800cfac <RegionEU868InitDefaults+0xcc>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800cfa0:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800cfa4:	430a      	orrs	r2, r1
 800cfa6:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800cfaa:	e7b7      	b.n	800cf1c <RegionEU868InitDefaults+0x3c>
 800cfac:	20000e30 	.word	0x20000e30
 800cfb0:	20000e2c 	.word	0x20000e2c
 800cfb4:	080110b0 	.word	0x080110b0

0800cfb8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800cfb8:	b500      	push	{lr}
 800cfba:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800cfbc:	290f      	cmp	r1, #15
 800cfbe:	d83c      	bhi.n	800d03a <RegionEU868Verify+0x82>
 800cfc0:	e8df f001 	tbb	[pc, r1]
 800cfc4:	3b3b3b0a 	.word	0x3b3b3b0a
 800cfc8:	271d133b 	.word	0x271d133b
 800cfcc:	3b31313b 	.word	0x3b31313b
 800cfd0:	083b3b3b 	.word	0x083b3b3b
 800cfd4:	2001      	movs	r0, #1
 800cfd6:	e031      	b.n	800d03c <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800cfde:	f10d 0107 	add.w	r1, sp, #7
 800cfe2:	6800      	ldr	r0, [r0, #0]
 800cfe4:	f7ff fe1c 	bl	800cc20 <VerifyRfFreq>
 800cfe8:	e028      	b.n	800d03c <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800cfea:	2207      	movs	r2, #7
 800cfec:	2100      	movs	r1, #0
 800cfee:	f990 0000 	ldrsb.w	r0, [r0]
 800cff2:	f7ff fb06 	bl	800c602 <RegionCommonValueInRange>
 800cff6:	3800      	subs	r0, #0
 800cff8:	bf18      	it	ne
 800cffa:	2001      	movne	r0, #1
 800cffc:	e01e      	b.n	800d03c <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800cffe:	2205      	movs	r2, #5
 800d000:	2100      	movs	r1, #0
 800d002:	f990 0000 	ldrsb.w	r0, [r0]
 800d006:	f7ff fafc 	bl	800c602 <RegionCommonValueInRange>
 800d00a:	3800      	subs	r0, #0
 800d00c:	bf18      	it	ne
 800d00e:	2001      	movne	r0, #1
 800d010:	e014      	b.n	800d03c <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800d012:	2207      	movs	r2, #7
 800d014:	2100      	movs	r1, #0
 800d016:	f990 0000 	ldrsb.w	r0, [r0]
 800d01a:	f7ff faf2 	bl	800c602 <RegionCommonValueInRange>
 800d01e:	3800      	subs	r0, #0
 800d020:	bf18      	it	ne
 800d022:	2001      	movne	r0, #1
 800d024:	e00a      	b.n	800d03c <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800d026:	2207      	movs	r2, #7
 800d028:	2100      	movs	r1, #0
 800d02a:	f990 0000 	ldrsb.w	r0, [r0]
 800d02e:	f7ff fae8 	bl	800c602 <RegionCommonValueInRange>
 800d032:	3800      	subs	r0, #0
 800d034:	bf18      	it	ne
 800d036:	2001      	movne	r0, #1
 800d038:	e000      	b.n	800d03c <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800d03a:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800d03c:	b003      	add	sp, #12
 800d03e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d044 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d044:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800d046:	7903      	ldrb	r3, [r0, #4]
 800d048:	b11b      	cbz	r3, 800d052 <RegionEU868ChanMaskSet+0xe>
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d00b      	beq.n	800d066 <RegionEU868ChanMaskSet+0x22>
 800d04e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800d050:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d052:	4b0a      	ldr	r3, [pc, #40]	; (800d07c <RegionEU868ChanMaskSet+0x38>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2201      	movs	r2, #1
 800d058:	6801      	ldr	r1, [r0, #0]
 800d05a:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800d05e:	f7ff fb41 	bl	800c6e4 <RegionCommonChanMaskCopy>
    return true;
 800d062:	2001      	movs	r0, #1
            break;
 800d064:	e7f4      	b.n	800d050 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800d066:	4b05      	ldr	r3, [pc, #20]	; (800d07c <RegionEU868ChanMaskSet+0x38>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2201      	movs	r2, #1
 800d06c:	6801      	ldr	r1, [r0, #0]
 800d06e:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800d072:	f7ff fb37 	bl	800c6e4 <RegionCommonChanMaskCopy>
    return true;
 800d076:	2001      	movs	r0, #1
            break;
 800d078:	e7ea      	b.n	800d050 <RegionEU868ChanMaskSet+0xc>
 800d07a:	bf00      	nop
 800d07c:	20000e30 	.word	0x20000e30

0800d080 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d082:	b083      	sub	sp, #12
 800d084:	460e      	mov	r6, r1
 800d086:	4617      	mov	r7, r2
 800d088:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800d08a:	2807      	cmp	r0, #7
 800d08c:	bfa8      	it	ge
 800d08e:	2007      	movge	r0, #7
 800d090:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800d092:	4913      	ldr	r1, [pc, #76]	; (800d0e0 <RegionEU868ComputeRxWindowParameters+0x60>)
 800d094:	f7ff fd80 	bl	800cb98 <RegionCommonGetBandwidth>
 800d098:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800d09a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d09e:	2b07      	cmp	r3, #7
 800d0a0:	d017      	beq.n	800d0d2 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800d0a2:	4a0f      	ldr	r2, [pc, #60]	; (800d0e0 <RegionEU868ComputeRxWindowParameters+0x60>)
 800d0a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d0a8:	4a0e      	ldr	r2, [pc, #56]	; (800d0e4 <RegionEU868ComputeRxWindowParameters+0x64>)
 800d0aa:	5cd0      	ldrb	r0, [r2, r3]
 800d0ac:	f7ff fc40 	bl	800c930 <RegionCommonComputeSymbolTimeLoRa>
 800d0b0:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d0b2:	4b0d      	ldr	r3, [pc, #52]	; (800d0e8 <RegionEU868ComputeRxWindowParameters+0x68>)
 800d0b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0b6:	4798      	blx	r3
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	f104 020c 	add.w	r2, r4, #12
 800d0be:	9201      	str	r2, [sp, #4]
 800d0c0:	3408      	adds	r4, #8
 800d0c2:	9400      	str	r4, [sp, #0]
 800d0c4:	463a      	mov	r2, r7
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	f7ff fc3f 	bl	800c94c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800d0ce:	b003      	add	sp, #12
 800d0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800d0d2:	4a04      	ldr	r2, [pc, #16]	; (800d0e4 <RegionEU868ComputeRxWindowParameters+0x64>)
 800d0d4:	5cd0      	ldrb	r0, [r2, r3]
 800d0d6:	f7ff fc33 	bl	800c940 <RegionCommonComputeSymbolTimeFsk>
 800d0da:	4605      	mov	r5, r0
 800d0dc:	e7e9      	b.n	800d0b2 <RegionEU868ComputeRxWindowParameters+0x32>
 800d0de:	bf00      	nop
 800d0e0:	08011820 	.word	0x08011820
 800d0e4:	08011840 	.word	0x08011840
 800d0e8:	08011dbc 	.word	0x08011dbc

0800d0ec <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0f0:	b08a      	sub	sp, #40	; 0x28
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800d0f6:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800d0fa:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800d0fe:	4b37      	ldr	r3, [pc, #220]	; (800d1dc <RegionEU868RxConfig+0xf0>)
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	4798      	blx	r3
 800d104:	2800      	cmp	r0, #0
 800d106:	d167      	bne.n	800d1d8 <RegionEU868RxConfig+0xec>
 800d108:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800d10a:	7ce3      	ldrb	r3, [r4, #19]
 800d10c:	b983      	cbnz	r3, 800d130 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d10e:	4b34      	ldr	r3, [pc, #208]	; (800d1e0 <RegionEU868RxConfig+0xf4>)
 800d110:	681a      	ldr	r2, [r3, #0]
 800d112:	7823      	ldrb	r3, [r4, #0]
 800d114:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d118:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800d11c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d120:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d124:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800d128:	f1b8 0f00 	cmp.w	r8, #0
 800d12c:	d100      	bne.n	800d130 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800d12e:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800d130:	4b2c      	ldr	r3, [pc, #176]	; (800d1e4 <RegionEU868RxConfig+0xf8>)
 800d132:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800d136:	4b29      	ldr	r3, [pc, #164]	; (800d1dc <RegionEU868RxConfig+0xf0>)
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	4640      	mov	r0, r8
 800d13c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800d13e:	2d07      	cmp	r5, #7
 800d140:	d02b      	beq.n	800d19a <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800d142:	4b26      	ldr	r3, [pc, #152]	; (800d1dc <RegionEU868RxConfig+0xf0>)
 800d144:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800d148:	7ca3      	ldrb	r3, [r4, #18]
 800d14a:	9309      	str	r3, [sp, #36]	; 0x24
 800d14c:	2601      	movs	r6, #1
 800d14e:	9608      	str	r6, [sp, #32]
 800d150:	2300      	movs	r3, #0
 800d152:	9307      	str	r3, [sp, #28]
 800d154:	9306      	str	r3, [sp, #24]
 800d156:	9305      	str	r3, [sp, #20]
 800d158:	9304      	str	r3, [sp, #16]
 800d15a:	9303      	str	r3, [sp, #12]
 800d15c:	8922      	ldrh	r2, [r4, #8]
 800d15e:	9202      	str	r2, [sp, #8]
 800d160:	2208      	movs	r2, #8
 800d162:	9201      	str	r2, [sp, #4]
 800d164:	9300      	str	r3, [sp, #0]
 800d166:	4633      	mov	r3, r6
 800d168:	464a      	mov	r2, r9
 800d16a:	78a1      	ldrb	r1, [r4, #2]
 800d16c:	4630      	mov	r0, r6
 800d16e:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800d170:	7c63      	ldrb	r3, [r4, #17]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d02d      	beq.n	800d1d2 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800d176:	4b1c      	ldr	r3, [pc, #112]	; (800d1e8 <RegionEU868RxConfig+0xfc>)
 800d178:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800d17a:	4b18      	ldr	r3, [pc, #96]	; (800d1dc <RegionEU868RxConfig+0xf0>)
 800d17c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d17e:	310d      	adds	r1, #13
 800d180:	b2c9      	uxtb	r1, r1
 800d182:	4630      	mov	r0, r6
 800d184:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800d186:	462a      	mov	r2, r5
 800d188:	4641      	mov	r1, r8
 800d18a:	7ce0      	ldrb	r0, [r4, #19]
 800d18c:	f7ff fd16 	bl	800cbbc <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800d190:	703d      	strb	r5, [r7, #0]
    return true;
 800d192:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800d194:	b00a      	add	sp, #40	; 0x28
 800d196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800d19a:	4b10      	ldr	r3, [pc, #64]	; (800d1dc <RegionEU868RxConfig+0xf0>)
 800d19c:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800d1a0:	7ca3      	ldrb	r3, [r4, #18]
 800d1a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a4:	2000      	movs	r0, #0
 800d1a6:	9008      	str	r0, [sp, #32]
 800d1a8:	9007      	str	r0, [sp, #28]
 800d1aa:	9006      	str	r0, [sp, #24]
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	9305      	str	r3, [sp, #20]
 800d1b0:	9004      	str	r0, [sp, #16]
 800d1b2:	9003      	str	r0, [sp, #12]
 800d1b4:	8923      	ldrh	r3, [r4, #8]
 800d1b6:	9302      	str	r3, [sp, #8]
 800d1b8:	2305      	movs	r3, #5
 800d1ba:	9301      	str	r3, [sp, #4]
 800d1bc:	4b0b      	ldr	r3, [pc, #44]	; (800d1ec <RegionEU868RxConfig+0x100>)
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d1c6:	fb02 f209 	mul.w	r2, r2, r9
 800d1ca:	f24c 3150 	movw	r1, #50000	; 0xc350
 800d1ce:	47d0      	blx	sl
 800d1d0:	e7ce      	b.n	800d170 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800d1d2:	4b07      	ldr	r3, [pc, #28]	; (800d1f0 <RegionEU868RxConfig+0x104>)
 800d1d4:	5d59      	ldrb	r1, [r3, r5]
 800d1d6:	e7d0      	b.n	800d17a <RegionEU868RxConfig+0x8e>
        return false;
 800d1d8:	2000      	movs	r0, #0
 800d1da:	e7db      	b.n	800d194 <RegionEU868RxConfig+0xa8>
 800d1dc:	08011dbc 	.word	0x08011dbc
 800d1e0:	20000e30 	.word	0x20000e30
 800d1e4:	08011840 	.word	0x08011840
 800d1e8:	08011850 	.word	0x08011850
 800d1ec:	00014585 	.word	0x00014585
 800d1f0:	08011848 	.word	0x08011848

0800d1f4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f8:	b08d      	sub	sp, #52	; 0x34
 800d1fa:	4604      	mov	r4, r0
 800d1fc:	460f      	mov	r7, r1
 800d1fe:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800d200:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800d204:	4a42      	ldr	r2, [pc, #264]	; (800d310 <RegionEU868TxConfig+0x11c>)
 800d206:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800d20a:	4d42      	ldr	r5, [pc, #264]	; (800d314 <RegionEU868TxConfig+0x120>)
 800d20c:	682a      	ldr	r2, [r5, #0]
 800d20e:	7803      	ldrb	r3, [r0, #0]
 800d210:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d214:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d218:	7a5b      	ldrb	r3, [r3, #9]
 800d21a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d21e:	4a3e      	ldr	r2, [pc, #248]	; (800d318 <RegionEU868TxConfig+0x124>)
 800d220:	6812      	ldr	r2, [r2, #0]
 800d222:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d226:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800d22a:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800d22e:	f7ff fcae 	bl	800cb8e <RegionCommonLimitTxPower>
 800d232:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800d234:	4939      	ldr	r1, [pc, #228]	; (800d31c <RegionEU868TxConfig+0x128>)
 800d236:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d23a:	f7ff fcad 	bl	800cb98 <RegionCommonGetBandwidth>
 800d23e:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800d240:	68a2      	ldr	r2, [r4, #8]
 800d242:	6861      	ldr	r1, [r4, #4]
 800d244:	4630      	mov	r0, r6
 800d246:	f7ff fbbd 	bl	800c9c4 <RegionCommonComputeTxPower>
 800d24a:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800d24c:	4b34      	ldr	r3, [pc, #208]	; (800d320 <RegionEU868TxConfig+0x12c>)
 800d24e:	68da      	ldr	r2, [r3, #12]
 800d250:	6829      	ldr	r1, [r5, #0]
 800d252:	7823      	ldrb	r3, [r4, #0]
 800d254:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d258:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800d25c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800d25e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d262:	2b07      	cmp	r3, #7
 800d264:	d031      	beq.n	800d2ca <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800d266:	4b2e      	ldr	r3, [pc, #184]	; (800d320 <RegionEU868TxConfig+0x12c>)
 800d268:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800d26c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d270:	9308      	str	r3, [sp, #32]
 800d272:	2200      	movs	r2, #0
 800d274:	9207      	str	r2, [sp, #28]
 800d276:	9206      	str	r2, [sp, #24]
 800d278:	9205      	str	r2, [sp, #20]
 800d27a:	2501      	movs	r5, #1
 800d27c:	9504      	str	r5, [sp, #16]
 800d27e:	9203      	str	r2, [sp, #12]
 800d280:	2308      	movs	r3, #8
 800d282:	9302      	str	r3, [sp, #8]
 800d284:	9501      	str	r5, [sp, #4]
 800d286:	f8cd a000 	str.w	sl, [sp]
 800d28a:	464b      	mov	r3, r9
 800d28c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d28e:	4628      	mov	r0, r5
 800d290:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800d292:	4b20      	ldr	r3, [pc, #128]	; (800d314 <RegionEU868TxConfig+0x120>)
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	7823      	ldrb	r3, [r4, #0]
 800d298:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d29c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800d2a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d2a4:	f7ff fcac 	bl	800cc00 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800d2a8:	89a1      	ldrh	r1, [r4, #12]
 800d2aa:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d2ae:	f7ff fd0b 	bl	800ccc8 <GetTimeOnAir>
 800d2b2:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800d2b6:	4b1a      	ldr	r3, [pc, #104]	; (800d320 <RegionEU868TxConfig+0x12c>)
 800d2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2ba:	7b21      	ldrb	r1, [r4, #12]
 800d2bc:	4628      	mov	r0, r5
 800d2be:	4798      	blx	r3

    *txPower = txPowerLimited;
 800d2c0:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800d2c2:	2001      	movs	r0, #1
 800d2c4:	b00d      	add	sp, #52	; 0x34
 800d2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800d2ca:	4b15      	ldr	r3, [pc, #84]	; (800d320 <RegionEU868TxConfig+0x12c>)
 800d2cc:	69dd      	ldr	r5, [r3, #28]
 800d2ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d2d2:	fb03 f30a 	mul.w	r3, r3, sl
 800d2d6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800d2da:	9208      	str	r2, [sp, #32]
 800d2dc:	f04f 0b00 	mov.w	fp, #0
 800d2e0:	f8cd b01c 	str.w	fp, [sp, #28]
 800d2e4:	f8cd b018 	str.w	fp, [sp, #24]
 800d2e8:	f8cd b014 	str.w	fp, [sp, #20]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	9204      	str	r2, [sp, #16]
 800d2f0:	f8cd b00c 	str.w	fp, [sp, #12]
 800d2f4:	2205      	movs	r2, #5
 800d2f6:	9202      	str	r2, [sp, #8]
 800d2f8:	f8cd b004 	str.w	fp, [sp, #4]
 800d2fc:	9300      	str	r3, [sp, #0]
 800d2fe:	464b      	mov	r3, r9
 800d300:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800d304:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d306:	4658      	mov	r0, fp
 800d308:	47a8      	blx	r5
        modem = MODEM_FSK;
 800d30a:	465d      	mov	r5, fp
 800d30c:	e7c1      	b.n	800d292 <RegionEU868TxConfig+0x9e>
 800d30e:	bf00      	nop
 800d310:	08011840 	.word	0x08011840
 800d314:	20000e30 	.word	0x20000e30
 800d318:	20000e2c 	.word	0x20000e2c
 800d31c:	08011820 	.word	0x08011820
 800d320:	08011dbc 	.word	0x08011dbc

0800d324 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d328:	b08f      	sub	sp, #60	; 0x3c
 800d32a:	4605      	mov	r5, r0
 800d32c:	4689      	mov	r9, r1
 800d32e:	4690      	mov	r8, r2
 800d330:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800d332:	2400      	movs	r4, #0
 800d334:	940c      	str	r4, [sp, #48]	; 0x30
 800d336:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800d33a:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800d33e:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d340:	e030      	b.n	800d3a4 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d342:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800d346:	2607      	movs	r6, #7
 800d348:	e012      	b.n	800d370 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800d34a:	4a57      	ldr	r2, [pc, #348]	; (800d4a8 <RegionEU868LinkAdrReq+0x184>)
 800d34c:	6812      	ldr	r2, [r2, #0]
 800d34e:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800d352:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d356:	b13a      	cbz	r2, 800d368 <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800d358:	2201      	movs	r2, #1
 800d35a:	fa02 f20c 	lsl.w	r2, r2, ip
 800d35e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800d362:	430a      	orrs	r2, r1
 800d364:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800d368:	f10c 0c01 	add.w	ip, ip, #1
 800d36c:	fa5f fc8c 	uxtb.w	ip, ip
 800d370:	f1bc 0f0f 	cmp.w	ip, #15
 800d374:	d816      	bhi.n	800d3a4 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800d376:	2b06      	cmp	r3, #6
 800d378:	d0e7      	beq.n	800d34a <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d37a:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800d37e:	fa4e fe0c 	asr.w	lr, lr, ip
 800d382:	f01e 0f01 	tst.w	lr, #1
 800d386:	d0ef      	beq.n	800d368 <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800d388:	4a47      	ldr	r2, [pc, #284]	; (800d4a8 <RegionEU868LinkAdrReq+0x184>)
 800d38a:	6812      	ldr	r2, [r2, #0]
 800d38c:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800d390:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800d394:	2a00      	cmp	r2, #0
 800d396:	d1e7      	bne.n	800d368 <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800d398:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800d39c:	e7e4      	b.n	800d368 <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800d39e:	2606      	movs	r6, #6
 800d3a0:	e000      	b.n	800d3a4 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800d3a2:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800d3a4:	7a2b      	ldrb	r3, [r5, #8]
 800d3a6:	42a3      	cmp	r3, r4
 800d3a8:	d918      	bls.n	800d3dc <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800d3aa:	6868      	ldr	r0, [r5, #4]
 800d3ac:	a90c      	add	r1, sp, #48	; 0x30
 800d3ae:	4420      	add	r0, r4
 800d3b0:	f7ff fa48 	bl	800c844 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800d3b4:	b190      	cbz	r0, 800d3dc <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800d3b6:	4404      	add	r4, r0
 800d3b8:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800d3ba:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800d3be:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800d3c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d3c6:	b90b      	cbnz	r3, 800d3cc <RegionEU868LinkAdrReq+0xa8>
 800d3c8:	2a00      	cmp	r2, #0
 800d3ca:	d0e8      	beq.n	800d39e <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800d3cc:	1e5a      	subs	r2, r3, #1
 800d3ce:	b2d2      	uxtb	r2, r2
 800d3d0:	2a04      	cmp	r2, #4
 800d3d2:	d9e6      	bls.n	800d3a2 <RegionEU868LinkAdrReq+0x7e>
 800d3d4:	2b06      	cmp	r3, #6
 800d3d6:	d9b4      	bls.n	800d342 <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800d3d8:	2606      	movs	r6, #6
 800d3da:	e7e3      	b.n	800d3a4 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800d3dc:	2302      	movs	r3, #2
 800d3de:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800d3e2:	7a6b      	ldrb	r3, [r5, #9]
 800d3e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800d3e8:	a80a      	add	r0, sp, #40	; 0x28
 800d3ea:	f7ff fc9f 	bl	800cd2c <RegionEU868GetPhyParam>
 800d3ee:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800d3f0:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800d3f4:	7aab      	ldrb	r3, [r5, #10]
 800d3f6:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800d3fa:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800d3fe:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800d402:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800d406:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800d40a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800d40e:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800d412:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800d416:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800d41a:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800d41e:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800d422:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800d426:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800d42a:	2310      	movs	r3, #16
 800d42c:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800d430:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800d434:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800d436:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800d43a:	2307      	movs	r3, #7
 800d43c:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800d440:	4a19      	ldr	r2, [pc, #100]	; (800d4a8 <RegionEU868LinkAdrReq+0x184>)
 800d442:	6812      	ldr	r2, [r2, #0]
 800d444:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800d446:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800d44a:	2300      	movs	r3, #0
 800d44c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800d450:	682b      	ldr	r3, [r5, #0]
 800d452:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800d454:	ab0c      	add	r3, sp, #48	; 0x30
 800d456:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800d45a:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800d45e:	a801      	add	r0, sp, #4
 800d460:	f7ff fa0e 	bl	800c880 <RegionCommonLinkAdrReqVerifyParams>
 800d464:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800d466:	2807      	cmp	r0, #7
 800d468:	d010      	beq.n	800d48c <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800d46a:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800d46e:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800d472:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800d476:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800d47a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800d47e:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800d480:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d482:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800d484:	4628      	mov	r0, r5
 800d486:	b00f      	add	sp, #60	; 0x3c
 800d488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800d48c:	4e06      	ldr	r6, [pc, #24]	; (800d4a8 <RegionEU868LinkAdrReq+0x184>)
 800d48e:	6830      	ldr	r0, [r6, #0]
 800d490:	220c      	movs	r2, #12
 800d492:	2100      	movs	r1, #0
 800d494:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d498:	f001 f8e9 	bl	800e66e <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800d49c:	6833      	ldr	r3, [r6, #0]
 800d49e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800d4a2:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800d4a6:	e7e0      	b.n	800d46a <RegionEU868LinkAdrReq+0x146>
 800d4a8:	20000e30 	.word	0x20000e30

0800d4ac <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d4ac:	b530      	push	{r4, r5, lr}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800d4b8:	f10d 0107 	add.w	r1, sp, #7
 800d4bc:	6840      	ldr	r0, [r0, #4]
 800d4be:	f7ff fbaf 	bl	800cc20 <VerifyRfFreq>
 800d4c2:	b1a8      	cbz	r0, 800d4f0 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800d4c4:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800d4c6:	2207      	movs	r2, #7
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	f994 0000 	ldrsb.w	r0, [r4]
 800d4ce:	f7ff f898 	bl	800c602 <RegionCommonValueInRange>
 800d4d2:	b908      	cbnz	r0, 800d4d8 <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800d4d4:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800d4d8:	2205      	movs	r2, #5
 800d4da:	2100      	movs	r1, #0
 800d4dc:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800d4e0:	f7ff f88f 	bl	800c602 <RegionCommonValueInRange>
 800d4e4:	b908      	cbnz	r0, 800d4ea <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800d4e6:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	b003      	add	sp, #12
 800d4ee:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800d4f0:	2506      	movs	r5, #6
 800d4f2:	e7e8      	b.n	800d4c6 <RegionEU868RxParamSetupReq+0x1a>

0800d4f4 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800d4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f8:	4770      	bx	lr
	...

0800d4fc <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800d4fc:	b510      	push	{r4, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d502:	2300      	movs	r3, #0
 800d504:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800d508:	f10d 0107 	add.w	r1, sp, #7
 800d50c:	6840      	ldr	r0, [r0, #4]
 800d50e:	f7ff fb87 	bl	800cc20 <VerifyRfFreq>
 800d512:	b178      	cbz	r0, 800d534 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 800d514:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800d516:	4b0c      	ldr	r3, [pc, #48]	; (800d548 <RegionEU868DlChannelReq+0x4c>)
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	7823      	ldrb	r3, [r4, #0]
 800d51c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800d520:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800d524:	b909      	cbnz	r1, 800d52a <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 800d526:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 800d52a:	2803      	cmp	r0, #3
 800d52c:	d004      	beq.n	800d538 <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800d52e:	b240      	sxtb	r0, r0
 800d530:	b002      	add	sp, #8
 800d532:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800d534:	2002      	movs	r0, #2
 800d536:	e7ee      	b.n	800d516 <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800d538:	6861      	ldr	r1, [r4, #4]
 800d53a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d53e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d542:	6059      	str	r1, [r3, #4]
 800d544:	e7f3      	b.n	800d52e <RegionEU868DlChannelReq+0x32>
 800d546:	bf00      	nop
 800d548:	20000e30 	.word	0x20000e30

0800d54c <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800d54c:	4770      	bx	lr
	...

0800d550 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d552:	b097      	sub	sp, #92	; 0x5c
 800d554:	4604      	mov	r4, r0
 800d556:	460f      	mov	r7, r1
 800d558:	4616      	mov	r6, r2
 800d55a:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800d55c:	2100      	movs	r1, #0
 800d55e:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800d562:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800d566:	9111      	str	r1, [sp, #68]	; 0x44
 800d568:	9112      	str	r1, [sp, #72]	; 0x48
 800d56a:	9113      	str	r1, [sp, #76]	; 0x4c
 800d56c:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800d56e:	2307      	movs	r3, #7
 800d570:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800d574:	4b34      	ldr	r3, [pc, #208]	; (800d648 <RegionEU868NextChannel+0xf8>)
 800d576:	6818      	ldr	r0, [r3, #0]
 800d578:	2201      	movs	r2, #1
 800d57a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d57e:	f7ff f89b 	bl	800c6b8 <RegionCommonCountChannels>
 800d582:	b938      	cbnz	r0, 800d594 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d584:	4b30      	ldr	r3, [pc, #192]	; (800d648 <RegionEU868NextChannel+0xf8>)
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800d58c:	f043 0307 	orr.w	r3, r3, #7
 800d590:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800d594:	7a63      	ldrb	r3, [r4, #9]
 800d596:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800d59a:	7a23      	ldrb	r3, [r4, #8]
 800d59c:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800d5a0:	4b29      	ldr	r3, [pc, #164]	; (800d648 <RegionEU868NextChannel+0xf8>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800d5a8:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800d5aa:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800d5ac:	4b27      	ldr	r3, [pc, #156]	; (800d64c <RegionEU868NextChannel+0xfc>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800d5b2:	2310      	movs	r3, #16
 800d5b4:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800d5b8:	f10d 030a 	add.w	r3, sp, #10
 800d5bc:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800d5be:	6823      	ldr	r3, [r4, #0]
 800d5c0:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800d5c2:	6863      	ldr	r3, [r4, #4]
 800d5c4:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800d5c6:	7aa3      	ldrb	r3, [r4, #10]
 800d5c8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800d5cc:	2306      	movs	r3, #6
 800d5ce:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800d5d2:	ab0c      	add	r3, sp, #48	; 0x30
 800d5d4:	f104 020c 	add.w	r2, r4, #12
 800d5d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5dc:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800d5e0:	7d23      	ldrb	r3, [r4, #20]
 800d5e2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800d5e6:	8ae1      	ldrh	r1, [r4, #22]
 800d5e8:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800d5ec:	f7ff fb6c 	bl	800ccc8 <GetTimeOnAir>
 800d5f0:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800d5f2:	ab03      	add	r3, sp, #12
 800d5f4:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800d5f6:	9601      	str	r6, [sp, #4]
 800d5f8:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800d5fc:	9300      	str	r3, [sp, #0]
 800d5fe:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800d602:	aa11      	add	r2, sp, #68	; 0x44
 800d604:	4629      	mov	r1, r5
 800d606:	a809      	add	r0, sp, #36	; 0x24
 800d608:	f7ff fa58 	bl	800cabc <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800d60c:	4604      	mov	r4, r0
 800d60e:	b120      	cbz	r0, 800d61a <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800d610:	280c      	cmp	r0, #12
 800d612:	d00f      	beq.n	800d634 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800d614:	4620      	mov	r0, r4
 800d616:	b017      	add	sp, #92	; 0x5c
 800d618:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800d61a:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800d61e:	3901      	subs	r1, #1
 800d620:	f001 f800 	bl	800e624 <randr>
 800d624:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800d628:	eb0d 0003 	add.w	r0, sp, r3
 800d62c:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800d630:	703b      	strb	r3, [r7, #0]
 800d632:	e7ef      	b.n	800d614 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800d634:	4b04      	ldr	r3, [pc, #16]	; (800d648 <RegionEU868NextChannel+0xf8>)
 800d636:	681a      	ldr	r2, [r3, #0]
 800d638:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800d63c:	f043 0307 	orr.w	r3, r3, #7
 800d640:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800d644:	e7e6      	b.n	800d614 <RegionEU868NextChannel+0xc4>
 800d646:	bf00      	nop
 800d648:	20000e30 	.word	0x20000e30
 800d64c:	20000e2c 	.word	0x20000e2c

0800d650 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800d650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d652:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800d654:	2300      	movs	r3, #0
 800d656:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800d65a:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d65c:	2d02      	cmp	r5, #2
 800d65e:	d94f      	bls.n	800d700 <RegionEU868ChannelAdd+0xb0>
 800d660:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800d662:	2d0f      	cmp	r5, #15
 800d664:	d84e      	bhi.n	800d704 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d666:	6803      	ldr	r3, [r0, #0]
 800d668:	7a18      	ldrb	r0, [r3, #8]
 800d66a:	f340 0003 	sbfx	r0, r0, #0, #4
 800d66e:	2207      	movs	r2, #7
 800d670:	2100      	movs	r1, #0
 800d672:	b240      	sxtb	r0, r0
 800d674:	f7fe ffc5 	bl	800c602 <RegionCommonValueInRange>
 800d678:	2800      	cmp	r0, #0
 800d67a:	d03d      	beq.n	800d6f8 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800d67c:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	7a18      	ldrb	r0, [r3, #8]
 800d682:	f340 1003 	sbfx	r0, r0, #4, #4
 800d686:	2207      	movs	r2, #7
 800d688:	2100      	movs	r1, #0
 800d68a:	b240      	sxtb	r0, r0
 800d68c:	f7fe ffb9 	bl	800c602 <RegionCommonValueInRange>
 800d690:	b900      	cbnz	r0, 800d694 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800d692:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800d694:	6820      	ldr	r0, [r4, #0]
 800d696:	7a03      	ldrb	r3, [r0, #8]
 800d698:	f343 0203 	sbfx	r2, r3, #0, #4
 800d69c:	b252      	sxtb	r2, r2
 800d69e:	f343 1303 	sbfx	r3, r3, #4, #4
 800d6a2:	b25b      	sxtb	r3, r3
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	dd00      	ble.n	800d6aa <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800d6a8:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800d6aa:	f10d 0107 	add.w	r1, sp, #7
 800d6ae:	6800      	ldr	r0, [r0, #0]
 800d6b0:	f7ff fab6 	bl	800cc20 <VerifyRfFreq>
 800d6b4:	b310      	cbz	r0, 800d6fc <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800d6b6:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800d6b8:	b106      	cbz	r6, 800d6bc <RegionEU868ChannelAdd+0x6c>
 800d6ba:	bb33      	cbnz	r3, 800d70a <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800d6bc:	bb3e      	cbnz	r6, 800d70e <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800d6be:	bb43      	cbnz	r3, 800d712 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800d6c0:	4f15      	ldr	r7, [pc, #84]	; (800d718 <RegionEU868ChannelAdd+0xc8>)
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	006e      	lsls	r6, r5, #1
 800d6c6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800d6ca:	220c      	movs	r2, #12
 800d6cc:	6821      	ldr	r1, [r4, #0]
 800d6ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d6d2:	f000 ffb4 	bl	800e63e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800d6d6:	683a      	ldr	r2, [r7, #0]
 800d6d8:	442e      	add	r6, r5
 800d6da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d6de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d6e2:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	fa03 f505 	lsl.w	r5, r3, r5
 800d6ea:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800d6ee:	431d      	orrs	r5, r3
 800d6f0:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800d6f4:	2000      	movs	r0, #0
 800d6f6:	e006      	b.n	800d706 <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800d6f8:	2601      	movs	r6, #1
 800d6fa:	e7c0      	b.n	800d67e <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e7db      	b.n	800d6b8 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800d700:	2006      	movs	r0, #6
 800d702:	e000      	b.n	800d706 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d704:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800d706:	b003      	add	sp, #12
 800d708:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800d70a:	2006      	movs	r0, #6
 800d70c:	e7fb      	b.n	800d706 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800d70e:	2005      	movs	r0, #5
 800d710:	e7f9      	b.n	800d706 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800d712:	2004      	movs	r0, #4
 800d714:	e7f7      	b.n	800d706 <RegionEU868ChannelAdd+0xb6>
 800d716:	bf00      	nop
 800d718:	20000e30 	.word	0x20000e30

0800d71c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800d71c:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800d71e:	2902      	cmp	r1, #2
 800d720:	d801      	bhi.n	800d726 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800d722:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800d724:	4770      	bx	lr
{
 800d726:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800d728:	4b09      	ldr	r3, [pc, #36]	; (800d750 <RegionEU868ChannelsRemove+0x34>)
 800d72a:	6818      	ldr	r0, [r3, #0]
 800d72c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800d730:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800d734:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d738:	2200      	movs	r2, #0
 800d73a:	f840 200c 	str.w	r2, [r0, ip]
 800d73e:	605a      	str	r2, [r3, #4]
 800d740:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800d742:	2210      	movs	r2, #16
 800d744:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800d748:	f7fe ff9d 	bl	800c686 <RegionCommonChanDisable>
}
 800d74c:	bd08      	pop	{r3, pc}
 800d74e:	bf00      	nop
 800d750:	20000e30 	.word	0x20000e30

0800d754 <RegionEU868ApplyCFList>:
{
 800d754:	b570      	push	{r4, r5, r6, lr}
 800d756:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800d758:	2350      	movs	r3, #80	; 0x50
 800d75a:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800d75e:	7a03      	ldrb	r3, [r0, #8]
 800d760:	2b10      	cmp	r3, #16
 800d762:	d136      	bne.n	800d7d2 <RegionEU868ApplyCFList+0x7e>
 800d764:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800d766:	6843      	ldr	r3, [r0, #4]
 800d768:	7bdd      	ldrb	r5, [r3, #15]
 800d76a:	2d00      	cmp	r5, #0
 800d76c:	d131      	bne.n	800d7d2 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d76e:	2403      	movs	r4, #3
 800d770:	e01b      	b.n	800d7aa <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800d772:	6872      	ldr	r2, [r6, #4]
 800d774:	5d53      	ldrb	r3, [r2, r5]
 800d776:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800d778:	442a      	add	r2, r5
 800d77a:	7851      	ldrb	r1, [r2, #1]
 800d77c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d780:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800d782:	7892      	ldrb	r2, [r2, #2]
 800d784:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d788:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800d78a:	2264      	movs	r2, #100	; 0x64
 800d78c:	fb02 f303 	mul.w	r3, r2, r3
 800d790:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800d792:	2300      	movs	r3, #0
 800d794:	9304      	str	r3, [sp, #16]
 800d796:	e011      	b.n	800d7bc <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800d798:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800d79c:	4668      	mov	r0, sp
 800d79e:	f7ff ffbd 	bl	800d71c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800d7a2:	3503      	adds	r5, #3
 800d7a4:	b2ed      	uxtb	r5, r5
 800d7a6:	3401      	adds	r4, #1
 800d7a8:	b2e4      	uxtb	r4, r4
 800d7aa:	2c0f      	cmp	r4, #15
 800d7ac:	d811      	bhi.n	800d7d2 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800d7ae:	2c07      	cmp	r4, #7
 800d7b0:	d9df      	bls.n	800d772 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800d7b6:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800d7ba:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800d7bc:	9b03      	ldr	r3, [sp, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d0ea      	beq.n	800d798 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800d7c2:	ab03      	add	r3, sp, #12
 800d7c4:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800d7c6:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800d7ca:	a801      	add	r0, sp, #4
 800d7cc:	f7ff ff40 	bl	800d650 <RegionEU868ChannelAdd>
 800d7d0:	e7e7      	b.n	800d7a2 <RegionEU868ApplyCFList+0x4e>
}
 800d7d2:	b006      	add	sp, #24
 800d7d4:	bd70      	pop	{r4, r5, r6, pc}

0800d7d6 <RegionEU868NewChannelReq>:
{
 800d7d6:	b500      	push	{lr}
 800d7d8:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800d7da:	6803      	ldr	r3, [r0, #0]
 800d7dc:	681a      	ldr	r2, [r3, #0]
 800d7de:	b952      	cbnz	r2, 800d7f6 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800d7e0:	7903      	ldrb	r3, [r0, #4]
 800d7e2:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800d7e6:	a801      	add	r0, sp, #4
 800d7e8:	f7ff ff98 	bl	800d71c <RegionEU868ChannelsRemove>
 800d7ec:	b1d0      	cbz	r0, 800d824 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800d7ee:	2003      	movs	r0, #3
}
 800d7f0:	b005      	add	sp, #20
 800d7f2:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800d7f6:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800d7f8:	7903      	ldrb	r3, [r0, #4]
 800d7fa:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800d7fe:	a802      	add	r0, sp, #8
 800d800:	f7ff ff26 	bl	800d650 <RegionEU868ChannelAdd>
 800d804:	2806      	cmp	r0, #6
 800d806:	d80b      	bhi.n	800d820 <RegionEU868NewChannelReq+0x4a>
 800d808:	e8df f000 	tbb	[pc, r0]
 800d80c:	0a0a0a04 	.word	0x0a0a0a04
 800d810:	060e      	.short	0x060e
 800d812:	08          	.byte	0x08
 800d813:	00          	.byte	0x00
 800d814:	2003      	movs	r0, #3
 800d816:	e7eb      	b.n	800d7f0 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800d818:	2001      	movs	r0, #1
                break;
 800d81a:	e7e9      	b.n	800d7f0 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800d81c:	2000      	movs	r0, #0
                break;
 800d81e:	e7e7      	b.n	800d7f0 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800d820:	2000      	movs	r0, #0
                break;
 800d822:	e7e5      	b.n	800d7f0 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800d824:	2000      	movs	r0, #0
 800d826:	e7e3      	b.n	800d7f0 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800d828:	2002      	movs	r0, #2
 800d82a:	e7e1      	b.n	800d7f0 <RegionEU868NewChannelReq+0x1a>

0800d82c <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800d82c:	1a88      	subs	r0, r1, r2
 800d82e:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800d830:	2800      	cmp	r0, #0
 800d832:	db01      	blt.n	800d838 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800d834:	b2c0      	uxtb	r0, r0
 800d836:	4770      	bx	lr
        datarate = DR_0;
 800d838:	2000      	movs	r0, #0
 800d83a:	e7fb      	b.n	800d834 <RegionEU868ApplyDrOffset+0x8>

0800d83c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d83c:	b510      	push	{r4, lr}
 800d83e:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 800d840:	2210      	movs	r2, #16
 800d842:	2100      	movs	r1, #0
 800d844:	30f1      	adds	r0, #241	; 0xf1
 800d846:	f000 ff12 	bl	800e66e <memset1>
    ctx->M_n = 0;
 800d84a:	2100      	movs	r1, #0
 800d84c:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d850:	22f0      	movs	r2, #240	; 0xf0
 800d852:	4620      	mov	r0, r4
 800d854:	f000 ff0b 	bl	800e66e <memset1>
}
 800d858:	bd10      	pop	{r4, pc}

0800d85a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d85a:	b508      	push	{r3, lr}
 800d85c:	4602      	mov	r2, r0
 800d85e:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d860:	2110      	movs	r1, #16
 800d862:	f000 fb3b 	bl	800dedc <lorawan_aes_set_key>
}
 800d866:	bd08      	pop	{r3, pc}

0800d868 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d86c:	b084      	sub	sp, #16
 800d86e:	4604      	mov	r4, r0
 800d870:	460d      	mov	r5, r1
 800d872:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d874:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d054      	beq.n	800d926 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d87c:	f1c3 0810 	rsb	r8, r3, #16
 800d880:	4647      	mov	r7, r8
 800d882:	4590      	cmp	r8, r2
 800d884:	bf28      	it	cs
 800d886:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d888:	f200 1001 	addw	r0, r0, #257	; 0x101
 800d88c:	b2ba      	uxth	r2, r7
 800d88e:	4418      	add	r0, r3
 800d890:	f000 fed5 	bl	800e63e <memcpy1>
        ctx->M_n += mlen;
 800d894:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800d898:	443b      	add	r3, r7
 800d89a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800d89e:	2b0f      	cmp	r3, #15
 800d8a0:	d94d      	bls.n	800d93e <AES_CMAC_Update+0xd6>
 800d8a2:	45b0      	cmp	r8, r6
 800d8a4:	d24b      	bcs.n	800d93e <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	e008      	b.n	800d8bc <AES_CMAC_Update+0x54>
 800d8aa:	18e2      	adds	r2, r4, r3
 800d8ac:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 800d8b0:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 800d8b4:	4041      	eors	r1, r0
 800d8b6:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	2b0f      	cmp	r3, #15
 800d8be:	ddf4      	ble.n	800d8aa <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d8c0:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 800d8c4:	2210      	movs	r2, #16
 800d8c6:	4641      	mov	r1, r8
 800d8c8:	4668      	mov	r0, sp
 800d8ca:	f000 feb8 	bl	800e63e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d8ce:	4622      	mov	r2, r4
 800d8d0:	4669      	mov	r1, sp
 800d8d2:	4668      	mov	r0, sp
 800d8d4:	f000 fb84 	bl	800dfe0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d8d8:	2210      	movs	r2, #16
 800d8da:	4669      	mov	r1, sp
 800d8dc:	4640      	mov	r0, r8
 800d8de:	f000 feae 	bl	800e63e <memcpy1>

        data += mlen;
 800d8e2:	443d      	add	r5, r7
        len -= mlen;
 800d8e4:	1bf6      	subs	r6, r6, r7
 800d8e6:	e01e      	b.n	800d926 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 800d8e8:	eb04 0e03 	add.w	lr, r4, r3
 800d8ec:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 800d8f0:	5cea      	ldrb	r2, [r5, r3]
 800d8f2:	ea8c 0c02 	eor.w	ip, ip, r2
 800d8f6:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	2b0f      	cmp	r3, #15
 800d8fe:	ddf3      	ble.n	800d8e8 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d900:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 800d904:	2210      	movs	r2, #16
 800d906:	4639      	mov	r1, r7
 800d908:	4668      	mov	r0, sp
 800d90a:	f000 fe98 	bl	800e63e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d90e:	4622      	mov	r2, r4
 800d910:	4669      	mov	r1, sp
 800d912:	4668      	mov	r0, sp
 800d914:	f000 fb64 	bl	800dfe0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d918:	2210      	movs	r2, #16
 800d91a:	4669      	mov	r1, sp
 800d91c:	4638      	mov	r0, r7
 800d91e:	f000 fe8e 	bl	800e63e <memcpy1>

        data += 16;
 800d922:	3510      	adds	r5, #16
        len -= 16;
 800d924:	3e10      	subs	r6, #16
    while( len > 16 )
 800d926:	2e10      	cmp	r6, #16
 800d928:	d901      	bls.n	800d92e <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 800d92a:	2300      	movs	r3, #0
 800d92c:	e7e6      	b.n	800d8fc <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800d92e:	b2b2      	uxth	r2, r6
 800d930:	4629      	mov	r1, r5
 800d932:	f204 1001 	addw	r0, r4, #257	; 0x101
 800d936:	f000 fe82 	bl	800e63e <memcpy1>
    ctx->M_n = len;
 800d93a:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 800d93e:	b004      	add	sp, #16
 800d940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d944 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800d944:	b530      	push	{r4, r5, lr}
 800d946:	b089      	sub	sp, #36	; 0x24
 800d948:	4605      	mov	r5, r0
 800d94a:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800d94c:	2210      	movs	r2, #16
 800d94e:	2100      	movs	r1, #0
 800d950:	eb0d 0002 	add.w	r0, sp, r2
 800d954:	f000 fe8b 	bl	800e66e <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800d958:	4622      	mov	r2, r4
 800d95a:	a904      	add	r1, sp, #16
 800d95c:	4608      	mov	r0, r1
 800d95e:	f000 fb3f 	bl	800dfe0 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800d962:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800d966:	2b00      	cmp	r3, #0
 800d968:	db01      	blt.n	800d96e <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 800d96a:	2300      	movs	r3, #0
 800d96c:	e030      	b.n	800d9d0 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 800d96e:	2300      	movs	r3, #0
 800d970:	2b0e      	cmp	r3, #14
 800d972:	dc11      	bgt.n	800d998 <AES_CMAC_Final+0x54>
 800d974:	f103 0220 	add.w	r2, r3, #32
 800d978:	eb0d 0102 	add.w	r1, sp, r2
 800d97c:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800d980:	3301      	adds	r3, #1
 800d982:	f103 0220 	add.w	r2, r3, #32
 800d986:	446a      	add	r2, sp
 800d988:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d98c:	09d2      	lsrs	r2, r2, #7
 800d98e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d992:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d996:	e7eb      	b.n	800d970 <AES_CMAC_Final+0x2c>
 800d998:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d99c:	005b      	lsls	r3, r3, #1
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 800d9a4:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800d9a8:	f88d 301f 	strb.w	r3, [sp, #31]
 800d9ac:	e017      	b.n	800d9de <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 800d9ae:	f103 0220 	add.w	r2, r3, #32
 800d9b2:	eb0d 0102 	add.w	r1, sp, r2
 800d9b6:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	f103 0220 	add.w	r2, r3, #32
 800d9c0:	446a      	add	r2, sp
 800d9c2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800d9c6:	09d2      	lsrs	r2, r2, #7
 800d9c8:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800d9cc:	f801 2c10 	strb.w	r2, [r1, #-16]
 800d9d0:	2b0e      	cmp	r3, #14
 800d9d2:	ddec      	ble.n	800d9ae <AES_CMAC_Final+0x6a>
 800d9d4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d9d8:	005b      	lsls	r3, r3, #1
 800d9da:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 800d9de:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 800d9e2:	2810      	cmp	r0, #16
 800d9e4:	d014      	beq.n	800da10 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800d9e6:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	db30      	blt.n	800da50 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	e041      	b.n	800da76 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 800d9f2:	18e1      	adds	r1, r4, r3
 800d9f4:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800d9f8:	f103 0020 	add.w	r0, r3, #32
 800d9fc:	4468      	add	r0, sp
 800d9fe:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800da02:	4042      	eors	r2, r0
 800da04:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800da08:	3301      	adds	r3, #1
 800da0a:	2b0f      	cmp	r3, #15
 800da0c:	ddf1      	ble.n	800d9f2 <AES_CMAC_Final+0xae>
 800da0e:	e059      	b.n	800dac4 <AES_CMAC_Final+0x180>
 800da10:	2300      	movs	r3, #0
 800da12:	e7fa      	b.n	800da0a <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 800da14:	f103 0220 	add.w	r2, r3, #32
 800da18:	eb0d 0102 	add.w	r1, sp, r2
 800da1c:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800da20:	3301      	adds	r3, #1
 800da22:	f103 0220 	add.w	r2, r3, #32
 800da26:	446a      	add	r2, sp
 800da28:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800da2c:	09d2      	lsrs	r2, r2, #7
 800da2e:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800da32:	f801 2c10 	strb.w	r2, [r1, #-16]
 800da36:	2b0e      	cmp	r3, #14
 800da38:	ddec      	ble.n	800da14 <AES_CMAC_Final+0xd0>
 800da3a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800da3e:	005b      	lsls	r3, r3, #1
 800da40:	b2db      	uxtb	r3, r3
 800da42:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 800da46:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 800da4a:	f88d 301f 	strb.w	r3, [sp, #31]
 800da4e:	e019      	b.n	800da84 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 800da50:	2300      	movs	r3, #0
 800da52:	e7f0      	b.n	800da36 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 800da54:	f103 0220 	add.w	r2, r3, #32
 800da58:	eb0d 0102 	add.w	r1, sp, r2
 800da5c:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 800da60:	3301      	adds	r3, #1
 800da62:	f103 0220 	add.w	r2, r3, #32
 800da66:	446a      	add	r2, sp
 800da68:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800da6c:	09d2      	lsrs	r2, r2, #7
 800da6e:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 800da72:	f801 2c10 	strb.w	r2, [r1, #-16]
 800da76:	2b0e      	cmp	r3, #14
 800da78:	ddec      	ble.n	800da54 <AES_CMAC_Final+0x110>
 800da7a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800da84:	4420      	add	r0, r4
 800da86:	2380      	movs	r3, #128	; 0x80
 800da88:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800da8c:	e003      	b.n	800da96 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 800da8e:	4423      	add	r3, r4
 800da90:	2200      	movs	r2, #0
 800da92:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800da96:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800da9a:	3301      	adds	r3, #1
 800da9c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800daa0:	2b0f      	cmp	r3, #15
 800daa2:	d9f4      	bls.n	800da8e <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 800daa4:	2300      	movs	r3, #0
 800daa6:	e00b      	b.n	800dac0 <AES_CMAC_Final+0x17c>
 800daa8:	18e1      	adds	r1, r4, r3
 800daaa:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 800daae:	f103 0020 	add.w	r0, r3, #32
 800dab2:	4468      	add	r0, sp
 800dab4:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800dab8:	4042      	eors	r2, r0
 800daba:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 800dabe:	3301      	adds	r3, #1
 800dac0:	2b0f      	cmp	r3, #15
 800dac2:	ddf1      	ble.n	800daa8 <AES_CMAC_Final+0x164>
 800dac4:	2300      	movs	r3, #0
 800dac6:	e009      	b.n	800dadc <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 800dac8:	18e2      	adds	r2, r4, r3
 800daca:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 800dace:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 800dad2:	ea8c 0c01 	eor.w	ip, ip, r1
 800dad6:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 800dada:	3301      	adds	r3, #1
 800dadc:	2b0f      	cmp	r3, #15
 800dade:	ddf3      	ble.n	800dac8 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800dae0:	2210      	movs	r2, #16
 800dae2:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 800dae6:	4668      	mov	r0, sp
 800dae8:	f000 fda9 	bl	800e63e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800daec:	4622      	mov	r2, r4
 800daee:	4629      	mov	r1, r5
 800daf0:	4668      	mov	r0, sp
 800daf2:	f000 fa75 	bl	800dfe0 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800daf6:	2210      	movs	r2, #16
 800daf8:	2100      	movs	r1, #0
 800dafa:	eb0d 0002 	add.w	r0, sp, r2
 800dafe:	f000 fdb6 	bl	800e66e <memset1>
}
 800db02:	b009      	add	sp, #36	; 0x24
 800db04:	bd30      	pop	{r4, r5, pc}

0800db06 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800db06:	780b      	ldrb	r3, [r1, #0]
 800db08:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800db0a:	784b      	ldrb	r3, [r1, #1]
 800db0c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800db0e:	788b      	ldrb	r3, [r1, #2]
 800db10:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800db12:	78cb      	ldrb	r3, [r1, #3]
 800db14:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800db16:	790b      	ldrb	r3, [r1, #4]
 800db18:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800db1a:	794b      	ldrb	r3, [r1, #5]
 800db1c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800db1e:	798b      	ldrb	r3, [r1, #6]
 800db20:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800db22:	79cb      	ldrb	r3, [r1, #7]
 800db24:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800db26:	7a0b      	ldrb	r3, [r1, #8]
 800db28:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800db2a:	7a4b      	ldrb	r3, [r1, #9]
 800db2c:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800db2e:	7a8b      	ldrb	r3, [r1, #10]
 800db30:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800db32:	7acb      	ldrb	r3, [r1, #11]
 800db34:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800db36:	7b0b      	ldrb	r3, [r1, #12]
 800db38:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800db3a:	7b4b      	ldrb	r3, [r1, #13]
 800db3c:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800db3e:	7b8b      	ldrb	r3, [r1, #14]
 800db40:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800db42:	7bcb      	ldrb	r3, [r1, #15]
 800db44:	73c3      	strb	r3, [r0, #15]
#endif
}
 800db46:	4770      	bx	lr

0800db48 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 800db48:	e004      	b.n	800db54 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800db4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db4e:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 800db52:	461a      	mov	r2, r3
 800db54:	1e53      	subs	r3, r2, #1
 800db56:	b2db      	uxtb	r3, r3
 800db58:	2a00      	cmp	r2, #0
 800db5a:	d1f6      	bne.n	800db4a <copy_block_nn+0x2>
}
 800db5c:	4770      	bx	lr

0800db5e <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800db5e:	780b      	ldrb	r3, [r1, #0]
 800db60:	7802      	ldrb	r2, [r0, #0]
 800db62:	4053      	eors	r3, r2
 800db64:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800db66:	784b      	ldrb	r3, [r1, #1]
 800db68:	7842      	ldrb	r2, [r0, #1]
 800db6a:	4053      	eors	r3, r2
 800db6c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800db6e:	788b      	ldrb	r3, [r1, #2]
 800db70:	7882      	ldrb	r2, [r0, #2]
 800db72:	4053      	eors	r3, r2
 800db74:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800db76:	78cb      	ldrb	r3, [r1, #3]
 800db78:	78c2      	ldrb	r2, [r0, #3]
 800db7a:	4053      	eors	r3, r2
 800db7c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800db7e:	790b      	ldrb	r3, [r1, #4]
 800db80:	7902      	ldrb	r2, [r0, #4]
 800db82:	4053      	eors	r3, r2
 800db84:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800db86:	794b      	ldrb	r3, [r1, #5]
 800db88:	7942      	ldrb	r2, [r0, #5]
 800db8a:	4053      	eors	r3, r2
 800db8c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800db8e:	798b      	ldrb	r3, [r1, #6]
 800db90:	7982      	ldrb	r2, [r0, #6]
 800db92:	4053      	eors	r3, r2
 800db94:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800db96:	79cb      	ldrb	r3, [r1, #7]
 800db98:	79c2      	ldrb	r2, [r0, #7]
 800db9a:	4053      	eors	r3, r2
 800db9c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800db9e:	7a0b      	ldrb	r3, [r1, #8]
 800dba0:	7a02      	ldrb	r2, [r0, #8]
 800dba2:	4053      	eors	r3, r2
 800dba4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800dba6:	7a4b      	ldrb	r3, [r1, #9]
 800dba8:	7a42      	ldrb	r2, [r0, #9]
 800dbaa:	4053      	eors	r3, r2
 800dbac:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800dbae:	7a8b      	ldrb	r3, [r1, #10]
 800dbb0:	7a82      	ldrb	r2, [r0, #10]
 800dbb2:	4053      	eors	r3, r2
 800dbb4:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800dbb6:	7acb      	ldrb	r3, [r1, #11]
 800dbb8:	7ac2      	ldrb	r2, [r0, #11]
 800dbba:	4053      	eors	r3, r2
 800dbbc:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800dbbe:	7b0b      	ldrb	r3, [r1, #12]
 800dbc0:	7b02      	ldrb	r2, [r0, #12]
 800dbc2:	4053      	eors	r3, r2
 800dbc4:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800dbc6:	7b4b      	ldrb	r3, [r1, #13]
 800dbc8:	7b42      	ldrb	r2, [r0, #13]
 800dbca:	4053      	eors	r3, r2
 800dbcc:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800dbce:	7b8b      	ldrb	r3, [r1, #14]
 800dbd0:	7b82      	ldrb	r2, [r0, #14]
 800dbd2:	4053      	eors	r3, r2
 800dbd4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800dbd6:	7bcb      	ldrb	r3, [r1, #15]
 800dbd8:	7bc2      	ldrb	r2, [r0, #15]
 800dbda:	4053      	eors	r3, r2
 800dbdc:	73c3      	strb	r3, [r0, #15]
#endif
}
 800dbde:	4770      	bx	lr

0800dbe0 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800dbe0:	780b      	ldrb	r3, [r1, #0]
 800dbe2:	f892 c000 	ldrb.w	ip, [r2]
 800dbe6:	ea83 030c 	eor.w	r3, r3, ip
 800dbea:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800dbec:	784b      	ldrb	r3, [r1, #1]
 800dbee:	f892 c001 	ldrb.w	ip, [r2, #1]
 800dbf2:	ea83 030c 	eor.w	r3, r3, ip
 800dbf6:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800dbf8:	788b      	ldrb	r3, [r1, #2]
 800dbfa:	f892 c002 	ldrb.w	ip, [r2, #2]
 800dbfe:	ea83 030c 	eor.w	r3, r3, ip
 800dc02:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800dc04:	78cb      	ldrb	r3, [r1, #3]
 800dc06:	f892 c003 	ldrb.w	ip, [r2, #3]
 800dc0a:	ea83 030c 	eor.w	r3, r3, ip
 800dc0e:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800dc10:	790b      	ldrb	r3, [r1, #4]
 800dc12:	f892 c004 	ldrb.w	ip, [r2, #4]
 800dc16:	ea83 030c 	eor.w	r3, r3, ip
 800dc1a:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800dc1c:	794b      	ldrb	r3, [r1, #5]
 800dc1e:	f892 c005 	ldrb.w	ip, [r2, #5]
 800dc22:	ea83 030c 	eor.w	r3, r3, ip
 800dc26:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800dc28:	798b      	ldrb	r3, [r1, #6]
 800dc2a:	f892 c006 	ldrb.w	ip, [r2, #6]
 800dc2e:	ea83 030c 	eor.w	r3, r3, ip
 800dc32:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800dc34:	79cb      	ldrb	r3, [r1, #7]
 800dc36:	f892 c007 	ldrb.w	ip, [r2, #7]
 800dc3a:	ea83 030c 	eor.w	r3, r3, ip
 800dc3e:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800dc40:	7a0b      	ldrb	r3, [r1, #8]
 800dc42:	f892 c008 	ldrb.w	ip, [r2, #8]
 800dc46:	ea83 030c 	eor.w	r3, r3, ip
 800dc4a:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800dc4c:	7a4b      	ldrb	r3, [r1, #9]
 800dc4e:	f892 c009 	ldrb.w	ip, [r2, #9]
 800dc52:	ea83 030c 	eor.w	r3, r3, ip
 800dc56:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800dc58:	7a8b      	ldrb	r3, [r1, #10]
 800dc5a:	f892 c00a 	ldrb.w	ip, [r2, #10]
 800dc5e:	ea83 030c 	eor.w	r3, r3, ip
 800dc62:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800dc64:	7acb      	ldrb	r3, [r1, #11]
 800dc66:	f892 c00b 	ldrb.w	ip, [r2, #11]
 800dc6a:	ea83 030c 	eor.w	r3, r3, ip
 800dc6e:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800dc70:	7b0b      	ldrb	r3, [r1, #12]
 800dc72:	f892 c00c 	ldrb.w	ip, [r2, #12]
 800dc76:	ea83 030c 	eor.w	r3, r3, ip
 800dc7a:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800dc7c:	7b4b      	ldrb	r3, [r1, #13]
 800dc7e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800dc82:	ea83 030c 	eor.w	r3, r3, ip
 800dc86:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800dc88:	7b8b      	ldrb	r3, [r1, #14]
 800dc8a:	f892 c00e 	ldrb.w	ip, [r2, #14]
 800dc8e:	ea83 030c 	eor.w	r3, r3, ip
 800dc92:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800dc94:	7bcb      	ldrb	r3, [r1, #15]
 800dc96:	7bd2      	ldrb	r2, [r2, #15]
 800dc98:	4053      	eors	r3, r2
 800dc9a:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800dc9c:	4770      	bx	lr

0800dc9e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800dc9e:	b508      	push	{r3, lr}
    xor_block(d, k);
 800dca0:	f7ff ff5d 	bl	800db5e <xor_block>
}
 800dca4:	bd08      	pop	{r3, pc}
	...

0800dca8 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800dca8:	7802      	ldrb	r2, [r0, #0]
 800dcaa:	4b18      	ldr	r3, [pc, #96]	; (800dd0c <shift_sub_rows+0x64>)
 800dcac:	5c9a      	ldrb	r2, [r3, r2]
 800dcae:	7002      	strb	r2, [r0, #0]
 800dcb0:	7902      	ldrb	r2, [r0, #4]
 800dcb2:	5c9a      	ldrb	r2, [r3, r2]
 800dcb4:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800dcb6:	7a02      	ldrb	r2, [r0, #8]
 800dcb8:	5c9a      	ldrb	r2, [r3, r2]
 800dcba:	7202      	strb	r2, [r0, #8]
 800dcbc:	7b02      	ldrb	r2, [r0, #12]
 800dcbe:	5c9a      	ldrb	r2, [r3, r2]
 800dcc0:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800dcc2:	7842      	ldrb	r2, [r0, #1]
 800dcc4:	7941      	ldrb	r1, [r0, #5]
 800dcc6:	5c59      	ldrb	r1, [r3, r1]
 800dcc8:	7041      	strb	r1, [r0, #1]
 800dcca:	7a41      	ldrb	r1, [r0, #9]
 800dccc:	5c59      	ldrb	r1, [r3, r1]
 800dcce:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800dcd0:	7b41      	ldrb	r1, [r0, #13]
 800dcd2:	5c59      	ldrb	r1, [r3, r1]
 800dcd4:	7241      	strb	r1, [r0, #9]
 800dcd6:	5c9a      	ldrb	r2, [r3, r2]
 800dcd8:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800dcda:	7882      	ldrb	r2, [r0, #2]
 800dcdc:	7a81      	ldrb	r1, [r0, #10]
 800dcde:	5c59      	ldrb	r1, [r3, r1]
 800dce0:	7081      	strb	r1, [r0, #2]
 800dce2:	5c9a      	ldrb	r2, [r3, r2]
 800dce4:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800dce6:	7982      	ldrb	r2, [r0, #6]
 800dce8:	7b81      	ldrb	r1, [r0, #14]
 800dcea:	5c59      	ldrb	r1, [r3, r1]
 800dcec:	7181      	strb	r1, [r0, #6]
 800dcee:	5c9a      	ldrb	r2, [r3, r2]
 800dcf0:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800dcf2:	7bc2      	ldrb	r2, [r0, #15]
 800dcf4:	7ac1      	ldrb	r1, [r0, #11]
 800dcf6:	5c59      	ldrb	r1, [r3, r1]
 800dcf8:	73c1      	strb	r1, [r0, #15]
 800dcfa:	79c1      	ldrb	r1, [r0, #7]
 800dcfc:	5c59      	ldrb	r1, [r3, r1]
 800dcfe:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800dd00:	78c1      	ldrb	r1, [r0, #3]
 800dd02:	5c59      	ldrb	r1, [r3, r1]
 800dd04:	71c1      	strb	r1, [r0, #7]
 800dd06:	5c9b      	ldrb	r3, [r3, r2]
 800dd08:	70c3      	strb	r3, [r0, #3]
}
 800dd0a:	4770      	bx	lr
 800dd0c:	08011a58 	.word	0x08011a58

0800dd10 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800dd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd14:	b084      	sub	sp, #16
 800dd16:	4604      	mov	r4, r0
    block_copy(st, dt);
 800dd18:	4601      	mov	r1, r0
 800dd1a:	4668      	mov	r0, sp
 800dd1c:	f7ff fef3 	bl	800db06 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800dd20:	f89d c000 	ldrb.w	ip, [sp]
 800dd24:	4b6a      	ldr	r3, [pc, #424]	; (800ded0 <mix_sub_columns+0x1c0>)
 800dd26:	f813 000c 	ldrb.w	r0, [r3, ip]
 800dd2a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800dd2e:	4a69      	ldr	r2, [pc, #420]	; (800ded4 <mix_sub_columns+0x1c4>)
 800dd30:	f812 9008 	ldrb.w	r9, [r2, r8]
 800dd34:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800dd38:	4967      	ldr	r1, [pc, #412]	; (800ded8 <mix_sub_columns+0x1c8>)
 800dd3a:	f811 500e 	ldrb.w	r5, [r1, lr]
 800dd3e:	f89d 700f 	ldrb.w	r7, [sp, #15]
 800dd42:	5dce      	ldrb	r6, [r1, r7]
 800dd44:	ea80 0009 	eor.w	r0, r0, r9
 800dd48:	4068      	eors	r0, r5
 800dd4a:	4070      	eors	r0, r6
 800dd4c:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800dd4e:	f811 000c 	ldrb.w	r0, [r1, ip]
 800dd52:	f813 a008 	ldrb.w	sl, [r3, r8]
 800dd56:	f812 900e 	ldrb.w	r9, [r2, lr]
 800dd5a:	ea80 0a0a 	eor.w	sl, r0, sl
 800dd5e:	ea89 090a 	eor.w	r9, r9, sl
 800dd62:	ea86 0609 	eor.w	r6, r6, r9
 800dd66:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800dd68:	f811 8008 	ldrb.w	r8, [r1, r8]
 800dd6c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800dd70:	5dd6      	ldrb	r6, [r2, r7]
 800dd72:	ea80 0008 	eor.w	r0, r0, r8
 800dd76:	ea8e 0000 	eor.w	r0, lr, r0
 800dd7a:	4070      	eors	r0, r6
 800dd7c:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800dd7e:	f812 600c 	ldrb.w	r6, [r2, ip]
 800dd82:	5dd8      	ldrb	r0, [r3, r7]
 800dd84:	ea86 0608 	eor.w	r6, r6, r8
 800dd88:	4075      	eors	r5, r6
 800dd8a:	4045      	eors	r5, r0
 800dd8c:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800dd8e:	f89d c004 	ldrb.w	ip, [sp, #4]
 800dd92:	f813 000c 	ldrb.w	r0, [r3, ip]
 800dd96:	f89d 8009 	ldrb.w	r8, [sp, #9]
 800dd9a:	f812 9008 	ldrb.w	r9, [r2, r8]
 800dd9e:	f89d e00e 	ldrb.w	lr, [sp, #14]
 800dda2:	f811 500e 	ldrb.w	r5, [r1, lr]
 800dda6:	f89d 7003 	ldrb.w	r7, [sp, #3]
 800ddaa:	5dce      	ldrb	r6, [r1, r7]
 800ddac:	ea80 0009 	eor.w	r0, r0, r9
 800ddb0:	4068      	eors	r0, r5
 800ddb2:	4070      	eors	r0, r6
 800ddb4:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800ddb6:	f811 000c 	ldrb.w	r0, [r1, ip]
 800ddba:	f813 a008 	ldrb.w	sl, [r3, r8]
 800ddbe:	f812 900e 	ldrb.w	r9, [r2, lr]
 800ddc2:	ea80 0a0a 	eor.w	sl, r0, sl
 800ddc6:	ea89 090a 	eor.w	r9, r9, sl
 800ddca:	ea86 0609 	eor.w	r6, r6, r9
 800ddce:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ddd0:	f811 8008 	ldrb.w	r8, [r1, r8]
 800ddd4:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800ddd8:	5dd6      	ldrb	r6, [r2, r7]
 800ddda:	ea80 0008 	eor.w	r0, r0, r8
 800ddde:	ea8e 0000 	eor.w	r0, lr, r0
 800dde2:	4070      	eors	r0, r6
 800dde4:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800dde6:	f812 600c 	ldrb.w	r6, [r2, ip]
 800ddea:	5dd8      	ldrb	r0, [r3, r7]
 800ddec:	ea86 0608 	eor.w	r6, r6, r8
 800ddf0:	4075      	eors	r5, r6
 800ddf2:	4045      	eors	r5, r0
 800ddf4:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ddf6:	f89d c008 	ldrb.w	ip, [sp, #8]
 800ddfa:	f813 000c 	ldrb.w	r0, [r3, ip]
 800ddfe:	f89d 800d 	ldrb.w	r8, [sp, #13]
 800de02:	f812 9008 	ldrb.w	r9, [r2, r8]
 800de06:	f89d e002 	ldrb.w	lr, [sp, #2]
 800de0a:	f811 500e 	ldrb.w	r5, [r1, lr]
 800de0e:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800de12:	5dce      	ldrb	r6, [r1, r7]
 800de14:	ea80 0009 	eor.w	r0, r0, r9
 800de18:	4068      	eors	r0, r5
 800de1a:	4070      	eors	r0, r6
 800de1c:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800de1e:	f811 000c 	ldrb.w	r0, [r1, ip]
 800de22:	f813 a008 	ldrb.w	sl, [r3, r8]
 800de26:	f812 900e 	ldrb.w	r9, [r2, lr]
 800de2a:	ea80 0a0a 	eor.w	sl, r0, sl
 800de2e:	ea89 090a 	eor.w	r9, r9, sl
 800de32:	ea86 0609 	eor.w	r6, r6, r9
 800de36:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800de38:	f811 8008 	ldrb.w	r8, [r1, r8]
 800de3c:	f813 e00e 	ldrb.w	lr, [r3, lr]
 800de40:	5dd6      	ldrb	r6, [r2, r7]
 800de42:	ea80 0008 	eor.w	r0, r0, r8
 800de46:	ea8e 0000 	eor.w	r0, lr, r0
 800de4a:	4070      	eors	r0, r6
 800de4c:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800de4e:	f812 600c 	ldrb.w	r6, [r2, ip]
 800de52:	5dd8      	ldrb	r0, [r3, r7]
 800de54:	ea86 0608 	eor.w	r6, r6, r8
 800de58:	4075      	eors	r5, r6
 800de5a:	4045      	eors	r5, r0
 800de5c:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800de5e:	f89d 600c 	ldrb.w	r6, [sp, #12]
 800de62:	5d98      	ldrb	r0, [r3, r6]
 800de64:	f89d 8001 	ldrb.w	r8, [sp, #1]
 800de68:	f812 9008 	ldrb.w	r9, [r2, r8]
 800de6c:	f89d 7006 	ldrb.w	r7, [sp, #6]
 800de70:	f811 c007 	ldrb.w	ip, [r1, r7]
 800de74:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800de78:	f811 e005 	ldrb.w	lr, [r1, r5]
 800de7c:	ea80 0009 	eor.w	r0, r0, r9
 800de80:	ea8c 0000 	eor.w	r0, ip, r0
 800de84:	ea8e 0000 	eor.w	r0, lr, r0
 800de88:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800de8a:	5d88      	ldrb	r0, [r1, r6]
 800de8c:	f813 a008 	ldrb.w	sl, [r3, r8]
 800de90:	f812 9007 	ldrb.w	r9, [r2, r7]
 800de94:	ea80 0a0a 	eor.w	sl, r0, sl
 800de98:	ea89 090a 	eor.w	r9, r9, sl
 800de9c:	ea8e 0e09 	eor.w	lr, lr, r9
 800dea0:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800dea4:	f811 1008 	ldrb.w	r1, [r1, r8]
 800dea8:	f813 e007 	ldrb.w	lr, [r3, r7]
 800deac:	5d57      	ldrb	r7, [r2, r5]
 800deae:	4048      	eors	r0, r1
 800deb0:	ea8e 0000 	eor.w	r0, lr, r0
 800deb4:	4078      	eors	r0, r7
 800deb6:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800deb8:	5d92      	ldrb	r2, [r2, r6]
 800deba:	5d5b      	ldrb	r3, [r3, r5]
 800debc:	4051      	eors	r1, r2
 800debe:	ea8c 0c01 	eor.w	ip, ip, r1
 800dec2:	ea83 0c0c 	eor.w	ip, r3, ip
 800dec6:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 800deca:	b004      	add	sp, #16
 800decc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded0:	08011858 	.word	0x08011858
 800ded4:	08011958 	.word	0x08011958
 800ded8:	08011a58 	.word	0x08011a58

0800dedc <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800dedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dee0:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 800dee2:	f1a1 0310 	sub.w	r3, r1, #16
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	2a10      	cmp	r2, #16
 800deea:	d807      	bhi.n	800defc <lorawan_aes_set_key+0x20>
 800deec:	460d      	mov	r5, r1
 800deee:	2301      	movs	r3, #1
 800def0:	4093      	lsls	r3, r2
 800def2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800def6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800defa:	b92b      	cbnz	r3, 800df08 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800defc:	2300      	movs	r3, #0
 800defe:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 800df02:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 800df04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 800df08:	460a      	mov	r2, r1
 800df0a:	4601      	mov	r1, r0
 800df0c:	4620      	mov	r0, r4
 800df0e:	f7ff fe1b 	bl	800db48 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800df12:	f105 031c 	add.w	r3, r5, #28
 800df16:	b2db      	uxtb	r3, r3
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 800df1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800df22:	3b01      	subs	r3, #1
 800df24:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800df28:	462b      	mov	r3, r5
 800df2a:	f04f 0c01 	mov.w	ip, #1
 800df2e:	e023      	b.n	800df78 <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 800df30:	2d18      	cmp	r5, #24
 800df32:	d901      	bls.n	800df38 <lorawan_aes_set_key+0x5c>
 800df34:	2a10      	cmp	r2, #16
 800df36:	d047      	beq.n	800dfc8 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 800df38:	1b5a      	subs	r2, r3, r5
 800df3a:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800df3c:	f814 9002 	ldrb.w	r9, [r4, r2]
 800df40:	ea89 0808 	eor.w	r8, r9, r8
 800df44:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800df48:	f102 0801 	add.w	r8, r2, #1
 800df4c:	f814 8008 	ldrb.w	r8, [r4, r8]
 800df50:	f100 0901 	add.w	r9, r0, #1
 800df54:	ea88 0707 	eor.w	r7, r8, r7
 800df58:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800df5c:	1c97      	adds	r7, r2, #2
 800df5e:	5de7      	ldrb	r7, [r4, r7]
 800df60:	f100 0802 	add.w	r8, r0, #2
 800df64:	407e      	eors	r6, r7
 800df66:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800df6a:	3203      	adds	r2, #3
 800df6c:	5ca6      	ldrb	r6, [r4, r2]
 800df6e:	1cc2      	adds	r2, r0, #3
 800df70:	4071      	eors	r1, r6
 800df72:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800df74:	3304      	adds	r3, #4
 800df76:	b2db      	uxtb	r3, r3
 800df78:	4573      	cmp	r3, lr
 800df7a:	d22c      	bcs.n	800dfd6 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 800df7c:	4618      	mov	r0, r3
 800df7e:	1f1a      	subs	r2, r3, #4
 800df80:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 800df84:	1eda      	subs	r2, r3, #3
 800df86:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 800df88:	1e9a      	subs	r2, r3, #2
 800df8a:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 800df8c:	1e5a      	subs	r2, r3, #1
 800df8e:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 800df90:	fbb3 f2f5 	udiv	r2, r3, r5
 800df94:	fb05 3212 	mls	r2, r5, r2, r3
 800df98:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800df9c:	d1c8      	bne.n	800df30 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 800df9e:	4a0f      	ldr	r2, [pc, #60]	; (800dfdc <lorawan_aes_set_key+0x100>)
 800dfa0:	f812 9007 	ldrb.w	r9, [r2, r7]
 800dfa4:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 800dfa8:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 800dfaa:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 800dfac:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 800dfb0:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 800dfb4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800dfb8:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 800dfbc:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 800dfc0:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 800dfc4:	46c8      	mov	r8, r9
 800dfc6:	e7b7      	b.n	800df38 <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 800dfc8:	4a04      	ldr	r2, [pc, #16]	; (800dfdc <lorawan_aes_set_key+0x100>)
 800dfca:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 800dfce:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 800dfd0:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 800dfd2:	5c51      	ldrb	r1, [r2, r1]
 800dfd4:	e7b0      	b.n	800df38 <lorawan_aes_set_key+0x5c>
    return 0;
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	e794      	b.n	800df04 <lorawan_aes_set_key+0x28>
 800dfda:	bf00      	nop
 800dfdc:	08011a58 	.word	0x08011a58

0800dfe0 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 800dfe0:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 800dfe4:	b31b      	cbz	r3, 800e02e <lorawan_aes_encrypt+0x4e>
{
 800dfe6:	b570      	push	{r4, r5, r6, lr}
 800dfe8:	b084      	sub	sp, #16
 800dfea:	460e      	mov	r6, r1
 800dfec:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800dfee:	4601      	mov	r1, r0
 800dff0:	4668      	mov	r0, sp
 800dff2:	f7ff fdf5 	bl	800dbe0 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800dff6:	2401      	movs	r4, #1
 800dff8:	e009      	b.n	800e00e <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800dffa:	4668      	mov	r0, sp
 800dffc:	f7ff fe88 	bl	800dd10 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e000:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 800e004:	4668      	mov	r0, sp
 800e006:	f7ff fe4a 	bl	800dc9e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e00a:	3401      	adds	r4, #1
 800e00c:	b2e4      	uxtb	r4, r4
 800e00e:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 800e012:	42a3      	cmp	r3, r4
 800e014:	d8f1      	bhi.n	800dffa <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e016:	4668      	mov	r0, sp
 800e018:	f7ff fe46 	bl	800dca8 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e01c:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800e020:	4669      	mov	r1, sp
 800e022:	4630      	mov	r0, r6
 800e024:	f7ff fddc 	bl	800dbe0 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e028:	2000      	movs	r0, #0
}
 800e02a:	b004      	add	sp, #16
 800e02c:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 800e02e:	20ff      	movs	r0, #255	; 0xff
}
 800e030:	4770      	bx	lr
	...

0800e034 <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e034:	2300      	movs	r3, #0
 800e036:	2b09      	cmp	r3, #9
 800e038:	d817      	bhi.n	800e06a <GetKeyByID+0x36>
{
 800e03a:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e03c:	4a0c      	ldr	r2, [pc, #48]	; (800e070 <GetKeyByID+0x3c>)
 800e03e:	6814      	ldr	r4, [r2, #0]
 800e040:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e044:	4422      	add	r2, r4
 800e046:	7c12      	ldrb	r2, [r2, #16]
 800e048:	4282      	cmp	r2, r0
 800e04a:	d006      	beq.n	800e05a <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e04c:	3301      	adds	r3, #1
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	2b09      	cmp	r3, #9
 800e052:	d9f3      	bls.n	800e03c <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e054:	2003      	movs	r0, #3
}
 800e056:	bc10      	pop	{r4}
 800e058:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 800e05a:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800e05e:	f10c 0c10 	add.w	ip, ip, #16
 800e062:	4464      	add	r4, ip
 800e064:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e066:	2000      	movs	r0, #0
 800e068:	e7f5      	b.n	800e056 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e06a:	2003      	movs	r0, #3
}
 800e06c:	4770      	bx	lr
 800e06e:	bf00      	nop
 800e070:	20000e34 	.word	0x20000e34

0800e074 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800e074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e078:	b0cc      	sub	sp, #304	; 0x130
 800e07a:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800e07c:	b3a9      	cbz	r1, 800e0ea <ComputeCmac+0x76>
 800e07e:	4605      	mov	r5, r0
 800e080:	4617      	mov	r7, r2
 800e082:	461c      	mov	r4, r3
 800e084:	4688      	mov	r8, r1
 800e086:	b396      	cbz	r6, 800e0ee <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800e088:	a802      	add	r0, sp, #8
 800e08a:	f7ff fbd7 	bl	800d83c <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800e08e:	a901      	add	r1, sp, #4
 800e090:	4620      	mov	r0, r4
 800e092:	f7ff ffcf 	bl	800e034 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e096:	4604      	mov	r4, r0
 800e098:	b118      	cbz	r0, 800e0a2 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 800e09a:	4620      	mov	r0, r4
 800e09c:	b04c      	add	sp, #304	; 0x130
 800e09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800e0a2:	9901      	ldr	r1, [sp, #4]
 800e0a4:	3101      	adds	r1, #1
 800e0a6:	a802      	add	r0, sp, #8
 800e0a8:	f7ff fbd7 	bl	800d85a <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 800e0ac:	b125      	cbz	r5, 800e0b8 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800e0ae:	2210      	movs	r2, #16
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	a802      	add	r0, sp, #8
 800e0b4:	f7ff fbd8 	bl	800d868 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800e0b8:	463a      	mov	r2, r7
 800e0ba:	4641      	mov	r1, r8
 800e0bc:	a802      	add	r0, sp, #8
 800e0be:	f7ff fbd3 	bl	800d868 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 800e0c2:	a902      	add	r1, sp, #8
 800e0c4:	a848      	add	r0, sp, #288	; 0x120
 800e0c6:	f7ff fc3d 	bl	800d944 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800e0ca:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 800e0ce:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 800e0d2:	041b      	lsls	r3, r3, #16
 800e0d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e0d8:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 800e0dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 800e0e0:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	6033      	str	r3, [r6, #0]
 800e0e8:	e7d7      	b.n	800e09a <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 800e0ea:	2402      	movs	r4, #2
 800e0ec:	e7d5      	b.n	800e09a <ComputeCmac+0x26>
 800e0ee:	2402      	movs	r4, #2
 800e0f0:	e7d3      	b.n	800e09a <ComputeCmac+0x26>
	...

0800e0f4 <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800e0f4:	b168      	cbz	r0, 800e112 <SecureElementInit+0x1e>
{
 800e0f6:	b510      	push	{r4, lr}
 800e0f8:	460c      	mov	r4, r1
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800e0fa:	4a08      	ldr	r2, [pc, #32]	; (800e11c <SecureElementInit+0x28>)
 800e0fc:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800e0fe:	22c0      	movs	r2, #192	; 0xc0
 800e100:	4907      	ldr	r1, [pc, #28]	; (800e120 <SecureElementInit+0x2c>)
 800e102:	f000 fa9c 	bl	800e63e <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 800e106:	b134      	cbz	r4, 800e116 <SecureElementInit+0x22>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 800e108:	4b04      	ldr	r3, [pc, #16]	; (800e11c <SecureElementInit+0x28>)
 800e10a:	6818      	ldr	r0, [r3, #0]
 800e10c:	47a0      	blx	r4
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800e10e:	2000      	movs	r0, #0
}
 800e110:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e112:	2002      	movs	r0, #2
}
 800e114:	4770      	bx	lr
    return SECURE_ELEMENT_SUCCESS;
 800e116:	2000      	movs	r0, #0
 800e118:	e7fa      	b.n	800e110 <SecureElementInit+0x1c>
 800e11a:	bf00      	nop
 800e11c:	20000e34 	.word	0x20000e34
 800e120:	0803e500 	.word	0x0803e500

0800e124 <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800e124:	2300      	movs	r3, #0
 800e126:	2b09      	cmp	r3, #9
 800e128:	d817      	bhi.n	800e15a <SecureElementGetKeyByID+0x36>
{
 800e12a:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800e12c:	4a0c      	ldr	r2, [pc, #48]	; (800e160 <SecureElementGetKeyByID+0x3c>)
 800e12e:	6814      	ldr	r4, [r2, #0]
 800e130:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e134:	4422      	add	r2, r4
 800e136:	7c12      	ldrb	r2, [r2, #16]
 800e138:	4282      	cmp	r2, r0
 800e13a:	d006      	beq.n	800e14a <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800e13c:	3301      	adds	r3, #1
 800e13e:	b2db      	uxtb	r3, r3
 800e140:	2b09      	cmp	r3, #9
 800e142:	d9f3      	bls.n	800e12c <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e144:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800e146:	bc10      	pop	{r4}
 800e148:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 800e14a:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 800e14e:	f10c 0c10 	add.w	ip, ip, #16
 800e152:	4464      	add	r4, ip
 800e154:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e156:	2000      	movs	r0, #0
 800e158:	e7f5      	b.n	800e146 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e15a:	2003      	movs	r0, #3
}
 800e15c:	4770      	bx	lr
 800e15e:	bf00      	nop
 800e160:	20000e34 	.word	0x20000e34

0800e164 <PrintKey>:
{
 800e164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e168:	b095      	sub	sp, #84	; 0x54
 800e16a:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 800e16c:	a913      	add	r1, sp, #76	; 0x4c
 800e16e:	f7ff ffd9 	bl	800e124 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 800e172:	2800      	cmp	r0, #0
 800e174:	d154      	bne.n	800e220 <PrintKey+0xbc>
        if (key == APP_KEY)
 800e176:	b1b4      	cbz	r4, 800e1a6 <PrintKey+0x42>
        else if (key == NWK_KEY)
 800e178:	2c01      	cmp	r4, #1
 800e17a:	d054      	beq.n	800e226 <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 800e17c:	2c03      	cmp	r4, #3
 800e17e:	d059      	beq.n	800e234 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 800e180:	2c02      	cmp	r4, #2
 800e182:	d05e      	beq.n	800e242 <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 800e184:	2c04      	cmp	r4, #4
 800e186:	d063      	beq.n	800e250 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 800e188:	2c7f      	cmp	r4, #127	; 0x7f
 800e18a:	d068      	beq.n	800e25e <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 800e18c:	2c80      	cmp	r4, #128	; 0x80
 800e18e:	d06d      	beq.n	800e26c <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 800e190:	2c81      	cmp	r4, #129	; 0x81
 800e192:	d072      	beq.n	800e27a <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 800e194:	2c82      	cmp	r4, #130	; 0x82
 800e196:	d10c      	bne.n	800e1b2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800e198:	4b3b      	ldr	r3, [pc, #236]	; (800e288 <PrintKey+0x124>)
 800e19a:	2200      	movs	r2, #0
 800e19c:	4611      	mov	r1, r2
 800e19e:	2002      	movs	r0, #2
 800e1a0:	f002 f8f6 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 800e1a4:	e005      	b.n	800e1b2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800e1a6:	4b39      	ldr	r3, [pc, #228]	; (800e28c <PrintKey+0x128>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	4611      	mov	r1, r2
 800e1ac:	2002      	movs	r0, #2
 800e1ae:	f002 f8ef 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800e1b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e1b4:	785a      	ldrb	r2, [r3, #1]
 800e1b6:	9210      	str	r2, [sp, #64]	; 0x40
 800e1b8:	7899      	ldrb	r1, [r3, #2]
 800e1ba:	9111      	str	r1, [sp, #68]	; 0x44
 800e1bc:	78da      	ldrb	r2, [r3, #3]
 800e1be:	7919      	ldrb	r1, [r3, #4]
 800e1c0:	7958      	ldrb	r0, [r3, #5]
 800e1c2:	799c      	ldrb	r4, [r3, #6]
 800e1c4:	79dd      	ldrb	r5, [r3, #7]
 800e1c6:	7a1e      	ldrb	r6, [r3, #8]
 800e1c8:	7a5f      	ldrb	r7, [r3, #9]
 800e1ca:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800e1ce:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800e1d2:	f893 800c 	ldrb.w	r8, [r3, #12]
 800e1d6:	f893 900d 	ldrb.w	r9, [r3, #13]
 800e1da:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800e1de:	f893 b00f 	ldrb.w	fp, [r3, #15]
 800e1e2:	7c1b      	ldrb	r3, [r3, #16]
 800e1e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1e6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800e1ea:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e1ee:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e1f2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800e1f6:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800e1fa:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800e1fe:	9708      	str	r7, [sp, #32]
 800e200:	9607      	str	r6, [sp, #28]
 800e202:	9506      	str	r5, [sp, #24]
 800e204:	9405      	str	r4, [sp, #20]
 800e206:	9004      	str	r0, [sp, #16]
 800e208:	9103      	str	r1, [sp, #12]
 800e20a:	9202      	str	r2, [sp, #8]
 800e20c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e20e:	9101      	str	r1, [sp, #4]
 800e210:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e212:	9200      	str	r2, [sp, #0]
 800e214:	4b1e      	ldr	r3, [pc, #120]	; (800e290 <PrintKey+0x12c>)
 800e216:	2200      	movs	r2, #0
 800e218:	4611      	mov	r1, r2
 800e21a:	2002      	movs	r0, #2
 800e21c:	f002 f8b8 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 800e220:	b015      	add	sp, #84	; 0x54
 800e222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800e226:	4b1b      	ldr	r3, [pc, #108]	; (800e294 <PrintKey+0x130>)
 800e228:	2200      	movs	r2, #0
 800e22a:	4611      	mov	r1, r2
 800e22c:	2002      	movs	r0, #2
 800e22e:	f002 f8af 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 800e232:	e7be      	b.n	800e1b2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800e234:	4b18      	ldr	r3, [pc, #96]	; (800e298 <PrintKey+0x134>)
 800e236:	2200      	movs	r2, #0
 800e238:	4611      	mov	r1, r2
 800e23a:	2002      	movs	r0, #2
 800e23c:	f002 f8a8 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 800e240:	e7b7      	b.n	800e1b2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800e242:	4b16      	ldr	r3, [pc, #88]	; (800e29c <PrintKey+0x138>)
 800e244:	2200      	movs	r2, #0
 800e246:	4611      	mov	r1, r2
 800e248:	2002      	movs	r0, #2
 800e24a:	f002 f8a1 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 800e24e:	e7b0      	b.n	800e1b2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800e250:	4b13      	ldr	r3, [pc, #76]	; (800e2a0 <PrintKey+0x13c>)
 800e252:	2200      	movs	r2, #0
 800e254:	4611      	mov	r1, r2
 800e256:	2002      	movs	r0, #2
 800e258:	f002 f89a 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 800e25c:	e7a9      	b.n	800e1b2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800e25e:	4b11      	ldr	r3, [pc, #68]	; (800e2a4 <PrintKey+0x140>)
 800e260:	2200      	movs	r2, #0
 800e262:	4611      	mov	r1, r2
 800e264:	2002      	movs	r0, #2
 800e266:	f002 f893 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 800e26a:	e7a2      	b.n	800e1b2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800e26c:	4b0e      	ldr	r3, [pc, #56]	; (800e2a8 <PrintKey+0x144>)
 800e26e:	2200      	movs	r2, #0
 800e270:	4611      	mov	r1, r2
 800e272:	2002      	movs	r0, #2
 800e274:	f002 f88c 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 800e278:	e79b      	b.n	800e1b2 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800e27a:	4b0c      	ldr	r3, [pc, #48]	; (800e2ac <PrintKey+0x148>)
 800e27c:	2200      	movs	r2, #0
 800e27e:	4611      	mov	r1, r2
 800e280:	2002      	movs	r0, #2
 800e282:	f002 f885 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 800e286:	e794      	b.n	800e1b2 <PrintKey+0x4e>
 800e288:	08011c18 	.word	0x08011c18
 800e28c:	08011b58 	.word	0x08011b58
 800e290:	08011c30 	.word	0x08011c30
 800e294:	08011b70 	.word	0x08011b70
 800e298:	08011b88 	.word	0x08011b88
 800e29c:	08011ba0 	.word	0x08011ba0
 800e2a0:	08011bb8 	.word	0x08011bb8
 800e2a4:	08011bd0 	.word	0x08011bd0
 800e2a8:	08011be8 	.word	0x08011be8
 800e2ac:	08011c00 	.word	0x08011c00

0800e2b0 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800e2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2b2:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800e2b4:	4b28      	ldr	r3, [pc, #160]	; (800e358 <SecureElementPrintKeys+0xa8>)
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	4611      	mov	r1, r2
 800e2ba:	2002      	movs	r0, #2
 800e2bc:	f002 f868 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800e2c0:	2000      	movs	r0, #0
 800e2c2:	f7ff ff4f 	bl	800e164 <PrintKey>
    PrintKey(NWK_KEY);
 800e2c6:	2001      	movs	r0, #1
 800e2c8:	f7ff ff4c 	bl	800e164 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800e2cc:	4b23      	ldr	r3, [pc, #140]	; (800e35c <SecureElementPrintKeys+0xac>)
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	4611      	mov	r1, r2
 800e2d2:	2002      	movs	r0, #2
 800e2d4:	f002 f85c 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800e2d8:	2003      	movs	r0, #3
 800e2da:	f7ff ff43 	bl	800e164 <PrintKey>
    PrintKey(NWK_S_KEY);
 800e2de:	2002      	movs	r0, #2
 800e2e0:	f7ff ff40 	bl	800e164 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800e2e4:	4b1e      	ldr	r3, [pc, #120]	; (800e360 <SecureElementPrintKeys+0xb0>)
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	4611      	mov	r1, r2
 800e2ea:	2002      	movs	r0, #2
 800e2ec:	f002 f850 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800e2f0:	4c1c      	ldr	r4, [pc, #112]	; (800e364 <SecureElementPrintKeys+0xb4>)
 800e2f2:	6823      	ldr	r3, [r4, #0]
 800e2f4:	781a      	ldrb	r2, [r3, #0]
 800e2f6:	7859      	ldrb	r1, [r3, #1]
 800e2f8:	7898      	ldrb	r0, [r3, #2]
 800e2fa:	78dd      	ldrb	r5, [r3, #3]
 800e2fc:	791e      	ldrb	r6, [r3, #4]
 800e2fe:	795f      	ldrb	r7, [r3, #5]
 800e300:	f893 c006 	ldrb.w	ip, [r3, #6]
 800e304:	79db      	ldrb	r3, [r3, #7]
 800e306:	9307      	str	r3, [sp, #28]
 800e308:	f8cd c018 	str.w	ip, [sp, #24]
 800e30c:	9705      	str	r7, [sp, #20]
 800e30e:	9604      	str	r6, [sp, #16]
 800e310:	9503      	str	r5, [sp, #12]
 800e312:	9002      	str	r0, [sp, #8]
 800e314:	9101      	str	r1, [sp, #4]
 800e316:	9200      	str	r2, [sp, #0]
 800e318:	4b13      	ldr	r3, [pc, #76]	; (800e368 <SecureElementPrintKeys+0xb8>)
 800e31a:	2200      	movs	r2, #0
 800e31c:	4611      	mov	r1, r2
 800e31e:	2002      	movs	r0, #2
 800e320:	f002 f836 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800e324:	6823      	ldr	r3, [r4, #0]
 800e326:	7a1a      	ldrb	r2, [r3, #8]
 800e328:	7a59      	ldrb	r1, [r3, #9]
 800e32a:	7a98      	ldrb	r0, [r3, #10]
 800e32c:	7adc      	ldrb	r4, [r3, #11]
 800e32e:	7b1d      	ldrb	r5, [r3, #12]
 800e330:	7b5e      	ldrb	r6, [r3, #13]
 800e332:	7b9f      	ldrb	r7, [r3, #14]
 800e334:	7bdb      	ldrb	r3, [r3, #15]
 800e336:	9307      	str	r3, [sp, #28]
 800e338:	9706      	str	r7, [sp, #24]
 800e33a:	9605      	str	r6, [sp, #20]
 800e33c:	9504      	str	r5, [sp, #16]
 800e33e:	9403      	str	r4, [sp, #12]
 800e340:	9002      	str	r0, [sp, #8]
 800e342:	9101      	str	r1, [sp, #4]
 800e344:	9200      	str	r2, [sp, #0]
 800e346:	4b09      	ldr	r3, [pc, #36]	; (800e36c <SecureElementPrintKeys+0xbc>)
 800e348:	2200      	movs	r2, #0
 800e34a:	4611      	mov	r1, r2
 800e34c:	2002      	movs	r0, #2
 800e34e:	f002 f81f 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 800e352:	2000      	movs	r0, #0
 800e354:	b009      	add	sp, #36	; 0x24
 800e356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e358:	08011c84 	.word	0x08011c84
 800e35c:	08011c9c 	.word	0x08011c9c
 800e360:	08011cb4 	.word	0x08011cb4
 800e364:	20000e34 	.word	0x20000e34
 800e368:	08011ccc 	.word	0x08011ccc
 800e36c:	08011d0c 	.word	0x08011d0c

0800e370 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800e370:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800e372:	2004      	movs	r0, #4
 800e374:	f7ff fef6 	bl	800e164 <PrintKey>
    PrintKey(MC_KE_KEY);
 800e378:	207f      	movs	r0, #127	; 0x7f
 800e37a:	f7ff fef3 	bl	800e164 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800e37e:	2002      	movs	r0, #2
 800e380:	f7ff fef0 	bl	800e164 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800e384:	2003      	movs	r0, #3
 800e386:	f7ff feed 	bl	800e164 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 800e38a:	2000      	movs	r0, #0
 800e38c:	bd08      	pop	{r3, pc}

0800e38e <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800e38e:	2b7e      	cmp	r3, #126	; 0x7e
 800e390:	d80a      	bhi.n	800e3a8 <SecureElementComputeAesCmac+0x1a>
{
 800e392:	b500      	push	{lr}
 800e394:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800e396:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e39a:	f8cd c000 	str.w	ip, [sp]
 800e39e:	f7ff fe69 	bl	800e074 <ComputeCmac>
}
 800e3a2:	b003      	add	sp, #12
 800e3a4:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e3a8:	2003      	movs	r0, #3
}
 800e3aa:	4770      	bx	lr

0800e3ac <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 800e3ac:	b190      	cbz	r0, 800e3d4 <SecureElementVerifyAesCmac+0x28>
{
 800e3ae:	b510      	push	{r4, lr}
 800e3b0:	b084      	sub	sp, #16
 800e3b2:	468c      	mov	ip, r1
 800e3b4:	4614      	mov	r4, r2
 800e3b6:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800e3bc:	aa03      	add	r2, sp, #12
 800e3be:	9200      	str	r2, [sp, #0]
 800e3c0:	4662      	mov	r2, ip
 800e3c2:	f7ff fe57 	bl	800e074 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e3c6:	b918      	cbnz	r0, 800e3d0 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 800e3c8:	9b03      	ldr	r3, [sp, #12]
 800e3ca:	42a3      	cmp	r3, r4
 800e3cc:	d000      	beq.n	800e3d0 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800e3ce:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 800e3d0:	b004      	add	sp, #16
 800e3d2:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e3d4:	2002      	movs	r0, #2
}
 800e3d6:	4770      	bx	lr

0800e3d8 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800e3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3dc:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 800e3de:	b350      	cbz	r0, 800e436 <SecureElementAesEncrypt+0x5e>
 800e3e0:	460c      	mov	r4, r1
 800e3e2:	4615      	mov	r5, r2
 800e3e4:	461e      	mov	r6, r3
 800e3e6:	4607      	mov	r7, r0
 800e3e8:	b343      	cbz	r3, 800e43c <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800e3ea:	f011 0f0f 	tst.w	r1, #15
 800e3ee:	d128      	bne.n	800e442 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800e3f0:	22f0      	movs	r2, #240	; 0xf0
 800e3f2:	2100      	movs	r1, #0
 800e3f4:	a801      	add	r0, sp, #4
 800e3f6:	f000 f93a 	bl	800e66e <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800e3fa:	4669      	mov	r1, sp
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	f7ff fe19 	bl	800e034 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e402:	4680      	mov	r8, r0
 800e404:	b118      	cbz	r0, 800e40e <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 800e406:	4640      	mov	r0, r8
 800e408:	b03e      	add	sp, #248	; 0xf8
 800e40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800e40e:	aa01      	add	r2, sp, #4
 800e410:	2110      	movs	r1, #16
 800e412:	9800      	ldr	r0, [sp, #0]
 800e414:	3001      	adds	r0, #1
 800e416:	f7ff fd61 	bl	800dedc <lorawan_aes_set_key>
        uint8_t block = 0;
 800e41a:	4645      	mov	r5, r8
        while( size != 0 )
 800e41c:	e008      	b.n	800e430 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800e41e:	aa01      	add	r2, sp, #4
 800e420:	1971      	adds	r1, r6, r5
 800e422:	1978      	adds	r0, r7, r5
 800e424:	f7ff fddc 	bl	800dfe0 <lorawan_aes_encrypt>
            block = block + 16;
 800e428:	3510      	adds	r5, #16
 800e42a:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 800e42c:	3c10      	subs	r4, #16
 800e42e:	b2a4      	uxth	r4, r4
        while( size != 0 )
 800e430:	2c00      	cmp	r4, #0
 800e432:	d1f4      	bne.n	800e41e <SecureElementAesEncrypt+0x46>
 800e434:	e7e7      	b.n	800e406 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 800e436:	f04f 0802 	mov.w	r8, #2
 800e43a:	e7e4      	b.n	800e406 <SecureElementAesEncrypt+0x2e>
 800e43c:	f04f 0802 	mov.w	r8, #2
 800e440:	e7e1      	b.n	800e406 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e442:	f04f 0805 	mov.w	r8, #5
 800e446:	e7de      	b.n	800e406 <SecureElementAesEncrypt+0x2e>

0800e448 <SecureElementSetKey>:
{
 800e448:	b530      	push	{r4, r5, lr}
 800e44a:	b085      	sub	sp, #20
    if( key == NULL )
 800e44c:	2900      	cmp	r1, #0
 800e44e:	d038      	beq.n	800e4c2 <SecureElementSetKey+0x7a>
 800e450:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e452:	2300      	movs	r3, #0
 800e454:	2b09      	cmp	r3, #9
 800e456:	d830      	bhi.n	800e4ba <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e458:	4a1b      	ldr	r2, [pc, #108]	; (800e4c8 <SecureElementSetKey+0x80>)
 800e45a:	6811      	ldr	r1, [r2, #0]
 800e45c:	461c      	mov	r4, r3
 800e45e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 800e462:	440a      	add	r2, r1
 800e464:	7c12      	ldrb	r2, [r2, #16]
 800e466:	4282      	cmp	r2, r0
 800e468:	d002      	beq.n	800e470 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e46a:	3301      	adds	r3, #1
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	e7f1      	b.n	800e454 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 800e470:	2880      	cmp	r0, #128	; 0x80
 800e472:	d00a      	beq.n	800e48a <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800e474:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 800e478:	3310      	adds	r3, #16
 800e47a:	440b      	add	r3, r1
 800e47c:	2210      	movs	r2, #16
 800e47e:	4661      	mov	r1, ip
 800e480:	1c58      	adds	r0, r3, #1
 800e482:	f000 f8dc 	bl	800e63e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800e486:	2500      	movs	r5, #0
 800e488:	e018      	b.n	800e4bc <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 800e48a:	2300      	movs	r3, #0
 800e48c:	9300      	str	r3, [sp, #0]
 800e48e:	9301      	str	r3, [sp, #4]
 800e490:	9302      	str	r3, [sp, #8]
 800e492:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800e494:	466b      	mov	r3, sp
 800e496:	227f      	movs	r2, #127	; 0x7f
 800e498:	2110      	movs	r1, #16
 800e49a:	4660      	mov	r0, ip
 800e49c:	f7ff ff9c 	bl	800e3d8 <SecureElementAesEncrypt>
 800e4a0:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800e4a2:	4b09      	ldr	r3, [pc, #36]	; (800e4c8 <SecureElementSetKey+0x80>)
 800e4a4:	6818      	ldr	r0, [r3, #0]
 800e4a6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 800e4aa:	3410      	adds	r4, #16
 800e4ac:	4420      	add	r0, r4
 800e4ae:	2210      	movs	r2, #16
 800e4b0:	4669      	mov	r1, sp
 800e4b2:	3001      	adds	r0, #1
 800e4b4:	f000 f8c3 	bl	800e63e <memcpy1>
                return retval;
 800e4b8:	e000      	b.n	800e4bc <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e4ba:	2503      	movs	r5, #3
}
 800e4bc:	4628      	mov	r0, r5
 800e4be:	b005      	add	sp, #20
 800e4c0:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e4c2:	2502      	movs	r5, #2
 800e4c4:	e7fa      	b.n	800e4bc <SecureElementSetKey+0x74>
 800e4c6:	bf00      	nop
 800e4c8:	20000e34 	.word	0x20000e34

0800e4cc <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 800e4cc:	b1d0      	cbz	r0, 800e504 <SecureElementDeriveAndStoreKey+0x38>
{
 800e4ce:	b510      	push	{r4, lr}
 800e4d0:	b084      	sub	sp, #16
 800e4d2:	4614      	mov	r4, r2
 800e4d4:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800e4d6:	2a7f      	cmp	r2, #127	; 0x7f
 800e4d8:	d101      	bne.n	800e4de <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800e4da:	2904      	cmp	r1, #4
 800e4dc:	d114      	bne.n	800e508 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800e4de:	2300      	movs	r3, #0
 800e4e0:	9300      	str	r3, [sp, #0]
 800e4e2:	9301      	str	r3, [sp, #4]
 800e4e4:	9302      	str	r3, [sp, #8]
 800e4e6:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800e4e8:	466b      	mov	r3, sp
 800e4ea:	460a      	mov	r2, r1
 800e4ec:	2110      	movs	r1, #16
 800e4ee:	4660      	mov	r0, ip
 800e4f0:	f7ff ff72 	bl	800e3d8 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e4f4:	b108      	cbz	r0, 800e4fa <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e4f6:	b004      	add	sp, #16
 800e4f8:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 800e4fa:	4669      	mov	r1, sp
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f7ff ffa3 	bl	800e448 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e502:	e7f8      	b.n	800e4f6 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 800e504:	2002      	movs	r0, #2
}
 800e506:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e508:	2003      	movs	r0, #3
 800e50a:	e7f4      	b.n	800e4f6 <SecureElementDeriveAndStoreKey+0x2a>

0800e50c <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800e50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e510:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800e514:	9d07      	ldr	r5, [sp, #28]
 800e516:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800e518:	b37b      	cbz	r3, 800e57a <SecureElementProcessJoinAccept+0x6e>
 800e51a:	4698      	mov	r8, r3
 800e51c:	b37d      	cbz	r5, 800e57e <SecureElementProcessJoinAccept+0x72>
 800e51e:	b386      	cbz	r6, 800e582 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800e520:	2c21      	cmp	r4, #33	; 0x21
 800e522:	d830      	bhi.n	800e586 <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800e524:	b2a7      	uxth	r7, r4
 800e526:	463a      	mov	r2, r7
 800e528:	4619      	mov	r1, r3
 800e52a:	4628      	mov	r0, r5
 800e52c:	f000 f887 	bl	800e63e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800e530:	1e79      	subs	r1, r7, #1
 800e532:	1c6b      	adds	r3, r5, #1
 800e534:	2201      	movs	r2, #1
 800e536:	b289      	uxth	r1, r1
 800e538:	eb08 0002 	add.w	r0, r8, r2
 800e53c:	f7ff ff4c 	bl	800e3d8 <SecureElementAesEncrypt>
 800e540:	bb20      	cbnz	r0, 800e58c <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800e542:	7aeb      	ldrb	r3, [r5, #11]
 800e544:	09db      	lsrs	r3, r3, #7
 800e546:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800e548:	442c      	add	r4, r5
 800e54a:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800e54e:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 800e552:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800e556:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 800e55a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800e55e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 800e562:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800e566:	b99b      	cbnz	r3, 800e590 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800e568:	1f39      	subs	r1, r7, #4
 800e56a:	2301      	movs	r3, #1
 800e56c:	b289      	uxth	r1, r1
 800e56e:	4628      	mov	r0, r5
 800e570:	f7ff ff1c 	bl	800e3ac <SecureElementVerifyAesCmac>
 800e574:	b140      	cbz	r0, 800e588 <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800e576:	2001      	movs	r0, #1
 800e578:	e006      	b.n	800e588 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 800e57a:	2002      	movs	r0, #2
 800e57c:	e004      	b.n	800e588 <SecureElementProcessJoinAccept+0x7c>
 800e57e:	2002      	movs	r0, #2
 800e580:	e002      	b.n	800e588 <SecureElementProcessJoinAccept+0x7c>
 800e582:	2002      	movs	r0, #2
 800e584:	e000      	b.n	800e588 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e586:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 800e588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800e58c:	2007      	movs	r0, #7
 800e58e:	e7fb      	b.n	800e588 <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800e590:	2004      	movs	r0, #4
 800e592:	e7f9      	b.n	800e588 <SecureElementProcessJoinAccept+0x7c>

0800e594 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 800e594:	b140      	cbz	r0, 800e5a8 <SecureElementSetDevEui+0x14>
{
 800e596:	b508      	push	{r3, lr}
 800e598:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800e59a:	2208      	movs	r2, #8
 800e59c:	4b03      	ldr	r3, [pc, #12]	; (800e5ac <SecureElementSetDevEui+0x18>)
 800e59e:	6818      	ldr	r0, [r3, #0]
 800e5a0:	f000 f84d 	bl	800e63e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e5a4:	2000      	movs	r0, #0
}
 800e5a6:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e5a8:	2002      	movs	r0, #2
}
 800e5aa:	4770      	bx	lr
 800e5ac:	20000e34 	.word	0x20000e34

0800e5b0 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 800e5b0:	4b01      	ldr	r3, [pc, #4]	; (800e5b8 <SecureElementGetDevEui+0x8>)
 800e5b2:	6818      	ldr	r0, [r3, #0]
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop
 800e5b8:	20000e34 	.word	0x20000e34

0800e5bc <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 800e5bc:	b148      	cbz	r0, 800e5d2 <SecureElementSetJoinEui+0x16>
{
 800e5be:	b508      	push	{r3, lr}
 800e5c0:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800e5c2:	4b05      	ldr	r3, [pc, #20]	; (800e5d8 <SecureElementSetJoinEui+0x1c>)
 800e5c4:	6818      	ldr	r0, [r3, #0]
 800e5c6:	2208      	movs	r2, #8
 800e5c8:	4410      	add	r0, r2
 800e5ca:	f000 f838 	bl	800e63e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e5ce:	2000      	movs	r0, #0
}
 800e5d0:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 800e5d2:	2002      	movs	r0, #2
}
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop
 800e5d8:	20000e34 	.word	0x20000e34

0800e5dc <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 800e5dc:	4b01      	ldr	r3, [pc, #4]	; (800e5e4 <SecureElementGetJoinEui+0x8>)
 800e5de:	6818      	ldr	r0, [r3, #0]
}
 800e5e0:	3008      	adds	r0, #8
 800e5e2:	4770      	bx	lr
 800e5e4:	20000e34 	.word	0x20000e34

0800e5e8 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800e5e8:	4b09      	ldr	r3, [pc, #36]	; (800e610 <rand1+0x28>)
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	4909      	ldr	r1, [pc, #36]	; (800e614 <rand1+0x2c>)
 800e5ee:	f243 0039 	movw	r0, #12345	; 0x3039
 800e5f2:	fb01 0002 	mla	r0, r1, r2, r0
 800e5f6:	6018      	str	r0, [r3, #0]
 800e5f8:	2303      	movs	r3, #3
 800e5fa:	fba3 2300 	umull	r2, r3, r3, r0
 800e5fe:	1ac2      	subs	r2, r0, r3
 800e600:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800e604:	0f9b      	lsrs	r3, r3, #30
 800e606:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 800e60a:	1ac0      	subs	r0, r0, r3
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop
 800e610:	20000108 	.word	0x20000108
 800e614:	41c64e6d 	.word	0x41c64e6d

0800e618 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 800e618:	4b01      	ldr	r3, [pc, #4]	; (800e620 <srand1+0x8>)
 800e61a:	6018      	str	r0, [r3, #0]
}
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	20000108 	.word	0x20000108

0800e624 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800e624:	b538      	push	{r3, r4, r5, lr}
 800e626:	4605      	mov	r5, r0
 800e628:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800e62a:	f7ff ffdd 	bl	800e5e8 <rand1>
 800e62e:	1b61      	subs	r1, r4, r5
 800e630:	3101      	adds	r1, #1
 800e632:	fb90 f3f1 	sdiv	r3, r0, r1
 800e636:	fb01 0013 	mls	r0, r1, r3, r0
}
 800e63a:	4428      	add	r0, r5
 800e63c:	bd38      	pop	{r3, r4, r5, pc}

0800e63e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800e63e:	e004      	b.n	800e64a <memcpy1+0xc>
    {
        *dst++ = *src++;
 800e640:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e644:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 800e648:	461a      	mov	r2, r3
 800e64a:	1e53      	subs	r3, r2, #1
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	2a00      	cmp	r2, #0
 800e650:	d1f6      	bne.n	800e640 <memcpy1+0x2>
    }
}
 800e652:	4770      	bx	lr

0800e654 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800e654:	1e53      	subs	r3, r2, #1
 800e656:	4418      	add	r0, r3
    while( size-- )
 800e658:	e004      	b.n	800e664 <memcpyr+0x10>
    {
        *dst-- = *src++;
 800e65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e65e:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 800e662:	461a      	mov	r2, r3
 800e664:	1e53      	subs	r3, r2, #1
 800e666:	b29b      	uxth	r3, r3
 800e668:	2a00      	cmp	r2, #0
 800e66a:	d1f6      	bne.n	800e65a <memcpyr+0x6>
    }
}
 800e66c:	4770      	bx	lr

0800e66e <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800e66e:	e002      	b.n	800e676 <memset1+0x8>
    {
        *dst++ = value;
 800e670:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 800e674:	461a      	mov	r2, r3
 800e676:	1e53      	subs	r3, r2, #1
 800e678:	b29b      	uxth	r3, r3
 800e67a:	2a00      	cmp	r2, #0
 800e67c:	d1f8      	bne.n	800e670 <memset1+0x2>
    }
}
 800e67e:	4770      	bx	lr

0800e680 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800e680:	b1f0      	cbz	r0, 800e6c0 <Crc32+0x40>
{
 800e682:	b510      	push	{r4, lr}
 800e684:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 800e686:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 800e68a:	f04f 30ff 	mov.w	r0, #4294967295
 800e68e:	e00e      	b.n	800e6ae <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800e690:	f340 0c00 	sbfx	ip, r0, #0, #1
 800e694:	4a0b      	ldr	r2, [pc, #44]	; (800e6c4 <Crc32+0x44>)
 800e696:	ea0c 0202 	and.w	r2, ip, r2
 800e69a:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 800e69e:	3301      	adds	r3, #1
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	2b07      	cmp	r3, #7
 800e6a4:	d9f4      	bls.n	800e690 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 800e6a6:	f10e 0e01 	add.w	lr, lr, #1
 800e6aa:	fa1f fe8e 	uxth.w	lr, lr
 800e6ae:	458e      	cmp	lr, r1
 800e6b0:	d204      	bcs.n	800e6bc <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 800e6b2:	f814 300e 	ldrb.w	r3, [r4, lr]
 800e6b6:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	e7f2      	b.n	800e6a2 <Crc32+0x22>
        }
    }

    return ~crc;
 800e6bc:	43c0      	mvns	r0, r0
}
 800e6be:	bd10      	pop	{r4, pc}
        return 0;
 800e6c0:	2000      	movs	r0, #0
}
 800e6c2:	4770      	bx	lr
 800e6c4:	edb88320 	.word	0xedb88320

0800e6c8 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800e6c8:	2001      	movs	r0, #1
 800e6ca:	4770      	bx	lr

0800e6cc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800e6cc:	280a      	cmp	r0, #10
 800e6ce:	d807      	bhi.n	800e6e0 <RadioGetLoRaBandwidthInHz+0x14>
 800e6d0:	e8df f000 	tbb	[pc, r0]
 800e6d4:	17110b20 	.word	0x17110b20
 800e6d8:	061e1c1a 	.word	0x061e1c1a
 800e6dc:	0e08      	.short	0x0e08
 800e6de:	14          	.byte	0x14
 800e6df:	00          	.byte	0x00
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800e6e4:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 800e6e8:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800e6ea:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 800e6ee:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800e6f0:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 800e6f4:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800e6f6:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 800e6fa:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800e6fc:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 800e700:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800e702:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 800e706:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800e708:	4804      	ldr	r0, [pc, #16]	; (800e71c <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800e70a:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800e70c:	4804      	ldr	r0, [pc, #16]	; (800e720 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800e70e:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800e710:	4804      	ldr	r0, [pc, #16]	; (800e724 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800e712:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800e714:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop
 800e71c:	0001e848 	.word	0x0001e848
 800e720:	0003d090 	.word	0x0003d090
 800e724:	0007a120 	.word	0x0007a120

0800e728 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e728:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800e72c:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e72e:	b953      	cbnz	r3, 800e746 <RadioGetGfskTimeOnAirNumerator+0x1e>
 800e730:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 800e732:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e734:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e736:	b141      	cbz	r1, 800e74a <RadioGetGfskTimeOnAirNumerator+0x22>
 800e738:	2302      	movs	r3, #2
 800e73a:	f89d 0000 	ldrb.w	r0, [sp]
 800e73e:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 800e740:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800e744:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e746:	2000      	movs	r0, #0
 800e748:	e7f3      	b.n	800e732 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e74a:	2300      	movs	r3, #0
 800e74c:	e7f5      	b.n	800e73a <RadioGetGfskTimeOnAirNumerator+0x12>

0800e74e <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e74e:	b570      	push	{r4, r5, r6, lr}
 800e750:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800e754:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800e758:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800e75a:	f1a1 0c05 	sub.w	ip, r1, #5
 800e75e:	f1bc 0f01 	cmp.w	ip, #1
 800e762:	d932      	bls.n	800e7ca <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e764:	b918      	cbnz	r0, 800e76e <RadioGetLoRaTimeOnAirNumerator+0x20>
 800e766:	f1a1 060b 	sub.w	r6, r1, #11
 800e76a:	2e01      	cmp	r6, #1
 800e76c:	d935      	bls.n	800e7da <RadioGetLoRaTimeOnAirNumerator+0x8c>
 800e76e:	2801      	cmp	r0, #1
 800e770:	d02f      	beq.n	800e7d2 <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 800e772:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e774:	f89d e014 	ldrb.w	lr, [sp, #20]
 800e778:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800e77c:	b38d      	cbz	r5, 800e7e2 <RadioGetLoRaTimeOnAirNumerator+0x94>
 800e77e:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e782:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 800e784:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800e786:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800e78a:	b36c      	cbz	r4, 800e7e8 <RadioGetLoRaTimeOnAirNumerator+0x9a>
 800e78c:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 800e790:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800e792:	2906      	cmp	r1, #6
 800e794:	d904      	bls.n	800e7a0 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800e796:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800e79a:	b10e      	cbz	r6, 800e7a0 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800e79c:	1e88      	subs	r0, r1, #2
 800e79e:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800e7a0:	f1bc 0f00 	cmp.w	ip, #0
 800e7a4:	db23      	blt.n	800e7ee <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800e7a6:	4484      	add	ip, r0
 800e7a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e7ac:	fb9c fcf0 	sdiv	ip, ip, r0
 800e7b0:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800e7b4:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800e7b8:	2906      	cmp	r1, #6
 800e7ba:	d801      	bhi.n	800e7c0 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 800e7bc:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800e7c0:	0080      	lsls	r0, r0, #2
 800e7c2:	3001      	adds	r0, #1
 800e7c4:	3902      	subs	r1, #2
}
 800e7c6:	4088      	lsls	r0, r1
 800e7c8:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800e7ca:	2b0b      	cmp	r3, #11
 800e7cc:	d8ca      	bhi.n	800e764 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800e7ce:	230c      	movs	r3, #12
 800e7d0:	e7c8      	b.n	800e764 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e7d2:	290c      	cmp	r1, #12
 800e7d4:	d003      	beq.n	800e7de <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 800e7d6:	2600      	movs	r6, #0
 800e7d8:	e7cc      	b.n	800e774 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800e7da:	2601      	movs	r6, #1
 800e7dc:	e7ca      	b.n	800e774 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800e7de:	2601      	movs	r6, #1
 800e7e0:	e7c8      	b.n	800e774 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800e7e2:	f04f 0c00 	mov.w	ip, #0
 800e7e6:	e7cc      	b.n	800e782 <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 800e7e8:	f04f 0c14 	mov.w	ip, #20
 800e7ec:	e7d0      	b.n	800e790 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 800e7ee:	f04f 0c00 	mov.w	ip, #0
 800e7f2:	e7d8      	b.n	800e7a6 <RadioGetLoRaTimeOnAirNumerator+0x58>

0800e7f4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800e7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	460e      	mov	r6, r1
 800e7fa:	4615      	mov	r5, r2
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800e802:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800e806:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 800e80a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800e80e:	b148      	cbz	r0, 800e824 <RadioTimeOnAir+0x30>
 800e810:	2801      	cmp	r0, #1
 800e812:	d012      	beq.n	800e83a <RadioTimeOnAir+0x46>
 800e814:	2501      	movs	r5, #1
 800e816:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 800e818:	442c      	add	r4, r5
 800e81a:	1e60      	subs	r0, r4, #1
}
 800e81c:	fbb0 f0f5 	udiv	r0, r0, r5
 800e820:	b005      	add	sp, #20
 800e822:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800e824:	f8cd c004 	str.w	ip, [sp, #4]
 800e828:	9700      	str	r7, [sp, #0]
 800e82a:	4628      	mov	r0, r5
 800e82c:	f7ff ff7c 	bl	800e728 <RadioGetGfskTimeOnAirNumerator>
 800e830:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800e834:	fb00 f404 	mul.w	r4, r0, r4
        break;
 800e838:	e7ee      	b.n	800e818 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800e83a:	f8cd c008 	str.w	ip, [sp, #8]
 800e83e:	9701      	str	r7, [sp, #4]
 800e840:	9300      	str	r3, [sp, #0]
 800e842:	4613      	mov	r3, r2
 800e844:	460a      	mov	r2, r1
 800e846:	4629      	mov	r1, r5
 800e848:	4630      	mov	r0, r6
 800e84a:	f7ff ff80 	bl	800e74e <RadioGetLoRaTimeOnAirNumerator>
 800e84e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800e852:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800e856:	4b03      	ldr	r3, [pc, #12]	; (800e864 <RadioTimeOnAir+0x70>)
 800e858:	5d98      	ldrb	r0, [r3, r6]
 800e85a:	f7ff ff37 	bl	800e6cc <RadioGetLoRaBandwidthInHz>
 800e85e:	4605      	mov	r5, r0
        break;
 800e860:	e7da      	b.n	800e818 <RadioTimeOnAir+0x24>
 800e862:	bf00      	nop
 800e864:	08011db8 	.word	0x08011db8

0800e868 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800e868:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800e86a:	4b05      	ldr	r3, [pc, #20]	; (800e880 <RadioOnTxTimeoutProcess+0x18>)
 800e86c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e870:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e872:	4b04      	ldr	r3, [pc, #16]	; (800e884 <RadioOnTxTimeoutProcess+0x1c>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	b113      	cbz	r3, 800e87e <RadioOnTxTimeoutProcess+0x16>
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	b103      	cbz	r3, 800e87e <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 800e87c:	4798      	blx	r3
    }
}
 800e87e:	bd08      	pop	{r3, pc}
 800e880:	48000400 	.word	0x48000400
 800e884:	20000f38 	.word	0x20000f38

0800e888 <RadioOnTxTimeoutIrq>:
{
 800e888:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800e88a:	f7ff ffed 	bl	800e868 <RadioOnTxTimeoutProcess>
}
 800e88e:	bd08      	pop	{r3, pc}

0800e890 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800e890:	b508      	push	{r3, lr}
 800e892:	4b05      	ldr	r3, [pc, #20]	; (800e8a8 <RadioOnRxTimeoutProcess+0x18>)
 800e894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e898:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e89a:	4b04      	ldr	r3, [pc, #16]	; (800e8ac <RadioOnRxTimeoutProcess+0x1c>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	b113      	cbz	r3, 800e8a6 <RadioOnRxTimeoutProcess+0x16>
 800e8a0:	68db      	ldr	r3, [r3, #12]
 800e8a2:	b103      	cbz	r3, 800e8a6 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 800e8a4:	4798      	blx	r3
    }
}
 800e8a6:	bd08      	pop	{r3, pc}
 800e8a8:	48000400 	.word	0x48000400
 800e8ac:	20000f38 	.word	0x20000f38

0800e8b0 <RadioOnRxTimeoutIrq>:
{
 800e8b0:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800e8b2:	f7ff ffed 	bl	800e890 <RadioOnRxTimeoutProcess>
}
 800e8b6:	bd08      	pop	{r3, pc}

0800e8b8 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800e8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8bc:	4770      	bx	lr

0800e8be <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800e8be:	f04f 30ff 	mov.w	r0, #4294967295
 800e8c2:	4770      	bx	lr

0800e8c4 <RadioTxCw>:
{
 800e8c4:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800e8c6:	f001 fbab 	bl	8010020 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800e8ca:	2101      	movs	r1, #1
 800e8cc:	f001 fb94 	bl	800fff8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800e8d0:	f000 feac 	bl	800f62c <SUBGRF_SetTxContinuousWave>
}
 800e8d4:	bd08      	pop	{r3, pc}
	...

0800e8d8 <RadioSetRxDutyCycle>:
{
 800e8d8:	b570      	push	{r4, r5, r6, lr}
 800e8da:	4604      	mov	r4, r0
 800e8dc:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800e8de:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 800e8e2:	4e09      	ldr	r6, [pc, #36]	; (800e908 <RadioSetRxDutyCycle+0x30>)
 800e8e4:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e8ee:	4608      	mov	r0, r1
 800e8f0:	f000 ff47 	bl	800f782 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800e8fa:	f001 fb7d 	bl	800fff8 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800e8fe:	4629      	mov	r1, r5
 800e900:	4620      	mov	r0, r4
 800e902:	f000 fe63 	bl	800f5cc <SUBGRF_SetRxDutyCycle>
}
 800e906:	bd70      	pop	{r4, r5, r6, pc}
 800e908:	20000f54 	.word	0x20000f54

0800e90c <RadioRxBoosted>:
{
 800e90c:	b538      	push	{r3, r4, r5, lr}
 800e90e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 800e910:	f001 fc57 	bl	80101c2 <RFW_Is_Init>
 800e914:	2801      	cmp	r0, #1
 800e916:	d019      	beq.n	800e94c <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800e918:	2300      	movs	r3, #0
 800e91a:	461a      	mov	r2, r3
 800e91c:	f240 2162 	movw	r1, #610	; 0x262
 800e920:	4608      	mov	r0, r1
 800e922:	f000 ff2e 	bl	800f782 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800e926:	b9a4      	cbnz	r4, 800e952 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800e928:	4c11      	ldr	r4, [pc, #68]	; (800e970 <RadioRxBoosted+0x64>)
 800e92a:	2100      	movs	r1, #0
 800e92c:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800e92e:	4b11      	ldr	r3, [pc, #68]	; (800e974 <RadioRxBoosted+0x68>)
 800e930:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e934:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800e936:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800e93a:	f001 fb5d 	bl	800fff8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800e93e:	7863      	ldrb	r3, [r4, #1]
 800e940:	b183      	cbz	r3, 800e964 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800e942:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e946:	f000 ffef 	bl	800f928 <SUBGRF_SetRxBoosted>
}
 800e94a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800e94c:	f001 fc41 	bl	80101d2 <RFW_ReceiveInit>
 800e950:	e7e9      	b.n	800e926 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800e952:	4d09      	ldr	r5, [pc, #36]	; (800e978 <RadioRxBoosted+0x6c>)
 800e954:	4621      	mov	r1, r4
 800e956:	4628      	mov	r0, r5
 800e958:	f002 f90e 	bl	8010b78 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800e95c:	4628      	mov	r0, r5
 800e95e:	f002 f8c5 	bl	8010aec <UTIL_TIMER_Start>
 800e962:	e7e1      	b.n	800e928 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800e964:	4b02      	ldr	r3, [pc, #8]	; (800e970 <RadioRxBoosted+0x64>)
 800e966:	6898      	ldr	r0, [r3, #8]
 800e968:	0180      	lsls	r0, r0, #6
 800e96a:	f000 ffdd 	bl	800f928 <SUBGRF_SetRxBoosted>
}
 800e96e:	e7ec      	b.n	800e94a <RadioRxBoosted+0x3e>
 800e970:	20000f54 	.word	0x20000f54
 800e974:	48000400 	.word	0x48000400
 800e978:	20000f3c 	.word	0x20000f3c

0800e97c <RadioStandby>:
{
 800e97c:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800e97e:	2000      	movs	r0, #0
 800e980:	f000 fdd6 	bl	800f530 <SUBGRF_SetStandby>
}
 800e984:	bd08      	pop	{r3, pc}

0800e986 <RadioWrite>:
{
 800e986:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800e988:	f000 ffbe 	bl	800f908 <SUBGRF_WriteRegister>
}
 800e98c:	bd08      	pop	{r3, pc}
	...

0800e990 <RadioTxPrbs>:
{
 800e990:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800e992:	2101      	movs	r1, #1
 800e994:	4b07      	ldr	r3, [pc, #28]	; (800e9b4 <RadioTxPrbs+0x24>)
 800e996:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800e99a:	f001 fb2d 	bl	800fff8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800e99e:	212d      	movs	r1, #45	; 0x2d
 800e9a0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800e9a4:	f7ff ffef 	bl	800e986 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800e9a8:	f000 fe47 	bl	800f63a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800e9ac:	4802      	ldr	r0, [pc, #8]	; (800e9b8 <RadioTxPrbs+0x28>)
 800e9ae:	f000 fdd9 	bl	800f564 <SUBGRF_SetTx>
}
 800e9b2:	bd08      	pop	{r3, pc}
 800e9b4:	20000f54 	.word	0x20000f54
 800e9b8:	000fffff 	.word	0x000fffff

0800e9bc <RadioRead>:
{
 800e9bc:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800e9be:	f001 f895 	bl	800faec <SUBGRF_ReadRegister>
}
 800e9c2:	bd08      	pop	{r3, pc}

0800e9c4 <RadioGetStatus>:
{
 800e9c4:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800e9c6:	f000 fdad 	bl	800f524 <SUBGRF_GetOperatingMode>
 800e9ca:	2805      	cmp	r0, #5
 800e9cc:	d007      	beq.n	800e9de <RadioGetStatus+0x1a>
 800e9ce:	2807      	cmp	r0, #7
 800e9d0:	d007      	beq.n	800e9e2 <RadioGetStatus+0x1e>
 800e9d2:	2804      	cmp	r0, #4
 800e9d4:	d001      	beq.n	800e9da <RadioGetStatus+0x16>
            return RF_IDLE;
 800e9d6:	2000      	movs	r0, #0
}
 800e9d8:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800e9da:	2002      	movs	r0, #2
 800e9dc:	e7fc      	b.n	800e9d8 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800e9de:	2001      	movs	r0, #1
 800e9e0:	e7fa      	b.n	800e9d8 <RadioGetStatus+0x14>
            return RF_CAD;
 800e9e2:	2003      	movs	r0, #3
 800e9e4:	e7f8      	b.n	800e9d8 <RadioGetStatus+0x14>
	...

0800e9e8 <RadioIrqProcess>:
{
 800e9e8:	b530      	push	{r4, r5, lr}
 800e9ea:	b083      	sub	sp, #12
    uint8_t size = 0;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800e9f2:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800e9f4:	4ba5      	ldr	r3, [pc, #660]	; (800ec8c <RadioIrqProcess+0x2a4>)
 800e9f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e9fa:	2b20      	cmp	r3, #32
 800e9fc:	d829      	bhi.n	800ea52 <RadioIrqProcess+0x6a>
 800e9fe:	b21a      	sxth	r2, r3
 800ea00:	2a00      	cmp	r2, #0
 800ea02:	f000 8140 	beq.w	800ec86 <RadioIrqProcess+0x29e>
 800ea06:	3b01      	subs	r3, #1
 800ea08:	2b1f      	cmp	r3, #31
 800ea0a:	f200 813c 	bhi.w	800ec86 <RadioIrqProcess+0x29e>
 800ea0e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ea12:	0063      	.short	0x0063
 800ea14:	013a007f 	.word	0x013a007f
 800ea18:	013a00f7 	.word	0x013a00f7
 800ea1c:	013a013a 	.word	0x013a013a
 800ea20:	013a0127 	.word	0x013a0127
 800ea24:	013a013a 	.word	0x013a013a
 800ea28:	013a013a 	.word	0x013a013a
 800ea2c:	013a013a 	.word	0x013a013a
 800ea30:	013a0134 	.word	0x013a0134
 800ea34:	013a013a 	.word	0x013a013a
 800ea38:	013a013a 	.word	0x013a013a
 800ea3c:	013a013a 	.word	0x013a013a
 800ea40:	013a013a 	.word	0x013a013a
 800ea44:	013a013a 	.word	0x013a013a
 800ea48:	013a013a 	.word	0x013a013a
 800ea4c:	013a013a 	.word	0x013a013a
 800ea50:	0155      	.short	0x0155
 800ea52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea56:	f000 80b3 	beq.w	800ebc0 <RadioIrqProcess+0x1d8>
 800ea5a:	d928      	bls.n	800eaae <RadioIrqProcess+0xc6>
 800ea5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea60:	f040 8111 	bne.w	800ec86 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800ea64:	4b8a      	ldr	r3, [pc, #552]	; (800ec90 <RadioIrqProcess+0x2a8>)
 800ea66:	2201      	movs	r2, #1
 800ea68:	2100      	movs	r1, #0
 800ea6a:	2002      	movs	r0, #2
 800ea6c:	f001 fc90 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800ea70:	f000 fd58 	bl	800f524 <SUBGRF_GetOperatingMode>
 800ea74:	2804      	cmp	r0, #4
 800ea76:	f000 80b0 	beq.w	800ebda <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800ea7a:	f000 fd53 	bl	800f524 <SUBGRF_GetOperatingMode>
 800ea7e:	2805      	cmp	r0, #5
 800ea80:	f040 8101 	bne.w	800ec86 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 800ea84:	4b83      	ldr	r3, [pc, #524]	; (800ec94 <RadioIrqProcess+0x2ac>)
 800ea86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ea8a:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 800ea8c:	4882      	ldr	r0, [pc, #520]	; (800ec98 <RadioIrqProcess+0x2b0>)
 800ea8e:	f001 ffd3 	bl	8010a38 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800ea92:	2000      	movs	r0, #0
 800ea94:	f000 fd4c 	bl	800f530 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ea98:	4b80      	ldr	r3, [pc, #512]	; (800ec9c <RadioIrqProcess+0x2b4>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	f000 80f2 	beq.w	800ec86 <RadioIrqProcess+0x29e>
 800eaa2:	68db      	ldr	r3, [r3, #12]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	f000 80ee 	beq.w	800ec86 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800eaaa:	4798      	blx	r3
 800eaac:	e0eb      	b.n	800ec86 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 800eaae:	2b40      	cmp	r3, #64	; 0x40
 800eab0:	f000 811d 	beq.w	800ecee <RadioIrqProcess+0x306>
 800eab4:	2b80      	cmp	r3, #128	; 0x80
 800eab6:	f040 80e6 	bne.w	800ec86 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800eaba:	2000      	movs	r0, #0
 800eabc:	f000 fd38 	bl	800f530 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800eac0:	4b76      	ldr	r3, [pc, #472]	; (800ec9c <RadioIrqProcess+0x2b4>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	f000 80de 	beq.w	800ec86 <RadioIrqProcess+0x29e>
 800eaca:	699b      	ldr	r3, [r3, #24]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f000 80da 	beq.w	800ec86 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 800ead2:	2000      	movs	r0, #0
 800ead4:	4798      	blx	r3
 800ead6:	e0d6      	b.n	800ec86 <RadioIrqProcess+0x29e>
 800ead8:	4b6e      	ldr	r3, [pc, #440]	; (800ec94 <RadioIrqProcess+0x2ac>)
 800eada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eade:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 800eae0:	486f      	ldr	r0, [pc, #444]	; (800eca0 <RadioIrqProcess+0x2b8>)
 800eae2:	f001 ffa9 	bl	8010a38 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800eae6:	2000      	movs	r0, #0
 800eae8:	f000 fd22 	bl	800f530 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800eaec:	f001 fb6b 	bl	80101c6 <RFW_Is_LongPacketModeEnabled>
 800eaf0:	2801      	cmp	r0, #1
 800eaf2:	d00a      	beq.n	800eb0a <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800eaf4:	4b69      	ldr	r3, [pc, #420]	; (800ec9c <RadioIrqProcess+0x2b4>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	f000 80c4 	beq.w	800ec86 <RadioIrqProcess+0x29e>
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	f000 80c0 	beq.w	800ec86 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 800eb06:	4798      	blx	r3
 800eb08:	e0bd      	b.n	800ec86 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 800eb0a:	f001 fb65 	bl	80101d8 <RFW_DeInit_TxLongPacket>
 800eb0e:	e7f1      	b.n	800eaf4 <RadioIrqProcess+0x10c>
 800eb10:	4b60      	ldr	r3, [pc, #384]	; (800ec94 <RadioIrqProcess+0x2ac>)
 800eb12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800eb16:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 800eb18:	485f      	ldr	r0, [pc, #380]	; (800ec98 <RadioIrqProcess+0x2b0>)
 800eb1a:	f001 ff8d 	bl	8010a38 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800eb1e:	4b5b      	ldr	r3, [pc, #364]	; (800ec8c <RadioIrqProcess+0x2a4>)
 800eb20:	785b      	ldrb	r3, [r3, #1]
 800eb22:	b303      	cbz	r3, 800eb66 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800eb24:	22ff      	movs	r2, #255	; 0xff
 800eb26:	f10d 0107 	add.w	r1, sp, #7
 800eb2a:	485e      	ldr	r0, [pc, #376]	; (800eca4 <RadioIrqProcess+0x2bc>)
 800eb2c:	f001 fa4a 	bl	800ffc4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800eb30:	485d      	ldr	r0, [pc, #372]	; (800eca8 <RadioIrqProcess+0x2c0>)
 800eb32:	f000 fead 	bl	800f890 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800eb36:	4b59      	ldr	r3, [pc, #356]	; (800ec9c <RadioIrqProcess+0x2b4>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	f000 80a3 	beq.w	800ec86 <RadioIrqProcess+0x29e>
 800eb40:	689c      	ldr	r4, [r3, #8]
 800eb42:	2c00      	cmp	r4, #0
 800eb44:	f000 809f 	beq.w	800ec86 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 800eb48:	4b50      	ldr	r3, [pc, #320]	; (800ec8c <RadioIrqProcess+0x2a4>)
 800eb4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d11d      	bne.n	800eb8e <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800eb52:	4a4e      	ldr	r2, [pc, #312]	; (800ec8c <RadioIrqProcess+0x2a4>)
 800eb54:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 800eb58:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 800eb5c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800eb60:	4850      	ldr	r0, [pc, #320]	; (800eca4 <RadioIrqProcess+0x2bc>)
 800eb62:	47a0      	blx	r4
                break;
 800eb64:	e08f      	b.n	800ec86 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800eb66:	2000      	movs	r0, #0
 800eb68:	f000 fce2 	bl	800f530 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	f640 1002 	movw	r0, #2306	; 0x902
 800eb72:	f000 fec9 	bl	800f908 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800eb76:	f640 1044 	movw	r0, #2372	; 0x944
 800eb7a:	f000 ffb7 	bl	800faec <SUBGRF_ReadRegister>
 800eb7e:	f040 0102 	orr.w	r1, r0, #2
 800eb82:	b2c9      	uxtb	r1, r1
 800eb84:	f640 1044 	movw	r0, #2372	; 0x944
 800eb88:	f000 febe 	bl	800f908 <SUBGRF_WriteRegister>
 800eb8c:	e7ca      	b.n	800eb24 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800eb8e:	4c3f      	ldr	r4, [pc, #252]	; (800ec8c <RadioIrqProcess+0x2a4>)
 800eb90:	4669      	mov	r1, sp
 800eb92:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800eb94:	f001 faca 	bl	801012c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800eb98:	4b40      	ldr	r3, [pc, #256]	; (800ec9c <RadioIrqProcess+0x2b4>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	689d      	ldr	r5, [r3, #8]
 800eb9e:	9b00      	ldr	r3, [sp, #0]
 800eba0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800eba4:	4a41      	ldr	r2, [pc, #260]	; (800ecac <RadioIrqProcess+0x2c4>)
 800eba6:	fb82 1203 	smull	r1, r2, r2, r3
 800ebaa:	17db      	asrs	r3, r3, #31
 800ebac:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800ebb0:	b25b      	sxtb	r3, r3
 800ebb2:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800ebb6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ebba:	483a      	ldr	r0, [pc, #232]	; (800eca4 <RadioIrqProcess+0x2bc>)
 800ebbc:	47a8      	blx	r5
                break;
 800ebbe:	e062      	b.n	800ec86 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800ebc0:	2000      	movs	r0, #0
 800ebc2:	f000 fcb5 	bl	800f530 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ebc6:	4b35      	ldr	r3, [pc, #212]	; (800ec9c <RadioIrqProcess+0x2b4>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d05b      	beq.n	800ec86 <RadioIrqProcess+0x29e>
 800ebce:	699b      	ldr	r3, [r3, #24]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d058      	beq.n	800ec86 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 800ebd4:	2001      	movs	r0, #1
 800ebd6:	4798      	blx	r3
 800ebd8:	e055      	b.n	800ec86 <RadioIrqProcess+0x29e>
 800ebda:	4b2e      	ldr	r3, [pc, #184]	; (800ec94 <RadioIrqProcess+0x2ac>)
 800ebdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ebe0:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 800ebe2:	482f      	ldr	r0, [pc, #188]	; (800eca0 <RadioIrqProcess+0x2b8>)
 800ebe4:	f001 ff28 	bl	8010a38 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800ebe8:	2000      	movs	r0, #0
 800ebea:	f000 fca1 	bl	800f530 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800ebee:	4b2b      	ldr	r3, [pc, #172]	; (800ec9c <RadioIrqProcess+0x2b4>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d047      	beq.n	800ec86 <RadioIrqProcess+0x29e>
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d044      	beq.n	800ec86 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 800ebfc:	4798      	blx	r3
 800ebfe:	e042      	b.n	800ec86 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800ec00:	4b2b      	ldr	r3, [pc, #172]	; (800ecb0 <RadioIrqProcess+0x2c8>)
 800ec02:	2201      	movs	r2, #1
 800ec04:	2100      	movs	r1, #0
 800ec06:	2002      	movs	r0, #2
 800ec08:	f001 fbc2 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800ec0c:	4b1f      	ldr	r3, [pc, #124]	; (800ec8c <RadioIrqProcess+0x2a4>)
 800ec0e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800ec10:	b3c9      	cbz	r1, 800ec86 <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 800ec12:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800ec16:	f640 1003 	movw	r0, #2307	; 0x903
 800ec1a:	f7ff feb4 	bl	800e986 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 800ec1e:	4c1b      	ldr	r4, [pc, #108]	; (800ec8c <RadioIrqProcess+0x2a4>)
 800ec20:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 800ec24:	f640 1004 	movw	r0, #2308	; 0x904
 800ec28:	f7ff fead 	bl	800e986 <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 800ec2c:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 800ec30:	f640 1005 	movw	r0, #2309	; 0x905
 800ec34:	f7ff fea7 	bl	800e986 <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 800ec38:	f640 1002 	movw	r0, #2306	; 0x902
 800ec3c:	f7ff febe 	bl	800e9bc <RadioRead>
 800ec40:	f040 0101 	orr.w	r1, r0, #1
 800ec44:	b2c9      	uxtb	r1, r1
 800ec46:	f640 1002 	movw	r0, #2306	; 0x902
 800ec4a:	f7ff fe9c 	bl	800e986 <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 800ec4e:	2200      	movs	r2, #0
 800ec50:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ec52:	4613      	mov	r3, r2
 800ec54:	f240 2162 	movw	r1, #610	; 0x262
 800ec58:	4608      	mov	r0, r1
 800ec5a:	f000 fd92 	bl	800f782 <SUBGRF_SetDioIrqParams>
 800ec5e:	e012      	b.n	800ec86 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800ec60:	4b14      	ldr	r3, [pc, #80]	; (800ecb4 <RadioIrqProcess+0x2cc>)
 800ec62:	2201      	movs	r2, #1
 800ec64:	2100      	movs	r1, #0
 800ec66:	2002      	movs	r0, #2
 800ec68:	f001 fb92 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800ec6c:	f001 faa9 	bl	80101c2 <RFW_Is_Init>
 800ec70:	2801      	cmp	r0, #1
 800ec72:	d108      	bne.n	800ec86 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 800ec74:	f001 fab1 	bl	80101da <RFW_ReceivePayload>
 800ec78:	e005      	b.n	800ec86 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800ec7a:	4b0f      	ldr	r3, [pc, #60]	; (800ecb8 <RadioIrqProcess+0x2d0>)
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	2100      	movs	r1, #0
 800ec80:	2002      	movs	r0, #2
 800ec82:	f001 fb85 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
}
 800ec86:	b003      	add	sp, #12
 800ec88:	bd30      	pop	{r4, r5, pc}
 800ec8a:	bf00      	nop
 800ec8c:	20000f54 	.word	0x20000f54
 800ec90:	08011d4c 	.word	0x08011d4c
 800ec94:	48000400 	.word	0x48000400
 800ec98:	20000f3c 	.word	0x20000f3c
 800ec9c:	20000f38 	.word	0x20000f38
 800eca0:	20000fb0 	.word	0x20000fb0
 800eca4:	20000e38 	.word	0x20000e38
 800eca8:	20000f78 	.word	0x20000f78
 800ecac:	10624dd3 	.word	0x10624dd3
 800ecb0:	08011d60 	.word	0x08011d60
 800ecb4:	08011d6c 	.word	0x08011d6c
 800ecb8:	08011d78 	.word	0x08011d78
        TimerStop( &RxTimeoutTimer );
 800ecbc:	4817      	ldr	r0, [pc, #92]	; (800ed1c <RadioIrqProcess+0x334>)
 800ecbe:	f001 febb 	bl	8010a38 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800ecc2:	4b17      	ldr	r3, [pc, #92]	; (800ed20 <RadioIrqProcess+0x338>)
 800ecc4:	785b      	ldrb	r3, [r3, #1]
 800ecc6:	b173      	cbz	r3, 800ece6 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ecc8:	4b16      	ldr	r3, [pc, #88]	; (800ed24 <RadioIrqProcess+0x33c>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d0da      	beq.n	800ec86 <RadioIrqProcess+0x29e>
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d0d7      	beq.n	800ec86 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 800ecd6:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800ecd8:	4b13      	ldr	r3, [pc, #76]	; (800ed28 <RadioIrqProcess+0x340>)
 800ecda:	2201      	movs	r2, #1
 800ecdc:	2100      	movs	r1, #0
 800ecde:	2002      	movs	r0, #2
 800ece0:	f001 fb56 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
 800ece4:	e7cf      	b.n	800ec86 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800ece6:	2000      	movs	r0, #0
 800ece8:	f000 fc22 	bl	800f530 <SUBGRF_SetStandby>
 800ecec:	e7ec      	b.n	800ecc8 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800ecee:	4b0f      	ldr	r3, [pc, #60]	; (800ed2c <RadioIrqProcess+0x344>)
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	2100      	movs	r1, #0
 800ecf4:	2002      	movs	r0, #2
 800ecf6:	f001 fb4b 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800ecfa:	4b09      	ldr	r3, [pc, #36]	; (800ed20 <RadioIrqProcess+0x338>)
 800ecfc:	785b      	ldrb	r3, [r3, #1]
 800ecfe:	b143      	cbz	r3, 800ed12 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800ed00:	4b08      	ldr	r3, [pc, #32]	; (800ed24 <RadioIrqProcess+0x33c>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d0be      	beq.n	800ec86 <RadioIrqProcess+0x29e>
 800ed08:	691b      	ldr	r3, [r3, #16]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d0bb      	beq.n	800ec86 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 800ed0e:	4798      	blx	r3
}
 800ed10:	e7b9      	b.n	800ec86 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800ed12:	2000      	movs	r0, #0
 800ed14:	f000 fc0c 	bl	800f530 <SUBGRF_SetStandby>
 800ed18:	e7f2      	b.n	800ed00 <RadioIrqProcess+0x318>
 800ed1a:	bf00      	nop
 800ed1c:	20000f3c 	.word	0x20000f3c
 800ed20:	20000f54 	.word	0x20000f54
 800ed24:	20000f38 	.word	0x20000f38
 800ed28:	08011d84 	.word	0x08011d84
 800ed2c:	08011d90 	.word	0x08011d90

0800ed30 <RadioOnDioIrq>:
{
 800ed30:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800ed32:	4b03      	ldr	r3, [pc, #12]	; (800ed40 <RadioOnDioIrq+0x10>)
 800ed34:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800ed38:	f7ff fe56 	bl	800e9e8 <RadioIrqProcess>
}
 800ed3c:	bd08      	pop	{r3, pc}
 800ed3e:	bf00      	nop
 800ed40:	20000f54 	.word	0x20000f54

0800ed44 <RadioGetWakeupTime>:
{
 800ed44:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800ed46:	f001 f982 	bl	801004e <SUBGRF_GetRadioWakeUpTime>
}
 800ed4a:	3003      	adds	r0, #3
 800ed4c:	bd08      	pop	{r3, pc}
	...

0800ed50 <RadioSetMaxPayloadLength>:
{
 800ed50:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800ed52:	2801      	cmp	r0, #1
 800ed54:	d004      	beq.n	800ed60 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800ed56:	4b0a      	ldr	r3, [pc, #40]	; (800ed80 <RadioSetMaxPayloadLength+0x30>)
 800ed58:	7d5b      	ldrb	r3, [r3, #21]
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d008      	beq.n	800ed70 <RadioSetMaxPayloadLength+0x20>
}
 800ed5e:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800ed60:	4b08      	ldr	r3, [pc, #32]	; (800ed84 <RadioSetMaxPayloadLength+0x34>)
 800ed62:	7019      	strb	r1, [r3, #0]
 800ed64:	4806      	ldr	r0, [pc, #24]	; (800ed80 <RadioSetMaxPayloadLength+0x30>)
 800ed66:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ed68:	300e      	adds	r0, #14
 800ed6a:	f001 f843 	bl	800fdf4 <SUBGRF_SetPacketParams>
 800ed6e:	e7f6      	b.n	800ed5e <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800ed70:	4b04      	ldr	r3, [pc, #16]	; (800ed84 <RadioSetMaxPayloadLength+0x34>)
 800ed72:	7019      	strb	r1, [r3, #0]
 800ed74:	4802      	ldr	r0, [pc, #8]	; (800ed80 <RadioSetMaxPayloadLength+0x30>)
 800ed76:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ed78:	300e      	adds	r0, #14
 800ed7a:	f001 f83b 	bl	800fdf4 <SUBGRF_SetPacketParams>
}
 800ed7e:	e7ee      	b.n	800ed5e <RadioSetMaxPayloadLength+0xe>
 800ed80:	20000f54 	.word	0x20000f54
 800ed84:	2000010c 	.word	0x2000010c

0800ed88 <RadioReadRegisters>:
{
 800ed88:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800ed8a:	f001 f8a5 	bl	800fed8 <SUBGRF_ReadRegisters>
}
 800ed8e:	bd08      	pop	{r3, pc}

0800ed90 <RadioWriteRegisters>:
{
 800ed90:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800ed92:	f000 ffed 	bl	800fd70 <SUBGRF_WriteRegisters>
}
 800ed96:	bd08      	pop	{r3, pc}

0800ed98 <RadioRssi>:
{
 800ed98:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800ed9a:	f000 fd6b 	bl	800f874 <SUBGRF_GetRssiInst>
}
 800ed9e:	b200      	sxth	r0, r0
 800eda0:	bd08      	pop	{r3, pc}
	...

0800eda4 <RadioSetTxContinuousWave>:
{
 800eda4:	b538      	push	{r3, r4, r5, lr}
 800eda6:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800eda8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800edac:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 800edb0:	f000 fd20 	bl	800f7f4 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800edb4:	4628      	mov	r0, r5
 800edb6:	f001 f933 	bl	8010020 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800edba:	2101      	movs	r1, #1
 800edbc:	f001 f91c 	bl	800fff8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800edc0:	f000 fc34 	bl	800f62c <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800edc4:	4d04      	ldr	r5, [pc, #16]	; (800edd8 <RadioSetTxContinuousWave+0x34>)
 800edc6:	4621      	mov	r1, r4
 800edc8:	4628      	mov	r0, r5
 800edca:	f001 fed5 	bl	8010b78 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800edce:	4628      	mov	r0, r5
 800edd0:	f001 fe8c 	bl	8010aec <UTIL_TIMER_Start>
}
 800edd4:	bd38      	pop	{r3, r4, r5, pc}
 800edd6:	bf00      	nop
 800edd8:	20000fb0 	.word	0x20000fb0

0800eddc <RadioSetChannel>:
{
 800eddc:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800edde:	f000 fd09 	bl	800f7f4 <SUBGRF_SetRfFrequency>
}
 800ede2:	bd08      	pop	{r3, pc}

0800ede4 <RadioStartCad>:
{
 800ede4:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800ede6:	2100      	movs	r1, #0
 800ede8:	4b07      	ldr	r3, [pc, #28]	; (800ee08 <RadioStartCad+0x24>)
 800edea:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800edee:	f001 f903 	bl	800fff8 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800edf2:	2300      	movs	r3, #0
 800edf4:	461a      	mov	r2, r3
 800edf6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800edfa:	4608      	mov	r0, r1
 800edfc:	f000 fcc1 	bl	800f782 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800ee00:	f000 fc08 	bl	800f614 <SUBGRF_SetCad>
}
 800ee04:	bd08      	pop	{r3, pc}
 800ee06:	bf00      	nop
 800ee08:	20000f54 	.word	0x20000f54

0800ee0c <RadioRx>:
{
 800ee0c:	b538      	push	{r3, r4, r5, lr}
 800ee0e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 800ee10:	f001 f9d7 	bl	80101c2 <RFW_Is_Init>
 800ee14:	2801      	cmp	r0, #1
 800ee16:	d019      	beq.n	800ee4c <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ee18:	2300      	movs	r3, #0
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	f240 2162 	movw	r1, #610	; 0x262
 800ee20:	4608      	mov	r0, r1
 800ee22:	f000 fcae 	bl	800f782 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800ee26:	b9a4      	cbnz	r4, 800ee52 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800ee28:	4c11      	ldr	r4, [pc, #68]	; (800ee70 <RadioRx+0x64>)
 800ee2a:	2100      	movs	r1, #0
 800ee2c:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 800ee2e:	4b11      	ldr	r3, [pc, #68]	; (800ee74 <RadioRx+0x68>)
 800ee30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ee34:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800ee36:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800ee3a:	f001 f8dd 	bl	800fff8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800ee3e:	7863      	ldrb	r3, [r4, #1]
 800ee40:	b183      	cbz	r3, 800ee64 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800ee42:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ee46:	f000 fba7 	bl	800f598 <SUBGRF_SetRx>
}
 800ee4a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 800ee4c:	f001 f9c1 	bl	80101d2 <RFW_ReceiveInit>
 800ee50:	e7e9      	b.n	800ee26 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800ee52:	4d09      	ldr	r5, [pc, #36]	; (800ee78 <RadioRx+0x6c>)
 800ee54:	4621      	mov	r1, r4
 800ee56:	4628      	mov	r0, r5
 800ee58:	f001 fe8e 	bl	8010b78 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f001 fe45 	bl	8010aec <UTIL_TIMER_Start>
 800ee62:	e7e1      	b.n	800ee28 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800ee64:	4b02      	ldr	r3, [pc, #8]	; (800ee70 <RadioRx+0x64>)
 800ee66:	6898      	ldr	r0, [r3, #8]
 800ee68:	0180      	lsls	r0, r0, #6
 800ee6a:	f000 fb95 	bl	800f598 <SUBGRF_SetRx>
}
 800ee6e:	e7ec      	b.n	800ee4a <RadioRx+0x3e>
 800ee70:	20000f54 	.word	0x20000f54
 800ee74:	48000400 	.word	0x48000400
 800ee78:	20000f3c 	.word	0x20000f3c

0800ee7c <RadioSleep>:
{
 800ee7c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800ee7e:	f04f 0004 	mov.w	r0, #4
 800ee82:	f000 fe8d 	bl	800fba0 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800ee86:	2002      	movs	r0, #2
 800ee88:	f7f2 fc0e 	bl	80016a8 <HAL_Delay>
}
 800ee8c:	bd08      	pop	{r3, pc}
	...

0800ee90 <RadioSend>:
{
 800ee90:	b570      	push	{r4, r5, r6, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	4605      	mov	r5, r0
 800ee96:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800ee98:	2300      	movs	r3, #0
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	f240 2101 	movw	r1, #513	; 0x201
 800eea0:	4608      	mov	r0, r1
 800eea2:	f000 fc6e 	bl	800f782 <SUBGRF_SetDioIrqParams>
 800eea6:	4b3e      	ldr	r3, [pc, #248]	; (800efa0 <RadioSend+0x110>)
 800eea8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eeac:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800eeae:	4e3d      	ldr	r6, [pc, #244]	; (800efa4 <RadioSend+0x114>)
 800eeb0:	2101      	movs	r1, #1
 800eeb2:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800eeb6:	f001 f89f 	bl	800fff8 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800eeba:	7833      	ldrb	r3, [r6, #0]
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d103      	bne.n	800eec8 <RadioSend+0x38>
 800eec0:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 800eec4:	2b06      	cmp	r3, #6
 800eec6:	d012      	beq.n	800eeee <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800eec8:	f640 0089 	movw	r0, #2185	; 0x889
 800eecc:	f000 fe0e 	bl	800faec <SUBGRF_ReadRegister>
 800eed0:	f040 0104 	orr.w	r1, r0, #4
 800eed4:	b2c9      	uxtb	r1, r1
 800eed6:	f640 0089 	movw	r0, #2185	; 0x889
 800eeda:	f000 fd15 	bl	800f908 <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 800eede:	4b31      	ldr	r3, [pc, #196]	; (800efa4 <RadioSend+0x114>)
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	2b03      	cmp	r3, #3
 800eee4:	d818      	bhi.n	800ef18 <RadioSend+0x88>
 800eee6:	e8df f003 	tbb	[pc, r3]
 800eeea:	0d22      	.short	0x0d22
 800eeec:	4d22      	.short	0x4d22
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800eeee:	f640 0089 	movw	r0, #2185	; 0x889
 800eef2:	f000 fdfb 	bl	800faec <SUBGRF_ReadRegister>
 800eef6:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800eefa:	f640 0089 	movw	r0, #2185	; 0x889
 800eefe:	f000 fd03 	bl	800f908 <SUBGRF_WriteRegister>
 800ef02:	e7ec      	b.n	800eede <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800ef04:	4827      	ldr	r0, [pc, #156]	; (800efa4 <RadioSend+0x114>)
 800ef06:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ef08:	300e      	adds	r0, #14
 800ef0a:	f000 ff73 	bl	800fdf4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ef0e:	2200      	movs	r2, #0
 800ef10:	4621      	mov	r1, r4
 800ef12:	4628      	mov	r0, r5
 800ef14:	f001 f83d 	bl	800ff92 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800ef18:	4c23      	ldr	r4, [pc, #140]	; (800efa8 <RadioSend+0x118>)
 800ef1a:	4b22      	ldr	r3, [pc, #136]	; (800efa4 <RadioSend+0x114>)
 800ef1c:	6859      	ldr	r1, [r3, #4]
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f001 fe2a 	bl	8010b78 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800ef24:	4620      	mov	r0, r4
 800ef26:	f001 fde1 	bl	8010aec <UTIL_TIMER_Start>
}
 800ef2a:	b002      	add	sp, #8
 800ef2c:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800ef2e:	f001 f948 	bl	80101c2 <RFW_Is_Init>
 800ef32:	2801      	cmp	r0, #1
 800ef34:	d00a      	beq.n	800ef4c <RadioSend+0xbc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800ef36:	481b      	ldr	r0, [pc, #108]	; (800efa4 <RadioSend+0x114>)
 800ef38:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ef3a:	300e      	adds	r0, #14
 800ef3c:	f000 ff5a 	bl	800fdf4 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800ef40:	2200      	movs	r2, #0
 800ef42:	4621      	mov	r1, r4
 800ef44:	4628      	mov	r0, r5
 800ef46:	f001 f824 	bl	800ff92 <SUBGRF_SendPayload>
 800ef4a:	e7e5      	b.n	800ef18 <RadioSend+0x88>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800ef4c:	f10d 0207 	add.w	r2, sp, #7
 800ef50:	4621      	mov	r1, r4
 800ef52:	4628      	mov	r0, r5
 800ef54:	f001 f93a 	bl	80101cc <RFW_TransmitInit>
 800ef58:	b968      	cbnz	r0, 800ef76 <RadioSend+0xe6>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800ef5a:	4812      	ldr	r0, [pc, #72]	; (800efa4 <RadioSend+0x114>)
 800ef5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ef60:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ef62:	300e      	adds	r0, #14
 800ef64:	f000 ff46 	bl	800fdf4 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800ef68:	2200      	movs	r2, #0
 800ef6a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ef6e:	4628      	mov	r0, r5
 800ef70:	f001 f80f 	bl	800ff92 <SUBGRF_SendPayload>
 800ef74:	e7d0      	b.n	800ef18 <RadioSend+0x88>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800ef76:	4b0d      	ldr	r3, [pc, #52]	; (800efac <RadioSend+0x11c>)
 800ef78:	2201      	movs	r2, #1
 800ef7a:	2100      	movs	r1, #0
 800ef7c:	2002      	movs	r0, #2
 800ef7e:	f001 fa07 	bl	8010390 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800ef82:	e7d2      	b.n	800ef2a <RadioSend+0x9a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ef84:	4807      	ldr	r0, [pc, #28]	; (800efa4 <RadioSend+0x114>)
 800ef86:	2302      	movs	r3, #2
 800ef88:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800ef8a:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ef8c:	300e      	adds	r0, #14
 800ef8e:	f000 ff31 	bl	800fdf4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ef92:	2200      	movs	r2, #0
 800ef94:	4621      	mov	r1, r4
 800ef96:	4628      	mov	r0, r5
 800ef98:	f000 fffb 	bl	800ff92 <SUBGRF_SendPayload>
            break;
 800ef9c:	e7bc      	b.n	800ef18 <RadioSend+0x88>
 800ef9e:	bf00      	nop
 800efa0:	48000400 	.word	0x48000400
 800efa4:	20000f54 	.word	0x20000f54
 800efa8:	20000fb0 	.word	0x20000fb0
 800efac:	08011da0 	.word	0x08011da0

0800efb0 <RadioRandom>:
{
 800efb0:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800efb2:	2300      	movs	r3, #0
 800efb4:	461a      	mov	r2, r3
 800efb6:	4619      	mov	r1, r3
 800efb8:	4618      	mov	r0, r3
 800efba:	f000 fbe2 	bl	800f782 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800efbe:	f000 ff9b 	bl	800fef8 <SUBGRF_GetRandom>
}
 800efc2:	bd08      	pop	{r3, pc}

0800efc4 <RadioSetModem>:
{
 800efc4:	b510      	push	{r4, lr}
 800efc6:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800efc8:	4b14      	ldr	r3, [pc, #80]	; (800f01c <RadioSetModem+0x58>)
 800efca:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 800efcc:	f001 f906 	bl	80101dc <RFW_SetRadioModem>
    switch( modem )
 800efd0:	2c01      	cmp	r4, #1
 800efd2:	d010      	beq.n	800eff6 <RadioSetModem+0x32>
 800efd4:	2c03      	cmp	r4, #3
 800efd6:	d01a      	beq.n	800f00e <RadioSetModem+0x4a>
 800efd8:	b134      	cbz	r4, 800efe8 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800efda:	2003      	movs	r0, #3
 800efdc:	f000 fce4 	bl	800f9a8 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800efe0:	4b0e      	ldr	r3, [pc, #56]	; (800f01c <RadioSetModem+0x58>)
 800efe2:	2200      	movs	r2, #0
 800efe4:	735a      	strb	r2, [r3, #13]
}
 800efe6:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800efe8:	2000      	movs	r0, #0
 800efea:	f000 fcdd 	bl	800f9a8 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800efee:	4b0b      	ldr	r3, [pc, #44]	; (800f01c <RadioSetModem+0x58>)
 800eff0:	2200      	movs	r2, #0
 800eff2:	735a      	strb	r2, [r3, #13]
        break;
 800eff4:	e7f7      	b.n	800efe6 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800eff6:	2001      	movs	r0, #1
 800eff8:	f000 fcd6 	bl	800f9a8 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800effc:	4b07      	ldr	r3, [pc, #28]	; (800f01c <RadioSetModem+0x58>)
 800effe:	7b5a      	ldrb	r2, [r3, #13]
 800f000:	7b18      	ldrb	r0, [r3, #12]
 800f002:	4282      	cmp	r2, r0
 800f004:	d0ef      	beq.n	800efe6 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800f006:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800f008:	f000 f80a 	bl	800f020 <RadioSetPublicNetwork>
 800f00c:	e7eb      	b.n	800efe6 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800f00e:	2002      	movs	r0, #2
 800f010:	f000 fcca 	bl	800f9a8 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800f014:	4b01      	ldr	r3, [pc, #4]	; (800f01c <RadioSetModem+0x58>)
 800f016:	2200      	movs	r2, #0
 800f018:	735a      	strb	r2, [r3, #13]
}
 800f01a:	e7e4      	b.n	800efe6 <RadioSetModem+0x22>
 800f01c:	20000f54 	.word	0x20000f54

0800f020 <RadioSetPublicNetwork>:
{
 800f020:	b510      	push	{r4, lr}
 800f022:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800f024:	4b0e      	ldr	r3, [pc, #56]	; (800f060 <RadioSetPublicNetwork+0x40>)
 800f026:	7318      	strb	r0, [r3, #12]
 800f028:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800f02a:	2001      	movs	r0, #1
 800f02c:	f7ff ffca 	bl	800efc4 <RadioSetModem>
    if( enable == true )
 800f030:	b154      	cbz	r4, 800f048 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800f032:	2134      	movs	r1, #52	; 0x34
 800f034:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800f038:	f000 fc66 	bl	800f908 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800f03c:	2144      	movs	r1, #68	; 0x44
 800f03e:	f240 7041 	movw	r0, #1857	; 0x741
 800f042:	f000 fc61 	bl	800f908 <SUBGRF_WriteRegister>
}
 800f046:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800f048:	2114      	movs	r1, #20
 800f04a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800f04e:	f000 fc5b 	bl	800f908 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800f052:	2124      	movs	r1, #36	; 0x24
 800f054:	f240 7041 	movw	r0, #1857	; 0x741
 800f058:	f000 fc56 	bl	800f908 <SUBGRF_WriteRegister>
}
 800f05c:	e7f3      	b.n	800f046 <RadioSetPublicNetwork+0x26>
 800f05e:	bf00      	nop
 800f060:	20000f54 	.word	0x20000f54

0800f064 <RadioSetTxConfig>:
{
 800f064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f068:	b083      	sub	sp, #12
 800f06a:	4604      	mov	r4, r0
 800f06c:	460e      	mov	r6, r1
 800f06e:	4617      	mov	r7, r2
 800f070:	461d      	mov	r5, r3
 800f072:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 800f076:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 800f07a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800f07e:	f001 f89f 	bl	80101c0 <RFW_DeInit>
    switch( modem )
 800f082:	b174      	cbz	r4, 800f0a2 <RadioSetTxConfig+0x3e>
 800f084:	2c01      	cmp	r4, #1
 800f086:	d053      	beq.n	800f130 <RadioSetTxConfig+0xcc>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800f088:	4630      	mov	r0, r6
 800f08a:	f000 ffc9 	bl	8010020 <SUBGRF_SetRfTxPower>
 800f08e:	4c51      	ldr	r4, [pc, #324]	; (800f1d4 <RadioSetTxConfig+0x170>)
 800f090:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800f094:	f001 f899 	bl	80101ca <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800f098:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f09a:	6063      	str	r3, [r4, #4]
}
 800f09c:	b003      	add	sp, #12
 800f09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f0a2:	4c4c      	ldr	r4, [pc, #304]	; (800f1d4 <RadioSetTxConfig+0x170>)
 800f0a4:	f04f 0b00 	mov.w	fp, #0
 800f0a8:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f0ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0ae:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f0b0:	230b      	movs	r3, #11
 800f0b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	f001 f820 	bl	80100fc <SUBGRF_GetFskBandwidthRegValue>
 800f0bc:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800f0c0:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f0c2:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f0c6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800f0ca:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f0ce:	2304      	movs	r3, #4
 800f0d0:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800f0d2:	2318      	movs	r3, #24
 800f0d4:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f0d6:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f0da:	f089 0901 	eor.w	r9, r9, #1
 800f0de:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 800f0e2:	f1ba 0f00 	cmp.w	sl, #0
 800f0e6:	d01f      	beq.n	800f128 <RadioSetTxConfig+0xc4>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f0e8:	22f2      	movs	r2, #242	; 0xf2
 800f0ea:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f0ec:	4c39      	ldr	r4, [pc, #228]	; (800f1d4 <RadioSetTxConfig+0x170>)
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f0f2:	f7ff fc43 	bl	800e97c <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800f0f6:	2000      	movs	r0, #0
 800f0f8:	f7ff ff64 	bl	800efc4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f0fc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f100:	f000 fc6c 	bl	800f9dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f104:	f104 000e 	add.w	r0, r4, #14
 800f108:	f000 fe74 	bl	800fdf4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f10c:	4a32      	ldr	r2, [pc, #200]	; (800f1d8 <RadioSetTxConfig+0x174>)
 800f10e:	466b      	mov	r3, sp
 800f110:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f114:	e883 0003 	stmia.w	r3, {r0, r1}
 800f118:	4618      	mov	r0, r3
 800f11a:	f000 fe39 	bl	800fd90 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f11e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f122:	f000 fd5d 	bl	800fbe0 <SUBGRF_SetWhiteningSeed>
            break;
 800f126:	e7af      	b.n	800f088 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f128:	4b2a      	ldr	r3, [pc, #168]	; (800f1d4 <RadioSetTxConfig+0x170>)
 800f12a:	2201      	movs	r2, #1
 800f12c:	75da      	strb	r2, [r3, #23]
 800f12e:	e7dd      	b.n	800f0ec <RadioSetTxConfig+0x88>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f130:	4a28      	ldr	r2, [pc, #160]	; (800f1d4 <RadioSetTxConfig+0x170>)
 800f132:	2301      	movs	r3, #1
 800f134:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800f138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800f140:	4926      	ldr	r1, [pc, #152]	; (800f1dc <RadioSetTxConfig+0x178>)
 800f142:	5d49      	ldrb	r1, [r1, r5]
 800f144:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800f148:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 800f14c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f150:	b91d      	cbnz	r5, 800f15a <RadioSetTxConfig+0xf6>
 800f152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f154:	3a0b      	subs	r2, #11
 800f156:	2a01      	cmp	r2, #1
 800f158:	d92c      	bls.n	800f1b4 <RadioSetTxConfig+0x150>
 800f15a:	2d01      	cmp	r5, #1
 800f15c:	d027      	beq.n	800f1ae <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f15e:	4a1d      	ldr	r2, [pc, #116]	; (800f1d4 <RadioSetTxConfig+0x170>)
 800f160:	2100      	movs	r1, #0
 800f162:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f166:	4a1b      	ldr	r2, [pc, #108]	; (800f1d4 <RadioSetTxConfig+0x170>)
 800f168:	2101      	movs	r1, #1
 800f16a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f16c:	3b05      	subs	r3, #5
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	428b      	cmp	r3, r1
 800f172:	d924      	bls.n	800f1be <RadioSetTxConfig+0x15a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f174:	4b17      	ldr	r3, [pc, #92]	; (800f1d4 <RadioSetTxConfig+0x170>)
 800f176:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f17a:	4c16      	ldr	r4, [pc, #88]	; (800f1d4 <RadioSetTxConfig+0x170>)
 800f17c:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f180:	4b17      	ldr	r3, [pc, #92]	; (800f1e0 <RadioSetTxConfig+0x17c>)
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f186:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f18a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800f18e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800f192:	f7ff fbf3 	bl	800e97c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800f196:	2001      	movs	r0, #1
 800f198:	f7ff ff14 	bl	800efc4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f19c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f1a0:	f000 fc1c 	bl	800f9dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f1a4:	f104 000e 	add.w	r0, r4, #14
 800f1a8:	f000 fe24 	bl	800fdf4 <SUBGRF_SetPacketParams>
            break;
 800f1ac:	e76c      	b.n	800f088 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f1ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1b0:	2a0c      	cmp	r2, #12
 800f1b2:	d1d4      	bne.n	800f15e <RadioSetTxConfig+0xfa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f1b4:	4a07      	ldr	r2, [pc, #28]	; (800f1d4 <RadioSetTxConfig+0x170>)
 800f1b6:	2101      	movs	r1, #1
 800f1b8:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800f1bc:	e7d3      	b.n	800f166 <RadioSetTxConfig+0x102>
                if( preambleLen < 12 )
 800f1be:	f1b8 0f0b 	cmp.w	r8, #11
 800f1c2:	d803      	bhi.n	800f1cc <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	220c      	movs	r2, #12
 800f1c8:	839a      	strh	r2, [r3, #28]
 800f1ca:	e7d6      	b.n	800f17a <RadioSetTxConfig+0x116>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f1cc:	4b01      	ldr	r3, [pc, #4]	; (800f1d4 <RadioSetTxConfig+0x170>)
 800f1ce:	f8a3 801c 	strh.w	r8, [r3, #28]
 800f1d2:	e7d2      	b.n	800f17a <RadioSetTxConfig+0x116>
 800f1d4:	20000f54 	.word	0x20000f54
 800f1d8:	080110d4 	.word	0x080110d4
 800f1dc:	08011db8 	.word	0x08011db8
 800f1e0:	2000010c 	.word	0x2000010c

0800f1e4 <RadioSetRxConfig>:
{
 800f1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e8:	b085      	sub	sp, #20
 800f1ea:	4604      	mov	r4, r0
 800f1ec:	460d      	mov	r5, r1
 800f1ee:	4616      	mov	r6, r2
 800f1f0:	9301      	str	r3, [sp, #4]
 800f1f2:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 800f1f6:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 800f1fa:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 800f1fe:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 800f202:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 800f206:	4b6e      	ldr	r3, [pc, #440]	; (800f3c0 <RadioSetRxConfig+0x1dc>)
 800f208:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800f20c:	f000 ffd8 	bl	80101c0 <RFW_DeInit>
    if( rxContinuous == true )
 800f210:	f1b8 0f00 	cmp.w	r8, #0
 800f214:	d001      	beq.n	800f21a <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800f216:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800f21a:	b14f      	cbz	r7, 800f230 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 800f21c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 800f220:	4b68      	ldr	r3, [pc, #416]	; (800f3c4 <RadioSetRxConfig+0x1e0>)
 800f222:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800f224:	b144      	cbz	r4, 800f238 <RadioSetRxConfig+0x54>
 800f226:	2c01      	cmp	r4, #1
 800f228:	d057      	beq.n	800f2da <RadioSetRxConfig+0xf6>
}
 800f22a:	b005      	add	sp, #20
 800f22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800f230:	4b64      	ldr	r3, [pc, #400]	; (800f3c4 <RadioSetRxConfig+0x1e0>)
 800f232:	22ff      	movs	r2, #255	; 0xff
 800f234:	701a      	strb	r2, [r3, #0]
 800f236:	e7f5      	b.n	800f224 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f238:	2000      	movs	r0, #0
 800f23a:	f000 fa05 	bl	800f648 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f23e:	4c60      	ldr	r4, [pc, #384]	; (800f3c0 <RadioSetRxConfig+0x1dc>)
 800f240:	f04f 0800 	mov.w	r8, #0
 800f244:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800f248:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800f24a:	230b      	movs	r3, #11
 800f24c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800f250:	4628      	mov	r0, r5
 800f252:	f000 ff53 	bl	80100fc <SUBGRF_GetFskBandwidthRegValue>
 800f256:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f25a:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800f25e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f262:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800f266:	2304      	movs	r3, #4
 800f268:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800f26a:	2318      	movs	r3, #24
 800f26c:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800f26e:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800f272:	f087 0701 	eor.w	r7, r7, #1
 800f276:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800f278:	4b52      	ldr	r3, [pc, #328]	; (800f3c4 <RadioSetRxConfig+0x1e0>)
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 800f27e:	f1bb 0f00 	cmp.w	fp, #0
 800f282:	d026      	beq.n	800f2d2 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800f284:	22f2      	movs	r2, #242	; 0xf2
 800f286:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800f288:	4c4d      	ldr	r4, [pc, #308]	; (800f3c0 <RadioSetRxConfig+0x1dc>)
 800f28a:	2301      	movs	r3, #1
 800f28c:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800f28e:	f7ff fb75 	bl	800e97c <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800f292:	2000      	movs	r0, #0
 800f294:	f7ff fe96 	bl	800efc4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f298:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f29c:	f000 fb9e 	bl	800f9dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f2a0:	f104 000e 	add.w	r0, r4, #14
 800f2a4:	f000 fda6 	bl	800fdf4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800f2a8:	4a47      	ldr	r2, [pc, #284]	; (800f3c8 <RadioSetRxConfig+0x1e4>)
 800f2aa:	ab02      	add	r3, sp, #8
 800f2ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2b0:	e883 0003 	stmia.w	r3, {r0, r1}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f000 fd6b 	bl	800fd90 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800f2ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 800f2be:	f000 fc8f 	bl	800fbe0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800f2c2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800f2c6:	fb02 fa0a 	mul.w	sl, r2, sl
 800f2ca:	fbba f6f6 	udiv	r6, sl, r6
 800f2ce:	60a6      	str	r6, [r4, #8]
            break;
 800f2d0:	e7ab      	b.n	800f22a <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800f2d2:	4b3b      	ldr	r3, [pc, #236]	; (800f3c0 <RadioSetRxConfig+0x1dc>)
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	75da      	strb	r2, [r3, #23]
 800f2d8:	e7d6      	b.n	800f288 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800f2da:	2000      	movs	r0, #0
 800f2dc:	f000 f9b4 	bl	800f648 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f2e0:	4a37      	ldr	r2, [pc, #220]	; (800f3c0 <RadioSetRxConfig+0x1dc>)
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800f2e8:	b2f3      	uxtb	r3, r6
 800f2ea:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800f2ee:	4937      	ldr	r1, [pc, #220]	; (800f3cc <RadioSetRxConfig+0x1e8>)
 800f2f0:	5d49      	ldrb	r1, [r1, r5]
 800f2f2:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800f2f6:	9901      	ldr	r1, [sp, #4]
 800f2f8:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800f2fc:	b91d      	cbnz	r5, 800f306 <RadioSetRxConfig+0x122>
 800f2fe:	f1a6 020b 	sub.w	r2, r6, #11
 800f302:	2a01      	cmp	r2, #1
 800f304:	d941      	bls.n	800f38a <RadioSetRxConfig+0x1a6>
 800f306:	2d01      	cmp	r5, #1
 800f308:	d03d      	beq.n	800f386 <RadioSetRxConfig+0x1a2>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800f30a:	4a2d      	ldr	r2, [pc, #180]	; (800f3c0 <RadioSetRxConfig+0x1dc>)
 800f30c:	2100      	movs	r1, #0
 800f30e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f312:	4a2b      	ldr	r2, [pc, #172]	; (800f3c0 <RadioSetRxConfig+0x1dc>)
 800f314:	2101      	movs	r1, #1
 800f316:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800f318:	3b05      	subs	r3, #5
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	428b      	cmp	r3, r1
 800f31e:	d939      	bls.n	800f394 <RadioSetRxConfig+0x1b0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f320:	4b27      	ldr	r3, [pc, #156]	; (800f3c0 <RadioSetRxConfig+0x1dc>)
 800f322:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800f326:	4c26      	ldr	r4, [pc, #152]	; (800f3c0 <RadioSetRxConfig+0x1dc>)
 800f328:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f32a:	4b26      	ldr	r3, [pc, #152]	; (800f3c4 <RadioSetRxConfig+0x1e0>)
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800f330:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800f334:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800f338:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 800f33c:	f7ff fb1e 	bl	800e97c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800f340:	2001      	movs	r0, #1
 800f342:	f7ff fe3f 	bl	800efc4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f346:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800f34a:	f000 fb47 	bl	800f9dc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f34e:	f104 000e 	add.w	r0, r4, #14
 800f352:	f000 fd4f 	bl	800fdf4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800f356:	fa5f f08a 	uxtb.w	r0, sl
 800f35a:	f000 fb03 	bl	800f964 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800f35e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800f362:	2b01      	cmp	r3, #1
 800f364:	d021      	beq.n	800f3aa <RadioSetRxConfig+0x1c6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800f366:	f240 7036 	movw	r0, #1846	; 0x736
 800f36a:	f000 fbbf 	bl	800faec <SUBGRF_ReadRegister>
 800f36e:	f040 0104 	orr.w	r1, r0, #4
 800f372:	b2c9      	uxtb	r1, r1
 800f374:	f240 7036 	movw	r0, #1846	; 0x736
 800f378:	f000 fac6 	bl	800f908 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800f37c:	4b10      	ldr	r3, [pc, #64]	; (800f3c0 <RadioSetRxConfig+0x1dc>)
 800f37e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f382:	609a      	str	r2, [r3, #8]
}
 800f384:	e751      	b.n	800f22a <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800f386:	2e0c      	cmp	r6, #12
 800f388:	d1bf      	bne.n	800f30a <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800f38a:	4a0d      	ldr	r2, [pc, #52]	; (800f3c0 <RadioSetRxConfig+0x1dc>)
 800f38c:	2101      	movs	r1, #1
 800f38e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800f392:	e7be      	b.n	800f312 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 800f394:	f1b9 0f0b 	cmp.w	r9, #11
 800f398:	d803      	bhi.n	800f3a2 <RadioSetRxConfig+0x1be>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800f39a:	4613      	mov	r3, r2
 800f39c:	220c      	movs	r2, #12
 800f39e:	839a      	strh	r2, [r3, #28]
 800f3a0:	e7c1      	b.n	800f326 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800f3a2:	4b07      	ldr	r3, [pc, #28]	; (800f3c0 <RadioSetRxConfig+0x1dc>)
 800f3a4:	f8a3 901c 	strh.w	r9, [r3, #28]
 800f3a8:	e7bd      	b.n	800f326 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800f3aa:	f240 7036 	movw	r0, #1846	; 0x736
 800f3ae:	f000 fb9d 	bl	800faec <SUBGRF_ReadRegister>
 800f3b2:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800f3b6:	f240 7036 	movw	r0, #1846	; 0x736
 800f3ba:	f000 faa5 	bl	800f908 <SUBGRF_WriteRegister>
 800f3be:	e7dd      	b.n	800f37c <RadioSetRxConfig+0x198>
 800f3c0:	20000f54 	.word	0x20000f54
 800f3c4:	2000010c 	.word	0x2000010c
 800f3c8:	080110d4 	.word	0x080110d4
 800f3cc:	08011db8 	.word	0x08011db8

0800f3d0 <RadioIsChannelFree>:
{
 800f3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3d2:	b08b      	sub	sp, #44	; 0x2c
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	460f      	mov	r7, r1
 800f3d8:	4616      	mov	r6, r2
 800f3da:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 800f3dc:	f7ff face 	bl	800e97c <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	f7ff fdef 	bl	800efc4 <RadioSetModem>
    RadioSetChannel( freq );
 800f3e6:	4620      	mov	r0, r4
 800f3e8:	f7ff fcf8 	bl	800eddc <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f3f0:	2400      	movs	r4, #0
 800f3f2:	9408      	str	r4, [sp, #32]
 800f3f4:	9407      	str	r4, [sp, #28]
 800f3f6:	9406      	str	r4, [sp, #24]
 800f3f8:	9405      	str	r4, [sp, #20]
 800f3fa:	9404      	str	r4, [sp, #16]
 800f3fc:	9403      	str	r4, [sp, #12]
 800f3fe:	9402      	str	r4, [sp, #8]
 800f400:	2303      	movs	r3, #3
 800f402:	9301      	str	r3, [sp, #4]
 800f404:	9700      	str	r7, [sp, #0]
 800f406:	4623      	mov	r3, r4
 800f408:	f44f 7216 	mov.w	r2, #600	; 0x258
 800f40c:	4639      	mov	r1, r7
 800f40e:	4620      	mov	r0, r4
 800f410:	f7ff fee8 	bl	800f1e4 <RadioSetRxConfig>
    RadioRx( 0 );
 800f414:	4620      	mov	r0, r4
 800f416:	f7ff fcf9 	bl	800ee0c <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800f41a:	f7ff fc93 	bl	800ed44 <RadioGetWakeupTime>
 800f41e:	f7f2 f943 	bl	80016a8 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800f422:	f001 fac9 	bl	80109b8 <UTIL_TIMER_GetCurrentTime>
 800f426:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800f428:	4620      	mov	r0, r4
 800f42a:	f001 facf 	bl	80109cc <UTIL_TIMER_GetElapsedTime>
 800f42e:	42a8      	cmp	r0, r5
 800f430:	d206      	bcs.n	800f440 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800f432:	2000      	movs	r0, #0
 800f434:	f7ff fcb0 	bl	800ed98 <RadioRssi>
        if( rssi > rssiThresh )
 800f438:	42b0      	cmp	r0, r6
 800f43a:	ddf5      	ble.n	800f428 <RadioIsChannelFree+0x58>
            status = false;
 800f43c:	2400      	movs	r4, #0
 800f43e:	e000      	b.n	800f442 <RadioIsChannelFree+0x72>
    bool status = true;
 800f440:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 800f442:	f7ff fa9b 	bl	800e97c <RadioStandby>
}
 800f446:	4620      	mov	r0, r4
 800f448:	b00b      	add	sp, #44	; 0x2c
 800f44a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f44c <RadioInit>:
{
 800f44c:	b570      	push	{r4, r5, r6, lr}
 800f44e:	b082      	sub	sp, #8
    RadioEvents = events;
 800f450:	4b1d      	ldr	r3, [pc, #116]	; (800f4c8 <RadioInit+0x7c>)
 800f452:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 800f454:	4d1d      	ldr	r5, [pc, #116]	; (800f4cc <RadioInit+0x80>)
 800f456:	2400      	movs	r4, #0
 800f458:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 800f45a:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 800f45c:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800f45e:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 800f460:	481b      	ldr	r0, [pc, #108]	; (800f4d0 <RadioInit+0x84>)
 800f462:	f000 fb67 	bl	800fb34 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 800f466:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 800f468:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 800f46a:	f000 f8fa 	bl	800f662 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800f46e:	4621      	mov	r1, r4
 800f470:	4620      	mov	r0, r4
 800f472:	f000 f9f1 	bl	800f858 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800f476:	2204      	movs	r2, #4
 800f478:	4621      	mov	r1, r4
 800f47a:	2001      	movs	r0, #1
 800f47c:	f000 fbc9 	bl	800fc12 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800f480:	4623      	mov	r3, r4
 800f482:	4622      	mov	r2, r4
 800f484:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f488:	4608      	mov	r0, r1
 800f48a:	f000 f97a 	bl	800f782 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800f48e:	f7ff fcf5 	bl	800ee7c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800f492:	4e10      	ldr	r6, [pc, #64]	; (800f4d4 <RadioInit+0x88>)
 800f494:	9400      	str	r4, [sp, #0]
 800f496:	4b10      	ldr	r3, [pc, #64]	; (800f4d8 <RadioInit+0x8c>)
 800f498:	4622      	mov	r2, r4
 800f49a:	f04f 31ff 	mov.w	r1, #4294967295
 800f49e:	4630      	mov	r0, r6
 800f4a0:	f001 fa6c 	bl	801097c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800f4a4:	4d0d      	ldr	r5, [pc, #52]	; (800f4dc <RadioInit+0x90>)
 800f4a6:	9400      	str	r4, [sp, #0]
 800f4a8:	4b0d      	ldr	r3, [pc, #52]	; (800f4e0 <RadioInit+0x94>)
 800f4aa:	4622      	mov	r2, r4
 800f4ac:	f04f 31ff 	mov.w	r1, #4294967295
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	f001 fa63 	bl	801097c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800f4b6:	4630      	mov	r0, r6
 800f4b8:	f001 fabe 	bl	8010a38 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800f4bc:	4628      	mov	r0, r5
 800f4be:	f001 fabb 	bl	8010a38 <UTIL_TIMER_Stop>
}
 800f4c2:	b002      	add	sp, #8
 800f4c4:	bd70      	pop	{r4, r5, r6, pc}
 800f4c6:	bf00      	nop
 800f4c8:	20000f38 	.word	0x20000f38
 800f4cc:	20000f54 	.word	0x20000f54
 800f4d0:	0800ed31 	.word	0x0800ed31
 800f4d4:	20000fb0 	.word	0x20000fb0
 800f4d8:	0800e889 	.word	0x0800e889
 800f4dc:	20000f3c 	.word	0x20000f3c
 800f4e0:	0800e8b1 	.word	0x0800e8b1

0800f4e4 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f4e4:	b510      	push	{r4, lr}
 800f4e6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4e8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f4ec:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800f4ee:	460a      	mov	r2, r1
 800f4f0:	4601      	mov	r1, r0
 800f4f2:	4803      	ldr	r0, [pc, #12]	; (800f500 <SUBGRF_WriteCommand+0x1c>)
 800f4f4:	f7f6 f998 	bl	8005828 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4f8:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f4fc:	bd10      	pop	{r4, pc}
 800f4fe:	bf00      	nop
 800f500:	200001d0 	.word	0x200001d0

0800f504 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f504:	b510      	push	{r4, lr}
 800f506:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f508:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f50c:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800f50e:	460a      	mov	r2, r1
 800f510:	4601      	mov	r1, r0
 800f512:	4803      	ldr	r0, [pc, #12]	; (800f520 <SUBGRF_ReadCommand+0x1c>)
 800f514:	f7f6 f9de 	bl	80058d4 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f518:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 800f51c:	bd10      	pop	{r4, pc}
 800f51e:	bf00      	nop
 800f520:	200001d0 	.word	0x200001d0

0800f524 <SUBGRF_GetOperatingMode>:
}
 800f524:	4b01      	ldr	r3, [pc, #4]	; (800f52c <SUBGRF_GetOperatingMode+0x8>)
 800f526:	7818      	ldrb	r0, [r3, #0]
 800f528:	4770      	bx	lr
 800f52a:	bf00      	nop
 800f52c:	20000fce 	.word	0x20000fce

0800f530 <SUBGRF_SetStandby>:
{
 800f530:	b500      	push	{lr}
 800f532:	b083      	sub	sp, #12
 800f534:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800f538:	2201      	movs	r2, #1
 800f53a:	f10d 0107 	add.w	r1, sp, #7
 800f53e:	2080      	movs	r0, #128	; 0x80
 800f540:	f7ff ffd0 	bl	800f4e4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800f544:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f548:	b92b      	cbnz	r3, 800f556 <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 800f54a:	4b05      	ldr	r3, [pc, #20]	; (800f560 <SUBGRF_SetStandby+0x30>)
 800f54c:	2201      	movs	r2, #1
 800f54e:	701a      	strb	r2, [r3, #0]
}
 800f550:	b003      	add	sp, #12
 800f552:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 800f556:	4b02      	ldr	r3, [pc, #8]	; (800f560 <SUBGRF_SetStandby+0x30>)
 800f558:	2202      	movs	r2, #2
 800f55a:	701a      	strb	r2, [r3, #0]
}
 800f55c:	e7f8      	b.n	800f550 <SUBGRF_SetStandby+0x20>
 800f55e:	bf00      	nop
 800f560:	20000fce 	.word	0x20000fce

0800f564 <SUBGRF_SetTx>:
{
 800f564:	b500      	push	{lr}
 800f566:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 800f568:	4b0a      	ldr	r3, [pc, #40]	; (800f594 <SUBGRF_SetTx+0x30>)
 800f56a:	2204      	movs	r2, #4
 800f56c:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f56e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f572:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f576:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f57a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f57e:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800f582:	2203      	movs	r2, #3
 800f584:	a901      	add	r1, sp, #4
 800f586:	2083      	movs	r0, #131	; 0x83
 800f588:	f7ff ffac 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f58c:	b003      	add	sp, #12
 800f58e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f592:	bf00      	nop
 800f594:	20000fce 	.word	0x20000fce

0800f598 <SUBGRF_SetRx>:
{
 800f598:	b500      	push	{lr}
 800f59a:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 800f59c:	4b0a      	ldr	r3, [pc, #40]	; (800f5c8 <SUBGRF_SetRx+0x30>)
 800f59e:	2205      	movs	r2, #5
 800f5a0:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f5a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f5a6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f5aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f5ae:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f5b2:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800f5b6:	2203      	movs	r2, #3
 800f5b8:	a901      	add	r1, sp, #4
 800f5ba:	2082      	movs	r0, #130	; 0x82
 800f5bc:	f7ff ff92 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f5c0:	b003      	add	sp, #12
 800f5c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5c6:	bf00      	nop
 800f5c8:	20000fce 	.word	0x20000fce

0800f5cc <SUBGRF_SetRxDutyCycle>:
{
 800f5cc:	b500      	push	{lr}
 800f5ce:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800f5d0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f5d4:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800f5d8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f5dc:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800f5e0:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800f5e4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f5e8:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800f5ec:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800f5f0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800f5f4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800f5f8:	2206      	movs	r2, #6
 800f5fa:	4669      	mov	r1, sp
 800f5fc:	2094      	movs	r0, #148	; 0x94
 800f5fe:	f7ff ff71 	bl	800f4e4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800f602:	4b03      	ldr	r3, [pc, #12]	; (800f610 <SUBGRF_SetRxDutyCycle+0x44>)
 800f604:	2206      	movs	r2, #6
 800f606:	701a      	strb	r2, [r3, #0]
}
 800f608:	b003      	add	sp, #12
 800f60a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f60e:	bf00      	nop
 800f610:	20000fce 	.word	0x20000fce

0800f614 <SUBGRF_SetCad>:
{
 800f614:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800f616:	2200      	movs	r2, #0
 800f618:	4611      	mov	r1, r2
 800f61a:	20c5      	movs	r0, #197	; 0xc5
 800f61c:	f7ff ff62 	bl	800f4e4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800f620:	4b01      	ldr	r3, [pc, #4]	; (800f628 <SUBGRF_SetCad+0x14>)
 800f622:	2207      	movs	r2, #7
 800f624:	701a      	strb	r2, [r3, #0]
}
 800f626:	bd08      	pop	{r3, pc}
 800f628:	20000fce 	.word	0x20000fce

0800f62c <SUBGRF_SetTxContinuousWave>:
{
 800f62c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800f62e:	2200      	movs	r2, #0
 800f630:	4611      	mov	r1, r2
 800f632:	20d1      	movs	r0, #209	; 0xd1
 800f634:	f7ff ff56 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f638:	bd08      	pop	{r3, pc}

0800f63a <SUBGRF_SetTxInfinitePreamble>:
{
 800f63a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800f63c:	2200      	movs	r2, #0
 800f63e:	4611      	mov	r1, r2
 800f640:	20d2      	movs	r0, #210	; 0xd2
 800f642:	f7ff ff4f 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f646:	bd08      	pop	{r3, pc}

0800f648 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 800f648:	b500      	push	{lr}
 800f64a:	b083      	sub	sp, #12
 800f64c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800f650:	2201      	movs	r2, #1
 800f652:	f10d 0107 	add.w	r1, sp, #7
 800f656:	209f      	movs	r0, #159	; 0x9f
 800f658:	f7ff ff44 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f65c:	b003      	add	sp, #12
 800f65e:	f85d fb04 	ldr.w	pc, [sp], #4

0800f662 <SUBGRF_SetRegulatorMode>:
{
 800f662:	b500      	push	{lr}
 800f664:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800f666:	f7f3 f94f 	bl	8002908 <RBI_IsDCDC>
 800f66a:	2801      	cmp	r0, #1
 800f66c:	d00b      	beq.n	800f686 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 800f66e:	2300      	movs	r3, #0
 800f670:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800f674:	2201      	movs	r2, #1
 800f676:	f10d 0107 	add.w	r1, sp, #7
 800f67a:	2096      	movs	r0, #150	; 0x96
 800f67c:	f7ff ff32 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f680:	b003      	add	sp, #12
 800f682:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 800f686:	2301      	movs	r3, #1
 800f688:	f88d 3007 	strb.w	r3, [sp, #7]
 800f68c:	e7f2      	b.n	800f674 <SUBGRF_SetRegulatorMode+0x12>

0800f68e <SUBGRF_Calibrate>:
{
 800f68e:	b500      	push	{lr}
 800f690:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f692:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800f696:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f69a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800f69c:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800f6a0:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800f6a2:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800f6a6:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800f6a8:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800f6ac:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800f6ae:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800f6b2:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800f6b4:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800f6b8:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800f6ba:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800f6be:	2201      	movs	r2, #1
 800f6c0:	f10d 0107 	add.w	r1, sp, #7
 800f6c4:	2089      	movs	r0, #137	; 0x89
 800f6c6:	f7ff ff0d 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f6ca:	b003      	add	sp, #12
 800f6cc:	f85d fb04 	ldr.w	pc, [sp], #4

0800f6d0 <SUBGRF_CalibrateImage>:
{
 800f6d0:	b500      	push	{lr}
 800f6d2:	b083      	sub	sp, #12
    if( freq > 900000000 )
 800f6d4:	4b1c      	ldr	r3, [pc, #112]	; (800f748 <SUBGRF_CalibrateImage+0x78>)
 800f6d6:	4298      	cmp	r0, r3
 800f6d8:	d90d      	bls.n	800f6f6 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800f6da:	23e1      	movs	r3, #225	; 0xe1
 800f6dc:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 800f6e0:	23e9      	movs	r3, #233	; 0xe9
 800f6e2:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800f6e6:	2202      	movs	r2, #2
 800f6e8:	a901      	add	r1, sp, #4
 800f6ea:	2098      	movs	r0, #152	; 0x98
 800f6ec:	f7ff fefa 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f6f0:	b003      	add	sp, #12
 800f6f2:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800f6f6:	4b15      	ldr	r3, [pc, #84]	; (800f74c <SUBGRF_CalibrateImage+0x7c>)
 800f6f8:	4298      	cmp	r0, r3
 800f6fa:	d906      	bls.n	800f70a <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 800f6fc:	23d7      	movs	r3, #215	; 0xd7
 800f6fe:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 800f702:	23db      	movs	r3, #219	; 0xdb
 800f704:	f88d 3005 	strb.w	r3, [sp, #5]
 800f708:	e7ed      	b.n	800f6e6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800f70a:	4b11      	ldr	r3, [pc, #68]	; (800f750 <SUBGRF_CalibrateImage+0x80>)
 800f70c:	4298      	cmp	r0, r3
 800f70e:	d906      	bls.n	800f71e <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 800f710:	23c1      	movs	r3, #193	; 0xc1
 800f712:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800f716:	23c5      	movs	r3, #197	; 0xc5
 800f718:	f88d 3005 	strb.w	r3, [sp, #5]
 800f71c:	e7e3      	b.n	800f6e6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 800f71e:	4b0d      	ldr	r3, [pc, #52]	; (800f754 <SUBGRF_CalibrateImage+0x84>)
 800f720:	4298      	cmp	r0, r3
 800f722:	d906      	bls.n	800f732 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 800f724:	2375      	movs	r3, #117	; 0x75
 800f726:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800f72a:	2381      	movs	r3, #129	; 0x81
 800f72c:	f88d 3005 	strb.w	r3, [sp, #5]
 800f730:	e7d9      	b.n	800f6e6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 800f732:	4b09      	ldr	r3, [pc, #36]	; (800f758 <SUBGRF_CalibrateImage+0x88>)
 800f734:	4298      	cmp	r0, r3
 800f736:	d9d6      	bls.n	800f6e6 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 800f738:	236b      	movs	r3, #107	; 0x6b
 800f73a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 800f73e:	236f      	movs	r3, #111	; 0x6f
 800f740:	f88d 3005 	strb.w	r3, [sp, #5]
 800f744:	e7cf      	b.n	800f6e6 <SUBGRF_CalibrateImage+0x16>
 800f746:	bf00      	nop
 800f748:	35a4e900 	.word	0x35a4e900
 800f74c:	32a9f880 	.word	0x32a9f880
 800f750:	2de54480 	.word	0x2de54480
 800f754:	1b6b0b00 	.word	0x1b6b0b00
 800f758:	1954fc40 	.word	0x1954fc40

0800f75c <SUBGRF_SetPaConfig>:
{
 800f75c:	b500      	push	{lr}
 800f75e:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 800f760:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 800f764:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 800f768:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 800f76c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800f770:	2204      	movs	r2, #4
 800f772:	eb0d 0102 	add.w	r1, sp, r2
 800f776:	2095      	movs	r0, #149	; 0x95
 800f778:	f7ff feb4 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f77c:	b003      	add	sp, #12
 800f77e:	f85d fb04 	ldr.w	pc, [sp], #4

0800f782 <SUBGRF_SetDioIrqParams>:
{
 800f782:	b500      	push	{lr}
 800f784:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800f786:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800f78a:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800f78e:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800f792:	0a08      	lsrs	r0, r1, #8
 800f794:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800f798:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800f79c:	0a11      	lsrs	r1, r2, #8
 800f79e:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800f7a2:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800f7a6:	0a1a      	lsrs	r2, r3, #8
 800f7a8:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800f7ac:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800f7b0:	2208      	movs	r2, #8
 800f7b2:	4669      	mov	r1, sp
 800f7b4:	4610      	mov	r0, r2
 800f7b6:	f7ff fe95 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f7ba:	b003      	add	sp, #12
 800f7bc:	f85d fb04 	ldr.w	pc, [sp], #4

0800f7c0 <SUBGRF_SetTcxoMode>:
{
 800f7c0:	b500      	push	{lr}
 800f7c2:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 800f7c4:	f000 0007 	and.w	r0, r0, #7
 800f7c8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f7cc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800f7d0:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f7d4:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800f7d8:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800f7dc:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800f7e0:	2204      	movs	r2, #4
 800f7e2:	eb0d 0102 	add.w	r1, sp, r2
 800f7e6:	2097      	movs	r0, #151	; 0x97
 800f7e8:	f7ff fe7c 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f7ec:	b003      	add	sp, #12
 800f7ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f7f4 <SUBGRF_SetRfFrequency>:
{
 800f7f4:	b510      	push	{r4, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800f7fa:	4b12      	ldr	r3, [pc, #72]	; (800f844 <SUBGRF_SetRfFrequency+0x50>)
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	b1d3      	cbz	r3, 800f836 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800f800:	4a11      	ldr	r2, [pc, #68]	; (800f848 <SUBGRF_SetRfFrequency+0x54>)
 800f802:	2300      	movs	r3, #0
 800f804:	0660      	lsls	r0, r4, #25
 800f806:	09e1      	lsrs	r1, r4, #7
 800f808:	f7f1 f87e 	bl	8000908 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800f80c:	0e03      	lsrs	r3, r0, #24
 800f80e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800f812:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f816:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800f81a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f81e:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800f822:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800f826:	2204      	movs	r2, #4
 800f828:	eb0d 0102 	add.w	r1, sp, r2
 800f82c:	2086      	movs	r0, #134	; 0x86
 800f82e:	f7ff fe59 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f832:	b002      	add	sp, #8
 800f834:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 800f836:	f7ff ff4b 	bl	800f6d0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800f83a:	4b02      	ldr	r3, [pc, #8]	; (800f844 <SUBGRF_SetRfFrequency+0x50>)
 800f83c:	2201      	movs	r2, #1
 800f83e:	701a      	strb	r2, [r3, #0]
 800f840:	e7de      	b.n	800f800 <SUBGRF_SetRfFrequency+0xc>
 800f842:	bf00      	nop
 800f844:	20000fcc 	.word	0x20000fcc
 800f848:	01e84800 	.word	0x01e84800

0800f84c <SUBGRF_GetPacketType>:
}
 800f84c:	4b01      	ldr	r3, [pc, #4]	; (800f854 <SUBGRF_GetPacketType+0x8>)
 800f84e:	7818      	ldrb	r0, [r3, #0]
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop
 800f854:	20000fcf 	.word	0x20000fcf

0800f858 <SUBGRF_SetBufferBaseAddress>:
{
 800f858:	b500      	push	{lr}
 800f85a:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 800f85c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800f860:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800f864:	2202      	movs	r2, #2
 800f866:	a901      	add	r1, sp, #4
 800f868:	208f      	movs	r0, #143	; 0x8f
 800f86a:	f7ff fe3b 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f86e:	b003      	add	sp, #12
 800f870:	f85d fb04 	ldr.w	pc, [sp], #4

0800f874 <SUBGRF_GetRssiInst>:
{
 800f874:	b500      	push	{lr}
 800f876:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800f878:	2201      	movs	r2, #1
 800f87a:	a901      	add	r1, sp, #4
 800f87c:	2015      	movs	r0, #21
 800f87e:	f7ff fe41 	bl	800f504 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800f882:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800f886:	4240      	negs	r0, r0
}
 800f888:	1040      	asrs	r0, r0, #1
 800f88a:	b003      	add	sp, #12
 800f88c:	f85d fb04 	ldr.w	pc, [sp], #4

0800f890 <SUBGRF_GetPacketStatus>:
{
 800f890:	b510      	push	{r4, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800f896:	2203      	movs	r2, #3
 800f898:	a901      	add	r1, sp, #4
 800f89a:	2014      	movs	r0, #20
 800f89c:	f7ff fe32 	bl	800f504 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 800f8a0:	f7ff ffd4 	bl	800f84c <SUBGRF_GetPacketType>
 800f8a4:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 800f8a6:	b148      	cbz	r0, 800f8bc <SUBGRF_GetPacketStatus+0x2c>
 800f8a8:	2801      	cmp	r0, #1
 800f8aa:	d018      	beq.n	800f8de <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800f8ac:	2214      	movs	r2, #20
 800f8ae:	2100      	movs	r1, #0
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f000 fe8e 	bl	80105d2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800f8b6:	230f      	movs	r3, #15
 800f8b8:	7023      	strb	r3, [r4, #0]
}
 800f8ba:	e00e      	b.n	800f8da <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800f8bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f8c0:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800f8c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f8c6:	425b      	negs	r3, r3
 800f8c8:	105b      	asrs	r3, r3, #1
 800f8ca:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800f8cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f8d0:	425b      	negs	r3, r3
 800f8d2:	105b      	asrs	r3, r3, #1
 800f8d4:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	60a3      	str	r3, [r4, #8]
}
 800f8da:	b002      	add	sp, #8
 800f8dc:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800f8de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f8e2:	425b      	negs	r3, r3
 800f8e4:	105b      	asrs	r3, r3, #1
 800f8e6:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800f8e8:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800f8ec:	3302      	adds	r3, #2
 800f8ee:	109b      	asrs	r3, r3, #2
 800f8f0:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800f8f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f8f6:	425b      	negs	r3, r3
 800f8f8:	105b      	asrs	r3, r3, #1
 800f8fa:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800f8fc:	4b01      	ldr	r3, [pc, #4]	; (800f904 <SUBGRF_GetPacketStatus+0x74>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	6123      	str	r3, [r4, #16]
            break;
 800f902:	e7ea      	b.n	800f8da <SUBGRF_GetPacketStatus+0x4a>
 800f904:	20000fc8 	.word	0x20000fc8

0800f908 <SUBGRF_WriteRegister>:
{
 800f908:	b500      	push	{lr}
 800f90a:	b083      	sub	sp, #12
 800f90c:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800f910:	2301      	movs	r3, #1
 800f912:	f10d 0207 	add.w	r2, sp, #7
 800f916:	4601      	mov	r1, r0
 800f918:	4802      	ldr	r0, [pc, #8]	; (800f924 <SUBGRF_WriteRegister+0x1c>)
 800f91a:	f7f5 fee1 	bl	80056e0 <HAL_SUBGHZ_WriteRegisters>
}
 800f91e:	b003      	add	sp, #12
 800f920:	f85d fb04 	ldr.w	pc, [sp], #4
 800f924:	200001d0 	.word	0x200001d0

0800f928 <SUBGRF_SetRxBoosted>:
{
 800f928:	b510      	push	{r4, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 800f92e:	4b0c      	ldr	r3, [pc, #48]	; (800f960 <SUBGRF_SetRxBoosted+0x38>)
 800f930:	2205      	movs	r2, #5
 800f932:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800f934:	2197      	movs	r1, #151	; 0x97
 800f936:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800f93a:	f7ff ffe5 	bl	800f908 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f93e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800f942:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f946:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800f94a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f94e:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800f952:	2203      	movs	r2, #3
 800f954:	a901      	add	r1, sp, #4
 800f956:	2082      	movs	r0, #130	; 0x82
 800f958:	f7ff fdc4 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f95c:	b002      	add	sp, #8
 800f95e:	bd10      	pop	{r4, pc}
 800f960:	20000fce 	.word	0x20000fce

0800f964 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 800f964:	b500      	push	{lr}
 800f966:	b083      	sub	sp, #12
 800f968:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800f96c:	2201      	movs	r2, #1
 800f96e:	f10d 0107 	add.w	r1, sp, #7
 800f972:	20a0      	movs	r0, #160	; 0xa0
 800f974:	f7ff fdb6 	bl	800f4e4 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 800f978:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f97c:	2b3f      	cmp	r3, #63	; 0x3f
 800f97e:	d90f      	bls.n	800f9a0 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 800f980:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 800f982:	2200      	movs	r2, #0
        while( mant > 31 )
 800f984:	e002      	b.n	800f98c <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 800f986:	089b      	lsrs	r3, r3, #2
            exp++;
 800f988:	1c51      	adds	r1, r2, #1
 800f98a:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 800f98c:	2b1f      	cmp	r3, #31
 800f98e:	d8fa      	bhi.n	800f986 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 800f990:	00d9      	lsls	r1, r3, #3
 800f992:	b2c9      	uxtb	r1, r1
 800f994:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800f996:	b2c9      	uxtb	r1, r1
 800f998:	f240 7006 	movw	r0, #1798	; 0x706
 800f99c:	f7ff ffb4 	bl	800f908 <SUBGRF_WriteRegister>
}
 800f9a0:	b003      	add	sp, #12
 800f9a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f9a8 <SUBGRF_SetPacketType>:
{
 800f9a8:	b500      	push	{lr}
 800f9aa:	b083      	sub	sp, #12
 800f9ac:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800f9b0:	b2c3      	uxtb	r3, r0
 800f9b2:	4a09      	ldr	r2, [pc, #36]	; (800f9d8 <SUBGRF_SetPacketType+0x30>)
 800f9b4:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800f9b6:	b143      	cbz	r3, 800f9ca <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800f9b8:	2201      	movs	r2, #1
 800f9ba:	f10d 0107 	add.w	r1, sp, #7
 800f9be:	208a      	movs	r0, #138	; 0x8a
 800f9c0:	f7ff fd90 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800f9c4:	b003      	add	sp, #12
 800f9c6:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800f9ca:	2100      	movs	r1, #0
 800f9cc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800f9d0:	f7ff ff9a 	bl	800f908 <SUBGRF_WriteRegister>
 800f9d4:	e7f0      	b.n	800f9b8 <SUBGRF_SetPacketType+0x10>
 800f9d6:	bf00      	nop
 800f9d8:	20000fcf 	.word	0x20000fcf

0800f9dc <SUBGRF_SetModulationParams>:
{
 800f9dc:	b510      	push	{r4, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800f9e2:	4b3e      	ldr	r3, [pc, #248]	; (800fadc <SUBGRF_SetModulationParams+0x100>)
 800f9e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f9e8:	ab02      	add	r3, sp, #8
 800f9ea:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800f9ee:	7820      	ldrb	r0, [r4, #0]
 800f9f0:	4b3b      	ldr	r3, [pc, #236]	; (800fae0 <SUBGRF_SetModulationParams+0x104>)
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	4298      	cmp	r0, r3
 800f9f6:	d106      	bne.n	800fa06 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 800f9f8:	7823      	ldrb	r3, [r4, #0]
 800f9fa:	2b03      	cmp	r3, #3
 800f9fc:	d82c      	bhi.n	800fa58 <SUBGRF_SetModulationParams+0x7c>
 800f9fe:	e8df f003 	tbb	[pc, r3]
 800fa02:	4205      	.short	0x4205
 800fa04:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800fa06:	f7ff ffcf 	bl	800f9a8 <SUBGRF_SetPacketType>
 800fa0a:	e7f5      	b.n	800f9f8 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800fa0c:	6862      	ldr	r2, [r4, #4]
 800fa0e:	4b35      	ldr	r3, [pc, #212]	; (800fae4 <SUBGRF_SetModulationParams+0x108>)
 800fa10:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fa14:	0c1a      	lsrs	r2, r3, #16
 800fa16:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fa1a:	0a1a      	lsrs	r2, r3, #8
 800fa1c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fa20:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800fa24:	7b23      	ldrb	r3, [r4, #12]
 800fa26:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800fa2a:	7b63      	ldrb	r3, [r4, #13]
 800fa2c:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800fa30:	68a1      	ldr	r1, [r4, #8]
 800fa32:	4a2d      	ldr	r2, [pc, #180]	; (800fae8 <SUBGRF_SetModulationParams+0x10c>)
 800fa34:	2300      	movs	r3, #0
 800fa36:	0648      	lsls	r0, r1, #25
 800fa38:	09c9      	lsrs	r1, r1, #7
 800fa3a:	f7f0 ff65 	bl	8000908 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800fa3e:	0c03      	lsrs	r3, r0, #16
 800fa40:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800fa44:	0a03      	lsrs	r3, r0, #8
 800fa46:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 800fa4a:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fa4e:	2208      	movs	r2, #8
 800fa50:	4669      	mov	r1, sp
 800fa52:	208b      	movs	r0, #139	; 0x8b
 800fa54:	f7ff fd46 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800fa58:	b002      	add	sp, #8
 800fa5a:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800fa5c:	6922      	ldr	r2, [r4, #16]
 800fa5e:	4b21      	ldr	r3, [pc, #132]	; (800fae4 <SUBGRF_SetModulationParams+0x108>)
 800fa60:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fa64:	0c1a      	lsrs	r2, r3, #16
 800fa66:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fa6a:	0a1a      	lsrs	r2, r3, #8
 800fa6c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fa70:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800fa74:	7d23      	ldrb	r3, [r4, #20]
 800fa76:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fa7a:	2204      	movs	r2, #4
 800fa7c:	4669      	mov	r1, sp
 800fa7e:	208b      	movs	r0, #139	; 0x8b
 800fa80:	f7ff fd30 	bl	800f4e4 <SUBGRF_WriteCommand>
        break;
 800fa84:	e7e8      	b.n	800fa58 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800fa86:	7e23      	ldrb	r3, [r4, #24]
 800fa88:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800fa8c:	7e63      	ldrb	r3, [r4, #25]
 800fa8e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800fa92:	7ea3      	ldrb	r3, [r4, #26]
 800fa94:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800fa98:	7ee3      	ldrb	r3, [r4, #27]
 800fa9a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800fa9e:	2204      	movs	r2, #4
 800faa0:	4669      	mov	r1, sp
 800faa2:	208b      	movs	r0, #139	; 0x8b
 800faa4:	f7ff fd1e 	bl	800f4e4 <SUBGRF_WriteCommand>
        break;
 800faa8:	e7d6      	b.n	800fa58 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800faaa:	6862      	ldr	r2, [r4, #4]
 800faac:	4b0d      	ldr	r3, [pc, #52]	; (800fae4 <SUBGRF_SetModulationParams+0x108>)
 800faae:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800fab2:	0c1a      	lsrs	r2, r3, #16
 800fab4:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800fab8:	0a1a      	lsrs	r2, r3, #8
 800faba:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800fabe:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800fac2:	7b23      	ldrb	r3, [r4, #12]
 800fac4:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800fac8:	7b63      	ldrb	r3, [r4, #13]
 800faca:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800face:	2205      	movs	r2, #5
 800fad0:	4669      	mov	r1, sp
 800fad2:	208b      	movs	r0, #139	; 0x8b
 800fad4:	f7ff fd06 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800fad8:	e7be      	b.n	800fa58 <SUBGRF_SetModulationParams+0x7c>
 800fada:	bf00      	nop
 800fadc:	080110dc 	.word	0x080110dc
 800fae0:	20000fcf 	.word	0x20000fcf
 800fae4:	3d090000 	.word	0x3d090000
 800fae8:	01e84800 	.word	0x01e84800

0800faec <SUBGRF_ReadRegister>:
{
 800faec:	b500      	push	{lr}
 800faee:	b083      	sub	sp, #12
 800faf0:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800faf2:	2301      	movs	r3, #1
 800faf4:	f10d 0207 	add.w	r2, sp, #7
 800faf8:	4803      	ldr	r0, [pc, #12]	; (800fb08 <SUBGRF_ReadRegister+0x1c>)
 800fafa:	f7f5 fe41 	bl	8005780 <HAL_SUBGHZ_ReadRegisters>
}
 800fafe:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fb02:	b003      	add	sp, #12
 800fb04:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb08:	200001d0 	.word	0x200001d0

0800fb0c <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800fb0c:	b510      	push	{r4, lr}
 800fb0e:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800fb10:	f7f2 fefa 	bl	8002908 <RBI_IsDCDC>
 800fb14:	2801      	cmp	r0, #1
 800fb16:	d000      	beq.n	800fb1a <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 800fb18:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800fb1a:	f640 1023 	movw	r0, #2339	; 0x923
 800fb1e:	f7ff ffe5 	bl	800faec <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 800fb22:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800fb26:	4321      	orrs	r1, r4
 800fb28:	f640 1023 	movw	r0, #2339	; 0x923
 800fb2c:	f7ff feec 	bl	800f908 <SUBGRF_WriteRegister>
}
 800fb30:	e7f2      	b.n	800fb18 <Radio_SMPS_Set+0xc>
	...

0800fb34 <SUBGRF_Init>:
{
 800fb34:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 800fb36:	b108      	cbz	r0, 800fb3c <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 800fb38:	4a16      	ldr	r2, [pc, #88]	; (800fb94 <SUBGRF_Init+0x60>)
 800fb3a:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 800fb3c:	f7f1 fca0 	bl	8001480 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800fb40:	2002      	movs	r0, #2
 800fb42:	f7ff ffe3 	bl	800fb0c <Radio_SMPS_Set>
    ImageCalibrated = false;
 800fb46:	2000      	movs	r0, #0
 800fb48:	4b13      	ldr	r3, [pc, #76]	; (800fb98 <SUBGRF_Init+0x64>)
 800fb4a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800fb4c:	f7ff fcf0 	bl	800f530 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 800fb50:	f7f2 fed6 	bl	8002900 <RBI_IsTCXO>
 800fb54:	2801      	cmp	r0, #1
 800fb56:	d00f      	beq.n	800fb78 <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800fb58:	2120      	movs	r1, #32
 800fb5a:	f640 1011 	movw	r0, #2321	; 0x911
 800fb5e:	f7ff fed3 	bl	800f908 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800fb62:	2120      	movs	r1, #32
 800fb64:	f640 1012 	movw	r0, #2322	; 0x912
 800fb68:	f7ff fece 	bl	800f908 <SUBGRF_WriteRegister>
    RBI_Init();
 800fb6c:	f7f2 febc 	bl	80028e8 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 800fb70:	4b0a      	ldr	r3, [pc, #40]	; (800fb9c <SUBGRF_Init+0x68>)
 800fb72:	2201      	movs	r2, #1
 800fb74:	701a      	strb	r2, [r3, #0]
}
 800fb76:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800fb78:	2140      	movs	r1, #64	; 0x40
 800fb7a:	f7ff fe21 	bl	800f7c0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800fb7e:	2100      	movs	r1, #0
 800fb80:	f640 1011 	movw	r0, #2321	; 0x911
 800fb84:	f7ff fec0 	bl	800f908 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 800fb88:	f04f 007f 	mov.w	r0, #127	; 0x7f
 800fb8c:	f7ff fd7f 	bl	800f68e <SUBGRF_Calibrate>
 800fb90:	e7ec      	b.n	800fb6c <SUBGRF_Init+0x38>
 800fb92:	bf00      	nop
 800fb94:	20000fd0 	.word	0x20000fd0
 800fb98:	20000fcc 	.word	0x20000fcc
 800fb9c:	20000fce 	.word	0x20000fce

0800fba0 <SUBGRF_SetSleep>:
{
 800fba0:	b510      	push	{r4, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800fba6:	2000      	movs	r0, #0
 800fba8:	f7f2 fea2 	bl	80028f0 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800fbac:	2002      	movs	r0, #2
 800fbae:	f7ff ffad 	bl	800fb0c <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fbb2:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800fbb6:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fbba:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800fbbc:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800fbc0:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fbc2:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	f10d 0107 	add.w	r1, sp, #7
 800fbcc:	2084      	movs	r0, #132	; 0x84
 800fbce:	f7ff fc89 	bl	800f4e4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800fbd2:	4b02      	ldr	r3, [pc, #8]	; (800fbdc <SUBGRF_SetSleep+0x3c>)
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	701a      	strb	r2, [r3, #0]
}
 800fbd8:	b002      	add	sp, #8
 800fbda:	bd10      	pop	{r4, pc}
 800fbdc:	20000fce 	.word	0x20000fce

0800fbe0 <SUBGRF_SetWhiteningSeed>:
{
 800fbe0:	b510      	push	{r4, lr}
 800fbe2:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 800fbe4:	f7ff fe32 	bl	800f84c <SUBGRF_GetPacketType>
 800fbe8:	b100      	cbz	r0, 800fbec <SUBGRF_SetWhiteningSeed+0xc>
}
 800fbea:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800fbec:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800fbf0:	f7ff ff7c 	bl	800faec <SUBGRF_ReadRegister>
 800fbf4:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800fbf8:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800fbfc:	4301      	orrs	r1, r0
 800fbfe:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800fc02:	f7ff fe81 	bl	800f908 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800fc06:	b2e1      	uxtb	r1, r4
 800fc08:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800fc0c:	f7ff fe7c 	bl	800f908 <SUBGRF_WriteRegister>
}
 800fc10:	e7eb      	b.n	800fbea <SUBGRF_SetWhiteningSeed+0xa>

0800fc12 <SUBGRF_SetTxParams>:
{
 800fc12:	b570      	push	{r4, r5, r6, lr}
 800fc14:	b082      	sub	sp, #8
 800fc16:	460c      	mov	r4, r1
 800fc18:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 800fc1a:	2801      	cmp	r0, #1
 800fc1c:	d035      	beq.n	800fc8a <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800fc1e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800fc22:	f7ff ff63 	bl	800faec <SUBGRF_ReadRegister>
 800fc26:	f040 011e 	orr.w	r1, r0, #30
 800fc2a:	b2c9      	uxtb	r1, r1
 800fc2c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800fc30:	f7ff fe6a 	bl	800f908 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800fc34:	2001      	movs	r0, #1
 800fc36:	f7f2 fe6b 	bl	8002910 <RBI_GetRFOMaxPowerConfig>
 800fc3a:	4605      	mov	r5, r0
        if (power > max_power)
 800fc3c:	4284      	cmp	r4, r0
 800fc3e:	dd00      	ble.n	800fc42 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 800fc40:	b244      	sxtb	r4, r0
        if (max_power == 20)
 800fc42:	2d14      	cmp	r5, #20
 800fc44:	d054      	beq.n	800fcf0 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 800fc46:	2d11      	cmp	r5, #17
 800fc48:	d05c      	beq.n	800fd04 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 800fc4a:	2d0e      	cmp	r5, #14
 800fc4c:	d064      	beq.n	800fd18 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800fc4e:	2301      	movs	r3, #1
 800fc50:	2200      	movs	r2, #0
 800fc52:	2107      	movs	r1, #7
 800fc54:	2004      	movs	r0, #4
 800fc56:	f7ff fd81 	bl	800f75c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800fc5a:	1b64      	subs	r4, r4, r5
 800fc5c:	3416      	adds	r4, #22
 800fc5e:	b264      	sxtb	r4, r4
        if (power < -9)
 800fc60:	f114 0f09 	cmn.w	r4, #9
 800fc64:	da01      	bge.n	800fc6a <SUBGRF_SetTxParams+0x58>
            power = -9;
 800fc66:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800fc6a:	2138      	movs	r1, #56	; 0x38
 800fc6c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800fc70:	f7ff fe4a 	bl	800f908 <SUBGRF_WriteRegister>
    buf[0] = power;
 800fc74:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 800fc78:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800fc7c:	2202      	movs	r2, #2
 800fc7e:	a901      	add	r1, sp, #4
 800fc80:	208e      	movs	r0, #142	; 0x8e
 800fc82:	f7ff fc2f 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800fc86:	b002      	add	sp, #8
 800fc88:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800fc8a:	2000      	movs	r0, #0
 800fc8c:	f7f2 fe40 	bl	8002910 <RBI_GetRFOMaxPowerConfig>
 800fc90:	4605      	mov	r5, r0
        if (power >  max_power)
 800fc92:	4284      	cmp	r4, r0
 800fc94:	dd00      	ble.n	800fc98 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 800fc96:	b244      	sxtb	r4, r0
        if (max_power == 14)
 800fc98:	2d0e      	cmp	r5, #14
 800fc9a:	d015      	beq.n	800fcc8 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 800fc9c:	2d0a      	cmp	r5, #10
 800fc9e:	d01d      	beq.n	800fcdc <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 800fca0:	2301      	movs	r3, #1
 800fca2:	461a      	mov	r2, r3
 800fca4:	2100      	movs	r1, #0
 800fca6:	2006      	movs	r0, #6
 800fca8:	f7ff fd58 	bl	800f75c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800fcac:	1b64      	subs	r4, r4, r5
 800fcae:	340e      	adds	r4, #14
 800fcb0:	b264      	sxtb	r4, r4
        if (power < -17)
 800fcb2:	f114 0f11 	cmn.w	r4, #17
 800fcb6:	da01      	bge.n	800fcbc <SUBGRF_SetTxParams+0xaa>
            power = -17;
 800fcb8:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800fcbc:	2118      	movs	r1, #24
 800fcbe:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800fcc2:	f7ff fe21 	bl	800f908 <SUBGRF_WriteRegister>
 800fcc6:	e7d5      	b.n	800fc74 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800fcc8:	2301      	movs	r3, #1
 800fcca:	461a      	mov	r2, r3
 800fccc:	2100      	movs	r1, #0
 800fcce:	2004      	movs	r0, #4
 800fcd0:	f7ff fd44 	bl	800f75c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800fcd4:	1b64      	subs	r4, r4, r5
 800fcd6:	340e      	adds	r4, #14
 800fcd8:	b264      	sxtb	r4, r4
 800fcda:	e7ea      	b.n	800fcb2 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800fcdc:	2301      	movs	r3, #1
 800fcde:	461a      	mov	r2, r3
 800fce0:	2100      	movs	r1, #0
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7ff fd3a 	bl	800f75c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800fce8:	1b64      	subs	r4, r4, r5
 800fcea:	340d      	adds	r4, #13
 800fcec:	b264      	sxtb	r4, r4
 800fcee:	e7e0      	b.n	800fcb2 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	2105      	movs	r1, #5
 800fcf6:	2003      	movs	r0, #3
 800fcf8:	f7ff fd30 	bl	800f75c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800fcfc:	1b64      	subs	r4, r4, r5
 800fcfe:	3416      	adds	r4, #22
 800fd00:	b264      	sxtb	r4, r4
 800fd02:	e7ad      	b.n	800fc60 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800fd04:	2301      	movs	r3, #1
 800fd06:	2200      	movs	r2, #0
 800fd08:	2103      	movs	r1, #3
 800fd0a:	2002      	movs	r0, #2
 800fd0c:	f7ff fd26 	bl	800f75c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800fd10:	1b64      	subs	r4, r4, r5
 800fd12:	3416      	adds	r4, #22
 800fd14:	b264      	sxtb	r4, r4
 800fd16:	e7a3      	b.n	800fc60 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800fd18:	2301      	movs	r3, #1
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	2102      	movs	r1, #2
 800fd1e:	4608      	mov	r0, r1
 800fd20:	f7ff fd1c 	bl	800f75c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800fd24:	1b64      	subs	r4, r4, r5
 800fd26:	340e      	adds	r4, #14
 800fd28:	b264      	sxtb	r4, r4
 800fd2a:	e799      	b.n	800fc60 <SUBGRF_SetTxParams+0x4e>

0800fd2c <SUBGRF_GetRxBufferStatus>:
{
 800fd2c:	b530      	push	{r4, r5, lr}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	4605      	mov	r5, r0
 800fd32:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800fd34:	2202      	movs	r2, #2
 800fd36:	a901      	add	r1, sp, #4
 800fd38:	2013      	movs	r0, #19
 800fd3a:	f7ff fbe3 	bl	800f504 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800fd3e:	f7ff fd85 	bl	800f84c <SUBGRF_GetPacketType>
 800fd42:	2801      	cmp	r0, #1
 800fd44:	d007      	beq.n	800fd56 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 800fd46:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fd4a:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 800fd4c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fd50:	7023      	strb	r3, [r4, #0]
}
 800fd52:	b003      	add	sp, #12
 800fd54:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800fd56:	4b05      	ldr	r3, [pc, #20]	; (800fd6c <SUBGRF_GetRxBufferStatus+0x40>)
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	b2db      	uxtb	r3, r3
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d1f2      	bne.n	800fd46 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800fd60:	f240 7002 	movw	r0, #1794	; 0x702
 800fd64:	f7ff fec2 	bl	800faec <SUBGRF_ReadRegister>
 800fd68:	7028      	strb	r0, [r5, #0]
 800fd6a:	e7ef      	b.n	800fd4c <SUBGRF_GetRxBufferStatus+0x20>
 800fd6c:	20000fcd 	.word	0x20000fcd

0800fd70 <SUBGRF_WriteRegisters>:
{
 800fd70:	b510      	push	{r4, lr}
 800fd72:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd74:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fd78:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800fd7a:	460a      	mov	r2, r1
 800fd7c:	4601      	mov	r1, r0
 800fd7e:	4803      	ldr	r0, [pc, #12]	; (800fd8c <SUBGRF_WriteRegisters+0x1c>)
 800fd80:	f7f5 fcae 	bl	80056e0 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd84:	f384 8810 	msr	PRIMASK, r4
}
 800fd88:	bd10      	pop	{r4, pc}
 800fd8a:	bf00      	nop
 800fd8c:	200001d0 	.word	0x200001d0

0800fd90 <SUBGRF_SetSyncWord>:
{
 800fd90:	b508      	push	{r3, lr}
 800fd92:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800fd94:	2208      	movs	r2, #8
 800fd96:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800fd9a:	f7ff ffe9 	bl	800fd70 <SUBGRF_WriteRegisters>
}
 800fd9e:	2000      	movs	r0, #0
 800fda0:	bd08      	pop	{r3, pc}

0800fda2 <SUBGRF_SetCrcSeed>:
{
 800fda2:	b500      	push	{lr}
 800fda4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800fda6:	0a03      	lsrs	r3, r0, #8
 800fda8:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800fdac:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800fdb0:	f7ff fd4c 	bl	800f84c <SUBGRF_GetPacketType>
 800fdb4:	b110      	cbz	r0, 800fdbc <SUBGRF_SetCrcSeed+0x1a>
}
 800fdb6:	b003      	add	sp, #12
 800fdb8:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800fdbc:	2202      	movs	r2, #2
 800fdbe:	a901      	add	r1, sp, #4
 800fdc0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800fdc4:	f7ff ffd4 	bl	800fd70 <SUBGRF_WriteRegisters>
}
 800fdc8:	e7f5      	b.n	800fdb6 <SUBGRF_SetCrcSeed+0x14>

0800fdca <SUBGRF_SetCrcPolynomial>:
{
 800fdca:	b500      	push	{lr}
 800fdcc:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800fdce:	0a03      	lsrs	r3, r0, #8
 800fdd0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800fdd4:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800fdd8:	f7ff fd38 	bl	800f84c <SUBGRF_GetPacketType>
 800fddc:	b110      	cbz	r0, 800fde4 <SUBGRF_SetCrcPolynomial+0x1a>
}
 800fdde:	b003      	add	sp, #12
 800fde0:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800fde4:	2202      	movs	r2, #2
 800fde6:	a901      	add	r1, sp, #4
 800fde8:	f240 60be 	movw	r0, #1726	; 0x6be
 800fdec:	f7ff ffc0 	bl	800fd70 <SUBGRF_WriteRegisters>
}
 800fdf0:	e7f5      	b.n	800fdde <SUBGRF_SetCrcPolynomial+0x14>
	...

0800fdf4 <SUBGRF_SetPacketParams>:
{
 800fdf4:	b510      	push	{r4, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800fdfa:	ab01      	add	r3, sp, #4
 800fdfc:	4a33      	ldr	r2, [pc, #204]	; (800fecc <SUBGRF_SetPacketParams+0xd8>)
 800fdfe:	ca07      	ldmia	r2, {r0, r1, r2}
 800fe00:	c303      	stmia	r3!, {r0, r1}
 800fe02:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 800fe04:	7820      	ldrb	r0, [r4, #0]
 800fe06:	4b32      	ldr	r3, [pc, #200]	; (800fed0 <SUBGRF_SetPacketParams+0xdc>)
 800fe08:	781b      	ldrb	r3, [r3, #0]
 800fe0a:	4298      	cmp	r0, r3
 800fe0c:	d106      	bne.n	800fe1c <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 800fe0e:	7823      	ldrb	r3, [r4, #0]
 800fe10:	2b03      	cmp	r3, #3
 800fe12:	d82a      	bhi.n	800fe6a <SUBGRF_SetPacketParams+0x76>
 800fe14:	e8df f003 	tbb	[pc, r3]
 800fe18:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 800fe1c:	f7ff fdc4 	bl	800f9a8 <SUBGRF_SetPacketType>
 800fe20:	e7f5      	b.n	800fe0e <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800fe22:	7a63      	ldrb	r3, [r4, #9]
 800fe24:	2bf1      	cmp	r3, #241	; 0xf1
 800fe26:	d022      	beq.n	800fe6e <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800fe28:	2bf2      	cmp	r3, #242	; 0xf2
 800fe2a:	d02a      	beq.n	800fe82 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800fe2c:	8862      	ldrh	r2, [r4, #2]
 800fe2e:	0a11      	lsrs	r1, r2, #8
 800fe30:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800fe34:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800fe38:	7922      	ldrb	r2, [r4, #4]
 800fe3a:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800fe3e:	7962      	ldrb	r2, [r4, #5]
 800fe40:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800fe44:	79a2      	ldrb	r2, [r4, #6]
 800fe46:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800fe4a:	79e2      	ldrb	r2, [r4, #7]
 800fe4c:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800fe50:	7a22      	ldrb	r2, [r4, #8]
 800fe52:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 800fe56:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800fe5a:	7aa3      	ldrb	r3, [r4, #10]
 800fe5c:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 800fe60:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800fe62:	a901      	add	r1, sp, #4
 800fe64:	208c      	movs	r0, #140	; 0x8c
 800fe66:	f7ff fb3d 	bl	800f4e4 <SUBGRF_WriteCommand>
}
 800fe6a:	b004      	add	sp, #16
 800fe6c:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800fe6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800fe72:	f7ff ff96 	bl	800fda2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800fe76:	f248 0005 	movw	r0, #32773	; 0x8005
 800fe7a:	f7ff ffa6 	bl	800fdca <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800fe7e:	2302      	movs	r3, #2
 800fe80:	e7d4      	b.n	800fe2c <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800fe82:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800fe86:	f7ff ff8c 	bl	800fda2 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800fe8a:	f241 0021 	movw	r0, #4129	; 0x1021
 800fe8e:	f7ff ff9c 	bl	800fdca <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800fe92:	2306      	movs	r3, #6
 800fe94:	e7ca      	b.n	800fe2c <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800fe96:	7b23      	ldrb	r3, [r4, #12]
 800fe98:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 800fe9c:	2201      	movs	r2, #1
        break;
 800fe9e:	e7e0      	b.n	800fe62 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800fea0:	89e3      	ldrh	r3, [r4, #14]
 800fea2:	0a1a      	lsrs	r2, r3, #8
 800fea4:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800fea8:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800feac:	7c23      	ldrb	r3, [r4, #16]
 800feae:	4a09      	ldr	r2, [pc, #36]	; (800fed4 <SUBGRF_SetPacketParams+0xe0>)
 800feb0:	7013      	strb	r3, [r2, #0]
 800feb2:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800feb6:	7c63      	ldrb	r3, [r4, #17]
 800feb8:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800febc:	7ca3      	ldrb	r3, [r4, #18]
 800febe:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800fec2:	7ce3      	ldrb	r3, [r4, #19]
 800fec4:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 800fec8:	2206      	movs	r2, #6
        break;
 800feca:	e7ca      	b.n	800fe62 <SUBGRF_SetPacketParams+0x6e>
 800fecc:	080110e4 	.word	0x080110e4
 800fed0:	20000fcf 	.word	0x20000fcf
 800fed4:	20000fcd 	.word	0x20000fcd

0800fed8 <SUBGRF_ReadRegisters>:
{
 800fed8:	b510      	push	{r4, lr}
 800feda:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fedc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fee0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800fee2:	460a      	mov	r2, r1
 800fee4:	4601      	mov	r1, r0
 800fee6:	4803      	ldr	r0, [pc, #12]	; (800fef4 <SUBGRF_ReadRegisters+0x1c>)
 800fee8:	f7f5 fc4a 	bl	8005780 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800feec:	f384 8810 	msr	PRIMASK, r4
}
 800fef0:	bd10      	pop	{r4, pc}
 800fef2:	bf00      	nop
 800fef4:	200001d0 	.word	0x200001d0

0800fef8 <SUBGRF_GetRandom>:
{
 800fef8:	b570      	push	{r4, r5, r6, lr}
 800fefa:	b082      	sub	sp, #8
    uint32_t number = 0;
 800fefc:	2600      	movs	r6, #0
 800fefe:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800ff00:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800ff04:	f7ff fdf2 	bl	800faec <SUBGRF_ReadRegister>
 800ff08:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800ff0a:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 800ff0e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800ff12:	f7ff fcf9 	bl	800f908 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800ff16:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800ff1a:	f7ff fde7 	bl	800faec <SUBGRF_ReadRegister>
 800ff1e:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800ff20:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800ff24:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800ff28:	f7ff fcee 	bl	800f908 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800ff2c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800ff30:	f7ff fb32 	bl	800f598 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800ff34:	2204      	movs	r2, #4
 800ff36:	eb0d 0102 	add.w	r1, sp, r2
 800ff3a:	f640 0019 	movw	r0, #2073	; 0x819
 800ff3e:	f7ff ffcb 	bl	800fed8 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 800ff42:	4630      	mov	r0, r6
 800ff44:	f7ff faf4 	bl	800f530 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800ff48:	4629      	mov	r1, r5
 800ff4a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800ff4e:	f7ff fcdb 	bl	800f908 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800ff52:	4621      	mov	r1, r4
 800ff54:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800ff58:	f7ff fcd6 	bl	800f908 <SUBGRF_WriteRegister>
}
 800ff5c:	9801      	ldr	r0, [sp, #4]
 800ff5e:	b002      	add	sp, #8
 800ff60:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ff64 <SUBGRF_WriteBuffer>:
{
 800ff64:	b510      	push	{r4, lr}
 800ff66:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff68:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ff6c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800ff6e:	460a      	mov	r2, r1
 800ff70:	4601      	mov	r1, r0
 800ff72:	4803      	ldr	r0, [pc, #12]	; (800ff80 <SUBGRF_WriteBuffer+0x1c>)
 800ff74:	f7f5 fd5a 	bl	8005a2c <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff78:	f384 8810 	msr	PRIMASK, r4
}
 800ff7c:	bd10      	pop	{r4, pc}
 800ff7e:	bf00      	nop
 800ff80:	200001d0 	.word	0x200001d0

0800ff84 <SUBGRF_SetPayload>:
{
 800ff84:	b508      	push	{r3, lr}
 800ff86:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800ff88:	4601      	mov	r1, r0
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	f7ff ffea 	bl	800ff64 <SUBGRF_WriteBuffer>
}
 800ff90:	bd08      	pop	{r3, pc}

0800ff92 <SUBGRF_SendPayload>:
{
 800ff92:	b510      	push	{r4, lr}
 800ff94:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 800ff96:	f7ff fff5 	bl	800ff84 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	f7ff fae2 	bl	800f564 <SUBGRF_SetTx>
}
 800ffa0:	bd10      	pop	{r4, pc}
	...

0800ffa4 <SUBGRF_ReadBuffer>:
{
 800ffa4:	b510      	push	{r4, lr}
 800ffa6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffa8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ffac:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800ffae:	460a      	mov	r2, r1
 800ffb0:	4601      	mov	r1, r0
 800ffb2:	4803      	ldr	r0, [pc, #12]	; (800ffc0 <SUBGRF_ReadBuffer+0x1c>)
 800ffb4:	f7f5 fd84 	bl	8005ac0 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ffb8:	f384 8810 	msr	PRIMASK, r4
}
 800ffbc:	bd10      	pop	{r4, pc}
 800ffbe:	bf00      	nop
 800ffc0:	200001d0 	.word	0x200001d0

0800ffc4 <SUBGRF_GetPayload>:
{
 800ffc4:	b570      	push	{r4, r5, r6, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	4606      	mov	r6, r0
 800ffca:	460c      	mov	r4, r1
 800ffcc:	4615      	mov	r5, r2
    uint8_t offset = 0;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 800ffd4:	f10d 0107 	add.w	r1, sp, #7
 800ffd8:	4620      	mov	r0, r4
 800ffda:	f7ff fea7 	bl	800fd2c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800ffde:	7822      	ldrb	r2, [r4, #0]
 800ffe0:	42aa      	cmp	r2, r5
 800ffe2:	d902      	bls.n	800ffea <SUBGRF_GetPayload+0x26>
        return 1;
 800ffe4:	2001      	movs	r0, #1
}
 800ffe6:	b002      	add	sp, #8
 800ffe8:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800ffea:	4631      	mov	r1, r6
 800ffec:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fff0:	f7ff ffd8 	bl	800ffa4 <SUBGRF_ReadBuffer>
    return 0;
 800fff4:	2000      	movs	r0, #0
 800fff6:	e7f6      	b.n	800ffe6 <SUBGRF_GetPayload+0x22>

0800fff8 <SUBGRF_SetSwitch>:
{
 800fff8:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 800fffa:	2901      	cmp	r1, #1
 800fffc:	d003      	beq.n	8010006 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800fffe:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8010000:	f7f2 fc76 	bl	80028f0 <RBI_ConfigRFSwitch>
}
 8010004:	bd10      	pop	{r4, pc}
 8010006:	4604      	mov	r4, r0
 8010008:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 801000a:	2c01      	cmp	r4, #1
 801000c:	d003      	beq.n	8010016 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 801000e:	2c02      	cmp	r4, #2
 8010010:	d1f6      	bne.n	8010000 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8010012:	2003      	movs	r0, #3
 8010014:	e7f4      	b.n	8010000 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8010016:	2004      	movs	r0, #4
 8010018:	f7ff fd78 	bl	800fb0c <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 801001c:	2002      	movs	r0, #2
 801001e:	e7f6      	b.n	801000e <SUBGRF_SetSwitch+0x16>

08010020 <SUBGRF_SetRfTxPower>:
{
 8010020:	b538      	push	{r3, r4, r5, lr}
 8010022:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8010024:	f7f2 fc68 	bl	80028f8 <RBI_GetTxConfig>
    switch (TxConfig)
 8010028:	b148      	cbz	r0, 801003e <SUBGRF_SetRfTxPower+0x1e>
 801002a:	2802      	cmp	r0, #2
 801002c:	d10d      	bne.n	801004a <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 801002e:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8010030:	2202      	movs	r2, #2
 8010032:	4621      	mov	r1, r4
 8010034:	4628      	mov	r0, r5
 8010036:	f7ff fdec 	bl	800fc12 <SUBGRF_SetTxParams>
}
 801003a:	4628      	mov	r0, r5
 801003c:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 801003e:	2c0f      	cmp	r4, #15
 8010040:	dc01      	bgt.n	8010046 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8010042:	2501      	movs	r5, #1
 8010044:	e7f4      	b.n	8010030 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8010046:	2502      	movs	r5, #2
 8010048:	e7f2      	b.n	8010030 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 801004a:	2501      	movs	r5, #1
 801004c:	e7f0      	b.n	8010030 <SUBGRF_SetRfTxPower+0x10>

0801004e <SUBGRF_GetRadioWakeUpTime>:
}
 801004e:	2001      	movs	r0, #1
 8010050:	4770      	bx	lr
	...

08010054 <HAL_SUBGHZ_TxCpltCallback>:
{
 8010054:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8010056:	4b02      	ldr	r3, [pc, #8]	; (8010060 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	2001      	movs	r0, #1
 801005c:	4798      	blx	r3
}
 801005e:	bd08      	pop	{r3, pc}
 8010060:	20000fd0 	.word	0x20000fd0

08010064 <HAL_SUBGHZ_RxCpltCallback>:
{
 8010064:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8010066:	4b02      	ldr	r3, [pc, #8]	; (8010070 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	2002      	movs	r0, #2
 801006c:	4798      	blx	r3
}
 801006e:	bd08      	pop	{r3, pc}
 8010070:	20000fd0 	.word	0x20000fd0

08010074 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8010074:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8010076:	4b02      	ldr	r3, [pc, #8]	; (8010080 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	2040      	movs	r0, #64	; 0x40
 801007c:	4798      	blx	r3
}
 801007e:	bd08      	pop	{r3, pc}
 8010080:	20000fd0 	.word	0x20000fd0

08010084 <HAL_SUBGHZ_CADStatusCallback>:
{
 8010084:	b508      	push	{r3, lr}
    switch (cadstatus)
 8010086:	b111      	cbz	r1, 801008e <HAL_SUBGHZ_CADStatusCallback+0xa>
 8010088:	2901      	cmp	r1, #1
 801008a:	d005      	beq.n	8010098 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 801008c:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801008e:	4b05      	ldr	r3, [pc, #20]	; (80100a4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	2080      	movs	r0, #128	; 0x80
 8010094:	4798      	blx	r3
            break;
 8010096:	e7f9      	b.n	801008c <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8010098:	4b02      	ldr	r3, [pc, #8]	; (80100a4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80100a0:	4798      	blx	r3
}
 80100a2:	e7f3      	b.n	801008c <HAL_SUBGHZ_CADStatusCallback+0x8>
 80100a4:	20000fd0 	.word	0x20000fd0

080100a8 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80100a8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80100aa:	4b03      	ldr	r3, [pc, #12]	; (80100b8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80100b2:	4798      	blx	r3
}
 80100b4:	bd08      	pop	{r3, pc}
 80100b6:	bf00      	nop
 80100b8:	20000fd0 	.word	0x20000fd0

080100bc <HAL_SUBGHZ_HeaderErrorCallback>:
{
 80100bc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80100be:	4b02      	ldr	r3, [pc, #8]	; (80100c8 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	2020      	movs	r0, #32
 80100c4:	4798      	blx	r3
}
 80100c6:	bd08      	pop	{r3, pc}
 80100c8:	20000fd0 	.word	0x20000fd0

080100cc <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 80100cc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80100ce:	4b02      	ldr	r3, [pc, #8]	; (80100d8 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2004      	movs	r0, #4
 80100d4:	4798      	blx	r3
}
 80100d6:	bd08      	pop	{r3, pc}
 80100d8:	20000fd0 	.word	0x20000fd0

080100dc <HAL_SUBGHZ_SyncWordValidCallback>:
{
 80100dc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80100de:	4b02      	ldr	r3, [pc, #8]	; (80100e8 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2008      	movs	r0, #8
 80100e4:	4798      	blx	r3
}
 80100e6:	bd08      	pop	{r3, pc}
 80100e8:	20000fd0 	.word	0x20000fd0

080100ec <HAL_SUBGHZ_HeaderValidCallback>:
{
 80100ec:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80100ee:	4b02      	ldr	r3, [pc, #8]	; (80100f8 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	2010      	movs	r0, #16
 80100f4:	4798      	blx	r3
}
 80100f6:	bd08      	pop	{r3, pc}
 80100f8:	20000fd0 	.word	0x20000fd0

080100fc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 80100fc:	4601      	mov	r1, r0
 80100fe:	b188      	cbz	r0, 8010124 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010100:	2300      	movs	r3, #0
 8010102:	2b15      	cmp	r3, #21
 8010104:	d80d      	bhi.n	8010122 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8010106:	4618      	mov	r0, r3
 8010108:	4a07      	ldr	r2, [pc, #28]	; (8010128 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801010a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801010e:	428a      	cmp	r2, r1
 8010110:	d802      	bhi.n	8010118 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010112:	3301      	adds	r3, #1
 8010114:	b2db      	uxtb	r3, r3
 8010116:	e7f4      	b.n	8010102 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8010118:	4b03      	ldr	r3, [pc, #12]	; (8010128 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801011a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801011e:	7900      	ldrb	r0, [r0, #4]
 8010120:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8010122:	e7fe      	b.n	8010122 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8010124:	201f      	movs	r0, #31
}
 8010126:	4770      	bx	lr
 8010128:	08011e40 	.word	0x08011e40

0801012c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801012c:	b570      	push	{r4, r5, r6, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	4606      	mov	r6, r0
 8010132:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8010134:	4b1d      	ldr	r3, [pc, #116]	; (80101ac <SUBGRF_GetCFO+0x80>)
 8010136:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8010138:	f640 0007 	movw	r0, #2055	; 0x807
 801013c:	f7ff fcd6 	bl	800faec <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8010140:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8010144:	3308      	adds	r3, #8
 8010146:	446b      	add	r3, sp
 8010148:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 801014c:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8010150:	3b01      	subs	r3, #1
 8010152:	fa05 f303 	lsl.w	r3, r5, r3
 8010156:	4d16      	ldr	r5, [pc, #88]	; (80101b0 <SUBGRF_GetCFO+0x84>)
 8010158:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 801015c:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8010160:	2a07      	cmp	r2, #7
 8010162:	d921      	bls.n	80101a8 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8010164:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8010166:	fb00 f202 	mul.w	r2, r0, r2
 801016a:	2a03      	cmp	r2, #3
 801016c:	d800      	bhi.n	8010170 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 801016e:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8010170:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8010174:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8010178:	f7ff fcb8 	bl	800faec <SUBGRF_ReadRegister>
 801017c:	0200      	lsls	r0, r0, #8
 801017e:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8010182:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8010186:	f7ff fcb1 	bl	800faec <SUBGRF_ReadRegister>
 801018a:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801018c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8010190:	d003      	beq.n	801019a <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8010192:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8010196:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801019a:	096d      	lsrs	r5, r5, #5
 801019c:	fb05 f000 	mul.w	r0, r5, r0
 80101a0:	11c0      	asrs	r0, r0, #7
 80101a2:	6020      	str	r0, [r4, #0]
}
 80101a4:	b002      	add	sp, #8
 80101a6:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80101a8:	2002      	movs	r0, #2
 80101aa:	e7dc      	b.n	8010166 <SUBGRF_GetCFO+0x3a>
 80101ac:	0c0a0804 	.word	0x0c0a0804
 80101b0:	01e84800 	.word	0x01e84800

080101b4 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80101b4:	f04f 30ff 	mov.w	r0, #4294967295
 80101b8:	4770      	bx	lr

080101ba <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80101ba:	f04f 30ff 	mov.w	r0, #4294967295
 80101be:	4770      	bx	lr

080101c0 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80101c0:	4770      	bx	lr

080101c2 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 80101c2:	2000      	movs	r0, #0
 80101c4:	4770      	bx	lr

080101c6 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 80101c6:	2000      	movs	r0, #0
 80101c8:	4770      	bx	lr

080101ca <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 80101ca:	4770      	bx	lr

080101cc <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 80101cc:	f04f 30ff 	mov.w	r0, #4294967295
 80101d0:	4770      	bx	lr

080101d2 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 80101d2:	f04f 30ff 	mov.w	r0, #4294967295
 80101d6:	4770      	bx	lr

080101d8 <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 80101d8:	4770      	bx	lr

080101da <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 80101da:	4770      	bx	lr

080101dc <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 80101dc:	4770      	bx	lr
	...

080101e0 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80101e0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101e2:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80101e6:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80101e8:	4b1e      	ldr	r3, [pc, #120]	; (8010264 <TRACE_AllocateBufer+0x84>)
 80101ea:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 80101ee:	8a1a      	ldrh	r2, [r3, #16]
 80101f0:	4594      	cmp	ip, r2
 80101f2:	d011      	beq.n	8010218 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80101f4:	4594      	cmp	ip, r2
 80101f6:	d921      	bls.n	801023c <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80101f8:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 80101fc:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80101fe:	4283      	cmp	r3, r0
 8010200:	d81f      	bhi.n	8010242 <TRACE_AllocateBufer+0x62>
 8010202:	4282      	cmp	r2, r0
 8010204:	d91d      	bls.n	8010242 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8010206:	4b17      	ldr	r3, [pc, #92]	; (8010264 <TRACE_AllocateBufer+0x84>)
 8010208:	2401      	movs	r4, #1
 801020a:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801020c:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8010210:	2400      	movs	r4, #0
 8010212:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8010214:	4613      	mov	r3, r2
 8010216:	e014      	b.n	8010242 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8010218:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 801021c:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801021e:	4298      	cmp	r0, r3
 8010220:	d30f      	bcc.n	8010242 <TRACE_AllocateBufer+0x62>
 8010222:	4282      	cmp	r2, r0
 8010224:	d90d      	bls.n	8010242 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8010226:	4b0f      	ldr	r3, [pc, #60]	; (8010264 <TRACE_AllocateBufer+0x84>)
 8010228:	2401      	movs	r4, #1
 801022a:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801022c:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8010230:	f04f 0c00 	mov.w	ip, #0
 8010234:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8010238:	4613      	mov	r3, r2
 801023a:	e002      	b.n	8010242 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801023c:	eba2 030c 	sub.w	r3, r2, ip
 8010240:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8010242:	4283      	cmp	r3, r0
 8010244:	d90a      	bls.n	801025c <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8010246:	4a07      	ldr	r2, [pc, #28]	; (8010264 <TRACE_AllocateBufer+0x84>)
 8010248:	8a53      	ldrh	r3, [r2, #18]
 801024a:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801024c:	4403      	add	r3, r0
 801024e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010252:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8010254:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010256:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 801025a:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 801025c:	f04f 30ff 	mov.w	r0, #4294967295
 8010260:	e7f9      	b.n	8010256 <TRACE_AllocateBufer+0x76>
 8010262:	bf00      	nop
 8010264:	200013d4 	.word	0x200013d4

08010268 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010268:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801026c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 801026e:	4a03      	ldr	r2, [pc, #12]	; (801027c <TRACE_Lock+0x14>)
 8010270:	8ad3      	ldrh	r3, [r2, #22]
 8010272:	3301      	adds	r3, #1
 8010274:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010276:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801027a:	4770      	bx	lr
 801027c:	200013d4 	.word	0x200013d4

08010280 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010280:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010284:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8010286:	4a03      	ldr	r2, [pc, #12]	; (8010294 <TRACE_UnLock+0x14>)
 8010288:	8ad3      	ldrh	r3, [r2, #22]
 801028a:	3b01      	subs	r3, #1
 801028c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801028e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8010292:	4770      	bx	lr
 8010294:	200013d4 	.word	0x200013d4

08010298 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8010298:	4b02      	ldr	r3, [pc, #8]	; (80102a4 <TRACE_IsLocked+0xc>)
 801029a:	8ad8      	ldrh	r0, [r3, #22]
}
 801029c:	3800      	subs	r0, #0
 801029e:	bf18      	it	ne
 80102a0:	2001      	movne	r0, #1
 80102a2:	4770      	bx	lr
 80102a4:	200013d4 	.word	0x200013d4

080102a8 <UTIL_ADV_TRACE_Init>:
{
 80102a8:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80102aa:	2218      	movs	r2, #24
 80102ac:	2100      	movs	r1, #0
 80102ae:	4807      	ldr	r0, [pc, #28]	; (80102cc <UTIL_ADV_TRACE_Init+0x24>)
 80102b0:	f000 f98f 	bl	80105d2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80102b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80102b8:	2100      	movs	r1, #0
 80102ba:	4805      	ldr	r0, [pc, #20]	; (80102d0 <UTIL_ADV_TRACE_Init+0x28>)
 80102bc:	f000 f989 	bl	80105d2 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80102c0:	4b04      	ldr	r3, [pc, #16]	; (80102d4 <UTIL_ADV_TRACE_Init+0x2c>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	4804      	ldr	r0, [pc, #16]	; (80102d8 <UTIL_ADV_TRACE_Init+0x30>)
 80102c6:	4798      	blx	r3
}
 80102c8:	bd08      	pop	{r3, pc}
 80102ca:	bf00      	nop
 80102cc:	200013d4 	.word	0x200013d4
 80102d0:	20000fd4 	.word	0x20000fd4
 80102d4:	08011184 	.word	0x08011184
 80102d8:	0801045d 	.word	0x0801045d

080102dc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80102dc:	4b01      	ldr	r3, [pc, #4]	; (80102e4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 80102de:	6058      	str	r0, [r3, #4]
}
 80102e0:	4770      	bx	lr
 80102e2:	bf00      	nop
 80102e4:	200013d4 	.word	0x200013d4

080102e8 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80102e8:	4b01      	ldr	r3, [pc, #4]	; (80102f0 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 80102ea:	7218      	strb	r0, [r3, #8]
}
 80102ec:	4770      	bx	lr
 80102ee:	bf00      	nop
 80102f0:	200013d4 	.word	0x200013d4

080102f4 <TRACE_Send>:
{
 80102f4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102f6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80102fa:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 80102fc:	f7ff ffcc 	bl	8010298 <TRACE_IsLocked>
 8010300:	b118      	cbz	r0, 801030a <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010302:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8010306:	2000      	movs	r0, #0
}
 8010308:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 801030a:	f7ff ffad 	bl	8010268 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801030e:	4b1d      	ldr	r3, [pc, #116]	; (8010384 <TRACE_Send+0x90>)
 8010310:	8a1a      	ldrh	r2, [r3, #16]
 8010312:	8a5b      	ldrh	r3, [r3, #18]
 8010314:	429a      	cmp	r2, r3
 8010316:	d02e      	beq.n	8010376 <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8010318:	491a      	ldr	r1, [pc, #104]	; (8010384 <TRACE_Send+0x90>)
 801031a:	7889      	ldrb	r1, [r1, #2]
 801031c:	2901      	cmp	r1, #1
 801031e:	d017      	beq.n	8010350 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8010320:	4a18      	ldr	r2, [pc, #96]	; (8010384 <TRACE_Send+0x90>)
 8010322:	7892      	ldrb	r2, [r2, #2]
 8010324:	b932      	cbnz	r2, 8010334 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8010326:	4a17      	ldr	r2, [pc, #92]	; (8010384 <TRACE_Send+0x90>)
 8010328:	8a12      	ldrh	r2, [r2, #16]
 801032a:	4293      	cmp	r3, r2
 801032c:	d91e      	bls.n	801036c <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801032e:	1a9b      	subs	r3, r3, r2
 8010330:	4a14      	ldr	r2, [pc, #80]	; (8010384 <TRACE_Send+0x90>)
 8010332:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8010334:	4e13      	ldr	r6, [pc, #76]	; (8010384 <TRACE_Send+0x90>)
 8010336:	8a33      	ldrh	r3, [r6, #16]
 8010338:	4d13      	ldr	r5, [pc, #76]	; (8010388 <TRACE_Send+0x94>)
 801033a:	441d      	add	r5, r3
 801033c:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8010340:	f7f1 f998 	bl	8001674 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8010344:	4b11      	ldr	r3, [pc, #68]	; (801038c <TRACE_Send+0x98>)
 8010346:	68db      	ldr	r3, [r3, #12]
 8010348:	8ab1      	ldrh	r1, [r6, #20]
 801034a:	4628      	mov	r0, r5
 801034c:	4798      	blx	r3
 801034e:	e7db      	b.n	8010308 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8010350:	480c      	ldr	r0, [pc, #48]	; (8010384 <TRACE_Send+0x90>)
 8010352:	8801      	ldrh	r1, [r0, #0]
 8010354:	1a8a      	subs	r2, r1, r2
 8010356:	b292      	uxth	r2, r2
 8010358:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801035a:	2102      	movs	r1, #2
 801035c:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801035e:	2100      	movs	r1, #0
 8010360:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8010362:	2a00      	cmp	r2, #0
 8010364:	d1dc      	bne.n	8010320 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8010366:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8010368:	8201      	strh	r1, [r0, #16]
 801036a:	e7d9      	b.n	8010320 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801036c:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8010370:	4a04      	ldr	r2, [pc, #16]	; (8010384 <TRACE_Send+0x90>)
 8010372:	8293      	strh	r3, [r2, #20]
 8010374:	e7de      	b.n	8010334 <TRACE_Send+0x40>
      TRACE_UnLock();
 8010376:	f7ff ff83 	bl	8010280 <TRACE_UnLock>
 801037a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801037e:	2000      	movs	r0, #0
}
 8010380:	e7c2      	b.n	8010308 <TRACE_Send+0x14>
 8010382:	bf00      	nop
 8010384:	200013d4 	.word	0x200013d4
 8010388:	20000fd4 	.word	0x20000fd4
 801038c:	08011184 	.word	0x08011184

08010390 <UTIL_ADV_TRACE_COND_FSend>:
{
 8010390:	b408      	push	{r3}
 8010392:	b530      	push	{r4, r5, lr}
 8010394:	b086      	sub	sp, #24
 8010396:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8010398:	2300      	movs	r3, #0
 801039a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801039e:	4b2c      	ldr	r3, [pc, #176]	; (8010450 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80103a0:	7a1b      	ldrb	r3, [r3, #8]
 80103a2:	4283      	cmp	r3, r0
 80103a4:	d34d      	bcc.n	8010442 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80103a6:	4b2a      	ldr	r3, [pc, #168]	; (8010450 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80103a8:	68db      	ldr	r3, [r3, #12]
 80103aa:	ea31 0303 	bics.w	r3, r1, r3
 80103ae:	d14b      	bne.n	8010448 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80103b0:	4b27      	ldr	r3, [pc, #156]	; (8010450 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80103b2:	685b      	ldr	r3, [r3, #4]
 80103b4:	b123      	cbz	r3, 80103c0 <UTIL_ADV_TRACE_COND_FSend+0x30>
 80103b6:	b11a      	cbz	r2, 80103c0 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80103b8:	f10d 0102 	add.w	r1, sp, #2
 80103bc:	a801      	add	r0, sp, #4
 80103be:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80103c0:	ab0a      	add	r3, sp, #40	; 0x28
 80103c2:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80103c4:	4622      	mov	r2, r4
 80103c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80103ca:	4822      	ldr	r0, [pc, #136]	; (8010454 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80103cc:	f000 fcd0 	bl	8010d70 <tiny_vsnprintf_like>
 80103d0:	b285      	uxth	r5, r0
  TRACE_Lock();
 80103d2:	f7ff ff49 	bl	8010268 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80103d6:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80103da:	4428      	add	r0, r5
 80103dc:	4669      	mov	r1, sp
 80103de:	b280      	uxth	r0, r0
 80103e0:	f7ff fefe 	bl	80101e0 <TRACE_AllocateBufer>
 80103e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80103e8:	d026      	beq.n	8010438 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 80103ea:	2300      	movs	r3, #0
 80103ec:	e00d      	b.n	801040a <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80103ee:	f8bd 2000 	ldrh.w	r2, [sp]
 80103f2:	f103 0118 	add.w	r1, r3, #24
 80103f6:	4469      	add	r1, sp
 80103f8:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80103fc:	4916      	ldr	r1, [pc, #88]	; (8010458 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 80103fe:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8010400:	3201      	adds	r2, #1
 8010402:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 8010406:	3301      	adds	r3, #1
 8010408:	b29b      	uxth	r3, r3
 801040a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801040e:	429a      	cmp	r2, r3
 8010410:	d8ed      	bhi.n	80103ee <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8010412:	f8bd 0000 	ldrh.w	r0, [sp]
 8010416:	9b05      	ldr	r3, [sp, #20]
 8010418:	4622      	mov	r2, r4
 801041a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801041e:	4c0e      	ldr	r4, [pc, #56]	; (8010458 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8010420:	4420      	add	r0, r4
 8010422:	f000 fca5 	bl	8010d70 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8010426:	f7ff ff2b 	bl	8010280 <TRACE_UnLock>
    return TRACE_Send();
 801042a:	f7ff ff63 	bl	80102f4 <TRACE_Send>
}
 801042e:	b006      	add	sp, #24
 8010430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010434:	b001      	add	sp, #4
 8010436:	4770      	bx	lr
  TRACE_UnLock();
 8010438:	f7ff ff22 	bl	8010280 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 801043c:	f06f 0002 	mvn.w	r0, #2
 8010440:	e7f5      	b.n	801042e <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8010442:	f06f 0004 	mvn.w	r0, #4
 8010446:	e7f2      	b.n	801042e <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8010448:	f06f 0005 	mvn.w	r0, #5
 801044c:	e7ef      	b.n	801042e <UTIL_ADV_TRACE_COND_FSend+0x9e>
 801044e:	bf00      	nop
 8010450:	200013d4 	.word	0x200013d4
 8010454:	200013ec 	.word	0x200013ec
 8010458:	20000fd4 	.word	0x20000fd4

0801045c <TRACE_TxCpltCallback>:
{
 801045c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801045e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010462:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8010464:	4b25      	ldr	r3, [pc, #148]	; (80104fc <TRACE_TxCpltCallback+0xa0>)
 8010466:	789b      	ldrb	r3, [r3, #2]
 8010468:	2b02      	cmp	r3, #2
 801046a:	d016      	beq.n	801049a <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801046c:	4a23      	ldr	r2, [pc, #140]	; (80104fc <TRACE_TxCpltCallback+0xa0>)
 801046e:	8a13      	ldrh	r3, [r2, #16]
 8010470:	8a90      	ldrh	r0, [r2, #20]
 8010472:	4403      	add	r3, r0
 8010474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010478:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801047a:	4b20      	ldr	r3, [pc, #128]	; (80104fc <TRACE_TxCpltCallback+0xa0>)
 801047c:	8a1a      	ldrh	r2, [r3, #16]
 801047e:	8a5b      	ldrh	r3, [r3, #18]
 8010480:	429a      	cmp	r2, r3
 8010482:	d003      	beq.n	801048c <TRACE_TxCpltCallback+0x30>
 8010484:	481d      	ldr	r0, [pc, #116]	; (80104fc <TRACE_TxCpltCallback+0xa0>)
 8010486:	8ac0      	ldrh	r0, [r0, #22]
 8010488:	2801      	cmp	r0, #1
 801048a:	d00b      	beq.n	80104a4 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801048c:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8010490:	f7f1 f8f6 	bl	8001680 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8010494:	f7ff fef4 	bl	8010280 <TRACE_UnLock>
}
 8010498:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801049a:	4b18      	ldr	r3, [pc, #96]	; (80104fc <TRACE_TxCpltCallback+0xa0>)
 801049c:	2200      	movs	r2, #0
 801049e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 80104a0:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80104a2:	e7ea      	b.n	801047a <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80104a4:	4815      	ldr	r0, [pc, #84]	; (80104fc <TRACE_TxCpltCallback+0xa0>)
 80104a6:	7880      	ldrb	r0, [r0, #2]
 80104a8:	2801      	cmp	r0, #1
 80104aa:	d014      	beq.n	80104d6 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80104ac:	4a13      	ldr	r2, [pc, #76]	; (80104fc <TRACE_TxCpltCallback+0xa0>)
 80104ae:	7892      	ldrb	r2, [r2, #2]
 80104b0:	b932      	cbnz	r2, 80104c0 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80104b2:	4a12      	ldr	r2, [pc, #72]	; (80104fc <TRACE_TxCpltCallback+0xa0>)
 80104b4:	8a12      	ldrh	r2, [r2, #16]
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d91b      	bls.n	80104f2 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80104ba:	1a9b      	subs	r3, r3, r2
 80104bc:	4a0f      	ldr	r2, [pc, #60]	; (80104fc <TRACE_TxCpltCallback+0xa0>)
 80104be:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80104c0:	4b0e      	ldr	r3, [pc, #56]	; (80104fc <TRACE_TxCpltCallback+0xa0>)
 80104c2:	8a1a      	ldrh	r2, [r3, #16]
 80104c4:	480e      	ldr	r0, [pc, #56]	; (8010500 <TRACE_TxCpltCallback+0xa4>)
 80104c6:	4410      	add	r0, r2
 80104c8:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80104cc:	4a0d      	ldr	r2, [pc, #52]	; (8010504 <TRACE_TxCpltCallback+0xa8>)
 80104ce:	68d2      	ldr	r2, [r2, #12]
 80104d0:	8a99      	ldrh	r1, [r3, #20]
 80104d2:	4790      	blx	r2
 80104d4:	e7e0      	b.n	8010498 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80104d6:	4c09      	ldr	r4, [pc, #36]	; (80104fc <TRACE_TxCpltCallback+0xa0>)
 80104d8:	8820      	ldrh	r0, [r4, #0]
 80104da:	1a82      	subs	r2, r0, r2
 80104dc:	b292      	uxth	r2, r2
 80104de:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80104e0:	2002      	movs	r0, #2
 80104e2:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80104e4:	2000      	movs	r0, #0
 80104e6:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80104e8:	2a00      	cmp	r2, #0
 80104ea:	d1df      	bne.n	80104ac <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80104ec:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80104ee:	8220      	strh	r0, [r4, #16]
 80104f0:	e7dc      	b.n	80104ac <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80104f2:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80104f6:	4a01      	ldr	r2, [pc, #4]	; (80104fc <TRACE_TxCpltCallback+0xa0>)
 80104f8:	8293      	strh	r3, [r2, #20]
 80104fa:	e7e1      	b.n	80104c0 <TRACE_TxCpltCallback+0x64>
 80104fc:	200013d4 	.word	0x200013d4
 8010500:	20000fd4 	.word	0x20000fd4
 8010504:	08011184 	.word	0x08011184

08010508 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8010508:	2300      	movs	r3, #0
 801050a:	4a02      	ldr	r2, [pc, #8]	; (8010514 <UTIL_LPM_Init+0xc>)
 801050c:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801050e:	4a02      	ldr	r2, [pc, #8]	; (8010518 <UTIL_LPM_Init+0x10>)
 8010510:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8010512:	4770      	bx	lr
 8010514:	200015f0 	.word	0x200015f0
 8010518:	200015ec 	.word	0x200015ec

0801051c <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801051c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010520:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8010522:	b141      	cbz	r1, 8010536 <UTIL_LPM_SetStopMode+0x1a>
 8010524:	2901      	cmp	r1, #1
 8010526:	d103      	bne.n	8010530 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8010528:	4906      	ldr	r1, [pc, #24]	; (8010544 <UTIL_LPM_SetStopMode+0x28>)
 801052a:	680a      	ldr	r2, [r1, #0]
 801052c:	4310      	orrs	r0, r2
 801052e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010530:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010534:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 8010536:	4903      	ldr	r1, [pc, #12]	; (8010544 <UTIL_LPM_SetStopMode+0x28>)
 8010538:	680a      	ldr	r2, [r1, #0]
 801053a:	ea22 0000 	bic.w	r0, r2, r0
 801053e:	6008      	str	r0, [r1, #0]
      break;
 8010540:	e7f6      	b.n	8010530 <UTIL_LPM_SetStopMode+0x14>
 8010542:	bf00      	nop
 8010544:	200015f0 	.word	0x200015f0

08010548 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010548:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801054c:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 801054e:	b141      	cbz	r1, 8010562 <UTIL_LPM_SetOffMode+0x1a>
 8010550:	2901      	cmp	r1, #1
 8010552:	d103      	bne.n	801055c <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8010554:	4906      	ldr	r1, [pc, #24]	; (8010570 <UTIL_LPM_SetOffMode+0x28>)
 8010556:	680a      	ldr	r2, [r1, #0]
 8010558:	4310      	orrs	r0, r2
 801055a:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801055c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010560:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8010562:	4903      	ldr	r1, [pc, #12]	; (8010570 <UTIL_LPM_SetOffMode+0x28>)
 8010564:	680a      	ldr	r2, [r1, #0]
 8010566:	ea22 0000 	bic.w	r0, r2, r0
 801056a:	6008      	str	r0, [r1, #0]
      break;
 801056c:	e7f6      	b.n	801055c <UTIL_LPM_SetOffMode+0x14>
 801056e:	bf00      	nop
 8010570:	200015ec 	.word	0x200015ec

08010574 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8010574:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010576:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801057a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801057c:	4b0c      	ldr	r3, [pc, #48]	; (80105b0 <UTIL_LPM_EnterLowPower+0x3c>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	b13b      	cbz	r3, 8010592 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8010582:	4d0c      	ldr	r5, [pc, #48]	; (80105b4 <UTIL_LPM_EnterLowPower+0x40>)
 8010584:	682b      	ldr	r3, [r5, #0]
 8010586:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8010588:	686b      	ldr	r3, [r5, #4]
 801058a:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801058c:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8010590:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8010592:	4b09      	ldr	r3, [pc, #36]	; (80105b8 <UTIL_LPM_EnterLowPower+0x44>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	b12b      	cbz	r3, 80105a4 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8010598:	4d06      	ldr	r5, [pc, #24]	; (80105b4 <UTIL_LPM_EnterLowPower+0x40>)
 801059a:	68ab      	ldr	r3, [r5, #8]
 801059c:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801059e:	68eb      	ldr	r3, [r5, #12]
 80105a0:	4798      	blx	r3
 80105a2:	e7f3      	b.n	801058c <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80105a4:	4d03      	ldr	r5, [pc, #12]	; (80105b4 <UTIL_LPM_EnterLowPower+0x40>)
 80105a6:	692b      	ldr	r3, [r5, #16]
 80105a8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80105aa:	696b      	ldr	r3, [r5, #20]
 80105ac:	4798      	blx	r3
 80105ae:	e7ed      	b.n	801058c <UTIL_LPM_EnterLowPower+0x18>
 80105b0:	200015f0 	.word	0x200015f0
 80105b4:	080110fc 	.word	0x080110fc
 80105b8:	200015ec 	.word	0x200015ec

080105bc <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80105bc:	e004      	b.n	80105c8 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 80105be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80105c2:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80105c6:	461a      	mov	r2, r3
 80105c8:	1e53      	subs	r3, r2, #1
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	2a00      	cmp	r2, #0
 80105ce:	d1f6      	bne.n	80105be <UTIL_MEM_cpy_8+0x2>
    }
}
 80105d0:	4770      	bx	lr

080105d2 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80105d2:	e002      	b.n	80105da <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 80105d4:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80105d8:	461a      	mov	r2, r3
 80105da:	1e53      	subs	r3, r2, #1
 80105dc:	b29b      	uxth	r3, r3
 80105de:	2a00      	cmp	r2, #0
 80105e0:	d1f8      	bne.n	80105d4 <UTIL_MEM_set_8+0x2>
  }
}
 80105e2:	4770      	bx	lr

080105e4 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105e4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80105e8:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80105ea:	4a06      	ldr	r2, [pc, #24]	; (8010604 <UTIL_SEQ_SetTask+0x20>)
 80105ec:	6813      	ldr	r3, [r2, #0]
 80105ee:	4303      	orrs	r3, r0
 80105f0:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80105f2:	4a05      	ldr	r2, [pc, #20]	; (8010608 <UTIL_SEQ_SetTask+0x24>)
 80105f4:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80105f8:	4318      	orrs	r0, r3
 80105fa:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105fe:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8010602:	4770      	bx	lr
 8010604:	20001618 	.word	0x20001618
 8010608:	20001610 	.word	0x20001610

0801060c <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 801060c:	4770      	bx	lr

0801060e <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 801060e:	4770      	bx	lr

08010610 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8010610:	0c03      	lsrs	r3, r0, #16
 8010612:	041b      	lsls	r3, r3, #16
 8010614:	b9b3      	cbnz	r3, 8010644 <SEQ_BitPosition+0x34>
 8010616:	0400      	lsls	r0, r0, #16
 8010618:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801061a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801061e:	d102      	bne.n	8010626 <SEQ_BitPosition+0x16>
 8010620:	3308      	adds	r3, #8
 8010622:	b2db      	uxtb	r3, r3
 8010624:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8010626:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801062a:	d102      	bne.n	8010632 <SEQ_BitPosition+0x22>
 801062c:	3304      	adds	r3, #4
 801062e:	b2db      	uxtb	r3, r3
 8010630:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8010632:	0f00      	lsrs	r0, r0, #28
 8010634:	4a04      	ldr	r2, [pc, #16]	; (8010648 <SEQ_BitPosition+0x38>)
 8010636:	5c10      	ldrb	r0, [r2, r0]
 8010638:	4418      	add	r0, r3
 801063a:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 801063c:	f1c0 001f 	rsb	r0, r0, #31
}
 8010640:	b2c0      	uxtb	r0, r0
 8010642:	4770      	bx	lr
uint8_t n = 0U;
 8010644:	2300      	movs	r3, #0
 8010646:	e7e8      	b.n	801061a <SEQ_BitPosition+0xa>
 8010648:	08011ef0 	.word	0x08011ef0

0801064c <UTIL_SEQ_Run>:
{
 801064c:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 801064e:	4b43      	ldr	r3, [pc, #268]	; (801075c <UTIL_SEQ_Run+0x110>)
 8010650:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8010652:	4020      	ands	r0, r4
 8010654:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8010656:	4b42      	ldr	r3, [pc, #264]	; (8010760 <UTIL_SEQ_Run+0x114>)
 8010658:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 801065a:	4b42      	ldr	r3, [pc, #264]	; (8010764 <UTIL_SEQ_Run+0x118>)
 801065c:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 801065e:	4a42      	ldr	r2, [pc, #264]	; (8010768 <UTIL_SEQ_Run+0x11c>)
 8010660:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 8010662:	4a42      	ldr	r2, [pc, #264]	; (801076c <UTIL_SEQ_Run+0x120>)
 8010664:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010666:	e030      	b.n	80106ca <UTIL_SEQ_Run+0x7e>
      counter++;
 8010668:	3301      	adds	r3, #1
 801066a:	e035      	b.n	80106d8 <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801066c:	4d40      	ldr	r5, [pc, #256]	; (8010770 <UTIL_SEQ_Run+0x124>)
 801066e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010672:	6868      	ldr	r0, [r5, #4]
 8010674:	4010      	ands	r0, r2
 8010676:	f7ff ffcb 	bl	8010610 <SEQ_BitPosition>
 801067a:	493e      	ldr	r1, [pc, #248]	; (8010774 <UTIL_SEQ_Run+0x128>)
 801067c:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801067e:	686a      	ldr	r2, [r5, #4]
 8010680:	2301      	movs	r3, #1
 8010682:	fa03 f000 	lsl.w	r0, r3, r0
 8010686:	ea22 0000 	bic.w	r0, r2, r0
 801068a:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801068c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010690:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8010692:	680a      	ldr	r2, [r1, #0]
 8010694:	fa03 f202 	lsl.w	r2, r3, r2
 8010698:	ea6f 0c02 	mvn.w	ip, r2
 801069c:	4830      	ldr	r0, [pc, #192]	; (8010760 <UTIL_SEQ_Run+0x114>)
 801069e:	6801      	ldr	r1, [r0, #0]
 80106a0:	ea21 0202 	bic.w	r2, r1, r2
 80106a4:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d12d      	bne.n	8010706 <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106aa:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 80106ae:	4b31      	ldr	r3, [pc, #196]	; (8010774 <UTIL_SEQ_Run+0x128>)
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	4b31      	ldr	r3, [pc, #196]	; (8010778 <UTIL_SEQ_Run+0x12c>)
 80106b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106b8:	4798      	blx	r3
    local_taskset = TaskSet;
 80106ba:	4b29      	ldr	r3, [pc, #164]	; (8010760 <UTIL_SEQ_Run+0x114>)
 80106bc:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 80106be:	4b29      	ldr	r3, [pc, #164]	; (8010764 <UTIL_SEQ_Run+0x118>)
 80106c0:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 80106c2:	4a29      	ldr	r2, [pc, #164]	; (8010768 <UTIL_SEQ_Run+0x11c>)
 80106c4:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 80106c6:	4a29      	ldr	r2, [pc, #164]	; (801076c <UTIL_SEQ_Run+0x120>)
 80106c8:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80106ca:	4001      	ands	r1, r0
 80106cc:	4d23      	ldr	r5, [pc, #140]	; (801075c <UTIL_SEQ_Run+0x110>)
 80106ce:	682d      	ldr	r5, [r5, #0]
 80106d0:	4229      	tst	r1, r5
 80106d2:	d021      	beq.n	8010718 <UTIL_SEQ_Run+0xcc>
 80106d4:	4013      	ands	r3, r2
 80106d6:	d11f      	bne.n	8010718 <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80106d8:	4a25      	ldr	r2, [pc, #148]	; (8010770 <UTIL_SEQ_Run+0x124>)
 80106da:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80106de:	4002      	ands	r2, r0
 80106e0:	422a      	tst	r2, r5
 80106e2:	d0c1      	beq.n	8010668 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80106e4:	4922      	ldr	r1, [pc, #136]	; (8010770 <UTIL_SEQ_Run+0x124>)
 80106e6:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80106ea:	4002      	ands	r2, r0
 80106ec:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80106ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80106f2:	6849      	ldr	r1, [r1, #4]
 80106f4:	4211      	tst	r1, r2
 80106f6:	d1b9      	bne.n	801066c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80106f8:	491d      	ldr	r1, [pc, #116]	; (8010770 <UTIL_SEQ_Run+0x124>)
 80106fa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80106fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010702:	6048      	str	r0, [r1, #4]
 8010704:	e7b2      	b.n	801066c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8010706:	3b01      	subs	r3, #1
 8010708:	4919      	ldr	r1, [pc, #100]	; (8010770 <UTIL_SEQ_Run+0x124>)
 801070a:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 801070e:	ea0c 0202 	and.w	r2, ip, r2
 8010712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010716:	e7c6      	b.n	80106a6 <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010718:	4b16      	ldr	r3, [pc, #88]	; (8010774 <UTIL_SEQ_Run+0x128>)
 801071a:	f04f 32ff 	mov.w	r2, #4294967295
 801071e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8010720:	f7ff ff74 	bl	801060c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010724:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010728:	b672      	cpsid	i
  local_taskset = TaskSet;
 801072a:	4b0d      	ldr	r3, [pc, #52]	; (8010760 <UTIL_SEQ_Run+0x114>)
 801072c:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 801072e:	4a0d      	ldr	r2, [pc, #52]	; (8010764 <UTIL_SEQ_Run+0x118>)
 8010730:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8010732:	4a0d      	ldr	r2, [pc, #52]	; (8010768 <UTIL_SEQ_Run+0x11c>)
 8010734:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8010736:	4013      	ands	r3, r2
 8010738:	4a08      	ldr	r2, [pc, #32]	; (801075c <UTIL_SEQ_Run+0x110>)
 801073a:	6812      	ldr	r2, [r2, #0]
 801073c:	4213      	tst	r3, r2
 801073e:	d103      	bne.n	8010748 <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8010740:	4b0a      	ldr	r3, [pc, #40]	; (801076c <UTIL_SEQ_Run+0x120>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	420b      	tst	r3, r1
 8010746:	d006      	beq.n	8010756 <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010748:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 801074c:	f7ff ff5f 	bl	801060e <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8010750:	4b02      	ldr	r3, [pc, #8]	; (801075c <UTIL_SEQ_Run+0x110>)
 8010752:	601c      	str	r4, [r3, #0]
}
 8010754:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 8010756:	f7f0 ff0b 	bl	8001570 <UTIL_SEQ_Idle>
 801075a:	e7f5      	b.n	8010748 <UTIL_SEQ_Run+0xfc>
 801075c:	20000110 	.word	0x20000110
 8010760:	20001618 	.word	0x20001618
 8010764:	200015f8 	.word	0x200015f8
 8010768:	20000114 	.word	0x20000114
 801076c:	200015fc 	.word	0x200015fc
 8010770:	20001610 	.word	0x20001610
 8010774:	200015f4 	.word	0x200015f4
 8010778:	20001600 	.word	0x20001600

0801077c <UTIL_SEQ_RegTask>:
{
 801077c:	b538      	push	{r3, r4, r5, lr}
 801077e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010780:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010784:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8010786:	f7ff ff43 	bl	8010610 <SEQ_BitPosition>
 801078a:	4b03      	ldr	r3, [pc, #12]	; (8010798 <UTIL_SEQ_RegTask+0x1c>)
 801078c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010790:	f385 8810 	msr	PRIMASK, r5
}
 8010794:	bd38      	pop	{r3, r4, r5, pc}
 8010796:	bf00      	nop
 8010798:	20001600 	.word	0x20001600

0801079c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801079c:	b082      	sub	sp, #8
 801079e:	b082      	sub	sp, #8
 80107a0:	f10d 0c08 	add.w	ip, sp, #8
 80107a4:	e90c 0006 	stmdb	ip, {r1, r2}
 80107a8:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 80107aa:	2200      	movs	r2, #0
 80107ac:	6002      	str	r2, [r0, #0]
 80107ae:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 80107b0:	440b      	add	r3, r1
 80107b2:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80107b4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80107b8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80107bc:	440a      	add	r2, r1
 80107be:	b291      	uxth	r1, r2
 80107c0:	b212      	sxth	r2, r2
 80107c2:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 80107c4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80107c8:	db04      	blt.n	80107d4 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 80107ca:	3301      	adds	r3, #1
 80107cc:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 80107ce:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80107d2:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 80107d4:	b002      	add	sp, #8
 80107d6:	b002      	add	sp, #8
 80107d8:	4770      	bx	lr

080107da <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80107da:	b082      	sub	sp, #8
 80107dc:	b082      	sub	sp, #8
 80107de:	f10d 0c08 	add.w	ip, sp, #8
 80107e2:	e90c 0006 	stmdb	ip, {r1, r2}
 80107e6:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80107e8:	2200      	movs	r2, #0
 80107ea:	6002      	str	r2, [r0, #0]
 80107ec:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 80107ee:	1acb      	subs	r3, r1, r3
 80107f0:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80107f2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80107f6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80107fa:	1a52      	subs	r2, r2, r1
 80107fc:	b291      	uxth	r1, r2
 80107fe:	b212      	sxth	r2, r2
 8010800:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 8010802:	2a00      	cmp	r2, #0
 8010804:	db02      	blt.n	801080c <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8010806:	b002      	add	sp, #8
 8010808:	b002      	add	sp, #8
 801080a:	4770      	bx	lr
    c.Seconds--;
 801080c:	3b01      	subs	r3, #1
 801080e:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8010810:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8010814:	8081      	strh	r1, [r0, #4]
  return c;
 8010816:	e7f6      	b.n	8010806 <SysTimeSub+0x2c>

08010818 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8010818:	b530      	push	{r4, r5, lr}
 801081a:	b089      	sub	sp, #36	; 0x24
 801081c:	ac02      	add	r4, sp, #8
 801081e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010822:	2300      	movs	r3, #0
 8010824:	9304      	str	r3, [sp, #16]
 8010826:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801082a:	4d0b      	ldr	r5, [pc, #44]	; (8010858 <SysTimeSet+0x40>)
 801082c:	692b      	ldr	r3, [r5, #16]
 801082e:	a805      	add	r0, sp, #20
 8010830:	4798      	blx	r3
 8010832:	4603      	mov	r3, r0
 8010834:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8010836:	9a05      	ldr	r2, [sp, #20]
 8010838:	9200      	str	r2, [sp, #0]
 801083a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801083e:	a806      	add	r0, sp, #24
 8010840:	f7ff ffcb 	bl	80107da <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8010844:	682b      	ldr	r3, [r5, #0]
 8010846:	9806      	ldr	r0, [sp, #24]
 8010848:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801084a:	68ab      	ldr	r3, [r5, #8]
 801084c:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8010850:	4798      	blx	r3
}
 8010852:	b009      	add	sp, #36	; 0x24
 8010854:	bd30      	pop	{r4, r5, pc}
 8010856:	bf00      	nop
 8010858:	08011144 	.word	0x08011144

0801085c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801085c:	b530      	push	{r4, r5, lr}
 801085e:	b087      	sub	sp, #28
 8010860:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010862:	2300      	movs	r3, #0
 8010864:	9304      	str	r3, [sp, #16]
 8010866:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801086a:	6003      	str	r3, [r0, #0]
 801086c:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801086e:	4d0b      	ldr	r5, [pc, #44]	; (801089c <SysTimeGet+0x40>)
 8010870:	692b      	ldr	r3, [r5, #16]
 8010872:	a805      	add	r0, sp, #20
 8010874:	4798      	blx	r3
 8010876:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010878:	68eb      	ldr	r3, [r5, #12]
 801087a:	4798      	blx	r3
 801087c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010880:	686b      	ldr	r3, [r5, #4]
 8010882:	4798      	blx	r3
 8010884:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8010886:	9b05      	ldr	r3, [sp, #20]
 8010888:	9300      	str	r3, [sp, #0]
 801088a:	9b04      	ldr	r3, [sp, #16]
 801088c:	aa02      	add	r2, sp, #8
 801088e:	ca06      	ldmia	r2, {r1, r2}
 8010890:	4620      	mov	r0, r4
 8010892:	f7ff ff83 	bl	801079c <SysTimeAdd>

  return sysTime;
}
 8010896:	4620      	mov	r0, r4
 8010898:	b007      	add	sp, #28
 801089a:	bd30      	pop	{r4, r5, pc}
 801089c:	08011144 	.word	0x08011144

080108a0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80108a0:	b530      	push	{r4, r5, lr}
 80108a2:	b083      	sub	sp, #12
 80108a4:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80108a6:	2300      	movs	r3, #0
 80108a8:	9300      	str	r3, [sp, #0]
 80108aa:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80108ae:	4b06      	ldr	r3, [pc, #24]	; (80108c8 <SysTimeGetMcuTime+0x28>)
 80108b0:	691b      	ldr	r3, [r3, #16]
 80108b2:	466d      	mov	r5, sp
 80108b4:	a801      	add	r0, sp, #4
 80108b6:	4798      	blx	r3
 80108b8:	9000      	str	r0, [sp, #0]

  return calendarTime;
 80108ba:	e895 0003 	ldmia.w	r5, {r0, r1}
 80108be:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80108c2:	4620      	mov	r0, r4
 80108c4:	b003      	add	sp, #12
 80108c6:	bd30      	pop	{r4, r5, pc}
 80108c8:	08011144 	.word	0x08011144

080108cc <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80108cc:	b530      	push	{r4, r5, lr}
 80108ce:	b089      	sub	sp, #36	; 0x24
 80108d0:	ac02      	add	r4, sp, #8
 80108d2:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80108d6:	4d0c      	ldr	r5, [pc, #48]	; (8010908 <SysTimeToMs+0x3c>)
 80108d8:	68eb      	ldr	r3, [r5, #12]
 80108da:	4798      	blx	r3
 80108dc:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80108e0:	686b      	ldr	r3, [r5, #4]
 80108e2:	4798      	blx	r3
 80108e4:	4603      	mov	r3, r0
 80108e6:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 80108e8:	9a07      	ldr	r2, [sp, #28]
 80108ea:	9200      	str	r2, [sp, #0]
 80108ec:	e894 0006 	ldmia.w	r4, {r1, r2}
 80108f0:	a804      	add	r0, sp, #16
 80108f2:	f7ff ff72 	bl	80107da <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 80108f6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 80108fa:	9a04      	ldr	r2, [sp, #16]
 80108fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010900:	fb00 3002 	mla	r0, r0, r2, r3
 8010904:	b009      	add	sp, #36	; 0x24
 8010906:	bd30      	pop	{r4, r5, pc}
 8010908:	08011144 	.word	0x08011144

0801090c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801090c:	b530      	push	{r4, r5, lr}
 801090e:	b087      	sub	sp, #28
 8010910:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8010912:	4b12      	ldr	r3, [pc, #72]	; (801095c <SysTimeFromMs+0x50>)
 8010914:	fba3 2301 	umull	r2, r3, r3, r1
 8010918:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801091a:	9304      	str	r3, [sp, #16]
 801091c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8010920:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010924:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8010928:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 801092c:	2300      	movs	r3, #0
 801092e:	9302      	str	r3, [sp, #8]
 8010930:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010932:	4d0b      	ldr	r5, [pc, #44]	; (8010960 <SysTimeFromMs+0x54>)
 8010934:	68eb      	ldr	r3, [r5, #12]
 8010936:	4798      	blx	r3
 8010938:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801093c:	686b      	ldr	r3, [r5, #4]
 801093e:	4798      	blx	r3
 8010940:	4603      	mov	r3, r0
 8010942:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8010944:	9a03      	ldr	r2, [sp, #12]
 8010946:	9200      	str	r2, [sp, #0]
 8010948:	aa06      	add	r2, sp, #24
 801094a:	e912 0006 	ldmdb	r2, {r1, r2}
 801094e:	4620      	mov	r0, r4
 8010950:	f7ff ff24 	bl	801079c <SysTimeAdd>
}
 8010954:	4620      	mov	r0, r4
 8010956:	b007      	add	sp, #28
 8010958:	bd30      	pop	{r4, r5, pc}
 801095a:	bf00      	nop
 801095c:	10624dd3 	.word	0x10624dd3
 8010960:	08011144 	.word	0x08011144

08010964 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8010964:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8010966:	4b03      	ldr	r3, [pc, #12]	; (8010974 <UTIL_TIMER_Init+0x10>)
 8010968:	2200      	movs	r2, #0
 801096a:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801096c:	4b02      	ldr	r3, [pc, #8]	; (8010978 <UTIL_TIMER_Init+0x14>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	4798      	blx	r3
}
 8010972:	bd08      	pop	{r3, pc}
 8010974:	2000161c 	.word	0x2000161c
 8010978:	08011158 	.word	0x08011158

0801097c <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 801097c:	b1a8      	cbz	r0, 80109aa <UTIL_TIMER_Create+0x2e>
{
 801097e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010980:	4617      	mov	r7, r2
 8010982:	461e      	mov	r6, r3
 8010984:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8010986:	b193      	cbz	r3, 80109ae <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8010988:	2500      	movs	r5, #0
 801098a:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801098c:	4b09      	ldr	r3, [pc, #36]	; (80109b4 <UTIL_TIMER_Create+0x38>)
 801098e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010990:	4608      	mov	r0, r1
 8010992:	4798      	blx	r3
 8010994:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8010996:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8010998:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801099a:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 801099c:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 801099e:	9b06      	ldr	r3, [sp, #24]
 80109a0:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80109a2:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 80109a4:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 80109a6:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 80109a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 80109aa:	2001      	movs	r0, #1
}
 80109ac:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 80109ae:	2001      	movs	r0, #1
 80109b0:	e7fa      	b.n	80109a8 <UTIL_TIMER_Create+0x2c>
 80109b2:	bf00      	nop
 80109b4:	08011158 	.word	0x08011158

080109b8 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80109b8:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80109ba:	4c03      	ldr	r4, [pc, #12]	; (80109c8 <UTIL_TIMER_GetCurrentTime+0x10>)
 80109bc:	69e3      	ldr	r3, [r4, #28]
 80109be:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 80109c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80109c2:	4798      	blx	r3
}
 80109c4:	bd10      	pop	{r4, pc}
 80109c6:	bf00      	nop
 80109c8:	08011158 	.word	0x08011158

080109cc <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80109cc:	b570      	push	{r4, r5, r6, lr}
 80109ce:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80109d0:	4d05      	ldr	r5, [pc, #20]	; (80109e8 <UTIL_TIMER_GetElapsedTime+0x1c>)
 80109d2:	69eb      	ldr	r3, [r5, #28]
 80109d4:	4798      	blx	r3
 80109d6:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80109d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80109da:	4630      	mov	r0, r6
 80109dc:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80109de:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80109e0:	1a20      	subs	r0, r4, r0
 80109e2:	4798      	blx	r3
}
 80109e4:	bd70      	pop	{r4, r5, r6, pc}
 80109e6:	bf00      	nop
 80109e8:	08011158 	.word	0x08011158

080109ec <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80109ec:	4b05      	ldr	r3, [pc, #20]	; (8010a04 <TimerExists+0x18>)
 80109ee:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 80109f0:	e000      	b.n	80109f4 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 80109f2:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 80109f4:	b11b      	cbz	r3, 80109fe <TimerExists+0x12>
    if( cur == TimerObject )
 80109f6:	4283      	cmp	r3, r0
 80109f8:	d1fb      	bne.n	80109f2 <TimerExists+0x6>
      return true;
 80109fa:	2001      	movs	r0, #1
  }
  return false;
}
 80109fc:	4770      	bx	lr
  return false;
 80109fe:	2000      	movs	r0, #0
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	2000161c 	.word	0x2000161c

08010a08 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8010a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a0a:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8010a0c:	4e09      	ldr	r6, [pc, #36]	; (8010a34 <TimerSetTimeout+0x2c>)
 8010a0e:	6a33      	ldr	r3, [r6, #32]
 8010a10:	4798      	blx	r3
 8010a12:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8010a14:	2301      	movs	r3, #1
 8010a16:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8010a18:	6827      	ldr	r7, [r4, #0]
 8010a1a:	69b6      	ldr	r6, [r6, #24]
 8010a1c:	47b0      	blx	r6
 8010a1e:	4428      	add	r0, r5
 8010a20:	4287      	cmp	r7, r0
 8010a22:	d202      	bcs.n	8010a2a <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8010a24:	47b0      	blx	r6
 8010a26:	4405      	add	r5, r0
 8010a28:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8010a2a:	4b02      	ldr	r3, [pc, #8]	; (8010a34 <TimerSetTimeout+0x2c>)
 8010a2c:	689b      	ldr	r3, [r3, #8]
 8010a2e:	6820      	ldr	r0, [r4, #0]
 8010a30:	4798      	blx	r3
}
 8010a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a34:	08011158 	.word	0x08011158

08010a38 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8010a38:	b368      	cbz	r0, 8010a96 <UTIL_TIMER_Stop+0x5e>
{
 8010a3a:	b510      	push	{r4, lr}
 8010a3c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a3e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010a42:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8010a44:	4b15      	ldr	r3, [pc, #84]	; (8010a9c <UTIL_TIMER_Stop+0x64>)
 8010a46:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8010a48:	2301      	movs	r3, #1
 8010a4a:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8010a4c:	b1e1      	cbz	r1, 8010a88 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8010a52:	4288      	cmp	r0, r1
 8010a54:	d006      	beq.n	8010a64 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8010a56:	460b      	mov	r3, r1
        while( cur != NULL )
 8010a58:	b1b3      	cbz	r3, 8010a88 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d011      	beq.n	8010a82 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8010a5e:	4619      	mov	r1, r3
            cur = cur->Next;
 8010a60:	695b      	ldr	r3, [r3, #20]
 8010a62:	e7f9      	b.n	8010a58 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8010a64:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8010a66:	6948      	ldr	r0, [r1, #20]
 8010a68:	b120      	cbz	r0, 8010a74 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8010a6a:	4b0c      	ldr	r3, [pc, #48]	; (8010a9c <UTIL_TIMER_Stop+0x64>)
 8010a6c:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8010a6e:	f7ff ffcb 	bl	8010a08 <TimerSetTimeout>
 8010a72:	e009      	b.n	8010a88 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8010a74:	4b0a      	ldr	r3, [pc, #40]	; (8010aa0 <UTIL_TIMER_Stop+0x68>)
 8010a76:	68db      	ldr	r3, [r3, #12]
 8010a78:	4798      	blx	r3
            TimerListHead = NULL;
 8010a7a:	4b08      	ldr	r3, [pc, #32]	; (8010a9c <UTIL_TIMER_Stop+0x64>)
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	601a      	str	r2, [r3, #0]
 8010a80:	e002      	b.n	8010a88 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8010a82:	695b      	ldr	r3, [r3, #20]
 8010a84:	b123      	cbz	r3, 8010a90 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8010a86:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010a88:	f384 8810 	msr	PRIMASK, r4
}
 8010a8c:	2000      	movs	r0, #0
}
 8010a8e:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8010a90:	2300      	movs	r3, #0
 8010a92:	614b      	str	r3, [r1, #20]
 8010a94:	e7f8      	b.n	8010a88 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8010a96:	2001      	movs	r0, #1
}
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	2000161c 	.word	0x2000161c
 8010aa0:	08011158 	.word	0x08011158

08010aa4 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010aa4:	4b09      	ldr	r3, [pc, #36]	; (8010acc <TimerInsertTimer+0x28>)
 8010aa6:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8010aa8:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8010aaa:	e001      	b.n	8010ab0 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8010aac:	461a      	mov	r2, r3
        next = next->Next;
 8010aae:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8010ab0:	6951      	ldr	r1, [r2, #20]
 8010ab2:	b139      	cbz	r1, 8010ac4 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8010ab4:	6819      	ldr	r1, [r3, #0]
 8010ab6:	f8d0 c000 	ldr.w	ip, [r0]
 8010aba:	458c      	cmp	ip, r1
 8010abc:	d8f6      	bhi.n	8010aac <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8010abe:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8010ac0:	6143      	str	r3, [r0, #20]
        return;
 8010ac2:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8010ac4:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	6143      	str	r3, [r0, #20]
}
 8010aca:	4770      	bx	lr
 8010acc:	2000161c 	.word	0x2000161c

08010ad0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8010ad0:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010ad2:	4b05      	ldr	r3, [pc, #20]	; (8010ae8 <TimerInsertNewHeadTimer+0x18>)
 8010ad4:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8010ad6:	b10b      	cbz	r3, 8010adc <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8010ad8:	2200      	movs	r2, #0
 8010ada:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8010adc:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8010ade:	4b02      	ldr	r3, [pc, #8]	; (8010ae8 <TimerInsertNewHeadTimer+0x18>)
 8010ae0:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8010ae2:	f7ff ff91 	bl	8010a08 <TimerSetTimeout>
}
 8010ae6:	bd08      	pop	{r3, pc}
 8010ae8:	2000161c 	.word	0x2000161c

08010aec <UTIL_TIMER_Start>:
{
 8010aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8010aee:	2800      	cmp	r0, #0
 8010af0:	d036      	beq.n	8010b60 <UTIL_TIMER_Start+0x74>
 8010af2:	4604      	mov	r4, r0
 8010af4:	f7ff ff7a 	bl	80109ec <TimerExists>
 8010af8:	2800      	cmp	r0, #0
 8010afa:	d134      	bne.n	8010b66 <UTIL_TIMER_Start+0x7a>
 8010afc:	7a65      	ldrb	r5, [r4, #9]
 8010afe:	2d00      	cmp	r5, #0
 8010b00:	d133      	bne.n	8010b6a <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b02:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010b06:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8010b08:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8010b0a:	4b19      	ldr	r3, [pc, #100]	; (8010b70 <UTIL_TIMER_Start+0x84>)
 8010b0c:	6a1b      	ldr	r3, [r3, #32]
 8010b0e:	4798      	blx	r3
    if( ticks < minValue )
 8010b10:	4287      	cmp	r7, r0
 8010b12:	d300      	bcc.n	8010b16 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8010b14:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8010b16:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8010b20:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8010b22:	4b14      	ldr	r3, [pc, #80]	; (8010b74 <UTIL_TIMER_Start+0x88>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	b183      	cbz	r3, 8010b4a <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8010b28:	4b11      	ldr	r3, [pc, #68]	; (8010b70 <UTIL_TIMER_Start+0x84>)
 8010b2a:	699b      	ldr	r3, [r3, #24]
 8010b2c:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8010b2e:	6823      	ldr	r3, [r4, #0]
 8010b30:	4418      	add	r0, r3
 8010b32:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8010b34:	4b0f      	ldr	r3, [pc, #60]	; (8010b74 <UTIL_TIMER_Start+0x88>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	4298      	cmp	r0, r3
 8010b3c:	d20c      	bcs.n	8010b58 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8010b3e:	4620      	mov	r0, r4
 8010b40:	f7ff ffc6 	bl	8010ad0 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b44:	f386 8810 	msr	PRIMASK, r6
}
 8010b48:	e00b      	b.n	8010b62 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8010b4a:	4b09      	ldr	r3, [pc, #36]	; (8010b70 <UTIL_TIMER_Start+0x84>)
 8010b4c:	691b      	ldr	r3, [r3, #16]
 8010b4e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8010b50:	4620      	mov	r0, r4
 8010b52:	f7ff ffbd 	bl	8010ad0 <TimerInsertNewHeadTimer>
 8010b56:	e7f5      	b.n	8010b44 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8010b58:	4620      	mov	r0, r4
 8010b5a:	f7ff ffa3 	bl	8010aa4 <TimerInsertTimer>
 8010b5e:	e7f1      	b.n	8010b44 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010b60:	2501      	movs	r5, #1
}
 8010b62:	4628      	mov	r0, r5
 8010b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8010b66:	2501      	movs	r5, #1
 8010b68:	e7fb      	b.n	8010b62 <UTIL_TIMER_Start+0x76>
 8010b6a:	2501      	movs	r5, #1
 8010b6c:	e7f9      	b.n	8010b62 <UTIL_TIMER_Start+0x76>
 8010b6e:	bf00      	nop
 8010b70:	08011158 	.word	0x08011158
 8010b74:	2000161c 	.word	0x2000161c

08010b78 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8010b78:	b198      	cbz	r0, 8010ba2 <UTIL_TIMER_SetPeriod+0x2a>
{
 8010b7a:	b510      	push	{r4, lr}
 8010b7c:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8010b7e:	4b0a      	ldr	r3, [pc, #40]	; (8010ba8 <UTIL_TIMER_SetPeriod+0x30>)
 8010b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b82:	4608      	mov	r0, r1
 8010b84:	4798      	blx	r3
 8010b86:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8010b88:	4620      	mov	r0, r4
 8010b8a:	f7ff ff2f 	bl	80109ec <TimerExists>
 8010b8e:	b908      	cbnz	r0, 8010b94 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8010b90:	2000      	movs	r0, #0
}
 8010b92:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8010b94:	4620      	mov	r0, r4
 8010b96:	f7ff ff4f 	bl	8010a38 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	f7ff ffa6 	bl	8010aec <UTIL_TIMER_Start>
 8010ba0:	e7f7      	b.n	8010b92 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8010ba2:	2001      	movs	r0, #1
}
 8010ba4:	4770      	bx	lr
 8010ba6:	bf00      	nop
 8010ba8:	08011158 	.word	0x08011158

08010bac <UTIL_TIMER_IRQ_Handler>:
{
 8010bac:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bae:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8010bb2:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8010bb4:	4c1e      	ldr	r4, [pc, #120]	; (8010c30 <UTIL_TIMER_IRQ_Handler+0x84>)
 8010bb6:	6963      	ldr	r3, [r4, #20]
 8010bb8:	4798      	blx	r3
 8010bba:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8010bbc:	6923      	ldr	r3, [r4, #16]
 8010bbe:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8010bc0:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8010bc2:	4b1c      	ldr	r3, [pc, #112]	; (8010c34 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	b923      	cbnz	r3, 8010bd2 <UTIL_TIMER_IRQ_Handler+0x26>
 8010bc8:	e018      	b.n	8010bfc <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8010bca:	2200      	movs	r2, #0
 8010bcc:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8010bce:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8010bd0:	b1a3      	cbz	r3, 8010bfc <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	42a2      	cmp	r2, r4
 8010bd6:	d9f8      	bls.n	8010bca <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8010bd8:	1a31      	subs	r1, r6, r0
 8010bda:	440a      	add	r2, r1
 8010bdc:	601a      	str	r2, [r3, #0]
 8010bde:	e7f6      	b.n	8010bce <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8010be0:	4b14      	ldr	r3, [pc, #80]	; (8010c34 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010be2:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8010be4:	6962      	ldr	r2, [r4, #20]
 8010be6:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8010be8:	2300      	movs	r3, #0
 8010bea:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8010bec:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8010bee:	68e3      	ldr	r3, [r4, #12]
 8010bf0:	6920      	ldr	r0, [r4, #16]
 8010bf2:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8010bf4:	8963      	ldrh	r3, [r4, #10]
 8010bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010bfa:	d012      	beq.n	8010c22 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8010bfc:	4b0d      	ldr	r3, [pc, #52]	; (8010c34 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	b13b      	cbz	r3, 8010c12 <UTIL_TIMER_IRQ_Handler+0x66>
 8010c02:	681c      	ldr	r4, [r3, #0]
 8010c04:	2c00      	cmp	r4, #0
 8010c06:	d0eb      	beq.n	8010be0 <UTIL_TIMER_IRQ_Handler+0x34>
 8010c08:	4b09      	ldr	r3, [pc, #36]	; (8010c30 <UTIL_TIMER_IRQ_Handler+0x84>)
 8010c0a:	699b      	ldr	r3, [r3, #24]
 8010c0c:	4798      	blx	r3
 8010c0e:	4284      	cmp	r4, r0
 8010c10:	d3e6      	bcc.n	8010be0 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8010c12:	4b08      	ldr	r3, [pc, #32]	; (8010c34 <UTIL_TIMER_IRQ_Handler+0x88>)
 8010c14:	6818      	ldr	r0, [r3, #0]
 8010c16:	b108      	cbz	r0, 8010c1c <UTIL_TIMER_IRQ_Handler+0x70>
 8010c18:	7a03      	ldrb	r3, [r0, #8]
 8010c1a:	b133      	cbz	r3, 8010c2a <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c1c:	f385 8810 	msr	PRIMASK, r5
}
 8010c20:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8010c22:	4620      	mov	r0, r4
 8010c24:	f7ff ff62 	bl	8010aec <UTIL_TIMER_Start>
 8010c28:	e7e8      	b.n	8010bfc <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8010c2a:	f7ff feed 	bl	8010a08 <TimerSetTimeout>
 8010c2e:	e7f5      	b.n	8010c1c <UTIL_TIMER_IRQ_Handler+0x70>
 8010c30:	08011158 	.word	0x08011158
 8010c34:	2000161c 	.word	0x2000161c

08010c38 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8010c38:	4601      	mov	r1, r0
  int i = 0;
 8010c3a:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8010c3c:	e007      	b.n	8010c4e <ee_skip_atoi+0x16>
 8010c3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010c42:	1c53      	adds	r3, r2, #1
 8010c44:	600b      	str	r3, [r1, #0]
 8010c46:	7813      	ldrb	r3, [r2, #0]
 8010c48:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010c4c:	3830      	subs	r0, #48	; 0x30
 8010c4e:	680a      	ldr	r2, [r1, #0]
 8010c50:	7813      	ldrb	r3, [r2, #0]
 8010c52:	3b30      	subs	r3, #48	; 0x30
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	2b09      	cmp	r3, #9
 8010c58:	d9f1      	bls.n	8010c3e <ee_skip_atoi+0x6>
  return i;
}
 8010c5a:	4770      	bx	lr

08010c5c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8010c5c:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8010c60:	b093      	sub	sp, #76	; 0x4c
 8010c62:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010c64:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8010c66:	f016 0f40 	tst.w	r6, #64	; 0x40
 8010c6a:	d110      	bne.n	8010c8e <ee_number+0x32>
  char *dig = lower_digits;
 8010c6c:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8010d68 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8010c70:	1e9f      	subs	r7, r3, #2
 8010c72:	2f22      	cmp	r7, #34	; 0x22
 8010c74:	d875      	bhi.n	8010d62 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8010c76:	f016 0401 	ands.w	r4, r6, #1
 8010c7a:	d00b      	beq.n	8010c94 <ee_number+0x38>
 8010c7c:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8010c80:	f016 0f02 	tst.w	r6, #2
 8010c84:	d00f      	beq.n	8010ca6 <ee_number+0x4a>
  {
    if (num < 0)
 8010c86:	2a00      	cmp	r2, #0
 8010c88:	db07      	blt.n	8010c9a <ee_number+0x3e>
  sign = 0;
 8010c8a:	2700      	movs	r7, #0
 8010c8c:	e00c      	b.n	8010ca8 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8010c8e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8010d6c <ee_number+0x110>
 8010c92:	e7ed      	b.n	8010c70 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8010c94:	f04f 0e20 	mov.w	lr, #32
 8010c98:	e7f2      	b.n	8010c80 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8010c9a:	4252      	negs	r2, r2
      size--;
 8010c9c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8010c9e:	3e01      	subs	r6, #1
 8010ca0:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8010ca2:	272d      	movs	r7, #45	; 0x2d
 8010ca4:	e000      	b.n	8010ca8 <ee_number+0x4c>
  sign = 0;
 8010ca6:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8010ca8:	bb5a      	cbnz	r2, 8010d02 <ee_number+0xa6>
    tmp[i++] = '0';
 8010caa:	2330      	movs	r3, #48	; 0x30
 8010cac:	f88d 3004 	strb.w	r3, [sp, #4]
 8010cb0:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8010cb4:	45ac      	cmp	ip, r5
 8010cb6:	dd00      	ble.n	8010cba <ee_number+0x5e>
 8010cb8:	4665      	mov	r5, ip
  size -= precision;
 8010cba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8010cbc:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010cbe:	b31c      	cbz	r4, 8010d08 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8010cc0:	b11f      	cbz	r7, 8010cca <ee_number+0x6e>
 8010cc2:	f800 7b01 	strb.w	r7, [r0], #1
 8010cc6:	3901      	subs	r1, #1
 8010cc8:	d007      	beq.n	8010cda <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	f103 33ff 	add.w	r3, r3, #4294967295
 8010cd0:	dd24      	ble.n	8010d1c <ee_number+0xc0>
 8010cd2:	f800 eb01 	strb.w	lr, [r0], #1
 8010cd6:	3901      	subs	r1, #1
 8010cd8:	d1f7      	bne.n	8010cca <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8010cda:	b013      	add	sp, #76	; 0x4c
 8010cdc:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010ce0:	fbb2 f6f3 	udiv	r6, r2, r3
 8010ce4:	fb03 2216 	mls	r2, r3, r6, r2
 8010ce8:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8010cec:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8010cf0:	446a      	add	r2, sp
 8010cf2:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8010cf6:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010cf8:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8010cfc:	2a00      	cmp	r2, #0
 8010cfe:	d1ef      	bne.n	8010ce0 <ee_number+0x84>
 8010d00:	e7d8      	b.n	8010cb4 <ee_number+0x58>
  i = 0;
 8010d02:	f04f 0c00 	mov.w	ip, #0
 8010d06:	e7f9      	b.n	8010cfc <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d0e:	ddd7      	ble.n	8010cc0 <ee_number+0x64>
 8010d10:	2220      	movs	r2, #32
 8010d12:	f800 2b01 	strb.w	r2, [r0], #1
 8010d16:	3901      	subs	r1, #1
 8010d18:	d1f6      	bne.n	8010d08 <ee_number+0xac>
 8010d1a:	e7de      	b.n	8010cda <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8010d1c:	4565      	cmp	r5, ip
 8010d1e:	f105 35ff 	add.w	r5, r5, #4294967295
 8010d22:	dd05      	ble.n	8010d30 <ee_number+0xd4>
 8010d24:	2230      	movs	r2, #48	; 0x30
 8010d26:	f800 2b01 	strb.w	r2, [r0], #1
 8010d2a:	3901      	subs	r1, #1
 8010d2c:	d1f6      	bne.n	8010d1c <ee_number+0xc0>
 8010d2e:	e7d4      	b.n	8010cda <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8010d30:	4662      	mov	r2, ip
 8010d32:	2a00      	cmp	r2, #0
 8010d34:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010d38:	dd09      	ble.n	8010d4e <ee_number+0xf2>
 8010d3a:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8010d3e:	446a      	add	r2, sp
 8010d40:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8010d44:	f800 2b01 	strb.w	r2, [r0], #1
 8010d48:	3901      	subs	r1, #1
 8010d4a:	d1f1      	bne.n	8010d30 <ee_number+0xd4>
 8010d4c:	e7c5      	b.n	8010cda <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	f103 33ff 	add.w	r3, r3, #4294967295
 8010d54:	ddc1      	ble.n	8010cda <ee_number+0x7e>
 8010d56:	2220      	movs	r2, #32
 8010d58:	f800 2b01 	strb.w	r2, [r0], #1
 8010d5c:	3901      	subs	r1, #1
 8010d5e:	d1f6      	bne.n	8010d4e <ee_number+0xf2>
 8010d60:	e7bb      	b.n	8010cda <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8010d62:	2000      	movs	r0, #0
 8010d64:	e7b9      	b.n	8010cda <ee_number+0x7e>
 8010d66:	bf00      	nop
 8010d68:	08011f28 	.word	0x08011f28
 8010d6c:	08011f00 	.word	0x08011f00

08010d70 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8010d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d74:	b087      	sub	sp, #28
 8010d76:	9205      	str	r2, [sp, #20]
 8010d78:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8010d7a:	1e0f      	subs	r7, r1, #0
 8010d7c:	f340 80b8 	ble.w	8010ef0 <tiny_vsnprintf_like+0x180>
 8010d80:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010d82:	4604      	mov	r4, r0
 8010d84:	e004      	b.n	8010d90 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8010d86:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010d8a:	9b05      	ldr	r3, [sp, #20]
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	9305      	str	r3, [sp, #20]
 8010d90:	9905      	ldr	r1, [sp, #20]
 8010d92:	780a      	ldrb	r2, [r1, #0]
 8010d94:	b922      	cbnz	r2, 8010da0 <tiny_vsnprintf_like+0x30>
 8010d96:	1ba3      	subs	r3, r4, r6
 8010d98:	1e78      	subs	r0, r7, #1
 8010d9a:	4283      	cmp	r3, r0
 8010d9c:	f2c0 80a2 	blt.w	8010ee4 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8010da0:	1ba3      	subs	r3, r4, r6
 8010da2:	f107 38ff 	add.w	r8, r7, #4294967295
 8010da6:	4543      	cmp	r3, r8
 8010da8:	f280 809c 	bge.w	8010ee4 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8010dac:	2a25      	cmp	r2, #37	; 0x25
 8010dae:	d1ea      	bne.n	8010d86 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8010db0:	1c4b      	adds	r3, r1, #1
 8010db2:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8010db4:	784b      	ldrb	r3, [r1, #1]
 8010db6:	2b30      	cmp	r3, #48	; 0x30
 8010db8:	d020      	beq.n	8010dfc <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8010dba:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8010dbe:	3b30      	subs	r3, #48	; 0x30
 8010dc0:	b2db      	uxtb	r3, r3
 8010dc2:	2b09      	cmp	r3, #9
 8010dc4:	d91d      	bls.n	8010e02 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8010dc6:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8010dca:	9b05      	ldr	r3, [sp, #20]
 8010dcc:	781a      	ldrb	r2, [r3, #0]
 8010dce:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8010dd2:	2b20      	cmp	r3, #32
 8010dd4:	d867      	bhi.n	8010ea6 <tiny_vsnprintf_like+0x136>
 8010dd6:	e8df f003 	tbb	[pc, r3]
 8010dda:	664a      	.short	0x664a
 8010ddc:	66666666 	.word	0x66666666
 8010de0:	66666666 	.word	0x66666666
 8010de4:	66621e66 	.word	0x66621e66
 8010de8:	62666666 	.word	0x62666666
 8010dec:	66666666 	.word	0x66666666
 8010df0:	66666666 	.word	0x66666666
 8010df4:	19662866 	.word	0x19662866
 8010df8:	6666      	.short	0x6666
 8010dfa:	7c          	.byte	0x7c
 8010dfb:	00          	.byte	0x00
      flags |= ZEROPAD;
 8010dfc:	f04f 0901 	mov.w	r9, #1
 8010e00:	e7dd      	b.n	8010dbe <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8010e02:	a805      	add	r0, sp, #20
 8010e04:	f7ff ff18 	bl	8010c38 <ee_skip_atoi>
 8010e08:	4605      	mov	r5, r0
 8010e0a:	e7de      	b.n	8010dca <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8010e0c:	230a      	movs	r3, #10
 8010e0e:	e031      	b.n	8010e74 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8010e10:	2320      	movs	r3, #32
 8010e12:	f804 3b01 	strb.w	r3, [r4], #1
 8010e16:	3d01      	subs	r5, #1
 8010e18:	2d00      	cmp	r5, #0
 8010e1a:	dcf9      	bgt.n	8010e10 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8010e1c:	9b04      	ldr	r3, [sp, #16]
 8010e1e:	1d1a      	adds	r2, r3, #4
 8010e20:	9204      	str	r2, [sp, #16]
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8010e28:	e7af      	b.n	8010d8a <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8010e2a:	9b04      	ldr	r3, [sp, #16]
 8010e2c:	1d1a      	adds	r2, r3, #4
 8010e2e:	9204      	str	r2, [sp, #16]
 8010e30:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8010e34:	f1b8 0f00 	cmp.w	r8, #0
 8010e38:	d003      	beq.n	8010e42 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8010e3a:	4640      	mov	r0, r8
 8010e3c:	f7ef f99c 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8010e40:	e006      	b.n	8010e50 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8010e42:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8010ef4 <tiny_vsnprintf_like+0x184>
 8010e46:	e7f8      	b.n	8010e3a <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8010e48:	2220      	movs	r2, #32
 8010e4a:	f804 2b01 	strb.w	r2, [r4], #1
 8010e4e:	461d      	mov	r5, r3
 8010e50:	1e6b      	subs	r3, r5, #1
 8010e52:	4285      	cmp	r5, r0
 8010e54:	dcf8      	bgt.n	8010e48 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8010e56:	2200      	movs	r2, #0
 8010e58:	e006      	b.n	8010e68 <tiny_vsnprintf_like+0xf8>
 8010e5a:	4643      	mov	r3, r8
 8010e5c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8010e60:	f804 1b01 	strb.w	r1, [r4], #1
 8010e64:	3201      	adds	r2, #1
 8010e66:	4698      	mov	r8, r3
 8010e68:	4282      	cmp	r2, r0
 8010e6a:	dbf6      	blt.n	8010e5a <tiny_vsnprintf_like+0xea>
 8010e6c:	e78d      	b.n	8010d8a <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8010e6e:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8010e72:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8010e74:	f019 0f02 	tst.w	r9, #2
 8010e78:	d02f      	beq.n	8010eda <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8010e7a:	9a04      	ldr	r2, [sp, #16]
 8010e7c:	1d11      	adds	r1, r2, #4
 8010e7e:	9104      	str	r1, [sp, #16]
 8010e80:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8010e82:	1ba1      	subs	r1, r4, r6
 8010e84:	f8cd 9008 	str.w	r9, [sp, #8]
 8010e88:	f04f 30ff 	mov.w	r0, #4294967295
 8010e8c:	9001      	str	r0, [sp, #4]
 8010e8e:	9500      	str	r5, [sp, #0]
 8010e90:	eba8 0101 	sub.w	r1, r8, r1
 8010e94:	4620      	mov	r0, r4
 8010e96:	f7ff fee1 	bl	8010c5c <ee_number>
 8010e9a:	4604      	mov	r4, r0
 8010e9c:	e775      	b.n	8010d8a <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8010e9e:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8010ea2:	230a      	movs	r3, #10
 8010ea4:	e7e6      	b.n	8010e74 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8010ea6:	2a25      	cmp	r2, #37	; 0x25
 8010ea8:	d002      	beq.n	8010eb0 <tiny_vsnprintf_like+0x140>
 8010eaa:	2325      	movs	r3, #37	; 0x25
 8010eac:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8010eb0:	1ba3      	subs	r3, r4, r6
 8010eb2:	4598      	cmp	r8, r3
 8010eb4:	dd0f      	ble.n	8010ed6 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8010eb6:	9b05      	ldr	r3, [sp, #20]
 8010eb8:	781a      	ldrb	r2, [r3, #0]
 8010eba:	b13a      	cbz	r2, 8010ecc <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8010ebc:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8010ec0:	1ba3      	subs	r3, r4, r6
 8010ec2:	4598      	cmp	r8, r3
 8010ec4:	f73f af61 	bgt.w	8010d8a <tiny_vsnprintf_like+0x1a>
    base = 10;
 8010ec8:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8010eca:	e7d3      	b.n	8010e74 <tiny_vsnprintf_like+0x104>
          --fmt;
 8010ecc:	3b01      	subs	r3, #1
 8010ece:	9305      	str	r3, [sp, #20]
 8010ed0:	e7f6      	b.n	8010ec0 <tiny_vsnprintf_like+0x150>
        base = 16;
 8010ed2:	2310      	movs	r3, #16
 8010ed4:	e7ce      	b.n	8010e74 <tiny_vsnprintf_like+0x104>
    base = 10;
 8010ed6:	230a      	movs	r3, #10
 8010ed8:	e7cc      	b.n	8010e74 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8010eda:	9a04      	ldr	r2, [sp, #16]
 8010edc:	1d11      	adds	r1, r2, #4
 8010ede:	9104      	str	r1, [sp, #16]
 8010ee0:	6812      	ldr	r2, [r2, #0]
 8010ee2:	e7ce      	b.n	8010e82 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8010ee8:	1ba0      	subs	r0, r4, r6
}
 8010eea:	b007      	add	sp, #28
 8010eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8010ef0:	2000      	movs	r0, #0
 8010ef2:	e7fa      	b.n	8010eea <tiny_vsnprintf_like+0x17a>
 8010ef4:	08011f50 	.word	0x08011f50

08010ef8 <__libc_init_array>:
 8010ef8:	b570      	push	{r4, r5, r6, lr}
 8010efa:	4d0d      	ldr	r5, [pc, #52]	; (8010f30 <__libc_init_array+0x38>)
 8010efc:	4c0d      	ldr	r4, [pc, #52]	; (8010f34 <__libc_init_array+0x3c>)
 8010efe:	1b64      	subs	r4, r4, r5
 8010f00:	10a4      	asrs	r4, r4, #2
 8010f02:	2600      	movs	r6, #0
 8010f04:	42a6      	cmp	r6, r4
 8010f06:	d109      	bne.n	8010f1c <__libc_init_array+0x24>
 8010f08:	4d0b      	ldr	r5, [pc, #44]	; (8010f38 <__libc_init_array+0x40>)
 8010f0a:	4c0c      	ldr	r4, [pc, #48]	; (8010f3c <__libc_init_array+0x44>)
 8010f0c:	f000 f8a0 	bl	8011050 <_init>
 8010f10:	1b64      	subs	r4, r4, r5
 8010f12:	10a4      	asrs	r4, r4, #2
 8010f14:	2600      	movs	r6, #0
 8010f16:	42a6      	cmp	r6, r4
 8010f18:	d105      	bne.n	8010f26 <__libc_init_array+0x2e>
 8010f1a:	bd70      	pop	{r4, r5, r6, pc}
 8010f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f20:	4798      	blx	r3
 8010f22:	3601      	adds	r6, #1
 8010f24:	e7ee      	b.n	8010f04 <__libc_init_array+0xc>
 8010f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f2a:	4798      	blx	r3
 8010f2c:	3601      	adds	r6, #1
 8010f2e:	e7f2      	b.n	8010f16 <__libc_init_array+0x1e>
 8010f30:	08011f60 	.word	0x08011f60
 8010f34:	08011f60 	.word	0x08011f60
 8010f38:	08011f60 	.word	0x08011f60
 8010f3c:	08011f64 	.word	0x08011f64

08010f40 <memset>:
 8010f40:	4402      	add	r2, r0
 8010f42:	4603      	mov	r3, r0
 8010f44:	4293      	cmp	r3, r2
 8010f46:	d100      	bne.n	8010f4a <memset+0xa>
 8010f48:	4770      	bx	lr
 8010f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8010f4e:	e7f9      	b.n	8010f44 <memset+0x4>

08010f50 <floor>:
 8010f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f54:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8010f58:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8010f5c:	2e13      	cmp	r6, #19
 8010f5e:	4602      	mov	r2, r0
 8010f60:	460b      	mov	r3, r1
 8010f62:	4607      	mov	r7, r0
 8010f64:	460c      	mov	r4, r1
 8010f66:	4605      	mov	r5, r0
 8010f68:	dc33      	bgt.n	8010fd2 <floor+0x82>
 8010f6a:	2e00      	cmp	r6, #0
 8010f6c:	da14      	bge.n	8010f98 <floor+0x48>
 8010f6e:	a334      	add	r3, pc, #208	; (adr r3, 8011040 <floor+0xf0>)
 8010f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f74:	f7ef f90e 	bl	8000194 <__adddf3>
 8010f78:	2200      	movs	r2, #0
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	f7ef fb3e 	bl	80005fc <__aeabi_dcmpgt>
 8010f80:	b138      	cbz	r0, 8010f92 <floor+0x42>
 8010f82:	2c00      	cmp	r4, #0
 8010f84:	da58      	bge.n	8011038 <floor+0xe8>
 8010f86:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010f8a:	431d      	orrs	r5, r3
 8010f8c:	d001      	beq.n	8010f92 <floor+0x42>
 8010f8e:	4c2e      	ldr	r4, [pc, #184]	; (8011048 <floor+0xf8>)
 8010f90:	2500      	movs	r5, #0
 8010f92:	4623      	mov	r3, r4
 8010f94:	462f      	mov	r7, r5
 8010f96:	e025      	b.n	8010fe4 <floor+0x94>
 8010f98:	4a2c      	ldr	r2, [pc, #176]	; (801104c <floor+0xfc>)
 8010f9a:	fa42 f806 	asr.w	r8, r2, r6
 8010f9e:	ea01 0208 	and.w	r2, r1, r8
 8010fa2:	4302      	orrs	r2, r0
 8010fa4:	d01e      	beq.n	8010fe4 <floor+0x94>
 8010fa6:	a326      	add	r3, pc, #152	; (adr r3, 8011040 <floor+0xf0>)
 8010fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fac:	f7ef f8f2 	bl	8000194 <__adddf3>
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	f7ef fb22 	bl	80005fc <__aeabi_dcmpgt>
 8010fb8:	2800      	cmp	r0, #0
 8010fba:	d0ea      	beq.n	8010f92 <floor+0x42>
 8010fbc:	2c00      	cmp	r4, #0
 8010fbe:	bfbe      	ittt	lt
 8010fc0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010fc4:	fa43 f606 	asrlt.w	r6, r3, r6
 8010fc8:	19a4      	addlt	r4, r4, r6
 8010fca:	ea24 0408 	bic.w	r4, r4, r8
 8010fce:	2500      	movs	r5, #0
 8010fd0:	e7df      	b.n	8010f92 <floor+0x42>
 8010fd2:	2e33      	cmp	r6, #51	; 0x33
 8010fd4:	dd0a      	ble.n	8010fec <floor+0x9c>
 8010fd6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010fda:	d103      	bne.n	8010fe4 <floor+0x94>
 8010fdc:	f7ef f8da 	bl	8000194 <__adddf3>
 8010fe0:	4607      	mov	r7, r0
 8010fe2:	460b      	mov	r3, r1
 8010fe4:	4638      	mov	r0, r7
 8010fe6:	4619      	mov	r1, r3
 8010fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fec:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8010ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ff4:	fa22 f808 	lsr.w	r8, r2, r8
 8010ff8:	ea18 0f00 	tst.w	r8, r0
 8010ffc:	d0f2      	beq.n	8010fe4 <floor+0x94>
 8010ffe:	a310      	add	r3, pc, #64	; (adr r3, 8011040 <floor+0xf0>)
 8011000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011004:	f7ef f8c6 	bl	8000194 <__adddf3>
 8011008:	2200      	movs	r2, #0
 801100a:	2300      	movs	r3, #0
 801100c:	f7ef faf6 	bl	80005fc <__aeabi_dcmpgt>
 8011010:	2800      	cmp	r0, #0
 8011012:	d0be      	beq.n	8010f92 <floor+0x42>
 8011014:	2c00      	cmp	r4, #0
 8011016:	da02      	bge.n	801101e <floor+0xce>
 8011018:	2e14      	cmp	r6, #20
 801101a:	d103      	bne.n	8011024 <floor+0xd4>
 801101c:	3401      	adds	r4, #1
 801101e:	ea25 0508 	bic.w	r5, r5, r8
 8011022:	e7b6      	b.n	8010f92 <floor+0x42>
 8011024:	2301      	movs	r3, #1
 8011026:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801102a:	fa03 f606 	lsl.w	r6, r3, r6
 801102e:	4435      	add	r5, r6
 8011030:	42bd      	cmp	r5, r7
 8011032:	bf38      	it	cc
 8011034:	18e4      	addcc	r4, r4, r3
 8011036:	e7f2      	b.n	801101e <floor+0xce>
 8011038:	2500      	movs	r5, #0
 801103a:	462c      	mov	r4, r5
 801103c:	e7a9      	b.n	8010f92 <floor+0x42>
 801103e:	bf00      	nop
 8011040:	8800759c 	.word	0x8800759c
 8011044:	7e37e43c 	.word	0x7e37e43c
 8011048:	bff00000 	.word	0xbff00000
 801104c:	000fffff 	.word	0x000fffff

08011050 <_init>:
 8011050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011052:	bf00      	nop
 8011054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011056:	bc08      	pop	{r3}
 8011058:	469e      	mov	lr, r3
 801105a:	4770      	bx	lr

0801105c <_fini>:
 801105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801105e:	bf00      	nop
 8011060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011062:	bc08      	pop	{r3}
 8011064:	469e      	mov	lr, r3
 8011066:	4770      	bx	lr
